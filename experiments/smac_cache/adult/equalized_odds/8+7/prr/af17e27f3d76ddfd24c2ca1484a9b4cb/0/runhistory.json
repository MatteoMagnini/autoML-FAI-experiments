{
  "stats": {
    "submitted": 403,
    "finished": 403,
    "running": 0
  },
  "data": [
    [
      1,
      null,
      209652396,
      null,
      [
        0.23171881525174937,
        0.06466121852397919
      ],
      922.9922001361847,
      1,
      1746795991.741011,
      1746796914.7348652,
      {}
    ],
    [
      2,
      null,
      209652396,
      null,
      [
        0.2332849562639982,
        0.05855188727378845
      ],
      273.207905292511,
      1,
      1746796914.7693498,
      1746797187.9807117,
      {}
    ],
    [
      3,
      null,
      209652396,
      null,
      [
        0.24007253872523332,
        0.039035866856575015
      ],
      517.7327039241791,
      1,
      1746797187.9995732,
      1746797705.7340963,
      {}
    ],
    [
      4,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746797705.7420654,
      1746797720.2206295,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      5,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746797720.2327745,
      1746797720.9479368,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      6,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746797721.6336854,
      1746797723.0975645,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      7,
      null,
      209652396,
      null,
      [
        0.19974824024225224,
        0.10899723529815675
      ],
      467.24320363998413,
      1,
      1746797723.1060696,
      1746798190.3510823,
      {}
    ],
    [
      8,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.026618070304393764
      ],
      275.1511170864105,
      1,
      1746798190.3744016,
      1746798465.528099,
      {}
    ],
    [
      9,
      null,
      209652396,
      null,
      [
        0.2184508039298459,
        0.07358006000518799
      ],
      245.85807752609253,
      1,
      1746798465.563717,
      1746798711.4244833,
      {}
    ],
    [
      10,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746798711.4496222,
      1746798813.6508656,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      11,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.009356555044651032
      ],
      232.11321759223938,
      1,
      1746798813.6889155,
      1746799045.8054235,
      {}
    ],
    [
      12,
      null,
      209652396,
      null,
      [
        0.238506091200702,
        0.06378808975219727
      ],
      1145.853229045868,
      1,
      1746799045.821367,
      1746800191.6765633,
      {}
    ],
    [
      13,
      null,
      209652396,
      null,
      [
        0.21249345478387394,
        0.08756361842155456
      ],
      557.8396008014679,
      1,
      1746800191.6894412,
      1746800749.5309443,
      {}
    ],
    [
      14,
      null,
      209652396,
      null,
      [
        0.15011823357631743,
        0.1460858392715454
      ],
      939.9667589664459,
      1,
      1746800750.336178,
      1746801690.304805,
      {}
    ],
    [
      15,
      null,
      209652396,
      null,
      [
        0.21200143183676118,
        0.08569074630737304
      ],
      423.23163747787476,
      1,
      1746801690.3526666,
      1746802113.5872211,
      {}
    ],
    [
      16,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746802113.6057506,
      1746802247.2731502,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      17,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746802247.3495328,
      1746802247.5060403,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      18,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746802247.5208397,
      1746802248.0626493,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      19,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746802248.0778458,
      1746803875.5876708,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      20,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746803875.6212847,
      1746803933.8059604,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      21,
      null,
      209652396,
      null,
      [
        0.2389054955671722,
        0.04841673612594605
      ],
      217.6814649105072,
      1,
      1746803933.8254197,
      1746804151.5094924,
      {}
    ],
    [
      22,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746804151.564492,
      1746804151.9356601,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      23,
      null,
      209652396,
      null,
      [
        0.21461240720222757,
        0.09117612481117249
      ],
      428.76135420799255,
      1,
      1746804152.9588585,
      1746804581.7219238,
      {}
    ],
    [
      24,
      null,
      209652396,
      null,
      [
        0.24010313808218,
        0.03958680927753449
      ],
      183.86305046081543,
      1,
      1746804581.7627778,
      1746804765.628463,
      {}
    ],
    [
      25,
      null,
      209652396,
      null,
      [
        0.14950390751288953,
        0.14934263229370118
      ],
      351.19147777557373,
      1,
      1746804765.6454456,
      1746805116.8388667,
      {}
    ],
    [
      26,
      null,
      209652396,
      null,
      [
        0.1985198710498112,
        0.10891785144805907
      ],
      321.94997906684875,
      1,
      1746805116.8547328,
      1746805438.8066258,
      {}
    ],
    [
      27,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746805438.866806,
      1746805584.2987204,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      28,
      null,
      209652396,
      null,
      [
        0.21362964865958878,
        0.09050293684005736
      ],
      717.3606069087982,
      1,
      1746805584.3658173,
      1746806301.7283397,
      {}
    ],
    [
      29,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746806301.7467308,
      1746806307.5200682,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      30,
      null,
      209652396,
      null,
      [
        0.205184136546412,
        0.10125927090644837
      ],
      517.2529950141907,
      1,
      1746806307.5609365,
      1746806824.8157802,
      {}
    ],
    [
      31,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746806825.8595693,
      1746806827.2286196,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      32,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746806827.2458823,
      1746806827.9126287,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      33,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746806827.9305398,
      1746806828.1296518,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      34,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746806828.1580126,
      1746807002.7482996,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      35,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746807002.7808752,
      1746807097.7848587,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      36,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746807097.8461523,
      1746807143.9308262,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      37,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746807143.9631205,
      1746807144.0974352,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      38,
      null,
      209652396,
      null,
      [
        0.19980960400122075,
        0.0899432635307312
      ],
      940.0405497550964,
      1,
      1746807145.0836608,
      1746808085.1258955,
      {}
    ],
    [
      39,
      null,
      209652396,
      null,
      [
        0.22692760858928523,
        0.06830730438232421
      ],
      1266.276242017746,
      1,
      1746808085.1448493,
      1746809351.4229803,
      {}
    ],
    [
      40,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.030564184188842776
      ],
      1800.1689882278442,
      1,
      1746809351.47367,
      1746811151.6445248,
      {}
    ],
    [
      41,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746811151.6637447,
      1746811237.660528,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      42,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.023494787216186523
      ],
      335.0226774215698,
      1,
      1746811237.682271,
      1746811572.7068262,
      {}
    ],
    [
      43,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746811572.7388537,
      1746811573.2046025,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      44,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746811573.2342794,
      1746811575.510449,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      45,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746811575.551465,
      1746811576.6614635,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      46,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746811577.717857,
      1746811580.098811,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      47,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746811580.1195123,
      1746811580.3353152,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      48,
      null,
      209652396,
      null,
      [
        0.1950492041809407,
        0.12584195137023926
      ],
      693.3743784427643,
      1,
      1746811580.3550837,
      1746812273.7323933,
      {}
    ],
    [
      49,
      null,
      209652396,
      null,
      [
        0.2006694794119944,
        0.10587774157524107
      ],
      421.2941279411316,
      1,
      1746812273.7988992,
      1746812695.0951605,
      {}
    ],
    [
      50,
      null,
      209652396,
      null,
      [
        0.23482072898240564,
        0.06262853503227234
      ],
      551.0613791942596,
      1,
      1746812695.1509786,
      1746813246.2143235,
      {}
    ],
    [
      51,
      null,
      209652396,
      null,
      [
        0.17821945883323126,
        0.12082647204399108
      ],
      230.79874897003174,
      1,
      1746813246.238989,
      1746813477.0396986,
      {}
    ],
    [
      52,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746813477.0931149,
      1746814194.267939,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      53,
      null,
      209652396,
      null,
      [
        0.17898704575351282,
        0.13552388429641724
      ],
      343.19168281555176,
      1,
      1746814194.3332248,
      1746814537.5267847,
      {}
    ],
    [
      54,
      null,
      209652396,
      null,
      [
        0.2011303465644783,
        0.10789220929145812
      ],
      368.5282645225525,
      1,
      1746814538.7035382,
      1746814907.2348003,
      {}
    ],
    [
      55,
      null,
      209652396,
      null,
      [
        0.2104662768584924,
        0.08181673645973205
      ],
      518.3929123878479,
      1,
      1746814907.2947588,
      1746815425.6894841,
      {}
    ],
    [
      56,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746815425.7304096,
      1746815426.0928297,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      57,
      null,
      209652396,
      null,
      [
        0.16716299964802955,
        0.12556198835372925
      ],
      205.5893406867981,
      1,
      1746815426.138792,
      1746815631.7299733,
      {}
    ],
    [
      58,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.021567182540893556
      ],
      626.1778635978699,
      1,
      1746815631.7922323,
      1746816257.9721394,
      {}
    ],
    [
      59,
      null,
      209652396,
      null,
      [
        0.18786287753353623,
        0.1425019693374634
      ],
      446.2613868713379,
      1,
      1746816258.010863,
      1746816704.2742414,
      {}
    ],
    [
      60,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746816704.3053782,
      1746816986.0726047,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      61,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746816986.125019,
      1746816986.914987,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      62,
      null,
      209652396,
      null,
      [
        0.20189674987579181,
        0.09964527964591981
      ],
      271.4814519882202,
      1,
      1746816988.2670097,
      1746817259.750412,
      {}
    ],
    [
      63,
      null,
      209652396,
      null,
      [
        0.1506404173320341,
        0.13860467314720154
      ],
      909.7235219478607,
      1,
      1746817259.7757888,
      1746818169.5012295,
      {}
    ],
    [
      64,
      null,
      209652396,
      null,
      [
        0.212555426851834,
        0.08608262300491333
      ],
      733.9462382793427,
      1,
      1746818169.5433137,
      1746818903.4914489,
      {}
    ],
    [
      65,
      null,
      209652396,
      null,
      [
        0.18887626372656313,
        0.10415181517601013
      ],
      448.29746675491333,
      1,
      1746818903.5292904,
      1746819351.8286393,
      {}
    ],
    [
      66,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746819351.8549173,
      1746819353.3005865,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      67,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746819353.341369,
      1746819354.8592825,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      68,
      null,
      209652396,
      null,
      [
        0.19194743663306538,
        0.13195656299591066
      ],
      491.7172820568085,
      1,
      1746819354.900443,
      1746819846.6207347,
      {}
    ],
    [
      69,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746819846.6783812,
      1746819982.459864,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      70,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746819982.5402746,
      1746819982.8213398,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      71,
      null,
      209652396,
      null,
      [
        0.18113690404109567,
        0.13268972396850587
      ],
      261.593873500824,
      1,
      1746819984.2290876,
      1746820245.8248627,
      {}
    ],
    [
      72,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.012711634933948519
      ],
      984.9489259719849,
      1,
      1746820245.8726487,
      1746821230.8234186,
      {}
    ],
    [
      73,
      null,
      209652396,
      null,
      [
        0.1960628733083823,
        0.13553128719329835
      ],
      270.53960037231445,
      1,
      1746821230.8596559,
      1746821501.4010968,
      {}
    ],
    [
      74,
      null,
      209652396,
      null,
      [
        0.20453917340144886,
        0.09145166635513305
      ],
      515.8738172054291,
      1,
      1746821501.4692974,
      1746822017.34499,
      {}
    ],
    [
      75,
      null,
      209652396,
      null,
      [
        0.2034334892867827,
        0.10707356691360474
      ],
      405.5934753417969,
      1,
      1746822017.410166,
      1746822423.0054197,
      {}
    ],
    [
      76,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.016441968083381654
      ],
      317.7324368953705,
      1,
      1746822423.0560493,
      1746822740.7902231,
      {}
    ],
    [
      77,
      null,
      209652396,
      null,
      [
        0.20788650444339069,
        0.09037613153457642
      ],
      435.96784377098083,
      1,
      1746822740.842345,
      1746823176.8121195,
      {}
    ],
    [
      78,
      null,
      209652396,
      null,
      [
        0.23064391440139942,
        0.06378382086753845
      ],
      540.1256327629089,
      1,
      1746823178.1669629,
      1746823718.2944417,
      {}
    ],
    [
      79,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746823718.3418822,
      1746823718.596653,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      80,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746823718.6576903,
      1746823718.8961556,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      81,
      null,
      209652396,
      null,
      [
        0.20321868076359095,
        0.09995010733604431
      ],
      334.99735593795776,
      1,
      1746823718.9648492,
      1746824053.9638963,
      {}
    ],
    [
      82,
      null,
      209652396,
      null,
      [
        0.21080466641843887,
        0.07763951182365417
      ],
      365.1067581176758,
      1,
      1746824054.0241282,
      1746824419.1326256,
      {}
    ],
    [
      83,
      null,
      209652396,
      null,
      [
        0.2288933614532417,
        0.05318916440010071
      ],
      359.45876693725586,
      1,
      1746824419.1629207,
      1746824778.6234865,
      {}
    ],
    [
      84,
      null,
      209652396,
      null,
      [
        0.1807069521889881,
        0.14444620609283446
      ],
      921.4434146881104,
      1,
      1746824778.6886706,
      1746825700.1338289,
      {}
    ],
    [
      85,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746825700.2068367,
      1746825701.6057243,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      86,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746825703.0349286,
      1746825732.110247,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      87,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746825732.1746104,
      1746825738.319077,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      88,
      null,
      209652396,
      null,
      [
        0.1628942172355346,
        0.14392926692962646
      ],
      343.19740629196167,
      1,
      1746825738.3910682,
      1746826081.5903194,
      {}
    ],
    [
      89,
      null,
      209652396,
      null,
      [
        0.2047542648590553,
        0.08854222416877747
      ],
      1306.794780254364,
      1,
      1746826081.631238,
      1746827388.4278965,
      {}
    ],
    [
      90,
      null,
      209652396,
      null,
      [
        0.21470387518291711,
        0.08223916739225387
      ],
      310.2106845378876,
      1,
      1746827388.5059597,
      1746827698.719248,
      {}
    ],
    [
      91,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746827698.8054729,
      1746827748.0357077,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      92,
      null,
      209652396,
      null,
      [
        0.20813233672515108,
        0.07683971762657166
      ],
      296.9194416999817,
      1,
      1746827748.0779111,
      1746828044.9992437,
      {}
    ],
    [
      93,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746828045.0434194,
      1746828045.3506203,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      94,
      null,
      209652396,
      null,
      [
        0.2396117375907795,
        0.06037657022476197
      ],
      1420.74866604805,
      1,
      1746828046.8428557,
      1746829467.5938265,
      {}
    ],
    [
      95,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746829467.6269517,
      1746829553.4602094,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      96,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746829553.5023594,
      1746829627.2734485,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      97,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746829627.3269665,
      1746829638.2799857,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      98,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746829638.3337114,
      1746829656.4383006,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      99,
      null,
      209652396,
      null,
      [
        0.1830105428907824,
        0.15520289182662964
      ],
      618.6028780937195,
      1,
      1746829656.500767,
      1746830275.1053755,
      {}
    ],
    [
      100,
      null,
      209652396,
      null,
      [
        0.23392991940896132,
        0.07278340995311737
      ],
      1007.8720915317535,
      1,
      1746830275.1558242,
      1746831283.0298014,
      {}
    ],
    [
      101,
      null,
      209652396,
      null,
      [
        0.18454584876740568,
        0.12189033508300781
      ],
      1327.326530456543,
      1,
      1746831283.0887997,
      1746832610.4171667,
      {}
    ],
    [
      102,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746832611.9353602,
      1746832628.8212469,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      103,
      null,
      209652396,
      null,
      [
        0.1863274537675735,
        0.16102697610855102
      ],
      579.7517085075378,
      1,
      1746832628.8545177,
      1746833208.6082113,
      {}
    ],
    [
      104,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746833208.6753273,
      1746833316.1621685,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      105,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746833316.2198324,
      1746833317.2604227,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      106,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.028291469514369966
      ],
      124.6503095626831,
      1,
      1746833317.3072143,
      1746833441.9593382,
      {}
    ],
    [
      107,
      null,
      209652396,
      null,
      [
        0.19246955437075197,
        0.13607532978057862
      ],
      796.5736410617828,
      1,
      1746833442.0224855,
      1746834238.5979285,
      {}
    ],
    [
      108,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.033666640520095825
      ],
      858.0708646774292,
      1,
      1746834238.647785,
      1746835096.7205293,
      {}
    ],
    [
      109,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746835096.767199,
      1746835099.3826885,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      110,
      null,
      209652396,
      null,
      [
        0.15122382337951198,
        0.13963440418243409
      ],
      1399.9855773448944,
      1,
      1746835101.0896046,
      1746836501.0771368,
      {}
    ],
    [
      111,
      null,
      209652396,
      null,
      [
        0.22100074091092056,
        0.06711569249629974
      ],
      355.5412664413452,
      1,
      1746836501.1314728,
      1746836856.6746254,
      {}
    ],
    [
      112,
      null,
      209652396,
      null,
      [
        0.18844632130560277,
        0.13106602072715762
      ],
      740.3588271141052,
      1,
      1746836856.7223647,
      1746837597.08337,
      {}
    ],
    [
      113,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746837597.1634579,
      1746837598.6930804,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      114,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.030129398703575134
      ],
      284.0839047431946,
      1,
      1746837598.7521453,
      1746837882.8377962,
      {}
    ],
    [
      115,
      null,
      209652396,
      null,
      [
        0.19084183739872362,
        0.14756150484085082
      ],
      521.1006479263306,
      1,
      1746837882.8951912,
      1746838403.9977922,
      {}
    ],
    [
      116,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746838404.0744307,
      1746838693.6140583,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      117,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746838693.681962,
      1746838694.0227284,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      118,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.017606753408908844
      ],
      601.2953059673309,
      1,
      1746838695.786539,
      1746839297.0837007,
      {}
    ],
    [
      119,
      null,
      209652396,
      null,
      [
        0.17272228365042736,
        0.11649218320846559
      ],
      320.584477186203,
      1,
      1746839297.1265748,
      1746839617.7129245,
      {}
    ],
    [
      120,
      null,
      209652396,
      null,
      [
        0.2308895203356281,
        0.06709665417671204
      ],
      287.3185660839081,
      1,
      1746839617.7635193,
      1746839905.0839734,
      {}
    ],
    [
      121,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.005234780609607697
      ],
      478.26448106765747,
      1,
      1746839905.150176,
      1746840383.416547,
      {}
    ],
    [
      122,
      null,
      209652396,
      null,
      [
        0.17428819359957087,
        0.13156260967254638
      ],
      1994.4021301269531,
      1,
      1746840383.4553704,
      1746842377.859397,
      {}
    ],
    [
      123,
      null,
      209652396,
      null,
      [
        0.188630450307097,
        0.14277812957763672
      ],
      249.55869126319885,
      1,
      1746842377.9254403,
      1746842627.4860075,
      {}
    ],
    [
      124,
      null,
      209652396,
      null,
      [
        0.1515002078624833,
        0.14415186524391174
      ],
      1090.705710887909,
      1,
      1746842627.5663967,
      1746843718.2748206,
      {}
    ],
    [
      125,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746843718.345551,
      1746843729.1375103,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      126,
      null,
      209652396,
      null,
      [
        0.237615423094465,
        0.06404993891716003
      ],
      263.6620063781738,
      1,
      1746843731.10782,
      1746843994.7716281,
      {}
    ],
    [
      127,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746843994.8304102,
      1746844039.2347622,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      128,
      null,
      209652396,
      null,
      [
        0.2028802063233201,
        0.08194455623626709
      ],
      324.82851362228394,
      1,
      1746844039.2939467,
      1746844364.1243067,
      {}
    ],
    [
      129,
      null,
      209652396,
      null,
      [
        0.15613762552385305,
        0.13313783526420594
      ],
      154.62076616287231,
      1,
      1746844364.229332,
      1746844518.8518293,
      {}
    ],
    [
      130,
      null,
      209652396,
      null,
      [
        0.20828659728360327,
        0.08707610249519349
      ],
      200.07328391075134,
      1,
      1746844518.9181159,
      1746844718.9932957,
      {}
    ],
    [
      131,
      null,
      209652396,
      null,
      [
        0.17588515088515091,
        0.15127570152282713
      ],
      302.2661302089691,
      1,
      1746844719.063765,
      1746845021.3318043,
      {}
    ],
    [
      132,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746845021.4150424,
      1746845021.9499905,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      133,
      null,
      209652396,
      null,
      [
        0.18829273507417219,
        0.14133615255355836
      ],
      671.2128894329071,
      1,
      1746845022.0256557,
      1746845693.2402463,
      {}
    ],
    [
      134,
      null,
      209652396,
      null,
      [
        0.1887226114771025,
        0.15108118057250977
      ],
      734.9030303955078,
      1,
      1746845695.3146088,
      1746846430.219505,
      {}
    ],
    [
      135,
      null,
      209652396,
      null,
      [
        0.2040784194227308,
        0.08653560996055602
      ],
      395.415727853775,
      1,
      1746846430.2612906,
      1746846825.6788867,
      {}
    ],
    [
      136,
      null,
      209652396,
      null,
      [
        0.15564634292179202,
        0.1356809437274933
      ],
      381.9610974788666,
      1,
      1746846825.7271802,
      1746847207.6902604,
      {}
    ],
    [
      137,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746847207.7464893,
      1746847208.0678494,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      138,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746847208.108321,
      1746847926.491057,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      139,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746847926.5374186,
      1746848142.2363157,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      140,
      null,
      209652396,
      null,
      [
        0.19382069352129233,
        0.12196624279022217
      ],
      562.5268936157227,
      1,
      1746848142.2797914,
      1746848704.8086329,
      {}
    ],
    [
      141,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746848704.8564148,
      1746848706.4635408,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      142,
      null,
      209652396,
      null,
      [
        0.19222369379555007,
        0.14801977157592772
      ],
      385.6378972530365,
      1,
      1746848708.5297132,
      1746849094.1695821,
      {}
    ],
    [
      143,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0012545174360275267
      ],
      780.3477864265442,
      1,
      1746849094.2112849,
      1746849874.5609488,
      {}
    ],
    [
      144,
      null,
      209652396,
      null,
      [
        0.21682318598486267,
        0.08746509730815888
      ],
      585.5330836772919,
      1,
      1746849874.6099827,
      1746850460.144961,
      {}
    ],
    [
      145,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746850460.2005007,
      1746850460.5321455,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      146,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746850460.5768735,
      1746850461.029923,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      147,
      null,
      209652396,
      null,
      [
        0.211479945985934,
        0.09544302821159363
      ],
      412.6375298500061,
      1,
      1746850461.1033742,
      1746850873.743729,
      {}
    ],
    [
      148,
      null,
      209652396,
      null,
      [
        0.19778277502828398,
        0.1088402271270752
      ],
      819.0046052932739,
      1,
      1746850873.7896018,
      1746851692.795985,
      {}
    ],
    [
      149,
      null,
      209652396,
      null,
      [
        0.16587327141219357,
        0.135645649433136
      ],
      693.6739089488983,
      1,
      1746851692.8511782,
      1746852386.5270846,
      {}
    ],
    [
      150,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746852388.5435238,
      1746852669.9966278,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      151,
      null,
      209652396,
      null,
      [
        0.15659847381404265,
        0.13848331332206726
      ],
      338.11109352111816,
      1,
      1746852670.0418627,
      1746853008.1548586,
      {}
    ],
    [
      152,
      null,
      209652396,
      null,
      [
        0.20171367244720537,
        0.11815293073654176
      ],
      571.0928819179535,
      1,
      1746853008.2017713,
      1746853579.2965288,
      {}
    ],
    [
      153,
      null,
      209652396,
      null,
      [
        0.20116099307716073,
        0.10747199773788452
      ],
      252.7081196308136,
      1,
      1746853579.3416295,
      1746853832.0516357,
      {}
    ],
    [
      154,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746853832.0964947,
      1746854165.9838455,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      155,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746854166.0305874,
      1746854166.514486,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      156,
      null,
      209652396,
      null,
      [
        0.19093390425725756,
        0.121450834274292
      ],
      284.0370149612427,
      1,
      1746854166.5604289,
      1746854450.5991418,
      {}
    ],
    [
      157,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.019560344517230988
      ],
      266.3367199897766,
      1,
      1746854450.64814,
      1746854716.986733,
      {}
    ],
    [
      158,
      null,
      209652396,
      null,
      [
        0.21765227813132001,
        0.09229912757873535
      ],
      274.2852432727814,
      1,
      1746854717.0780225,
      1746854991.3649907,
      {}
    ],
    [
      159,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746854993.6656418,
      1746854994.519277,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      160,
      null,
      209652396,
      null,
      [
        0.18807766247886007,
        0.16512856483459473
      ],
      690.9338355064392,
      1,
      1746854994.5750496,
      1746855685.510923,
      {}
    ],
    [
      161,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746855685.5616398,
      1746856501.295855,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      162,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746856501.34345,
      1746856854.1742382,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      163,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746856854.2658727,
      1746856856.985203,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      164,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746856857.0313432,
      1746856904.2259548,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      165,
      null,
      209652396,
      null,
      [
        0.2380148368920824,
        0.052483916878700264
      ],
      584.2591960430145,
      1,
      1746856904.2741203,
      1746857488.5351665,
      {}
    ],
    [
      166,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746857491.1712883,
      1746857501.1789186,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      167,
      null,
      209652396,
      null,
      [
        0.22305806078261167,
        0.0751177716255188
      ],
      549.8757889270782,
      1,
      1746857501.2300317,
      1746858051.10774,
      {}
    ],
    [
      168,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746858051.161875,
      1746858117.904968,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      169,
      null,
      209652396,
      null,
      [
        0.19354431846946818,
        0.13420830011367796
      ],
      769.4118587970734,
      1,
      1746858117.9653637,
      1746858887.3793015,
      {}
    ],
    [
      170,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746858887.4278753,
      1746858888.1748524,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      171,
      null,
      209652396,
      null,
      [
        0.21120409907835058,
        0.08493868589401246
      ],
      1401.1366505622864,
      1,
      1746858888.2559824,
      1746860289.3951287,
      {}
    ],
    [
      172,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746860289.444358,
      1746860290.416955,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      173,
      null,
      209652396,
      null,
      [
        0.19547930693140272,
        0.11585732698440551
      ],
      453.40692353248596,
      1,
      1746860290.5003338,
      1746860743.9102395,
      {}
    ],
    [
      174,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746860746.21321,
      1746860747.0824547,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      175,
      null,
      209652396,
      null,
      [
        0.19756756096576458,
        0.11254148364067078
      ],
      269.8242244720459,
      1,
      1746860747.130191,
      1746861016.9561172,
      {}
    ],
    [
      176,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746861017.0480433,
      1746861229.7710526,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      177,
      null,
      209652396,
      null,
      [
        0.1915173008735883,
        0.1559525489807129
      ],
      784.8838188648224,
      1,
      1746861229.8229294,
      1746862014.7086868,
      {}
    ],
    [
      178,
      null,
      209652396,
      null,
      [
        0.19698354189372155,
        0.12749080419540407
      ],
      296.51086139678955,
      1,
      1746862014.7600517,
      1746862311.2727838,
      {}
    ],
    [
      179,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746862311.323357,
      1746862473.8177712,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      180,
      null,
      209652396,
      null,
      [
        0.22192222057491517,
        0.08608922243118286
      ],
      378.0039920806885,
      1,
      1746862473.8692145,
      1746862851.875113,
      {}
    ],
    [
      181,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746862851.9319813,
      1746862907.5214236,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      182,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746862909.888103,
      1746864289.3193736,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      183,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746864289.4369454,
      1746864290.9507098,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      184,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.002705250084400177
      ],
      747.1852173805237,
      1,
      1746864291.002598,
      1746865038.1896904,
      {}
    ],
    [
      185,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746865038.2454321,
      1746865038.6134765,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      186,
      null,
      209652396,
      null,
      [
        0.2397038751829171,
        0.051580792069435125
      ],
      367.1354606151581,
      1,
      1746865038.6643353,
      1746865405.801488,
      {}
    ],
    [
      187,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746865405.90017,
      1746865446.5532513,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      188,
      null,
      209652396,
      null,
      [
        0.2389056417499531,
        0.048452351093292226
      ],
      303.71657729148865,
      1,
      1746865446.6065164,
      1746865750.3249843,
      {}
    ],
    [
      189,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746865750.3866968,
      1746866025.6578245,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      190,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.03587597638368607
      ],
      345.72777557373047,
      1,
      1746866028.2432468,
      1746866373.9727786,
      {}
    ],
    [
      191,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746866374.0281436,
      1746866374.165592,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      192,
      null,
      209652396,
      null,
      [
        0.15970025079306513,
        0.13768715858459474
      ],
      243.5967767238617,
      1,
      1746866374.2182686,
      1746866617.8167462,
      {}
    ],
    [
      193,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746866617.8702555,
      1746866618.0571644,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      194,
      null,
      209652396,
      null,
      [
        0.19643115017366514,
        0.12790550947189333
      ],
      411.8328354358673,
      1,
      1746866618.1092646,
      1746867029.9437714,
      {}
    ],
    [
      195,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.03223510146141052
      ],
      439.4067370891571,
      1,
      1746867029.9979057,
      1746867469.406527,
      {}
    ],
    [
      196,
      null,
      209652396,
      null,
      [
        0.23890550028274582,
        0.055646799802780145
      ],
      376.8254232406616,
      1,
      1746867469.4658344,
      1746867846.293152,
      {}
    ],
    [
      197,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746867846.347314,
      1746867848.206696,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      198,
      null,
      209652396,
      null,
      [
        0.18721779178366002,
        0.11923546552658082
      ],
      1292.0092098712921,
      1,
      1746867848.3129401,
      1746869140.3239353,
      {}
    ],
    [
      199,
      null,
      209652396,
      null,
      [
        0.24010313808218,
        0.05808518111705781
      ],
      358.0643961429596,
      1,
      1746869142.8135345,
      1746869500.8797886,
      {}
    ],
    [
      200,
      null,
      209652396,
      null,
      [
        0.23736972284876479,
        0.05194156289100647
      ],
      292.78061962127686,
      1,
      1746869500.9344695,
      1746869793.716853,
      {}
    ],
    [
      201,
      null,
      209652396,
      null,
      [
        0.19744474856750305,
        0.11190303683280944
      ],
      580.422168970108,
      1,
      1746869793.778279,
      1746870374.2023163,
      {}
    ],
    [
      202,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746870374.260084,
      1746870605.388418,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      203,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746870605.4451928,
      1746870605.6783636,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      204,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746870605.7357173,
      1746870606.0092566,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      205,
      null,
      209652396,
      null,
      [
        0.22477758525662717,
        0.08116528868675232
      ],
      1579.2804934978485,
      1,
      1746870606.093593,
      1746872185.3759108,
      {}
    ],
    [
      206,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746872188.2360783,
      1746872300.8807485,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      207,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746872300.9395044,
      1746872328.4980998,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      208,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746872328.555838,
      1746872541.3824115,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      209,
      null,
      209652396,
      null,
      [
        0.23236380669015402,
        0.05446850538253785
      ],
      338.91900277137756,
      1,
      1746872541.4527793,
      1746872880.373648,
      {}
    ],
    [
      210,
      null,
      209652396,
      null,
      [
        0.20518371686036357,
        0.10366395354270934
      ],
      708.486377954483,
      1,
      1746872880.4309957,
      1746873588.9191725,
      {}
    ],
    [
      211,
      null,
      209652396,
      null,
      [
        0.2166400944095555,
        0.09012838125228881
      ],
      553.21755194664,
      1,
      1746873588.9888031,
      1746874142.2081206,
      {}
    ],
    [
      212,
      null,
      209652396,
      null,
      [
        0.20100719936049277,
        0.09923694849014282
      ],
      489.2415246963501,
      1,
      1746874142.2676358,
      1746874631.5110836,
      {}
    ],
    [
      213,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746874631.5703092,
      1746874633.8309028,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      214,
      null,
      209652396,
      null,
      [
        0.1932370611262827,
        0.12790984272956846
      ],
      685.621796131134,
      1,
      1746874636.567639,
      1746875322.1913497,
      {}
    ],
    [
      215,
      null,
      209652396,
      null,
      [
        0.22585363670693015,
        0.07182094186544419
      ],
      540.8920011520386,
      1,
      1746875322.2488382,
      1746875863.1426528,
      {}
    ],
    [
      216,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746875863.2051528,
      1746875992.6402667,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      217,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746875992.730268,
      1746875998.4237235,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      218,
      null,
      209652396,
      null,
      [
        0.1547863637683997,
        0.14460696935653689
      ],
      221.91164445877075,
      1,
      1746875998.4838288,
      1746876220.3974018,
      {}
    ],
    [
      219,
      null,
      209652396,
      null,
      [
        0.2224752913375668,
        0.10455510377883911
      ],
      512.7594821453094,
      1,
      1746876220.4580216,
      1746876733.2193575,
      {}
    ],
    [
      220,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746876733.280442,
      1746876735.164389,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      221,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746876735.2230608,
      1746876911.8736908,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      222,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.02495188355445862
      ],
      327.48425126075745,
      1,
      1746876914.7896883,
      1746877242.2757998,
      {}
    ],
    [
      223,
      null,
      209652396,
      null,
      [
        0.20266547324930562,
        0.0971074366569519
      ],
      749.5450060367584,
      1,
      1746877242.336485,
      1746877991.883408,
      {}
    ],
    [
      224,
      null,
      209652396,
      null,
      [
        0.16234141054500337,
        0.12867195725440977
      ],
      190.1164116859436,
      1,
      1746877991.9452853,
      1746878182.0636077,
      {}
    ],
    [
      225,
      null,
      209652396,
      null,
      [
        0.2168851203282341,
        0.0757502830028534
      ],
      758.8845019340515,
      1,
      1746878182.1378384,
      1746878941.0245123,
      {}
    ],
    [
      226,
      null,
      209652396,
      null,
      [
        0.19025760141029602,
        0.08739063143730164
      ],
      464.6517810821533,
      1,
      1746878941.1184626,
      1746879405.7721467,
      {}
    ],
    [
      227,
      null,
      209652396,
      null,
      [
        0.23279375382668793,
        0.057917793691158306
      ],
      577.1753075122833,
      1,
      1746879405.8331735,
      1746879983.0103707,
      {}
    ],
    [
      228,
      null,
      209652396,
      null,
      [
        0.2114493607757081,
        0.07922165334224701
      ],
      411.5814278125763,
      1,
      1746879983.0717099,
      1746880394.6550376,
      {}
    ],
    [
      229,
      null,
      209652396,
      null,
      [
        0.19185532733436927,
        0.11001630544662475
      ],
      151.3602421283722,
      1,
      1746880394.7211092,
      1746880546.083235,
      {}
    ],
    [
      230,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.036801875829696656
      ],
      653.0123229026794,
      1,
      1746880546.2093468,
      1746881199.2235086,
      {}
    ],
    [
      231,
      null,
      209652396,
      null,
      [
        0.22585266529877307,
        0.07140276610851289
      ],
      459.0761363506317,
      1,
      1746881202.261032,
      1746881661.338953,
      {}
    ],
    [
      232,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746881661.4052026,
      1746881663.5377474,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      233,
      null,
      209652396,
      null,
      [
        0.17692956555232003,
        0.12324734449386596
      ],
      365.23926854133606,
      1,
      1746881663.624936,
      1746882028.8659215,
      {}
    ],
    [
      234,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746882028.9282174,
      1746883484.0120063,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      235,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.018657243251800536
      ],
      691.3050963878632,
      1,
      1746883484.0743015,
      1746884175.3813221,
      {}
    ],
    [
      236,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746884175.444239,
      1746884372.8784559,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      237,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746884372.9856758,
      1746884384.1132503,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      238,
      null,
      209652396,
      null,
      [
        0.1888149424077568,
        0.09205460906028748
      ],
      456.670480966568,
      1,
      1746884387.0698643,
      1746884843.7421758,
      {}
    ],
    [
      239,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.03349958211183548
      ],
      1199.4548921585083,
      1,
      1746884843.8362482,
      1746886043.2930236,
      {}
    ],
    [
      240,
      null,
      209652396,
      null,
      [
        0.19673846881930715,
        0.1362207555770874
      ],
      541.8512163162231,
      1,
      1746886043.3670154,
      1746886585.2201345,
      {}
    ],
    [
      241,
      null,
      209652396,
      null,
      [
        0.1825496285825627,
        0.12791312694549561
      ],
      300.6791818141937,
      1,
      1746886585.2837346,
      1746886885.9647846,
      {}
    ],
    [
      242,
      null,
      209652396,
      null,
      [
        0.19102618331660245,
        0.12410796880722046
      ],
      2109.617770910263,
      1,
      1746886886.0288,
      1746888995.6484869,
      {}
    ],
    [
      243,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746888995.742833,
      1746889005.9503422,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      244,
      null,
      209652396,
      null,
      [
        0.21559500069979115,
        0.08462583780288695
      ],
      401.7982325553894,
      1,
      1746889006.0205112,
      1746889407.8206246,
      {}
    ],
    [
      245,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746889407.8841748,
      1746889409.5847583,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      246,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746889412.623322,
      1746889412.7811143,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      247,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.043609980940818784
      ],
      360.61019468307495,
      1,
      1746889412.8586535,
      1746889773.470556,
      {}
    ],
    [
      248,
      null,
      209652396,
      null,
      [
        0.22373374588943448,
        0.07359109878540039
      ],
      836.8374300003052,
      1,
      1746889773.540434,
      1746890610.379755,
      {}
    ],
    [
      249,
      null,
      209652396,
      null,
      [
        0.18743277006750061,
        0.14483508348464966
      ],
      373.0828368663788,
      1,
      1746890610.446482,
      1746890983.5311708,
      {}
    ],
    [
      250,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746890983.5965507,
      1746890991.7347503,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      251,
      null,
      209652396,
      null,
      [
        0.19547939652730073,
        0.13122389078140256
      ],
      624.4762945175171,
      1,
      1746890991.8323395,
      1746891616.310571,
      {}
    ],
    [
      252,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746891616.3762665,
      1746891779.0543575,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      253,
      null,
      209652396,
      null,
      [
        0.17640732049414687,
        0.1304768514633179
      ],
      260.1437177658081,
      1,
      1746891779.1223752,
      1746892039.2679887,
      {}
    ],
    [
      254,
      null,
      209652396,
      null,
      [
        0.20902314158302185,
        0.09055066704750062
      ],
      668.240257024765,
      1,
      1746892039.4076235,
      1746892707.6497111,
      {}
    ],
    [
      255,
      null,
      209652396,
      null,
      [
        0.14968819684388548,
        0.15245566368103025
      ],
      286.5012900829315,
      1,
      1746892710.7950246,
      1746892997.2982256,
      {}
    ],
    [
      256,
      null,
      209652396,
      null,
      [
        0.18629639228441625,
        0.14378446102142334
      ],
      979.7045650482178,
      1,
      1746892997.3635473,
      1746893977.0699983,
      {}
    ],
    [
      257,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.021526370048522946
      ],
      336.57962250709534,
      1,
      1746893977.1509347,
      1746894313.7324367,
      {}
    ],
    [
      258,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746894313.800097,
      1746894464.2210898,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      259,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746894464.2889364,
      1746895033.8860884,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      260,
      null,
      209652396,
      null,
      [
        0.2156254727362512,
        0.0868573546409607
      ],
      262.3880534172058,
      1,
      1746895033.955062,
      1746895296.3450022,
      {}
    ],
    [
      261,
      null,
      209652396,
      null,
      [
        0.1993485718036616,
        0.11582065463066102
      ],
      1025.1124894618988,
      1,
      1746895296.418331,
      1746896321.5327156,
      {}
    ],
    [
      262,
      null,
      209652396,
      null,
      [
        0.2091463830984789,
        0.08098859190940857
      ],
      1334.1708345413208,
      1,
      1746896324.7798998,
      1746897658.9526546,
      {}
    ],
    [
      263,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746897659.0223305,
      1746897684.2706187,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      264,
      null,
      209652396,
      null,
      [
        0.1940357755477516,
        0.13416083097457884
      ],
      455.7318456172943,
      1,
      1746897684.3429222,
      1746898140.0767138,
      {}
    ],
    [
      265,
      null,
      209652396,
      null,
      [
        0.20119176691032975,
        0.10593698859214781
      ],
      552.1847612857819,
      1,
      1746898140.1449513,
      1746898692.3315995,
      {}
    ],
    [
      266,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746898692.4005237,
      1746898711.159054,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      267,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0524469530582428
      ],
      1418.2486283779144,
      1,
      1746898711.22909,
      1746900129.4796648,
      {}
    ],
    [
      268,
      null,
      209652396,
      null,
      [
        0.1895211325600547,
        0.15133821725845337
      ],
      541.4467027187347,
      1,
      1746900129.5742717,
      1746900671.0228415,
      {}
    ],
    [
      269,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004139527678489685
      ],
      1059.1681053638458,
      1,
      1746900671.0925732,
      1746901730.262606,
      {}
    ],
    [
      270,
      null,
      209652396,
      null,
      [
        0.2368476098266518,
        0.06428412318229676
      ],
      705.2285664081573,
      1,
      1746901733.757831,
      1746902438.9881709,
      {}
    ],
    [
      271,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746902439.0625908,
      1746905411.4019783,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      272,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746905411.4773622,
      1746905583.3509617,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      273,
      null,
      209652396,
      null,
      [
        0.16166563584228255,
        0.13681742191314697
      ],
      173.69707703590393,
      1,
      1746905583.424719,
      1746905757.1237335,
      {}
    ],
    [
      274,
      null,
      209652396,
      null,
      [
        0.19108753292885033,
        0.1351056480407715
      ],
      316.4951958656311,
      1,
      1746905757.195959,
      1746906073.6930225,
      {}
    ],
    [
      275,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746906073.7634513,
      1746906290.2098837,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      276,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746906290.2825608,
      1746906889.016419,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      277,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.03195706397294998
      ],
      755.6916649341583,
      1,
      1746906889.1450698,
      1746907644.84009,
      {}
    ],
    [
      278,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746907648.4273114,
      1746907667.2715495,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      279,
      null,
      209652396,
      null,
      [
        0.1774513531998562,
        0.15523566484451295
      ],
      729.5572707653046,
      1,
      1746907667.6051533,
      1746908397.1658173,
      {}
    ],
    [
      280,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746908397.2821043,
      1746908414.0564306,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      281,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746908414.1572146,
      1746908450.2827144,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      282,
      null,
      209652396,
      null,
      [
        0.1667023352652095,
        0.1455205512046814
      ],
      1490.246225118637,
      1,
      1746908450.3564572,
      1746909940.604547,
      {}
    ],
    [
      283,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746909940.6768973,
      1746909978.6745145,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      284,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.03449871838092804
      ],
      460.9760146141052,
      1,
      1746909978.7950423,
      1746910439.773831,
      {}
    ],
    [
      285,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746910439.8480537,
      1746910448.465572,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      286,
      null,
      209652396,
      null,
      [
        0.1958170363110483,
        0.10341892957687378
      ],
      1044.9243400096893,
      1,
      1746910452.0673509,
      1746911496.9935796,
      {}
    ],
    [
      287,
      null,
      209652396,
      null,
      [
        0.18006169667846314,
        0.15592624187469484
      ],
      365.06215238571167,
      1,
      1746911497.0679135,
      1746911862.1319754,
      {}
    ],
    [
      288,
      null,
      209652396,
      null,
      [
        0.18592797395192603,
        0.1526926302909851
      ],
      561.9419138431549,
      1,
      1746911862.2060997,
      1746912424.1500094,
      {}
    ],
    [
      289,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746912424.2249649,
      1746912488.1397347,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      290,
      null,
      209652396,
      null,
      [
        0.22010941733995626,
        0.09366956710815429
      ],
      819.6596698760986,
      1,
      1746912488.2155123,
      1746913307.8771045,
      {}
    ],
    [
      291,
      null,
      209652396,
      null,
      [
        0.2275111419572497,
        0.07713386833667754
      ],
      447.59206533432007,
      1,
      1746913307.9515069,
      1746913755.5454094,
      {}
    ],
    [
      292,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.03331643998622895
      ],
      929.8044610023499,
      1,
      1746913755.621228,
      1746914685.4275656,
      {}
    ],
    [
      293,
      null,
      209652396,
      null,
      [
        0.24065596363500558,
        0.04027665168046952
      ],
      418.3260188102722,
      1,
      1746914685.514314,
      1746915103.8422184,
      {}
    ],
    [
      294,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746915107.4194937,
      1746915113.639082,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      295,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.033159758448600765
      ],
      345.2260522842407,
      1,
      1746915113.7447925,
      1746915458.9727771,
      {}
    ],
    [
      296,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746915459.0468874,
      1746915459.4678094,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      297,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746915459.5428295,
      1746915460.676154,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      298,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746915460.7891808,
      1746915495.0051632,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      299,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746915495.1328988,
      1746915497.2012386,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      300,
      null,
      209652396,
      null,
      [
        0.1823040509417755,
        0.1471036148071289
      ],
      389.8505265712738,
      1,
      1746915497.2766435,
      1746915887.1289644,
      {}
    ],
    [
      301,
      null,
      209652396,
      null,
      [
        0.18426973307212827,
        0.15017546176910399
      ],
      141.7812762260437,
      1,
      1746915887.2083151,
      1746916028.991362,
      {}
    ],
    [
      302,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.03753980278968811
      ],
      271.1465046405792,
      1,
      1746916029.1631026,
      1746916300.3114495,
      {}
    ],
    [
      303,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0064155167341232305
      ],
      1298.1840734481812,
      1,
      1746916303.9554543,
      1746917602.1423335,
      {}
    ],
    [
      304,
      null,
      209652396,
      null,
      [
        0.21141862466712763,
        0.08450969219207763
      ],
      319.5642259120941,
      1,
      1746917602.2228725,
      1746917921.7889903,
      {}
    ],
    [
      305,
      null,
      209652396,
      null,
      [
        0.17714404870093492,
        0.15051740169525146
      ],
      571.5038921833038,
      1,
      1746917921.8671193,
      1746918493.3729017,
      {}
    ],
    [
      306,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746918493.451104,
      1746918495.096528,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      307,
      null,
      209652396,
      null,
      [
        0.15251368365140822,
        0.14198205590248109
      ],
      403.97596883773804,
      1,
      1746918495.193474,
      1746918899.171269,
      {}
    ],
    [
      308,
      null,
      209652396,
      null,
      [
        0.18866124300256035,
        0.12569711208343506
      ],
      472.1447603702545,
      1,
      1746918899.249347,
      1746919371.3958428,
      {}
    ],
    [
      309,
      null,
      209652396,
      null,
      [
        0.19222387770291963,
        0.12977957010269164
      ],
      222.87258505821228,
      1,
      1746919371.478553,
      1746919594.3529859,
      {}
    ],
    [
      310,
      null,
      209652396,
      null,
      [
        0.20994382903065537,
        0.09623920917510986
      ],
      314.15039014816284,
      1,
      1746919598.3016193,
      1746919912.4539237,
      {}
    ],
    [
      311,
      null,
      209652396,
      null,
      [
        0.2221364490825568,
        0.07115146040916442
      ],
      1375.5862083435059,
      1,
      1746919912.5323594,
      1746921288.1204324,
      {}
    ],
    [
      312,
      null,
      209652396,
      null,
      [
        0.23865964913869106,
        0.049466357827186586
      ],
      402.95260763168335,
      1,
      1746921288.2070653,
      1746921691.1617143,
      {}
    ],
    [
      313,
      null,
      209652396,
      null,
      [
        0.19547923619779906,
        0.10832497119903566
      ],
      407.7575843334198,
      1,
      1746921691.2459285,
      1746922099.005325,
      {}
    ],
    [
      314,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746922099.0910478,
      1746922278.818411,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      315,
      null,
      209652396,
      null,
      [
        0.19311431474605129,
        0.15063872337341305
      ],
      498.0167577266693,
      1,
      1746922278.9126272,
      1746922776.93124,
      {}
    ],
    [
      316,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746922777.0989864,
      1746922888.444196,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      317,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0367491003870964
      ],
      306.25109362602234,
      1,
      1746922888.5443294,
      1746923194.7973032,
      {}
    ],
    [
      318,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.039385747909545896
      ],
      557.3138217926025,
      1,
      1746923194.9869504,
      1746923752.3026607,
      {}
    ],
    [
      319,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746923752.3846092,
      1746924124.5980794,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      320,
      null,
      209652396,
      null,
      [
        0.19455796873461545,
        0.10420518159866332
      ],
      764.2878949642181,
      1,
      1746924128.5477655,
      1746924892.8375967,
      {}
    ],
    [
      321,
      null,
      209652396,
      null,
      [
        0.1925617249719046,
        0.14220803022384643
      ],
      499.48832654953003,
      1,
      1746924892.9184165,
      1746925392.4085653,
      {}
    ],
    [
      322,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746925392.4890308,
      1746925427.4092703,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      323,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746925427.4908452,
      1746927203.7718577,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      324,
      null,
      209652396,
      null,
      [
        0.20972923270827462,
        0.08113099813461304
      ],
      884.4289901256561,
      1,
      1746927203.8664522,
      1746928088.2974129,
      {}
    ],
    [
      325,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746928088.3844347,
      1746928088.800102,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      326,
      null,
      209652396,
      null,
      [
        0.1839928487383577,
        0.1576785159111023
      ],
      306.3191978931427,
      1,
      1746928092.8471887,
      1746928399.1683638,
      {}
    ],
    [
      327,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746928399.2511256,
      1746928403.1229446,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      328,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.008817578852176666
      ],
      879.4743618965149,
      1,
      1746928403.2301054,
      1746929282.706239,
      {}
    ],
    [
      329,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746929282.808642,
      1746929283.317652,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      330,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746929283.4013412,
      1746929312.9872804,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      331,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746929313.1112444,
      1746929744.3621955,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      332,
      null,
      209652396,
      null,
      [
        0.17705218461206487,
        0.14824087858200072
      ],
      1211.6498908996582,
      1,
      1746929744.4575522,
      1746930956.1093156,
      {}
    ],
    [
      333,
      null,
      209652396,
      null,
      [
        0.22029428197092865,
        0.07293225169181823
      ],
      544.6818659305573,
      1,
      1746930956.1928003,
      1746931500.8765528,
      {}
    ],
    [
      334,
      null,
      209652396,
      null,
      [
        0.23509717005225989,
        0.06135367214679718
      ],
      332.1648225784302,
      1,
      1746931504.9469292,
      1746931837.11369,
      {}
    ],
    [
      335,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746931837.2341774,
      1746931837.6369455,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      336,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746931837.7443802,
      1746931946.6911452,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      337,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.038073084354400634
      ],
      525.8378229141235,
      1,
      1746931946.77547,
      1746932472.6151094,
      {}
    ],
    [
      338,
      null,
      209652396,
      null,
      [
        0.1635699164890782,
        0.13911363363265988
      ],
      601.0065548419952,
      1,
      1746932472.6983862,
      1746933073.7067804,
      {}
    ],
    [
      339,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746933073.7943914,
      1746933074.130708,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      340,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.03940111875534058
      ],
      751.8696353435516,
      1,
      1746933074.2150347,
      1746933826.0864422,
      {}
    ],
    [
      341,
      null,
      209652396,
      null,
      [
        0.20601351634285764,
        0.09280311346054076
      ],
      641.3533515930176,
      1,
      1746933826.173145,
      1746934467.5284948,
      {}
    ],
    [
      342,
      null,
      209652396,
      null,
      [
        0.21903460608550426,
        0.07563565611839293
      ],
      1544.0485076904297,
      1,
      1746934471.7332904,
      1746936015.7837336,
      {}
    ],
    [
      343,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746936015.870607,
      1746936016.6643643,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      344,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746936016.7670674,
      1746936017.0338247,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      345,
      null,
      209652396,
      null,
      [
        0.24084023881928074,
        0.025636880695819854
      ],
      584.6328043937683,
      1,
      1746936017.1552055,
      1746936601.7897146,
      {}
    ],
    [
      346,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746936601.8791122,
      1746936607.4744477,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      347,
      null,
      209652396,
      null,
      [
        0.16209577160175964,
        0.1146118450164795
      ],
      842.8899309635162,
      1,
      1746936607.6135292,
      1746937450.5053546,
      {}
    ],
    [
      348,
      null,
      209652396,
      null,
      [
        0.19093399385315554,
        0.1357108807563782
      ],
      657.9453353881836,
      1,
      1746937450.609686,
      1746938108.5569391,
      {}
    ],
    [
      349,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746938108.658256,
      1746938787.1829512,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      350,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.048737369775772095
      ],
      453.6959171295166,
      1,
      1746938791.5750184,
      1746939245.2730873,
      {}
    ],
    [
      351,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.016231437921524046
      ],
      2193.7644739151,
      1,
      1746939245.359741,
      1746941439.1259549,
      {}
    ],
    [
      352,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746941439.2138164,
      1746941658.5892148,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      353,
      null,
      209652396,
      null,
      [
        0.21881965609510515,
        0.07999318838119507
      ],
      531.4512693881989,
      1,
      1746941658.6771417,
      1746942190.130273,
      {}
    ],
    [
      354,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746942190.2197652,
      1746942499.4144983,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      355,
      null,
      209652396,
      null,
      [
        0.15736607488104495,
        0.12566869378089907
      ],
      594.7521588802338,
      1,
      1746942499.5850358,
      1746943094.3391347,
      {}
    ],
    [
      356,
      null,
      209652396,
      null,
      [
        0.1887535173463317,
        0.13670610189437865
      ],
      900.3805122375488,
      1,
      1746943094.4273524,
      1746943994.809735,
      {}
    ],
    [
      357,
      null,
      209652396,
      null,
      [
        0.1891525444669157,
        0.16241209268569948
      ],
      424.1436200141907,
      1,
      1746943994.9002597,
      1746944419.045758,
      {}
    ],
    [
      358,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746944423.395723,
      1746944431.025519,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      359,
      null,
      209652396,
      null,
      [
        0.23184165594345235,
        0.05520674884319306
      ],
      390.07117199897766,
      1,
      1746944431.1268332,
      1746944821.1997097,
      {}
    ],
    [
      360,
      null,
      209652396,
      null,
      [
        0.24627635675539866,
        0.055670773386955266
      ],
      243.738272190094,
      1,
      1746944821.3069074,
      1746945065.046926,
      {}
    ],
    [
      361,
      null,
      209652396,
      null,
      [
        0.20094583088595064,
        0.1066742444038391
      ],
      1390.9920091629028,
      1,
      1746945065.1552072,
      1746946456.149171,
      {}
    ],
    [
      362,
      null,
      209652396,
      null,
      [
        0.1831024258419468,
        0.1476281189918518
      ],
      485.87503838539124,
      1,
      1746946456.2444086,
      1746946942.121362,
      {}
    ],
    [
      363,
      null,
      209652396,
      null,
      [
        0.19449617114287773,
        0.13183157920837402
      ],
      1105.304996728897,
      1,
      1746946942.21195,
      1746948047.5187967,
      {}
    ],
    [
      364,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746948047.6143162,
      1746948102.8061447,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      365,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746948102.8982549,
      1746948106.588369,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      366,
      null,
      209652396,
      null,
      [
        0.18752504912684556,
        0.12392784357070923
      ],
      364.03426241874695,
      1,
      1746948106.8033595,
      1746948470.8394713,
      {}
    ],
    [
      367,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746948475.1538422,
      1746948475.3954504,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      368,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.008999400436878205
      ],
      951.5260066986084,
      1,
      1746948475.4991343,
      1746949427.0270112,
      {}
    ],
    [
      369,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746949427.121776,
      1746949427.5033195,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      370,
      null,
      209652396,
      null,
      [
        0.19031966778972767,
        0.14978179693222046
      ],
      1137.0736548900604,
      1,
      1746949427.593223,
      1746950564.6685865,
      {}
    ],
    [
      371,
      null,
      209652396,
      null,
      [
        0.1958478337220852,
        0.08783870458602906
      ],
      1350.685478925705,
      1,
      1746950564.765855,
      1746951915.453242,
      {}
    ],
    [
      372,
      null,
      209652396,
      null,
      [
        0.17677569167090126,
        0.1376481819152832
      ],
      1169.7041749954224,
      1,
      1746951915.553856,
      1746953085.2602406,
      {}
    ],
    [
      373,
      null,
      209652396,
      null,
      [
        0.1896132229964565,
        0.13756932616233825
      ],
      677.8980524539948,
      1,
      1746953085.362093,
      1746953763.262049,
      {}
    ],
    [
      374,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746953767.7567315,
      1746953926.1260188,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      375,
      null,
      209652396,
      null,
      [
        0.18672639600783308,
        0.13649893999099733
      ],
      1614.1524391174316,
      1,
      1746953926.2235935,
      1746955540.3779576,
      {}
    ],
    [
      376,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.05130978465080262
      ],
      744.9282095432281,
      1,
      1746955540.5021954,
      1746956285.4324794,
      {}
    ],
    [
      377,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.04111109286546707
      ],
      338.54456758499146,
      1,
      1746956285.532669,
      1746956624.079137,
      {}
    ],
    [
      378,
      null,
      209652396,
      null,
      [
        0.2008230939368664,
        0.10790798604488372
      ],
      690.9881093502045,
      1,
      1746956624.1723433,
      1746957315.16237,
      {}
    ],
    [
      379,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746957315.2618372,
      1746957330.1746104,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      380,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746957330.3177018,
      1746957371.885118,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      381,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746957371.9843428,
      1746957495.9908798,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      382,
      null,
      209652396,
      null,
      [
        0.16550468803462814,
        0.143491153717041
      ],
      1573.0302097797394,
      1,
      1746957500.9862244,
      1746959074.018272,
      {}
    ],
    [
      383,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746959074.114196,
      1746959221.1892245,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      384,
      null,
      209652396,
      null,
      [
        0.1883847453458232,
        0.14341654777526855
      ],
      1995.7304792404175,
      1,
      1746959221.2847552,
      1746961217.0171905,
      {}
    ],
    [
      385,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746961217.1227431,
      1746961242.2649784,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      386,
      null,
      209652396,
      null,
      [
        0.22370397647343757,
        0.07192867934703827
      ],
      1166.9125208854675,
      1,
      1746961242.4226658,
      1746962409.3371656,
      {}
    ],
    [
      387,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746962409.4339406,
      1746962412.4259355,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      388,
      null,
      209652396,
      null,
      [
        0.18746352975394892,
        0.15051290273666382
      ],
      1243.053656578064,
      1,
      1746962412.5613084,
      1746963655.6167164,
      {}
    ],
    [
      389,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746963655.7118418,
      1746963669.6313753,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      390,
      null,
      209652396,
      null,
      [
        0.24053311351215542,
        0.04166742026805877
      ],
      396.0056369304657,
      1,
      1746963674.289303,
      1746964070.2968554,
      {}
    ],
    [
      391,
      null,
      209652396,
      null,
      [
        0.23445203243107438,
        0.06852770388126374
      ],
      1270.179894208908,
      1,
      1746964070.3957345,
      1746965340.5775447,
      {}
    ],
    [
      392,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746965340.6765525,
      1746965344.0328417,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      393,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746965344.1292489,
      1746965344.4515483,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      394,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746965344.580649,
      1746965396.896328,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      395,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746965396.9973974,
      1746965472.2064445,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      396,
      null,
      209652396,
      null,
      [
        0.20432426585121197,
        0.10027240514755249
      ],
      576.9571783542633,
      1,
      1746965472.305891,
      1746966049.2650082,
      {}
    ],
    [
      397,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004859751760959626
      ],
      654.8389108181,
      1,
      1746966049.3839762,
      1746966704.2250764,
      {}
    ],
    [
      398,
      null,
      209652396,
      null,
      [
        0.2294154131728982,
        0.05837803721427918
      ],
      584.7801423072815,
      1,
      1746966709.0055857,
      1746967293.7876751,
      {}
    ],
    [
      399,
      null,
      209652396,
      null,
      [
        0.1850679759362394,
        0.15672920227050782
      ],
      454.2579231262207,
      1,
      1746967293.883912,
      1746967748.1437078,
      {}
    ],
    [
      400,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013760385811328888
      ],
      899.1683220863342,
      1,
      1746967748.2449784,
      1746968647.415149,
      {}
    ],
    [
      401,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1746968647.513241,
      1746968648.144557,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      402,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.04827384054660797
      ],
      128.24450969696045,
      1,
      1746968648.2526846,
      1746968776.4990468,
      {}
    ],
    [
      403,
      null,
      209652396,
      null,
      [
        0.2146433460804718,
        0.08166362941265107
      ],
      444.48190355300903,
      1,
      1746968776.6189332,
      1746969221.1027539,
      {}
    ]
  ],
  "configs": {
    "1": {
      "batch_size": 297,
      "lambda_value": 0.6205646954477,
      "learning_rate": 0.000210147218,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 697
    },
    "2": {
      "batch_size": 979,
      "lambda_value": 0.3596079321578,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "3": {
      "batch_size": 652,
      "lambda_value": 0.7642785040662,
      "learning_rate": 0.0014379647071,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 136
    },
    "4": {
      "batch_size": 94,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 339
    },
    "5": {
      "batch_size": 241,
      "lambda_value": 0.9708397453651,
      "learning_rate": 0.0329667406801,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 407
    },
    "6": {
      "batch_size": 107,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0301390578778,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 338
    },
    "7": {
      "batch_size": 322,
      "lambda_value": 0.412513526121,
      "learning_rate": 0.0006441000446,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "8": {
      "batch_size": 815,
      "lambda_value": 0.8617159873378,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 752
    },
    "9": {
      "batch_size": 925,
      "lambda_value": 0.3837167412653,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "10": {
      "batch_size": 150,
      "lambda_value": 0.1709107359706,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "11": {
      "batch_size": 1024,
      "lambda_value": 0.9367846473174,
      "learning_rate": 0.0044448572887,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "12": {
      "batch_size": 102,
      "lambda_value": 0.6765698196157,
      "learning_rate": 0.0001975638963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 697
    },
    "13": {
      "batch_size": 659,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0117063616816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "14": {
      "batch_size": 59,
      "lambda_value": 0.0030815114132,
      "learning_rate": 0.0057836649805,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 153
    },
    "15": {
      "batch_size": 659,
      "lambda_value": 0.4262363360775,
      "learning_rate": 0.0063782393736,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "16": {
      "batch_size": 176,
      "lambda_value": 0.5650710721095,
      "learning_rate": 0.0001467921737,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 463
    },
    "17": {
      "batch_size": 78,
      "lambda_value": 0.9864346619144,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "18": {
      "batch_size": 752,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0255903600372,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 709
    },
    "19": {
      "batch_size": 85,
      "lambda_value": 0.6624668076433,
      "learning_rate": 0.0001461455212,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 455
    },
    "20": {
      "batch_size": 277,
      "lambda_value": 0.0788153739624,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 788
    },
    "21": {
      "batch_size": 895,
      "lambda_value": 0.7897473442105,
      "learning_rate": 0.011623077444,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 411
    },
    "22": {
      "batch_size": 597,
      "lambda_value": 0.4199483890762,
      "learning_rate": 0.0062957704128,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1002
    },
    "23": {
      "batch_size": 498,
      "lambda_value": 0.4997052812651,
      "learning_rate": 0.0008260624616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 201
    },
    "24": {
      "batch_size": 81,
      "lambda_value": 0.801774956151,
      "learning_rate": 0.0054916470096,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "25": {
      "batch_size": 69,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0027189688569,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "26": {
      "batch_size": 544,
      "lambda_value": 0.3566148090088,
      "learning_rate": 0.0077072238861,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "27": {
      "batch_size": 635,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0144818936694,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "28": {
      "batch_size": 184,
      "lambda_value": 0.5249395800268,
      "learning_rate": 0.0002461496774,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 328
    },
    "29": {
      "batch_size": 40,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0216101868293,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "30": {
      "batch_size": 497,
      "lambda_value": 0.4323787825414,
      "learning_rate": 0.0004186695981,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 866
    },
    "31": {
      "batch_size": 47,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0584663913961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 229
    },
    "32": {
      "batch_size": 242,
      "lambda_value": 0.5897873412338,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 140
    },
    "33": {
      "batch_size": 59,
      "lambda_value": 0.9315102941087,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "34": {
      "batch_size": 53,
      "lambda_value": 0.7431359447524,
      "learning_rate": 0.0001324462442,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 383
    },
    "35": {
      "batch_size": 55,
      "lambda_value": 0.5959451110671,
      "learning_rate": 0.0279512903626,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "36": {
      "batch_size": 62,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0042972583038,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 456
    },
    "37": {
      "batch_size": 40,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0591287940477,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 557
    },
    "38": {
      "batch_size": 143,
      "lambda_value": 0.4893136075805,
      "learning_rate": 0.0143524519362,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 124
    },
    "39": {
      "batch_size": 111,
      "lambda_value": 0.6237206127861,
      "learning_rate": 0.0011527170707,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "40": {
      "batch_size": 203,
      "lambda_value": 0.836270266563,
      "learning_rate": 0.0026409543209,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 612
    },
    "41": {
      "batch_size": 68,
      "lambda_value": 0.1473946081284,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 788
    },
    "42": {
      "batch_size": 682,
      "lambda_value": 0.8411544066865,
      "learning_rate": 0.0006865924239,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 174
    },
    "43": {
      "batch_size": 61,
      "lambda_value": 0.9525627850943,
      "learning_rate": 0.0886799955763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 133
    },
    "44": {
      "batch_size": 766,
      "lambda_value": 0.8645144427745,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 276
    },
    "45": {
      "batch_size": 680,
      "lambda_value": 0.2601044820299,
      "learning_rate": 0.0155794633931,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 532
    },
    "46": {
      "batch_size": 61,
      "lambda_value": 0.737447287188,
      "learning_rate": 0.0001600052257,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 408
    },
    "47": {
      "batch_size": 563,
      "lambda_value": 0.5684020796476,
      "learning_rate": 0.0360030852203,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 276
    },
    "48": {
      "batch_size": 342,
      "lambda_value": 0.3794140715116,
      "learning_rate": 0.0094428768473,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "49": {
      "batch_size": 539,
      "lambda_value": 0.4096195582972,
      "learning_rate": 0.0014614146338,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 269
    },
    "50": {
      "batch_size": 540,
      "lambda_value": 0.6011431890687,
      "learning_rate": 0.0002228815534,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "51": {
      "batch_size": 65,
      "lambda_value": 0.2425091147505,
      "learning_rate": 0.0001738203182,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "52": {
      "batch_size": 313,
      "lambda_value": 0.4545499988336,
      "learning_rate": 0.0003879558517,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 696
    },
    "53": {
      "batch_size": 582,
      "lambda_value": 0.0387496336331,
      "learning_rate": 0.0003356147463,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 83
    },
    "54": {
      "batch_size": 841,
      "lambda_value": 0.3293608465041,
      "learning_rate": 0.0018412961777,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "55": {
      "batch_size": 507,
      "lambda_value": 0.5071325061685,
      "learning_rate": 0.0001639990325,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 291
    },
    "56": {
      "batch_size": 523,
      "lambda_value": 0.5220340899809,
      "learning_rate": 0.0261351106367,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 332
    },
    "57": {
      "batch_size": 63,
      "lambda_value": 0.1525805406835,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "58": {
      "batch_size": 51,
      "lambda_value": 0.6743427482514,
      "learning_rate": 0.0203488979235,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 182
    },
    "59": {
      "batch_size": 526,
      "lambda_value": 0.1558490208903,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 71
    },
    "60": {
      "batch_size": 571,
      "lambda_value": 0.1632290921883,
      "learning_rate": 0.0403526510329,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 155
    },
    "61": {
      "batch_size": 900,
      "lambda_value": 0.4300912433377,
      "learning_rate": 0.0152683361273,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 574
    },
    "62": {
      "batch_size": 946,
      "lambda_value": 0.240475409915,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "63": {
      "batch_size": 45,
      "lambda_value": 0.025892842149,
      "learning_rate": 0.0064701372435,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 138
    },
    "64": {
      "batch_size": 578,
      "lambda_value": 0.466940713799,
      "learning_rate": 0.0069166965864,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 247
    },
    "65": {
      "batch_size": 71,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0043214032666,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 297
    },
    "66": {
      "batch_size": 921,
      "lambda_value": 0.0402320288874,
      "learning_rate": 0.0695202977577,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 410
    },
    "67": {
      "batch_size": 217,
      "lambda_value": 0.6966025769503,
      "learning_rate": 0.0609459009151,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 409
    },
    "68": {
      "batch_size": 506,
      "lambda_value": 0.2774871972287,
      "learning_rate": 0.000458934893,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 239
    },
    "69": {
      "batch_size": 435,
      "lambda_value": 0.6182493089424,
      "learning_rate": 0.0313142741224,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "70": {
      "batch_size": 193,
      "lambda_value": 0.4888227212062,
      "learning_rate": 0.0678987026873,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 198
    },
    "71": {
      "batch_size": 799,
      "lambda_value": 0.0490666417774,
      "learning_rate": 0.000188798116,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 231
    },
    "72": {
      "batch_size": 83,
      "lambda_value": 0.9431689307954,
      "learning_rate": 0.0005462678091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 381
    },
    "73": {
      "batch_size": 962,
      "lambda_value": 0.1658029844256,
      "learning_rate": 0.0009078367561,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 387
    },
    "74": {
      "batch_size": 633,
      "lambda_value": 0.4527774250837,
      "learning_rate": 0.0005033519202,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 444
    },
    "75": {
      "batch_size": 632,
      "lambda_value": 0.2859097380484,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 145
    },
    "76": {
      "batch_size": 681,
      "lambda_value": 0.9252130831835,
      "learning_rate": 0.000225824127,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 160
    },
    "77": {
      "batch_size": 442,
      "lambda_value": 0.5011312487499,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 162
    },
    "78": {
      "batch_size": 363,
      "lambda_value": 0.5999613374055,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 119
    },
    "79": {
      "batch_size": 500,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0227301664178,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 487
    },
    "80": {
      "batch_size": 387,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0407226893036,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 860
    },
    "81": {
      "batch_size": 917,
      "lambda_value": 0.2528729324812,
      "learning_rate": 0.0002112474838,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 84
    },
    "82": {
      "batch_size": 683,
      "lambda_value": 0.4302554532778,
      "learning_rate": 0.0069425824515,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 336
    },
    "83": {
      "batch_size": 869,
      "lambda_value": 0.3577941791914,
      "learning_rate": 0.0001144897283,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 85
    },
    "84": {
      "batch_size": 219,
      "lambda_value": 0.1326945416802,
      "learning_rate": 0.0055501982149,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 497
    },
    "85": {
      "batch_size": 603,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.050363997522,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 431
    },
    "86": {
      "batch_size": 33,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0043216314201,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 925
    },
    "87": {
      "batch_size": 39,
      "lambda_value": 0.568414398817,
      "learning_rate": 0.0066942051347,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "88": {
      "batch_size": 959,
      "lambda_value": 0.0099039525899,
      "learning_rate": 0.0001330037572,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 856
    },
    "89": {
      "batch_size": 156,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0053294934748,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "90": {
      "batch_size": 844,
      "lambda_value": 0.2250047838217,
      "learning_rate": 0.0777989782816,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "91": {
      "batch_size": 84,
      "lambda_value": 0.0464184110839,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "92": {
      "batch_size": 65,
      "lambda_value": 0.4572054964111,
      "learning_rate": 0.0269030355547,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 150
    },
    "93": {
      "batch_size": 501,
      "lambda_value": 0.4344636044526,
      "learning_rate": 0.0343406853747,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 551
    },
    "94": {
      "batch_size": 193,
      "lambda_value": 0.6825317392541,
      "learning_rate": 0.0012800826778,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 78
    },
    "95": {
      "batch_size": 59,
      "lambda_value": 0.0982368328669,
      "learning_rate": 0.0062053850896,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "96": {
      "batch_size": 44,
      "lambda_value": 0.0105993407731,
      "learning_rate": 0.0059496031762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 116
    },
    "97": {
      "batch_size": 61,
      "lambda_value": 0.4695952651957,
      "learning_rate": 0.0024192530494,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 136
    },
    "98": {
      "batch_size": 355,
      "lambda_value": 0.9137569290511,
      "learning_rate": 0.034912055568,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 196
    },
    "99": {
      "batch_size": 431,
      "lambda_value": 0.0822383740424,
      "learning_rate": 0.0075073454367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 156
    },
    "100": {
      "batch_size": 259,
      "lambda_value": 0.6182439422905,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 90
    },
    "101": {
      "batch_size": 103,
      "lambda_value": 0.2833626254686,
      "learning_rate": 0.0005003261748,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 490
    },
    "102": {
      "batch_size": 37,
      "lambda_value": 0.5840919399451,
      "learning_rate": 0.0001459429644,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 355
    },
    "103": {
      "batch_size": 441,
      "lambda_value": 0.1020683828299,
      "learning_rate": 0.0037946946911,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 771
    },
    "104": {
      "batch_size": 298,
      "lambda_value": 0.6523313109885,
      "learning_rate": 0.0418434218437,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 217
    },
    "105": {
      "batch_size": 105,
      "lambda_value": 0.5175676044407,
      "learning_rate": 0.0804624104669,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 720
    },
    "106": {
      "batch_size": 132,
      "lambda_value": 0.8645510243583,
      "learning_rate": 0.0065231774625,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "107": {
      "batch_size": 222,
      "lambda_value": 0.3163643900406,
      "learning_rate": 0.0077402548612,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "108": {
      "batch_size": 274,
      "lambda_value": 0.8391282420355,
      "learning_rate": 0.0007788324639,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 627
    },
    "109": {
      "batch_size": 202,
      "lambda_value": 0.9814558991599,
      "learning_rate": 0.0305959268152,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 681
    },
    "110": {
      "batch_size": 118,
      "lambda_value": 0.0095926156531,
      "learning_rate": 0.0001209499004,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 489
    },
    "111": {
      "batch_size": 725,
      "lambda_value": 0.4495361860686,
      "learning_rate": 0.0001828620707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "112": {
      "batch_size": 142,
      "lambda_value": 0.3018269311536,
      "learning_rate": 0.0013615516581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 156
    },
    "113": {
      "batch_size": 39,
      "lambda_value": 0.6366104708849,
      "learning_rate": 0.0911637803703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 197
    },
    "114": {
      "batch_size": 48,
      "lambda_value": 0.8393505362879,
      "learning_rate": 0.000335227891,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 278
    },
    "115": {
      "batch_size": 456,
      "lambda_value": 0.2025097518032,
      "learning_rate": 0.000165906658,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "116": {
      "batch_size": 52,
      "lambda_value": 0.1777602005584,
      "learning_rate": 0.0071062444482,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 245
    },
    "117": {
      "batch_size": 387,
      "lambda_value": 0.8469855847131,
      "learning_rate": 0.0159663538365,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 871
    },
    "118": {
      "batch_size": 544,
      "lambda_value": 0.7637452690801,
      "learning_rate": 0.0189128877645,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "119": {
      "batch_size": 78,
      "lambda_value": 0.1333517870819,
      "learning_rate": 0.0379151435743,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 376
    },
    "120": {
      "batch_size": 858,
      "lambda_value": 0.5295439381285,
      "learning_rate": 0.0008570201388,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 874
    },
    "121": {
      "batch_size": 514,
      "lambda_value": 0.9751001598295,
      "learning_rate": 0.0023139794505,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 290
    },
    "122": {
      "batch_size": 181,
      "lambda_value": 0.1042301237216,
      "learning_rate": 0.0056294156898,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 184
    },
    "123": {
      "batch_size": 852,
      "lambda_value": 0.1477343378818,
      "learning_rate": 0.0001720754894,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 578
    },
    "124": {
      "batch_size": 287,
      "lambda_value": 0.0042305286159,
      "learning_rate": 0.0003825520686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 280
    },
    "125": {
      "batch_size": 38,
      "lambda_value": 0.4950446899782,
      "learning_rate": 0.0006069868363,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "126": {
      "batch_size": 713,
      "lambda_value": 0.4736068584881,
      "learning_rate": 0.0484101532431,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "127": {
      "batch_size": 46,
      "lambda_value": 0.2266582964608,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 481
    },
    "128": {
      "batch_size": 876,
      "lambda_value": 0.3843229233274,
      "learning_rate": 0.0312081445008,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "129": {
      "batch_size": 102,
      "lambda_value": 0.0243599966944,
      "learning_rate": 0.0034664159679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 142
    },
    "130": {
      "batch_size": 145,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0036689786017,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 86
    },
    "131": {
      "batch_size": 884,
      "lambda_value": 0.0240476070589,
      "learning_rate": 0.0001244318996,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 523
    },
    "132": {
      "batch_size": 725,
      "lambda_value": 0.5275737085407,
      "learning_rate": 0.0962149393336,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 78
    },
    "133": {
      "batch_size": 267,
      "lambda_value": 0.2227488758416,
      "learning_rate": 0.0133378701537,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "134": {
      "batch_size": 276,
      "lambda_value": 0.1850431063149,
      "learning_rate": 0.0050170483991,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 101
    },
    "135": {
      "batch_size": 852,
      "lambda_value": 0.2554158173882,
      "learning_rate": 0.0001859212949,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "136": {
      "batch_size": 66,
      "lambda_value": 0.0453077602809,
      "learning_rate": 0.0038705299809,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 173
    },
    "137": {
      "batch_size": 33,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 375
    },
    "138": {
      "batch_size": 313,
      "lambda_value": 0.4943773457039,
      "learning_rate": 0.0025848473367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 885
    },
    "139": {
      "batch_size": 74,
      "lambda_value": 0.0927269727559,
      "learning_rate": 0.0011079056334,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 465
    },
    "140": {
      "batch_size": 460,
      "lambda_value": 0.2886737918534,
      "learning_rate": 0.011874222675,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 145
    },
    "141": {
      "batch_size": 139,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0457859391684,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "142": {
      "batch_size": 776,
      "lambda_value": 0.1506642600813,
      "learning_rate": 0.00253628593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 529
    },
    "143": {
      "batch_size": 330,
      "lambda_value": 0.9821690174032,
      "learning_rate": 0.0229054208914,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "144": {
      "batch_size": 542,
      "lambda_value": 0.3884680740375,
      "learning_rate": 0.0047964066063,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 599
    },
    "145": {
      "batch_size": 46,
      "lambda_value": 0.7914718216174,
      "learning_rate": 0.0567631885834,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 276
    },
    "146": {
      "batch_size": 814,
      "lambda_value": 0.4706617753678,
      "learning_rate": 0.0280124201071,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 405
    },
    "147": {
      "batch_size": 671,
      "lambda_value": 0.477805553039,
      "learning_rate": 0.0001000439302,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 742
    },
    "148": {
      "batch_size": 307,
      "lambda_value": 0.3966296496465,
      "learning_rate": 0.0065078037431,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 550
    },
    "149": {
      "batch_size": 67,
      "lambda_value": 0.1238591984675,
      "learning_rate": 0.0008622153901,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 450
    },
    "150": {
      "batch_size": 538,
      "lambda_value": 0.1472817942137,
      "learning_rate": 0.0073574994525,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 635
    },
    "151": {
      "batch_size": 49,
      "lambda_value": 0.0688601702784,
      "learning_rate": 0.0003239179582,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 237
    },
    "152": {
      "batch_size": 793,
      "lambda_value": 0.2500518198771,
      "learning_rate": 0.0072989042556,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 564
    },
    "153": {
      "batch_size": 776,
      "lambda_value": 0.3086653060848,
      "learning_rate": 0.0004287369379,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "154": {
      "batch_size": 39,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0037841646219,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 544
    },
    "155": {
      "batch_size": 962,
      "lambda_value": 0.7517036849034,
      "learning_rate": 0.0123398549816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 611
    },
    "156": {
      "batch_size": 915,
      "lambda_value": 0.2951589262888,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 325
    },
    "157": {
      "batch_size": 831,
      "lambda_value": 0.9121447002385,
      "learning_rate": 0.0258958220048,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 86
    },
    "158": {
      "batch_size": 976,
      "lambda_value": 0.3603359633198,
      "learning_rate": 0.0163222644592,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 278
    },
    "159": {
      "batch_size": 493,
      "lambda_value": 0.6414907887986,
      "learning_rate": 0.0751665791976,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 235
    },
    "160": {
      "batch_size": 454,
      "lambda_value": 0.1246000775699,
      "learning_rate": 0.0038598459083,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "161": {
      "batch_size": 137,
      "lambda_value": 0.6329745326815,
      "learning_rate": 0.0016575807729,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 351
    },
    "162": {
      "batch_size": 50,
      "lambda_value": 0.740179719234,
      "learning_rate": 0.0059510273029,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 165
    },
    "163": {
      "batch_size": 41,
      "lambda_value": 0.2084059817426,
      "learning_rate": 0.0013291369141,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "164": {
      "batch_size": 64,
      "lambda_value": 0.5561857015528,
      "learning_rate": 0.0035434237772,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "165": {
      "batch_size": 498,
      "lambda_value": 0.6579712863223,
      "learning_rate": 0.00944846031,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 146
    },
    "166": {
      "batch_size": 60,
      "lambda_value": 0.9268347430002,
      "learning_rate": 0.0039761620925,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "167": {
      "batch_size": 317,
      "lambda_value": 0.5774632610946,
      "learning_rate": 0.0004289380476,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 90
    },
    "168": {
      "batch_size": 33,
      "lambda_value": 0.844330408685,
      "learning_rate": 0.0036197636688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 852
    },
    "169": {
      "batch_size": 451,
      "lambda_value": 0.1924494999061,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 88
    },
    "170": {
      "batch_size": 537,
      "lambda_value": 0.2461028946703,
      "learning_rate": 0.0320480978609,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 482
    },
    "171": {
      "batch_size": 160,
      "lambda_value": 0.4670716943235,
      "learning_rate": 0.0028172952438,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 556
    },
    "172": {
      "batch_size": 188,
      "lambda_value": 0.2461939552216,
      "learning_rate": 0.0409216311654,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 474
    },
    "173": {
      "batch_size": 546,
      "lambda_value": 0.328880259391,
      "learning_rate": 0.0012850548044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "174": {
      "batch_size": 205,
      "lambda_value": 0.5479223007212,
      "learning_rate": 0.0362149473803,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 552
    },
    "175": {
      "batch_size": 805,
      "lambda_value": 0.3334198233134,
      "learning_rate": 0.0012575315579,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 213
    },
    "176": {
      "batch_size": 404,
      "lambda_value": 0.9522543525878,
      "learning_rate": 0.0620108034853,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "177": {
      "batch_size": 364,
      "lambda_value": 0.2034449398154,
      "learning_rate": 0.0042526599584,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 495
    },
    "178": {
      "batch_size": 733,
      "lambda_value": 0.1597686694848,
      "learning_rate": 0.031534156064,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 249
    },
    "179": {
      "batch_size": 296,
      "lambda_value": 0.3073615378608,
      "learning_rate": 0.0006343167147,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 541
    },
    "180": {
      "batch_size": 846,
      "lambda_value": 0.3837065982754,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "181": {
      "batch_size": 68,
      "lambda_value": 0.4765783643147,
      "learning_rate": 0.0022563929374,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "182": {
      "batch_size": 103,
      "lambda_value": 0.2461385129023,
      "learning_rate": 0.0001337143277,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 315
    },
    "183": {
      "batch_size": 390,
      "lambda_value": 0.9070245463357,
      "learning_rate": 0.0627349351707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 287
    },
    "184": {
      "batch_size": 473,
      "lambda_value": 0.9899025879147,
      "learning_rate": 0.0001115728064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 248
    },
    "185": {
      "batch_size": 621,
      "lambda_value": 0.2078800181557,
      "learning_rate": 0.0984325826781,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 277
    },
    "186": {
      "batch_size": 803,
      "lambda_value": 0.6304196192746,
      "learning_rate": 0.0013917449989,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 500
    },
    "187": {
      "batch_size": 64,
      "lambda_value": 0.0584250613346,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 229
    },
    "188": {
      "batch_size": 948,
      "lambda_value": 0.5201064105195,
      "learning_rate": 0.0644814831068,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 76
    },
    "189": {
      "batch_size": 52,
      "lambda_value": 0.1224029330303,
      "learning_rate": 0.008250906644,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 135
    },
    "190": {
      "batch_size": 791,
      "lambda_value": 0.8335977075286,
      "learning_rate": 0.0032926830009,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 494
    },
    "191": {
      "batch_size": 52,
      "lambda_value": 0.6956110933781,
      "learning_rate": 0.019084000727,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 305
    },
    "192": {
      "batch_size": 65,
      "lambda_value": 0.0858165163043,
      "learning_rate": 0.0001396075788,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 217
    },
    "193": {
      "batch_size": 38,
      "lambda_value": 0.5819568111468,
      "learning_rate": 0.0002132918471,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 249
    },
    "194": {
      "batch_size": 754,
      "lambda_value": 0.2698123628689,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 173
    },
    "195": {
      "batch_size": 668,
      "lambda_value": 0.8470592534302,
      "learning_rate": 0.0006430637512,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 141
    },
    "196": {
      "batch_size": 386,
      "lambda_value": 0.6863903558802,
      "learning_rate": 0.0008170013725,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "197": {
      "batch_size": 266,
      "lambda_value": 0.4414773952143,
      "learning_rate": 0.0268449154553,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 432
    },
    "198": {
      "batch_size": 222,
      "lambda_value": 0.3646827688118,
      "learning_rate": 0.0162151725013,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 81
    },
    "199": {
      "batch_size": 828,
      "lambda_value": 0.6994291661053,
      "learning_rate": 0.0048399368793,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 417
    },
    "200": {
      "batch_size": 845,
      "lambda_value": 0.5639110820217,
      "learning_rate": 0.0014623104992,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 463
    },
    "201": {
      "batch_size": 542,
      "lambda_value": 0.4027838092624,
      "learning_rate": 0.001307904062,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 561
    },
    "202": {
      "batch_size": 47,
      "lambda_value": 0.3342370768098,
      "learning_rate": 0.0066597022586,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 540
    },
    "203": {
      "batch_size": 234,
      "lambda_value": 0.4344920974789,
      "learning_rate": 0.032527985566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 278
    },
    "204": {
      "batch_size": 1022,
      "lambda_value": 0.2594121754683,
      "learning_rate": 0.0925450324862,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1007
    },
    "205": {
      "batch_size": 212,
      "lambda_value": 0.5286350730685,
      "learning_rate": 0.0071310853992,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 161
    },
    "206": {
      "batch_size": 190,
      "lambda_value": 0.5933051286032,
      "learning_rate": 0.0003288523716,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "207": {
      "batch_size": 93,
      "lambda_value": 0.5720078172236,
      "learning_rate": 0.000164626935,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "208": {
      "batch_size": 48,
      "lambda_value": 0.4541612209449,
      "learning_rate": 0.0019654478707,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "209": {
      "batch_size": 912,
      "lambda_value": 0.6501855402958,
      "learning_rate": 0.0001602316999,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 182
    },
    "210": {
      "batch_size": 642,
      "lambda_value": 0.3218750954514,
      "learning_rate": 0.0083602316064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "211": {
      "batch_size": 221,
      "lambda_value": 0.5098011891873,
      "learning_rate": 0.018540436892,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 105
    },
    "212": {
      "batch_size": 457,
      "lambda_value": 0.4042878294431,
      "learning_rate": 0.0008100329996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 108
    },
    "213": {
      "batch_size": 378,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.0637641872301,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 330
    },
    "214": {
      "batch_size": 460,
      "lambda_value": 0.2902332847431,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "215": {
      "batch_size": 686,
      "lambda_value": 0.3967036195568,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "216": {
      "batch_size": 150,
      "lambda_value": 0.6873889937377,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 97
    },
    "217": {
      "batch_size": 46,
      "lambda_value": 0.5442420143571,
      "learning_rate": 0.0041065218421,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 626
    },
    "218": {
      "batch_size": 69,
      "lambda_value": 0.0571109552735,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 64
    },
    "219": {
      "batch_size": 534,
      "lambda_value": 0.278817431718,
      "learning_rate": 0.054738169918,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 93
    },
    "220": {
      "batch_size": 637,
      "lambda_value": 0.6218435051405,
      "learning_rate": 0.0392186381003,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 555
    },
    "221": {
      "batch_size": 85,
      "lambda_value": 0.5498388846059,
      "learning_rate": 0.0279389198285,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "222": {
      "batch_size": 65,
      "lambda_value": 0.8734633914291,
      "learning_rate": 0.0026232078723,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 377
    },
    "223": {
      "batch_size": 416,
      "lambda_value": 0.4083321161572,
      "learning_rate": 0.0032544993566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 113
    },
    "224": {
      "batch_size": 51,
      "lambda_value": 0.1388957563608,
      "learning_rate": 0.000366593903,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "225": {
      "batch_size": 438,
      "lambda_value": 0.561111631904,
      "learning_rate": 0.0006101854537,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 288
    },
    "226": {
      "batch_size": 53,
      "lambda_value": 0.0741220638225,
      "learning_rate": 0.0304844386375,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "227": {
      "batch_size": 703,
      "lambda_value": 0.6124061564869,
      "learning_rate": 0.0035069436309,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 329
    },
    "228": {
      "batch_size": 710,
      "lambda_value": 0.3471934695898,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "229": {
      "batch_size": 131,
      "lambda_value": 0.3877559393645,
      "learning_rate": 0.0004915697162,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 112
    },
    "230": {
      "batch_size": 437,
      "lambda_value": 0.7574403115985,
      "learning_rate": 0.0087990083065,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 97
    },
    "231": {
      "batch_size": 769,
      "lambda_value": 0.5363343601572,
      "learning_rate": 0.0050951608204,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "232": {
      "batch_size": 435,
      "lambda_value": 0.2176978224086,
      "learning_rate": 0.0263258332272,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 245
    },
    "233": {
      "batch_size": 63,
      "lambda_value": 0.2336341509155,
      "learning_rate": 0.0004226593644,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "234": {
      "batch_size": 49,
      "lambda_value": 0.6806976718747,
      "learning_rate": 0.0069988860332,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 128
    },
    "235": {
      "batch_size": 455,
      "lambda_value": 0.8495232198256,
      "learning_rate": 0.0095403809884,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 110
    },
    "236": {
      "batch_size": 50,
      "lambda_value": 0.1519592189992,
      "learning_rate": 0.0155866756906,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 330
    },
    "237": {
      "batch_size": 32,
      "lambda_value": 0.6276940584115,
      "learning_rate": 0.0001745200849,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "238": {
      "batch_size": 51,
      "lambda_value": 0.4978130092022,
      "learning_rate": 0.0006479136368,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 168
    },
    "239": {
      "batch_size": 344,
      "lambda_value": 0.8248795737402,
      "learning_rate": 0.0002610219568,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 407
    },
    "240": {
      "batch_size": 641,
      "lambda_value": 0.280073581512,
      "learning_rate": 0.0016486629264,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 530
    },
    "241": {
      "batch_size": 71,
      "lambda_value": 0.2886039406427,
      "learning_rate": 0.0043323441692,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 192
    },
    "242": {
      "batch_size": 111,
      "lambda_value": 0.3255187079453,
      "learning_rate": 0.002088036926,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 492
    },
    "243": {
      "batch_size": 70,
      "lambda_value": 0.1630554128522,
      "learning_rate": 0.0003439187365,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 176
    },
    "244": {
      "batch_size": 961,
      "lambda_value": 0.417971716796,
      "learning_rate": 0.0002595916085,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 334
    },
    "245": {
      "batch_size": 294,
      "lambda_value": 0.729133400265,
      "learning_rate": 0.0666283501018,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 590
    },
    "246": {
      "batch_size": 40,
      "lambda_value": 0.7967112548555,
      "learning_rate": 0.0353565829307,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 238
    },
    "247": {
      "batch_size": 780,
      "lambda_value": 0.7083343086535,
      "learning_rate": 0.0326606169,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 105
    },
    "248": {
      "batch_size": 442,
      "lambda_value": 0.5201046118183,
      "learning_rate": 0.0001811518715,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 102
    },
    "249": {
      "batch_size": 816,
      "lambda_value": 0.1006982395772,
      "learning_rate": 0.0001623275114,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 419
    },
    "250": {
      "batch_size": 60,
      "lambda_value": 0.1914094420551,
      "learning_rate": 0.0004606071383,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "251": {
      "batch_size": 753,
      "lambda_value": 0.2435795480092,
      "learning_rate": 0.0004095912949,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 722
    },
    "252": {
      "batch_size": 704,
      "lambda_value": 0.144880579601,
      "learning_rate": 0.0002366997783,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 328
    },
    "253": {
      "batch_size": 102,
      "lambda_value": 0.1894695080254,
      "learning_rate": 0.0026068828701,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "254": {
      "batch_size": 547,
      "lambda_value": 0.4239860884209,
      "learning_rate": 0.0001356935227,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 149
    },
    "255": {
      "batch_size": 86,
      "lambda_value": 0.0045154409777,
      "learning_rate": 0.0030138194765,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 199
    },
    "256": {
      "batch_size": 376,
      "lambda_value": 0.1582188227815,
      "learning_rate": 0.0045780134808,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 524
    },
    "257": {
      "batch_size": 51,
      "lambda_value": 0.9108112310834,
      "learning_rate": 0.0001277308521,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 341
    },
    "258": {
      "batch_size": 765,
      "lambda_value": 0.1783089366069,
      "learning_rate": 0.0005607461675,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 336
    },
    "259": {
      "batch_size": 54,
      "lambda_value": 0.7760907682766,
      "learning_rate": 0.019084000727,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 262
    },
    "260": {
      "batch_size": 782,
      "lambda_value": 0.4208203917144,
      "learning_rate": 0.0344213993223,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 98
    },
    "261": {
      "batch_size": 363,
      "lambda_value": 0.2913048958122,
      "learning_rate": 0.0115743270024,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "262": {
      "batch_size": 387,
      "lambda_value": 0.4808552083858,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 205
    },
    "263": {
      "batch_size": 465,
      "lambda_value": 0.6264949327585,
      "learning_rate": 0.0081532443273,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 208
    },
    "264": {
      "batch_size": 843,
      "lambda_value": 0.2755907586144,
      "learning_rate": 0.0014261932923,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 310
    },
    "265": {
      "batch_size": 534,
      "lambda_value": 0.3886122845379,
      "learning_rate": 0.0011270176996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 644
    },
    "266": {
      "batch_size": 32,
      "lambda_value": 0.0555308977991,
      "learning_rate": 0.0009211259258,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 260
    },
    "267": {
      "batch_size": 178,
      "lambda_value": 0.7361547279816,
      "learning_rate": 0.0002666736091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "268": {
      "batch_size": 540,
      "lambda_value": 0.1126117643449,
      "learning_rate": 0.0042339443161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 461
    },
    "269": {
      "batch_size": 237,
      "lambda_value": 0.9976105432415,
      "learning_rate": 0.0001410508481,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 216
    },
    "270": {
      "batch_size": 334,
      "lambda_value": 0.6608835092183,
      "learning_rate": 0.0007244468698,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 86
    },
    "271": {
      "batch_size": 50,
      "lambda_value": 0.3539514749546,
      "learning_rate": 0.0001473504196,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 737
    },
    "272": {
      "batch_size": 39,
      "lambda_value": 0.0434074217682,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "273": {
      "batch_size": 63,
      "lambda_value": 0.1011284741403,
      "learning_rate": 0.0057869377883,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "274": {
      "batch_size": 758,
      "lambda_value": 0.1773664279903,
      "learning_rate": 0.0002236086227,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "275": {
      "batch_size": 176,
      "lambda_value": 0.8080018143185,
      "learning_rate": 0.0016972267439,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 87
    },
    "276": {
      "batch_size": 55,
      "lambda_value": 0.0245481552275,
      "learning_rate": 0.0038124057677,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "277": {
      "batch_size": 384,
      "lambda_value": 0.8210957953613,
      "learning_rate": 0.0003022091502,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "278": {
      "batch_size": 58,
      "lambda_value": 0.486513851508,
      "learning_rate": 0.000972353582,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 114
    },
    "279": {
      "batch_size": 463,
      "lambda_value": 0.0886199292692,
      "learning_rate": 0.0028951068882,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 374
    },
    "280": {
      "batch_size": 42,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0419915713539,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "281": {
      "batch_size": 34,
      "lambda_value": 0.0110450647425,
      "learning_rate": 0.0037398300895,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 132
    },
    "282": {
      "batch_size": 125,
      "lambda_value": 0.073563589368,
      "learning_rate": 0.0007287942283,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 662
    },
    "283": {
      "batch_size": 105,
      "lambda_value": 0.0244539059088,
      "learning_rate": 0.00837156209,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 270
    },
    "284": {
      "batch_size": 521,
      "lambda_value": 0.8089856629774,
      "learning_rate": 0.0076508599827,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "285": {
      "batch_size": 35,
      "lambda_value": 0.7719643918195,
      "learning_rate": 0.0017623959647,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "286": {
      "batch_size": 381,
      "lambda_value": 0.3834047145119,
      "learning_rate": 0.0038237497074,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 234
    },
    "287": {
      "batch_size": 413,
      "lambda_value": 0.0535191435259,
      "learning_rate": 0.0377148256786,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 100
    },
    "288": {
      "batch_size": 290,
      "lambda_value": 0.1320726262101,
      "learning_rate": 0.0023254224427,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "289": {
      "batch_size": 217,
      "lambda_value": 0.9365282264493,
      "learning_rate": 0.0050431783915,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 123
    },
    "290": {
      "batch_size": 544,
      "lambda_value": 0.4355872915023,
      "learning_rate": 0.0103945201972,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 237
    },
    "291": {
      "batch_size": 1011,
      "lambda_value": 0.4804118476289,
      "learning_rate": 0.0005972414841,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 587
    },
    "292": {
      "batch_size": 262,
      "lambda_value": 0.8036567934905,
      "learning_rate": 0.0001911999794,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "293": {
      "batch_size": 522,
      "lambda_value": 0.6810171385066,
      "learning_rate": 0.0363285889677,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 226
    },
    "294": {
      "batch_size": 68,
      "lambda_value": 0.1122108482366,
      "learning_rate": 0.0004946291044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 66
    },
    "295": {
      "batch_size": 697,
      "lambda_value": 0.7873240093307,
      "learning_rate": 0.0001594353537,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "296": {
      "batch_size": 33,
      "lambda_value": 0.1052317687943,
      "learning_rate": 0.0003359396443,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 148
    },
    "297": {
      "batch_size": 79,
      "lambda_value": 0.4196490252802,
      "learning_rate": 0.0100423699896,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 642
    },
    "298": {
      "batch_size": 148,
      "lambda_value": 0.4101648178047,
      "learning_rate": 0.0170134585068,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "299": {
      "batch_size": 801,
      "lambda_value": 0.833097150633,
      "learning_rate": 0.0862965434581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 217
    },
    "300": {
      "batch_size": 722,
      "lambda_value": 0.0686970530845,
      "learning_rate": 0.000118835971,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 426
    },
    "301": {
      "batch_size": 151,
      "lambda_value": 0.1765449594378,
      "learning_rate": 0.0005750675549,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "302": {
      "batch_size": 90,
      "lambda_value": 0.80285407825,
      "learning_rate": 0.0079014107354,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 97
    },
    "303": {
      "batch_size": 162,
      "lambda_value": 0.8985286621682,
      "learning_rate": 0.0174342739555,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 113
    },
    "304": {
      "batch_size": 621,
      "lambda_value": 0.3360339953694,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "305": {
      "batch_size": 377,
      "lambda_value": 0.0764293009661,
      "learning_rate": 0.0019926714499,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 617
    },
    "306": {
      "batch_size": 571,
      "lambda_value": 0.353016718935,
      "learning_rate": 0.0440802633021,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 155
    },
    "307": {
      "batch_size": 640,
      "lambda_value": 0.0011522622186,
      "learning_rate": 0.0001056551388,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 362
    },
    "308": {
      "batch_size": 661,
      "lambda_value": 0.2229809643412,
      "learning_rate": 0.0018678134703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 379
    },
    "309": {
      "batch_size": 831,
      "lambda_value": 0.2298700683603,
      "learning_rate": 0.0004065521248,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 216
    },
    "310": {
      "batch_size": 861,
      "lambda_value": 0.4043921180506,
      "learning_rate": 0.0053265918237,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 209
    },
    "311": {
      "batch_size": 390,
      "lambda_value": 0.5314194809525,
      "learning_rate": 0.0013443259838,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 242
    },
    "312": {
      "batch_size": 741,
      "lambda_value": 0.7148476112948,
      "learning_rate": 0.0021213467033,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 82
    },
    "313": {
      "batch_size": 849,
      "lambda_value": 0.3099768475404,
      "learning_rate": 0.0006553087978,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 124
    },
    "314": {
      "batch_size": 41,
      "lambda_value": 0.0660568722404,
      "learning_rate": 0.0040521423813,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "315": {
      "batch_size": 780,
      "lambda_value": 0.2064525755689,
      "learning_rate": 0.0002593296815,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 548
    },
    "316": {
      "batch_size": 277,
      "lambda_value": 0.0994308555944,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 397
    },
    "317": {
      "batch_size": 905,
      "lambda_value": 0.8059902862067,
      "learning_rate": 0.0018633581119,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 416
    },
    "318": {
      "batch_size": 437,
      "lambda_value": 0.7358982056678,
      "learning_rate": 0.0067680718763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 82
    },
    "319": {
      "batch_size": 659,
      "lambda_value": 0.6213471081522,
      "learning_rate": 0.0060203559486,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 718
    },
    "320": {
      "batch_size": 498,
      "lambda_value": 0.3797333205204,
      "learning_rate": 0.0026146954891,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 235
    },
    "321": {
      "batch_size": 843,
      "lambda_value": 0.1865370858349,
      "learning_rate": 0.0020195892834,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 235
    },
    "322": {
      "batch_size": 47,
      "lambda_value": 0.5182538469109,
      "learning_rate": 0.0089358135385,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 103
    },
    "323": {
      "batch_size": 121,
      "lambda_value": 0.541339152825,
      "learning_rate": 0.0002017361907,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 438
    },
    "324": {
      "batch_size": 418,
      "lambda_value": 0.4806562688073,
      "learning_rate": 0.0001280087689,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 151
    },
    "325": {
      "batch_size": 505,
      "lambda_value": 0.1804699936187,
      "learning_rate": 0.0515528982345,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 512
    },
    "326": {
      "batch_size": 756,
      "lambda_value": 0.0563130399479,
      "learning_rate": 0.0022234197184,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 129
    },
    "327": {
      "batch_size": 58,
      "lambda_value": 0.4944094677612,
      "learning_rate": 0.0002060823911,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 247
    },
    "328": {
      "batch_size": 156,
      "lambda_value": 0.8337801698394,
      "learning_rate": 0.0499835912667,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "329": {
      "batch_size": 443,
      "lambda_value": 0.2533722448979,
      "learning_rate": 0.020662701703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 439
    },
    "330": {
      "batch_size": 60,
      "lambda_value": 0.1306990600206,
      "learning_rate": 0.0065000343887,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 106
    },
    "331": {
      "batch_size": 307,
      "lambda_value": 0.2683873329488,
      "learning_rate": 0.0002594694874,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 107
    },
    "332": {
      "batch_size": 272,
      "lambda_value": 0.0894764468418,
      "learning_rate": 0.0003411331376,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 114
    },
    "333": {
      "batch_size": 257,
      "lambda_value": 0.5553544255642,
      "learning_rate": 0.0002451181655,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 77
    },
    "334": {
      "batch_size": 839,
      "lambda_value": 0.6434392806542,
      "learning_rate": 0.0004632122203,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 847
    },
    "335": {
      "batch_size": 743,
      "lambda_value": 0.215031883639,
      "learning_rate": 0.01152356152,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "336": {
      "batch_size": 435,
      "lambda_value": 0.6808719321627,
      "learning_rate": 0.0679194637572,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 90
    },
    "337": {
      "batch_size": 717,
      "lambda_value": 0.7887801615769,
      "learning_rate": 0.0005094724236,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 356
    },
    "338": {
      "batch_size": 581,
      "lambda_value": 0.0178358357788,
      "learning_rate": 0.0003477267856,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 103
    },
    "339": {
      "batch_size": 218,
      "lambda_value": 0.1696888094239,
      "learning_rate": 0.052309575188,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 810
    },
    "340": {
      "batch_size": 401,
      "lambda_value": 0.7568355160604,
      "learning_rate": 0.0005585359023,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 520
    },
    "341": {
      "batch_size": 473,
      "lambda_value": 0.4546944937188,
      "learning_rate": 0.0027846284343,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 236
    },
    "342": {
      "batch_size": 350,
      "lambda_value": 0.5559936772425,
      "learning_rate": 0.0100529394688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 231
    },
    "343": {
      "batch_size": 530,
      "lambda_value": 0.8712284711014,
      "learning_rate": 0.0299782918803,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 218
    },
    "344": {
      "batch_size": 635,
      "lambda_value": 0.6639737340676,
      "learning_rate": 0.0558536530177,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 602
    },
    "345": {
      "batch_size": 395,
      "lambda_value": 0.6229592140736,
      "learning_rate": 0.089214428506,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 76
    },
    "346": {
      "batch_size": 766,
      "lambda_value": 0.2242789140878,
      "learning_rate": 0.0201515256305,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 162
    },
    "347": {
      "batch_size": 50,
      "lambda_value": 0.0852627285054,
      "learning_rate": 0.0308602695679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 125
    },
    "348": {
      "batch_size": 663,
      "lambda_value": 0.2197957309267,
      "learning_rate": 0.0006061254588,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 69
    },
    "349": {
      "batch_size": 52,
      "lambda_value": 0.9515193689156,
      "learning_rate": 0.0002946615193,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "350": {
      "batch_size": 785,
      "lambda_value": 0.6064813774206,
      "learning_rate": 0.0044035167819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 382
    },
    "351": {
      "batch_size": 254,
      "lambda_value": 0.9054709401563,
      "learning_rate": 0.0002642115192,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 665
    },
    "352": {
      "batch_size": 549,
      "lambda_value": 0.674096520909,
      "learning_rate": 0.0188256591059,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "353": {
      "batch_size": 288,
      "lambda_value": 0.5248121876714,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 103
    },
    "354": {
      "batch_size": 51,
      "lambda_value": 0.4900602108518,
      "learning_rate": 0.0033119573752,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "355": {
      "batch_size": 51,
      "lambda_value": 0.0864264480572,
      "learning_rate": 0.0036006553919,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 339
    },
    "356": {
      "batch_size": 254,
      "lambda_value": 0.1335888882005,
      "learning_rate": 0.0293502269983,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "357": {
      "batch_size": 948,
      "lambda_value": 0.1227161072199,
      "learning_rate": 0.0003706377685,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 814
    },
    "358": {
      "batch_size": 32,
      "lambda_value": 0.5590620740748,
      "learning_rate": 0.0001887486611,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "359": {
      "batch_size": 736,
      "lambda_value": 0.5877962768707,
      "learning_rate": 0.000173328844,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 86
    },
    "360": {
      "batch_size": 96,
      "lambda_value": 0.6820598906435,
      "learning_rate": 0.0137231840115,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "361": {
      "batch_size": 152,
      "lambda_value": 0.4622814816124,
      "learning_rate": 0.0001798692692,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 350
    },
    "362": {
      "batch_size": 584,
      "lambda_value": 0.0554709545819,
      "learning_rate": 0.002867925593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "363": {
      "batch_size": 381,
      "lambda_value": 0.2759440299071,
      "learning_rate": 0.005834854811,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 315
    },
    "364": {
      "batch_size": 155,
      "lambda_value": 0.0126718534249,
      "learning_rate": 0.068001605758,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 179
    },
    "365": {
      "batch_size": 47,
      "lambda_value": 0.5370564885229,
      "learning_rate": 0.0139226790705,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 86
    },
    "366": {
      "batch_size": 143,
      "lambda_value": 0.3048283869862,
      "learning_rate": 0.0001422244224,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 95
    },
    "367": {
      "batch_size": 47,
      "lambda_value": 0.6556781774429,
      "learning_rate": 0.0165539675071,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 702
    },
    "368": {
      "batch_size": 514,
      "lambda_value": 0.9325032292789,
      "learning_rate": 0.0028561687279,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 196
    },
    "369": {
      "batch_size": 482,
      "lambda_value": 0.3176803263535,
      "learning_rate": 0.0398799204606,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 370
    },
    "370": {
      "batch_size": 361,
      "lambda_value": 0.1317226997102,
      "learning_rate": 0.0079847689986,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 131
    },
    "371": {
      "batch_size": 54,
      "lambda_value": 0.5065217763128,
      "learning_rate": 0.0005039206588,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "372": {
      "batch_size": 195,
      "lambda_value": 0.1182898929868,
      "learning_rate": 0.0006307295736,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 88
    },
    "373": {
      "batch_size": 615,
      "lambda_value": 0.1713031609062,
      "learning_rate": 0.000327779834,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "374": {
      "batch_size": 210,
      "lambda_value": 0.5999363245098,
      "learning_rate": 0.0001227598618,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 109
    },
    "375": {
      "batch_size": 228,
      "lambda_value": 0.2097534663918,
      "learning_rate": 0.0044908007691,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 98
    },
    "376": {
      "batch_size": 588,
      "lambda_value": 0.6921191491618,
      "learning_rate": 0.0002698674969,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 117
    },
    "377": {
      "batch_size": 827,
      "lambda_value": 0.7449112412928,
      "learning_rate": 0.0088357537548,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 265
    },
    "378": {
      "batch_size": 306,
      "lambda_value": 0.4408812080456,
      "learning_rate": 0.0149767955939,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 136
    },
    "379": {
      "batch_size": 32,
      "lambda_value": 0.2036762467285,
      "learning_rate": 0.0007120181963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 298
    },
    "380": {
      "batch_size": 44,
      "lambda_value": 0.363548252842,
      "learning_rate": 0.0146518248161,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "381": {
      "batch_size": 392,
      "lambda_value": 0.8530809109696,
      "learning_rate": 0.0068378774336,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 936
    },
    "382": {
      "batch_size": 285,
      "lambda_value": 0.0405681071044,
      "learning_rate": 0.0004518383496,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 354
    },
    "383": {
      "batch_size": 85,
      "lambda_value": 0.4744191316373,
      "learning_rate": 0.0427057286624,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "384": {
      "batch_size": 306,
      "lambda_value": 0.2010288654859,
      "learning_rate": 0.0002725464319,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "385": {
      "batch_size": 651,
      "lambda_value": 0.8976907571079,
      "learning_rate": 0.0051642740405,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 317
    },
    "386": {
      "batch_size": 315,
      "lambda_value": 0.4797039031948,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "387": {
      "batch_size": 472,
      "lambda_value": 0.4614628028735,
      "learning_rate": 0.0291505470366,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 392
    },
    "388": {
      "batch_size": 458,
      "lambda_value": 0.0995730051319,
      "learning_rate": 0.0039095602593,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 299
    },
    "389": {
      "batch_size": 56,
      "lambda_value": 0.6254740258478,
      "learning_rate": 0.0002301867794,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "390": {
      "batch_size": 693,
      "lambda_value": 0.5463370696629,
      "learning_rate": 0.080973575191,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "391": {
      "batch_size": 209,
      "lambda_value": 0.5536684799516,
      "learning_rate": 0.0129454765127,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 208
    },
    "392": {
      "batch_size": 58,
      "lambda_value": 0.2603218459407,
      "learning_rate": 0.0001532968651,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "393": {
      "batch_size": 58,
      "lambda_value": 0.1620409311437,
      "learning_rate": 0.0735796471111,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 627
    },
    "394": {
      "batch_size": 36,
      "lambda_value": 0.7723035029214,
      "learning_rate": 0.0009204157787,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "395": {
      "batch_size": 205,
      "lambda_value": 0.7727489068701,
      "learning_rate": 0.0140877870417,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 92
    },
    "396": {
      "batch_size": 657,
      "lambda_value": 0.4360791272104,
      "learning_rate": 0.0003511187487,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 326
    },
    "397": {
      "batch_size": 785,
      "lambda_value": 0.4730155072588,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "398": {
      "batch_size": 540,
      "lambda_value": 0.5582406622968,
      "learning_rate": 0.0001278093202,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "399": {
      "batch_size": 366,
      "lambda_value": 0.0727961021739,
      "learning_rate": 0.0402294898411,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "400": {
      "batch_size": 538,
      "lambda_value": 0.9368961678792,
      "learning_rate": 0.0004181432648,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 271
    },
    "401": {
      "batch_size": 757,
      "lambda_value": 0.9354630310557,
      "learning_rate": 0.0888041723761,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "402": {
      "batch_size": 90,
      "lambda_value": 0.7273220355144,
      "learning_rate": 0.0069453207755,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "403": {
      "batch_size": 844,
      "lambda_value": 0.4824731983172,
      "learning_rate": 0.0003002825268,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 244
    }
  },
  "config_origins": {
    "1": "Initial Design: Sobol",
    "2": "Initial Design: Sobol",
    "3": "Initial Design: Sobol",
    "4": "Initial Design: Sobol",
    "5": "Initial Design: Sobol",
    "6": "Acquisition Function Maximizer: Local Search",
    "7": "Acquisition Function Maximizer: Local Search",
    "8": "Acquisition Function Maximizer: Local Search",
    "9": "Acquisition Function Maximizer: Local Search",
    "10": "Acquisition Function Maximizer: Local Search",
    "11": "Acquisition Function Maximizer: Local Search",
    "12": "Acquisition Function Maximizer: Local Search",
    "13": "Acquisition Function Maximizer: Local Search",
    "14": "Acquisition Function Maximizer: Local Search",
    "15": "Acquisition Function Maximizer: Local Search",
    "16": "Acquisition Function Maximizer: Local Search",
    "17": "Acquisition Function Maximizer: Local Search",
    "18": "Acquisition Function Maximizer: Local Search",
    "19": "Acquisition Function Maximizer: Local Search",
    "20": "Random Search",
    "21": "Random Search",
    "22": "Random Search",
    "23": "Acquisition Function Maximizer: Local Search",
    "24": "Acquisition Function Maximizer: Local Search",
    "25": "Acquisition Function Maximizer: Local Search",
    "26": "Acquisition Function Maximizer: Local Search",
    "27": "Acquisition Function Maximizer: Local Search",
    "28": "Acquisition Function Maximizer: Local Search",
    "29": "Acquisition Function Maximizer: Local Search",
    "30": "Random Search",
    "31": "Acquisition Function Maximizer: Local Search",
    "32": "Random Search",
    "33": "Acquisition Function Maximizer: Local Search",
    "34": "Acquisition Function Maximizer: Local Search",
    "35": "Acquisition Function Maximizer: Local Search",
    "36": "Acquisition Function Maximizer: Local Search",
    "37": "Acquisition Function Maximizer: Local Search",
    "38": "Acquisition Function Maximizer: Local Search",
    "39": "Acquisition Function Maximizer: Local Search",
    "40": "Random Search",
    "41": "Acquisition Function Maximizer: Local Search",
    "42": "Acquisition Function Maximizer: Local Search",
    "43": "Acquisition Function Maximizer: Local Search",
    "44": "Acquisition Function Maximizer: Local Search",
    "45": "Acquisition Function Maximizer: Local Search",
    "46": "Acquisition Function Maximizer: Local Search",
    "47": "Acquisition Function Maximizer: Local Search",
    "48": "Acquisition Function Maximizer: Local Search",
    "49": "Random Search",
    "50": "Acquisition Function Maximizer: Local Search",
    "51": "Acquisition Function Maximizer: Local Search",
    "52": "Acquisition Function Maximizer: Local Search",
    "53": "Random Search",
    "54": "Acquisition Function Maximizer: Local Search",
    "55": "Acquisition Function Maximizer: Local Search",
    "56": "Acquisition Function Maximizer: Local Search",
    "57": "Acquisition Function Maximizer: Local Search",
    "58": "Acquisition Function Maximizer: Local Search",
    "59": "Random Search",
    "60": "Acquisition Function Maximizer: Local Search",
    "61": "Random Search",
    "62": "Acquisition Function Maximizer: Local Search",
    "63": "Acquisition Function Maximizer: Local Search",
    "64": "Acquisition Function Maximizer: Local Search",
    "65": "Acquisition Function Maximizer: Local Search",
    "66": "Random Search",
    "67": "Random Search",
    "68": "Acquisition Function Maximizer: Local Search",
    "69": "Random Search",
    "70": "Random Search",
    "71": "Acquisition Function Maximizer: Local Search",
    "72": "Acquisition Function Maximizer: Local Search",
    "73": "Random Search",
    "74": "Acquisition Function Maximizer: Local Search",
    "75": "Random Search",
    "76": "Acquisition Function Maximizer: Local Search",
    "77": "Acquisition Function Maximizer: Local Search",
    "78": "Acquisition Function Maximizer: Local Search",
    "79": "Acquisition Function Maximizer: Local Search",
    "80": "Acquisition Function Maximizer: Local Search",
    "81": "Random Search",
    "82": "Acquisition Function Maximizer: Local Search",
    "83": "Random Search",
    "84": "Acquisition Function Maximizer: Local Search",
    "85": "Random Search",
    "86": "Acquisition Function Maximizer: Local Search",
    "87": "Acquisition Function Maximizer: Local Search",
    "88": "Random Search",
    "89": "Acquisition Function Maximizer: Local Search",
    "90": "Acquisition Function Maximizer: Local Search",
    "91": "Acquisition Function Maximizer: Local Search",
    "92": "Acquisition Function Maximizer: Local Search",
    "93": "Random Search",
    "94": "Acquisition Function Maximizer: Local Search",
    "95": "Acquisition Function Maximizer: Local Search",
    "96": "Acquisition Function Maximizer: Local Search",
    "97": "Acquisition Function Maximizer: Local Search",
    "98": "Random Search",
    "99": "Acquisition Function Maximizer: Local Search",
    "100": "Acquisition Function Maximizer: Local Search",
    "101": "Random Search",
    "102": "Acquisition Function Maximizer: Local Search",
    "103": "Random Search",
    "104": "Acquisition Function Maximizer: Local Search",
    "105": "Random Search",
    "106": "Acquisition Function Maximizer: Local Search",
    "107": "Acquisition Function Maximizer: Local Search",
    "108": "Acquisition Function Maximizer: Local Search",
    "109": "Acquisition Function Maximizer: Local Search",
    "110": "Acquisition Function Maximizer: Local Search",
    "111": "Acquisition Function Maximizer: Local Search",
    "112": "Acquisition Function Maximizer: Local Search",
    "113": "Acquisition Function Maximizer: Local Search",
    "114": "Acquisition Function Maximizer: Local Search",
    "115": "Acquisition Function Maximizer: Local Search",
    "116": "Acquisition Function Maximizer: Local Search",
    "117": "Acquisition Function Maximizer: Local Search",
    "118": "Acquisition Function Maximizer: Local Search",
    "119": "Acquisition Function Maximizer: Local Search",
    "120": "Acquisition Function Maximizer: Local Search",
    "121": "Acquisition Function Maximizer: Local Search",
    "122": "Acquisition Function Maximizer: Local Search",
    "123": "Acquisition Function Maximizer: Local Search",
    "124": "Acquisition Function Maximizer: Local Search",
    "125": "Acquisition Function Maximizer: Local Search",
    "126": "Acquisition Function Maximizer: Local Search",
    "127": "Acquisition Function Maximizer: Local Search",
    "128": "Acquisition Function Maximizer: Local Search",
    "129": "Acquisition Function Maximizer: Local Search",
    "130": "Acquisition Function Maximizer: Local Search",
    "131": "Acquisition Function Maximizer: Local Search",
    "132": "Random Search",
    "133": "Acquisition Function Maximizer: Local Search",
    "134": "Acquisition Function Maximizer: Local Search",
    "135": "Acquisition Function Maximizer: Local Search",
    "136": "Acquisition Function Maximizer: Local Search",
    "137": "Acquisition Function Maximizer: Local Search",
    "138": "Random Search",
    "139": "Acquisition Function Maximizer: Local Search",
    "140": "Acquisition Function Maximizer: Local Search",
    "141": "Acquisition Function Maximizer: Local Search",
    "142": "Acquisition Function Maximizer: Local Search",
    "143": "Acquisition Function Maximizer: Local Search",
    "144": "Acquisition Function Maximizer: Local Search",
    "145": "Acquisition Function Maximizer: Local Search",
    "146": "Acquisition Function Maximizer: Local Search",
    "147": "Acquisition Function Maximizer: Local Search",
    "148": "Acquisition Function Maximizer: Local Search",
    "149": "Acquisition Function Maximizer: Local Search",
    "150": "Acquisition Function Maximizer: Local Search",
    "151": "Acquisition Function Maximizer: Local Search",
    "152": "Random Search",
    "153": "Acquisition Function Maximizer: Local Search",
    "154": "Acquisition Function Maximizer: Local Search",
    "155": "Acquisition Function Maximizer: Local Search",
    "156": "Random Search",
    "157": "Acquisition Function Maximizer: Local Search",
    "158": "Random Search",
    "159": "Acquisition Function Maximizer: Local Search",
    "160": "Random Search",
    "161": "Acquisition Function Maximizer: Local Search",
    "162": "Acquisition Function Maximizer: Local Search",
    "163": "Acquisition Function Maximizer: Local Search",
    "164": "Acquisition Function Maximizer: Local Search",
    "165": "Random Search",
    "166": "Acquisition Function Maximizer: Local Search",
    "167": "Acquisition Function Maximizer: Local Search",
    "168": "Acquisition Function Maximizer: Local Search",
    "169": "Acquisition Function Maximizer: Local Search",
    "170": "Acquisition Function Maximizer: Local Search",
    "171": "Acquisition Function Maximizer: Local Search",
    "172": "Random Search",
    "173": "Acquisition Function Maximizer: Local Search",
    "174": "Acquisition Function Maximizer: Local Search",
    "175": "Random Search",
    "176": "Acquisition Function Maximizer: Local Search",
    "177": "Random Search",
    "178": "Random Search",
    "179": "Random Search",
    "180": "Acquisition Function Maximizer: Local Search",
    "181": "Acquisition Function Maximizer: Local Search",
    "182": "Acquisition Function Maximizer: Local Search",
    "183": "Acquisition Function Maximizer: Local Search",
    "184": "Acquisition Function Maximizer: Local Search",
    "185": "Random Search",
    "186": "Random Search",
    "187": "Acquisition Function Maximizer: Local Search",
    "188": "Acquisition Function Maximizer: Local Search",
    "189": "Acquisition Function Maximizer: Local Search",
    "190": "Acquisition Function Maximizer: Local Search",
    "191": "Acquisition Function Maximizer: Local Search",
    "192": "Acquisition Function Maximizer: Local Search",
    "193": "Acquisition Function Maximizer: Local Search",
    "194": "Acquisition Function Maximizer: Local Search",
    "195": "Acquisition Function Maximizer: Local Search",
    "196": "Acquisition Function Maximizer: Local Search",
    "197": "Acquisition Function Maximizer: Local Search",
    "198": "Random Search",
    "199": "Acquisition Function Maximizer: Local Search",
    "200": "Acquisition Function Maximizer: Local Search",
    "201": "Acquisition Function Maximizer: Local Search",
    "202": "Acquisition Function Maximizer: Local Search",
    "203": "Acquisition Function Maximizer: Local Search",
    "204": "Random Search",
    "205": "Acquisition Function Maximizer: Local Search",
    "206": "Acquisition Function Maximizer: Local Search",
    "207": "Acquisition Function Maximizer: Local Search",
    "208": "Acquisition Function Maximizer: Local Search",
    "209": "Random Search",
    "210": "Random Search",
    "211": "Random Search",
    "212": "Acquisition Function Maximizer: Local Search",
    "213": "Acquisition Function Maximizer: Local Search",
    "214": "Acquisition Function Maximizer: Local Search",
    "215": "Acquisition Function Maximizer: Local Search",
    "216": "Acquisition Function Maximizer: Local Search",
    "217": "Acquisition Function Maximizer: Local Search",
    "218": "Acquisition Function Maximizer: Local Search",
    "219": "Acquisition Function Maximizer: Local Search",
    "220": "Random Search",
    "221": "Acquisition Function Maximizer: Local Search",
    "222": "Acquisition Function Maximizer: Local Search",
    "223": "Acquisition Function Maximizer: Local Search",
    "224": "Acquisition Function Maximizer: Local Search",
    "225": "Acquisition Function Maximizer: Local Search",
    "226": "Acquisition Function Maximizer: Local Search",
    "227": "Acquisition Function Maximizer: Local Search",
    "228": "Acquisition Function Maximizer: Local Search",
    "229": "Acquisition Function Maximizer: Local Search",
    "230": "Random Search",
    "231": "Acquisition Function Maximizer: Local Search",
    "232": "Acquisition Function Maximizer: Local Search",
    "233": "Acquisition Function Maximizer: Local Search",
    "234": "Acquisition Function Maximizer: Local Search",
    "235": "Acquisition Function Maximizer: Local Search",
    "236": "Acquisition Function Maximizer: Local Search",
    "237": "Acquisition Function Maximizer: Local Search",
    "238": "Acquisition Function Maximizer: Local Search",
    "239": "Random Search",
    "240": "Acquisition Function Maximizer: Local Search",
    "241": "Acquisition Function Maximizer: Local Search",
    "242": "Acquisition Function Maximizer: Local Search",
    "243": "Acquisition Function Maximizer: Local Search",
    "244": "Acquisition Function Maximizer: Local Search",
    "245": "Acquisition Function Maximizer: Local Search",
    "246": "Acquisition Function Maximizer: Local Search",
    "247": "Random Search",
    "248": "Acquisition Function Maximizer: Local Search",
    "249": "Random Search",
    "250": "Acquisition Function Maximizer: Local Search",
    "251": "Acquisition Function Maximizer: Local Search",
    "252": "Acquisition Function Maximizer: Local Search",
    "253": "Random Search",
    "254": "Random Search",
    "255": "Acquisition Function Maximizer: Local Search",
    "256": "Acquisition Function Maximizer: Local Search",
    "257": "Acquisition Function Maximizer: Local Search",
    "258": "Acquisition Function Maximizer: Local Search",
    "259": "Acquisition Function Maximizer: Local Search",
    "260": "Acquisition Function Maximizer: Local Search",
    "261": "Random Search",
    "262": "Acquisition Function Maximizer: Local Search",
    "263": "Acquisition Function Maximizer: Local Search",
    "264": "Acquisition Function Maximizer: Local Search",
    "265": "Acquisition Function Maximizer: Local Search",
    "266": "Acquisition Function Maximizer: Local Search",
    "267": "Random Search",
    "268": "Random Search",
    "269": "Acquisition Function Maximizer: Local Search",
    "270": "Acquisition Function Maximizer: Local Search",
    "271": "Acquisition Function Maximizer: Local Search",
    "272": "Acquisition Function Maximizer: Local Search",
    "273": "Acquisition Function Maximizer: Local Search",
    "274": "Random Search",
    "275": "Acquisition Function Maximizer: Local Search",
    "276": "Acquisition Function Maximizer: Local Search",
    "277": "Acquisition Function Maximizer: Local Search",
    "278": "Acquisition Function Maximizer: Local Search",
    "279": "Acquisition Function Maximizer: Local Search",
    "280": "Acquisition Function Maximizer: Local Search",
    "281": "Acquisition Function Maximizer: Local Search",
    "282": "Acquisition Function Maximizer: Local Search",
    "283": "Acquisition Function Maximizer: Local Search",
    "284": "Acquisition Function Maximizer: Local Search",
    "285": "Acquisition Function Maximizer: Local Search",
    "286": "Acquisition Function Maximizer: Local Search",
    "287": "Acquisition Function Maximizer: Local Search",
    "288": "Acquisition Function Maximizer: Local Search",
    "289": "Random Search",
    "290": "Acquisition Function Maximizer: Local Search",
    "291": "Random Search",
    "292": "Acquisition Function Maximizer: Local Search",
    "293": "Acquisition Function Maximizer: Local Search",
    "294": "Acquisition Function Maximizer: Local Search",
    "295": "Acquisition Function Maximizer: Local Search",
    "296": "Acquisition Function Maximizer: Local Search",
    "297": "Random Search",
    "298": "Acquisition Function Maximizer: Local Search",
    "299": "Random Search",
    "300": "Acquisition Function Maximizer: Local Search",
    "301": "Acquisition Function Maximizer: Local Search",
    "302": "Random Search",
    "303": "Acquisition Function Maximizer: Local Search",
    "304": "Acquisition Function Maximizer: Local Search",
    "305": "Acquisition Function Maximizer: Local Search",
    "306": "Acquisition Function Maximizer: Local Search",
    "307": "Acquisition Function Maximizer: Local Search",
    "308": "Acquisition Function Maximizer: Local Search",
    "309": "Random Search",
    "310": "Acquisition Function Maximizer: Local Search",
    "311": "Acquisition Function Maximizer: Local Search",
    "312": "Random Search",
    "313": "Random Search",
    "314": "Acquisition Function Maximizer: Local Search",
    "315": "Random Search",
    "316": "Acquisition Function Maximizer: Local Search",
    "317": "Random Search",
    "318": "Random Search",
    "319": "Random Search",
    "320": "Acquisition Function Maximizer: Local Search",
    "321": "Acquisition Function Maximizer: Local Search",
    "322": "Acquisition Function Maximizer: Local Search",
    "323": "Acquisition Function Maximizer: Local Search",
    "324": "Acquisition Function Maximizer: Local Search",
    "325": "Acquisition Function Maximizer: Local Search",
    "326": "Acquisition Function Maximizer: Local Search",
    "327": "Random Search",
    "328": "Random Search",
    "329": "Acquisition Function Maximizer: Local Search",
    "330": "Acquisition Function Maximizer: Local Search",
    "331": "Acquisition Function Maximizer: Local Search",
    "332": "Acquisition Function Maximizer: Local Search",
    "333": "Acquisition Function Maximizer: Local Search",
    "334": "Acquisition Function Maximizer: Local Search",
    "335": "Acquisition Function Maximizer: Local Search",
    "336": "Random Search",
    "337": "Acquisition Function Maximizer: Local Search",
    "338": "Random Search",
    "339": "Acquisition Function Maximizer: Local Search",
    "340": "Acquisition Function Maximizer: Local Search",
    "341": "Acquisition Function Maximizer: Local Search",
    "342": "Acquisition Function Maximizer: Local Search",
    "343": "Acquisition Function Maximizer: Local Search",
    "344": "Acquisition Function Maximizer: Local Search",
    "345": "Acquisition Function Maximizer: Local Search",
    "346": "Acquisition Function Maximizer: Local Search",
    "347": "Random Search",
    "348": "Acquisition Function Maximizer: Local Search",
    "349": "Random Search",
    "350": "Acquisition Function Maximizer: Local Search",
    "351": "Random Search",
    "352": "Acquisition Function Maximizer: Local Search",
    "353": "Acquisition Function Maximizer: Local Search",
    "354": "Acquisition Function Maximizer: Local Search",
    "355": "Acquisition Function Maximizer: Local Search",
    "356": "Acquisition Function Maximizer: Local Search",
    "357": "Random Search",
    "358": "Acquisition Function Maximizer: Local Search",
    "359": "Acquisition Function Maximizer: Local Search",
    "360": "Acquisition Function Maximizer: Local Search",
    "361": "Acquisition Function Maximizer: Local Search",
    "362": "Acquisition Function Maximizer: Local Search",
    "363": "Random Search",
    "364": "Acquisition Function Maximizer: Local Search",
    "365": "Acquisition Function Maximizer: Local Search",
    "366": "Random Search",
    "367": "Acquisition Function Maximizer: Local Search",
    "368": "Acquisition Function Maximizer: Local Search",
    "369": "Acquisition Function Maximizer: Local Search",
    "370": "Acquisition Function Maximizer: Local Search",
    "371": "Acquisition Function Maximizer: Local Search",
    "372": "Acquisition Function Maximizer: Local Search",
    "373": "Acquisition Function Maximizer: Local Search",
    "374": "Acquisition Function Maximizer: Local Search",
    "375": "Acquisition Function Maximizer: Local Search",
    "376": "Acquisition Function Maximizer: Local Search",
    "377": "Acquisition Function Maximizer: Local Search",
    "378": "Acquisition Function Maximizer: Local Search",
    "379": "Acquisition Function Maximizer: Local Search",
    "380": "Acquisition Function Maximizer: Local Search",
    "381": "Random Search",
    "382": "Acquisition Function Maximizer: Local Search",
    "383": "Acquisition Function Maximizer: Local Search",
    "384": "Acquisition Function Maximizer: Local Search",
    "385": "Acquisition Function Maximizer: Local Search",
    "386": "Acquisition Function Maximizer: Local Search",
    "387": "Acquisition Function Maximizer: Local Search",
    "388": "Acquisition Function Maximizer: Local Search",
    "389": "Acquisition Function Maximizer: Local Search",
    "390": "Acquisition Function Maximizer: Local Search",
    "391": "Acquisition Function Maximizer: Local Search",
    "392": "Acquisition Function Maximizer: Local Search",
    "393": "Random Search",
    "394": "Acquisition Function Maximizer: Local Search",
    "395": "Acquisition Function Maximizer: Local Search",
    "396": "Random Search",
    "397": "Acquisition Function Maximizer: Local Search",
    "398": "Acquisition Function Maximizer: Local Search",
    "399": "Acquisition Function Maximizer: Local Search",
    "400": "Random Search",
    "401": "Acquisition Function Maximizer: Local Search",
    "402": "Acquisition Function Maximizer: Local Search",
    "403": "Acquisition Function Maximizer: Local Search"
  }
}