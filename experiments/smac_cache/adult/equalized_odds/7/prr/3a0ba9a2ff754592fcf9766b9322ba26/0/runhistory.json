{
  "stats": {
    "submitted": 964,
    "finished": 964,
    "running": 0
  },
  "data": [
    [
      1,
      null,
      209652396,
      null,
      [
        0.15242142816993115,
        0.09509218096733094
      ],
      90.594473361969,
      1,
      1742222359.3906283,
      1742222449.9869351,
      {}
    ],
    [
      2,
      null,
      209652396,
      null,
      [
        0.15177671023479405,
        0.08729303121566773
      ],
      39.21640634536743,
      1,
      1742222450.0108578,
      1742222489.2293155,
      {}
    ],
    [
      3,
      null,
      209652396,
      null,
      [
        0.15091674051254889,
        0.0915955412387848
      ],
      45.51028847694397,
      1,
      1742222489.2362661,
      1742222534.7489457,
      {}
    ],
    [
      4,
      null,
      209652396,
      null,
      [
        0.15242164508631573,
        0.0933007276058197
      ],
      495.0328929424286,
      1,
      1742222534.7734067,
      1742223029.8088026,
      {}
    ],
    [
      5,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742223029.8164499,
      1742223030.0555525,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      6,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742223030.768016,
      1742223030.854802,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      7,
      null,
      209652396,
      null,
      [
        0.15174590810818356,
        0.08846993327140809
      ],
      70.36677479743958,
      1,
      1742223030.8623362,
      1742223101.2309685,
      {}
    ],
    [
      8,
      null,
      209652396,
      null,
      [
        0.15094754735473298,
        0.09216531753540039
      ],
      51.03514790534973,
      1,
      1742223101.2403343,
      1742223152.2774947,
      {}
    ],
    [
      9,
      null,
      209652396,
      null,
      [
        0.15478637791512043,
        0.0848372733592987
      ],
      40.99060654640198,
      1,
      1742223152.2848818,
      1742223193.2773302,
      {}
    ],
    [
      10,
      null,
      209652396,
      null,
      [
        0.15199162721617812,
        0.08580725789070129
      ],
      139.27924489974976,
      1,
      1742223193.2874227,
      1742223332.5687158,
      {}
    ],
    [
      11,
      null,
      209652396,
      null,
      [
        0.15245229631457174,
        0.09909514427185058
      ],
      35.00841021537781,
      1,
      1742223332.5826871,
      1742223367.593668,
      {}
    ],
    [
      12,
      null,
      209652396,
      null,
      [
        0.15125451233235665,
        0.0838392460346222
      ],
      267.4942946434021,
      1,
      1742223367.6030986,
      1742223635.0992532,
      {}
    ],
    [
      13,
      null,
      209652396,
      null,
      [
        0.1503024427425625,
        0.08836154222488403
      ],
      48.77207636833191,
      1,
      1742223635.110034,
      1742223683.8841302,
      {}
    ],
    [
      14,
      null,
      209652396,
      null,
      [
        0.15002615257106272,
        0.08529444932937622
      ],
      145.17937207221985,
      1,
      1742223684.6757643,
      1742223829.8571196,
      {}
    ],
    [
      15,
      null,
      209652396,
      null,
      [
        0.15331221888108115,
        0.08966417789459229
      ],
      47.94878053665161,
      1,
      1742223829.8691707,
      1742223877.8200848,
      {}
    ],
    [
      16,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742223877.8329854,
      1742223914.079072,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      17,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742223914.0934532,
      1742223914.1341493,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      18,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742223914.1430428,
      1742223927.4730217,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      19,
      null,
      209652396,
      null,
      [
        0.1501182571541853,
        0.0951350724697113
      ],
      523.3046762943268,
      1,
      1742223927.4858713,
      1742224450.7924602,
      {}
    ],
    [
      20,
      null,
      209652396,
      null,
      [
        0.15021039003074932,
        0.09361679315567017
      ],
      87.99372839927673,
      1,
      1742224450.804021,
      1742224538.7997813,
      {}
    ],
    [
      21,
      null,
      209652396,
      null,
      [
        0.15165374693817807,
        0.09540881633758544
      ],
      36.776527881622314,
      1,
      1742224538.8105795,
      1742224575.588993,
      {}
    ],
    [
      22,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742224575.6031826,
      1742224575.7700922,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      23,
      null,
      209652396,
      null,
      [
        0.15165375636932524,
        0.08944362759590149
      ],
      71.59267377853394,
      1,
      1742224576.6047504,
      1742224648.1992066,
      {}
    ],
    [
      24,
      null,
      209652396,
      null,
      [
        0.14876690108726037,
        0.0912424921989441
      ],
      69.97139430046082,
      1,
      1742224648.2099562,
      1742224718.183439,
      {}
    ],
    [
      25,
      null,
      209652396,
      null,
      [
        0.1494732232756185,
        0.09122847914695739
      ],
      79.36180543899536,
      1,
      1742224718.1957586,
      1742224797.559962,
      {}
    ],
    [
      26,
      null,
      209652396,
      null,
      [
        0.1516538506807968,
        0.09087180197238923
      ],
      53.168375730514526,
      1,
      1742224797.574781,
      1742224850.7458565,
      {}
    ],
    [
      27,
      null,
      209652396,
      null,
      [
        0.1500260582595912,
        0.08447641372680666
      ],
      44.445568323135376,
      1,
      1742224850.7581227,
      1742224895.2056708,
      {}
    ],
    [
      28,
      null,
      209652396,
      null,
      [
        0.15045602425841947,
        0.0910186505317688
      ],
      181.46616673469543,
      1,
      1742224895.2198198,
      1742225076.6881847,
      {}
    ],
    [
      29,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742225076.701533,
      1742225186.9468765,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      30,
      null,
      209652396,
      null,
      [
        0.15100892526042226,
        0.09505706191062926
      ],
      55.87246060371399,
      1,
      1742225186.9679437,
      1742225242.8423903,
      {}
    ],
    [
      31,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742225243.7813675,
      1742225243.8264914,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      32,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742225243.8400002,
      1742225243.914376,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      33,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742225243.9274049,
      1742225244.7105927,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      34,
      null,
      209652396,
      null,
      [
        0.14888974177896333,
        0.08892847418785096
      ],
      126.28287982940674,
      1,
      1742225244.7238376,
      1742225371.0086486,
      {}
    ],
    [
      35,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742225371.0232408,
      1742225504.0037963,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      36,
      null,
      209652396,
      null,
      [
        0.15073263508892248,
        0.09064537644386292
      ],
      437.09520411491394,
      1,
      1742225504.0217483,
      1742225941.119562,
      {}
    ],
    [
      37,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742225941.1338854,
      1742225941.198087,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      38,
      null,
      209652396,
      null,
      [
        0.1520835101673425,
        0.08537015199661255
      ],
      149.558678150177,
      1,
      1742225942.4326088,
      1742226091.9931285,
      {}
    ],
    [
      39,
      null,
      209652396,
      null,
      [
        0.1485520737017743,
        0.08801226854324341
      ],
      441.19868564605713,
      1,
      1742226092.0113854,
      1742226533.2126582,
      {}
    ],
    [
      40,
      null,
      209652396,
      null,
      [
        0.15131601284295895,
        0.09409090518951416
      ],
      204.75943231582642,
      1,
      1742226533.231497,
      1742226737.9934826,
      {}
    ],
    [
      41,
      null,
      209652396,
      null,
      [
        0.149534766226383,
        0.09539117217063904
      ],
      676.5297346115112,
      1,
      1742226738.0082228,
      1742227414.539994,
      {}
    ],
    [
      42,
      null,
      209652396,
      null,
      [
        0.15196094297890705,
        0.09372139811515809
      ],
      50.87558174133301,
      1,
      1742227414.5547316,
      1742227465.4323514,
      {}
    ],
    [
      43,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742227465.446325,
      1742227465.4904969,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      44,
      null,
      209652396,
      null,
      [
        0.15451002644116416,
        0.08628692567348481
      ],
      38.793763160705566,
      1,
      1742227465.5085075,
      1742227504.3045745,
      {}
    ],
    [
      45,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742227504.3192267,
      1742227504.4125156,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      46,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742227505.4772944,
      1742227509.3312118,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      47,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742227509.3475857,
      1742227509.4246173,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      48,
      null,
      209652396,
      null,
      [
        0.15103954347966322,
        0.09292941927909851
      ],
      75.25924301147461,
      1,
      1742227509.4393115,
      1742227584.7003422,
      {}
    ],
    [
      49,
      null,
      209652396,
      null,
      [
        0.15140801368346277,
        0.0898073410987854
      ],
      64.95229744911194,
      1,
      1742227584.7186785,
      1742227649.673301,
      {}
    ],
    [
      50,
      null,
      209652396,
      null,
      [
        0.15420274552011076,
        0.09126408338546751
      ],
      52.20114231109619,
      1,
      1742227649.6888053,
      1742227701.8918269,
      {}
    ],
    [
      51,
      null,
      209652396,
      null,
      [
        0.15260585896813442,
        0.08835349321365357
      ],
      81.60956573486328,
      1,
      1742227701.9072216,
      1742227783.5188541,
      {}
    ],
    [
      52,
      null,
      209652396,
      null,
      [
        0.15116250677627924,
        0.10143813133239746
      ],
      112.6321930885315,
      1,
      1742227783.534749,
      1742227896.1690555,
      {}
    ],
    [
      53,
      null,
      209652396,
      null,
      [
        0.15521633919837513,
        0.08443198680877687
      ],
      43.406983375549316,
      1,
      1742227896.1858997,
      1742227939.5948846,
      {}
    ],
    [
      54,
      null,
      209652396,
      null,
      [
        0.1511009685410883,
        0.08428308606147765
      ],
      36.338568925857544,
      1,
      1742227940.9064558,
      1742227977.246822,
      {}
    ],
    [
      55,
      null,
      209652396,
      null,
      [
        0.15236018701587564,
        0.08885607004165649
      ],
      73.99001908302307,
      1,
      1742227977.2652018,
      1742228051.2570841,
      {}
    ],
    [
      56,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742228051.2745328,
      1742228059.9908066,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      57,
      null,
      209652396,
      null,
      [
        0.14999538345346727,
        0.08989988684654235
      ],
      93.07885885238647,
      1,
      1742228060.0098448,
      1742228153.090617,
      {}
    ],
    [
      58,
      null,
      209652396,
      null,
      [
        0.18116617832186693,
        0.06735529065132141
      ],
      174.07476353645325,
      1,
      1742228153.1079109,
      1742228327.184755,
      {}
    ],
    [
      59,
      null,
      209652396,
      null,
      [
        0.1521758363824232,
        0.09840415954589844
      ],
      53.822333335876465,
      1,
      1742228327.2046664,
      1742228381.028983,
      {}
    ],
    [
      60,
      null,
      209652396,
      null,
      [
        0.15159241618822455,
        0.08532963871955872
      ],
      46.679707765579224,
      1,
      1742228381.0473344,
      1742228427.7289617,
      {}
    ],
    [
      61,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742228427.7479863,
      1742228427.8617914,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      62,
      null,
      209652396,
      null,
      [
        0.15177657348316032,
        0.08972877264022827
      ],
      37.52341914176941,
      1,
      1742228429.1101735,
      1742228466.635342,
      {}
    ],
    [
      63,
      null,
      209652396,
      null,
      [
        0.14999541646248232,
        0.09404556155204773
      ],
      133.38470101356506,
      1,
      1742228466.6548276,
      1742228600.0414472,
      {}
    ],
    [
      64,
      null,
      209652396,
      null,
      [
        0.15220653476641502,
        0.10309612870216371
      ],
      65.36981534957886,
      1,
      1742228600.0615013,
      1742228665.4333298,
      {}
    ],
    [
      65,
      null,
      209652396,
      null,
      [
        0.1501489083824413,
        0.08672639608383179
      ],
      172.69701027870178,
      1,
      1742228665.4533603,
      1742228838.1523244,
      {}
    ],
    [
      66,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742228838.1730983,
      1742228838.25618,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      67,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742228838.2759976,
      1742228838.3536487,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      68,
      null,
      209652396,
      null,
      [
        0.1529129937064069,
        0.08567828774452209
      ],
      65.65740013122559,
      1,
      1742228838.373953,
      1742228904.0332608,
      {}
    ],
    [
      69,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742228904.0576544,
      1742228959.3321207,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      70,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742228959.3666263,
      1742228959.43676,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      71,
      null,
      209652396,
      null,
      [
        0.1550320923075414,
        0.08731979370117186
      ],
      36.6246440410614,
      1,
      1742228960.715479,
      1742228997.3418832,
      {}
    ],
    [
      72,
      null,
      209652396,
      null,
      [
        0.15060970008574798,
        0.09365260720252991
      ],
      536.8565349578857,
      1,
      1742228997.3674185,
      1742229534.2258976,
      {}
    ],
    [
      73,
      null,
      209652396,
      null,
      [
        0.15054816185055703,
        0.09584280729293825
      ],
      44.50284934043884,
      1,
      1742229534.2482858,
      1742229578.7530649,
      {}
    ],
    [
      74,
      null,
      209652396,
      null,
      [
        0.1503025512007548,
        0.09179251074790953
      ],
      51.872934341430664,
      1,
      1742229578.779253,
      1742229630.6540487,
      {}
    ],
    [
      75,
      null,
      209652396,
      null,
      [
        0.1515924680595339,
        0.1008322525024414
      ],
      46.79888892173767,
      1,
      1742229630.675874,
      1742229677.4766672,
      {}
    ],
    [
      76,
      null,
      209652396,
      null,
      [
        0.1541722357590621,
        0.08569108605384826
      ],
      44.35741090774536,
      1,
      1742229677.4973257,
      1742229721.8565612,
      {}
    ],
    [
      77,
      null,
      209652396,
      null,
      [
        0.15226798812128153,
        0.08553709745407105
      ],
      56.02541470527649,
      1,
      1742229721.8779297,
      1742229777.905243,
      {}
    ],
    [
      78,
      null,
      209652396,
      null,
      [
        0.15257510399725968,
        0.09046399474143982
      ],
      71.64544034004211,
      1,
      1742229779.4945366,
      1742229851.1417422,
      {}
    ],
    [
      79,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742229851.1670654,
      1742229851.262025,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      80,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742229851.2858317,
      1742229851.3680718,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      81,
      null,
      209652396,
      null,
      [
        0.15985382287777497,
        0.08716514110565185
      ],
      35.30531883239746,
      1,
      1742229851.390739,
      1742229886.697827,
      {}
    ],
    [
      82,
      null,
      209652396,
      null,
      [
        0.1520838968443759,
        0.09381885528564453
      ],
      49.234602212905884,
      1,
      1742229886.7197516,
      1742229935.9561694,
      {}
    ],
    [
      83,
      null,
      209652396,
      null,
      [
        0.18165897933862002,
        0.07686565399169923
      ],
      33.65250277519226,
      1,
      1742229935.979385,
      1742229969.6337202,
      {}
    ],
    [
      84,
      null,
      209652396,
      null,
      [
        0.1484904930264212,
        0.0893759298324585
      ],
      150.45313501358032,
      1,
      1742229969.6591194,
      1742230120.1141148,
      {}
    ],
    [
      85,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742230120.1397772,
      1742230120.2192612,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      86,
      null,
      209652396,
      null,
      [
        0.1496576587893953,
        0.09297961354255677
      ],
      546.0283336639404,
      1,
      1742230121.7158864,
      1742230667.7460444,
      {}
    ],
    [
      87,
      null,
      209652396,
      null,
      [
        0.1503639479687384,
        0.09708959937095643
      ],
      134.93116450309753,
      1,
      1742230667.7719202,
      1742230802.705112,
      {}
    ],
    [
      88,
      null,
      209652396,
      null,
      [
        0.15226805413931163,
        0.08898481011390687
      ],
      63.29181098937988,
      1,
      1742230802.7313614,
      1742230866.0251231,
      {}
    ],
    [
      89,
      null,
      209652396,
      null,
      [
        0.1508551975617844,
        0.09739260196685792
      ],
      135.2681589126587,
      1,
      1742230866.0508826,
      1742231001.3210642,
      {}
    ],
    [
      90,
      null,
      209652396,
      null,
      [
        0.15232946033844236,
        0.09822469830513
      ],
      40.21853160858154,
      1,
      1742231001.3473704,
      1742231041.5678842,
      {}
    ],
    [
      91,
      null,
      209652396,
      null,
      [
        0.1530666459558675,
        0.090969135761261
      ],
      58.46892738342285,
      1,
      1742231041.5928118,
      1742231100.063611,
      {}
    ],
    [
      92,
      null,
      209652396,
      null,
      [
        0.15211452449476398,
        0.08093644618988037
      ],
      116.1561553478241,
      1,
      1742231100.0904374,
      1742231216.2489262,
      {}
    ],
    [
      93,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742231216.2813857,
      1742231216.3668916,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      94,
      null,
      209652396,
      null,
      [
        0.15232946976958953,
        0.09456449866294861
      ],
      118.25805354118347,
      1,
      1742231217.9397442,
      1742231336.1996307,
      {}
    ],
    [
      95,
      null,
      209652396,
      null,
      [
        0.14910474835624535,
        0.08199084758758544
      ],
      79.35941171646118,
      1,
      1742231336.2331932,
      1742231415.5946734,
      {}
    ],
    [
      96,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742231415.6214745,
      1742231447.518632,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      97,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742231447.5442617,
      1742231449.7541194,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      98,
      null,
      209652396,
      null,
      [
        0.15150023144035119,
        0.08749396920204162
      ],
      98.92048478126526,
      1,
      1742231449.779942,
      1742231548.7021463,
      {}
    ],
    [
      99,
      null,
      209652396,
      null,
      [
        0.15082464064499992,
        0.09124176025390625
      ],
      63.28830909729004,
      1,
      1742231548.728476,
      1742231612.0187883,
      {}
    ],
    [
      100,
      null,
      209652396,
      null,
      [
        0.15091672636582815,
        0.08129437863826752
      ],
      90.04120135307312,
      1,
      1742231612.050089,
      1742231702.0933268,
      {}
    ],
    [
      101,
      null,
      209652396,
      null,
      [
        0.14999534572887865,
        0.09349564671516418
      ],
      265.9397258758545,
      1,
      1742231702.1272027,
      1742231968.0689592,
      {}
    ],
    [
      102,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742231969.873195,
      1742231996.350484,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      103,
      null,
      209652396,
      null,
      [
        0.1524523481858811,
        0.08641915440559388
      ],
      96.12572455406189,
      1,
      1742231996.383666,
      1742232092.5116694,
      {}
    ],
    [
      104,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742232092.5412908,
      1742232111.5236547,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      105,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742232111.5530455,
      1742232111.6332653,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      106,
      null,
      209652396,
      null,
      [
        0.149964656776034,
        0.09812615633010865
      ],
      84.74405336380005,
      1,
      1742232111.6616282,
      1742232196.4074728,
      {}
    ],
    [
      107,
      null,
      209652396,
      null,
      [
        0.14925836288111735,
        0.0898124659061432
      ],
      106.22495746612549,
      1,
      1742232196.4375207,
      1742232302.6645098,
      {}
    ],
    [
      108,
      null,
      209652396,
      null,
      [
        0.14950403483337615,
        0.09195054292678832
      ],
      90.05897498130798,
      1,
      1742232302.6943288,
      1742232392.7553732,
      {}
    ],
    [
      109,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742232392.7905266,
      1742232392.896382,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      110,
      null,
      209652396,
      null,
      [
        0.15291282866133166,
        0.09468606114387512
      ],
      271.3650949001312,
      1,
      1742232394.725378,
      1742232666.092353,
      {}
    ],
    [
      111,
      null,
      209652396,
      null,
      [
        0.15592268024902753,
        0.0831392478942871
      ],
      42.870909690856934,
      1,
      1742232666.1232018,
      1742232708.9961462,
      {}
    ],
    [
      112,
      null,
      209652396,
      null,
      [
        0.15064031358941538,
        0.09335780739784241
      ],
      137.57852721214294,
      1,
      1742232709.0254042,
      1742232846.6058695,
      {}
    ],
    [
      113,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742232846.6448784,
      1742232846.7038195,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      114,
      null,
      209652396,
      null,
      [
        0.15239095141789755,
        0.08787239074707032
      ],
      134.4945363998413,
      1,
      1742232846.7420187,
      1742232981.2389302,
      {}
    ],
    [
      115,
      null,
      209652396,
      null,
      [
        0.1532200105553399,
        0.08899490356445312
      ],
      74.32991147041321,
      1,
      1742232981.269878,
      1742233055.6017902,
      {}
    ],
    [
      116,
      null,
      209652396,
      null,
      [
        0.14996471807849054,
        0.0936260449886322
      ],
      136.2048032283783,
      1,
      1742233055.638431,
      1742233191.845262,
      {}
    ],
    [
      117,
      null,
      209652396,
      null,
      [
        0.15223731803073118,
        0.0889855921268463
      ],
      71.95270133018494,
      1,
      1742233191.882802,
      1742233263.8375242,
      {}
    ],
    [
      118,
      null,
      209652396,
      null,
      [
        0.15266729346070665,
        0.08574156403541565
      ],
      55.51562142372131,
      1,
      1742233265.8170178,
      1742233321.3344748,
      {}
    ],
    [
      119,
      null,
      209652396,
      null,
      [
        0.15137756522487059,
        0.08348764419555663
      ],
      585.310304403305,
      1,
      1742233321.370258,
      1742233906.6825602,
      {}
    ],
    [
      120,
      null,
      209652396,
      null,
      [
        0.1511008836607639,
        0.0932216799259186
      ],
      47.415810346603394,
      1,
      1742233906.724317,
      1742233954.142754,
      {}
    ],
    [
      121,
      null,
      209652396,
      null,
      [
        0.1513159138159138,
        0.09269805431365967
      ],
      70.78267240524292,
      1,
      1742233954.173759,
      1742234024.9583309,
      {}
    ],
    [
      122,
      null,
      209652396,
      null,
      [
        0.14753846587678923,
        0.09449587464332582
      ],
      194.18865728378296,
      1,
      1742234024.9903905,
      1742234219.1810572,
      {}
    ],
    [
      123,
      null,
      209652396,
      null,
      [
        0.15223729916843692,
        0.08907310247421266
      ],
      37.546552419662476,
      1,
      1742234219.2173686,
      1742234256.7659698,
      {}
    ],
    [
      124,
      null,
      209652396,
      null,
      [
        0.1512238045172177,
        0.09359843015670777
      ],
      133.04508423805237,
      1,
      1742234256.7996213,
      1742234389.8465362,
      {}
    ],
    [
      125,
      null,
      209652396,
      null,
      [
        0.1496882770086363,
        0.09527801156044007
      ],
      150.41451144218445,
      1,
      1742234389.8822463,
      1742234540.2988074,
      {}
    ],
    [
      126,
      null,
      209652396,
      null,
      [
        0.15103956234195753,
        0.09679415702819824
      ],
      45.57889199256897,
      1,
      1742234542.1967373,
      1742234587.7776659,
      {}
    ],
    [
      127,
      null,
      209652396,
      null,
      [
        0.14996473222521128,
        0.09602503299713135
      ],
      182.10350108146667,
      1,
      1742234587.8129833,
      1742234769.9185312,
      {}
    ],
    [
      128,
      null,
      209652396,
      null,
      [
        0.15165380824063457,
        0.08283569812774659
      ],
      35.43329906463623,
      1,
      1742234769.955158,
      1742234805.3904936,
      {}
    ],
    [
      129,
      null,
      209652396,
      null,
      [
        0.15076305053849964,
        0.09716248154640197
      ],
      72.71335911750793,
      1,
      1742234805.425138,
      1742234878.1403508,
      {}
    ],
    [
      130,
      null,
      209652396,
      null,
      [
        0.1505789969861826,
        0.08385784983634947
      ],
      150.92561626434326,
      1,
      1742234878.1827655,
      1742235029.1104467,
      {}
    ],
    [
      131,
      null,
      209652396,
      null,
      [
        0.1523602153093171,
        0.08864400506019593
      ],
      50.40552544593811,
      1,
      1742235029.1472244,
      1742235079.5547342,
      {}
    ],
    [
      132,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742235079.5903504,
      1742235079.6831975,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      133,
      null,
      209652396,
      null,
      [
        0.14916615927094967,
        0.08436258673667907
      ],
      85.59210562705994,
      1,
      1742235079.7192185,
      1742235165.3130941,
      {}
    ],
    [
      134,
      null,
      209652396,
      null,
      [
        0.1501489932627657,
        0.0981746244430542
      ],
      76.02884244918823,
      1,
      1742235167.306727,
      1742235243.3376176,
      {}
    ],
    [
      135,
      null,
      209652396,
      null,
      [
        0.1596080660451918,
        0.08805813193321228
      ],
      41.30982780456543,
      1,
      1742235243.3754194,
      1742235284.6872702,
      {}
    ],
    [
      136,
      null,
      209652396,
      null,
      [
        0.14864411698244034,
        0.08715094804763794
      ],
      102.33921790122986,
      1,
      1742235284.7337353,
      1742235387.0754297,
      {}
    ],
    [
      137,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742235387.1169355,
      1742235387.1681166,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      138,
      null,
      209652396,
      null,
      [
        0.15002608655303265,
        0.08789791345596314
      ],
      108.87418532371521,
      1,
      1742235387.207999,
      1742235496.0840268,
      {}
    ],
    [
      139,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742235496.1251547,
      1742235596.9049911,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      140,
      null,
      209652396,
      null,
      [
        0.1493504674642399,
        0.0925748610496521
      ],
      56.61708974838257,
      1,
      1742235596.9598804,
      1742235653.5795977,
      {}
    ],
    [
      141,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742235653.6239865,
      1742235685.462992,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      142,
      null,
      209652396,
      null,
      [
        0.15153096754893164,
        0.09186221837997437
      ],
      42.01551651954651,
      1,
      1742235687.6847339,
      1742235729.7021139,
      {}
    ],
    [
      143,
      null,
      209652396,
      null,
      [
        0.15321979835452887,
        0.08752322673797608
      ],
      76.99378871917725,
      1,
      1742235729.7462006,
      1742235806.7418423,
      {}
    ],
    [
      144,
      null,
      209652396,
      null,
      [
        0.15352733863212903,
        0.08352431893348694
      ],
      65.50890731811523,
      1,
      1742235806.7885072,
      1742235872.2994215,
      {}
    ],
    [
      145,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742235872.3416274,
      1742235872.4011786,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      146,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742235872.4417639,
      1742235872.6561708,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      147,
      null,
      209652396,
      null,
      [
        0.15263659036114127,
        0.08874350428581239
      ],
      45.364553451538086,
      1,
      1742235872.6977594,
      1742235918.0640652,
      {}
    ],
    [
      148,
      null,
      209652396,
      null,
      [
        0.1501489932627657,
        0.08655299305915833
      ],
      91.35930490493774,
      1,
      1742235918.1056786,
      1742236009.4668443,
      {}
    ],
    [
      149,
      null,
      209652396,
      null,
      [
        0.15119318629797673,
        0.10023367285728453
      ],
      597.0066664218903,
      1,
      1742236009.5121276,
      1742236606.5208461,
      {}
    ],
    [
      150,
      null,
      209652396,
      null,
      [
        0.15146954720308015,
        0.08563536882400513
      ],
      66.05664873123169,
      1,
      1742236608.840856,
      1742236674.899481,
      {}
    ],
    [
      151,
      null,
      209652396,
      null,
      [
        0.15005681794603948,
        0.0949256145954132
      ],
      154.33685684204102,
      1,
      1742236674.9427564,
      1742236829.2814484,
      {}
    ],
    [
      152,
      null,
      209652396,
      null,
      [
        0.14959617242551376,
        0.09631613850593565
      ],
      50.85220289230347,
      1,
      1742236829.325313,
      1742236880.1794653,
      {}
    ],
    [
      153,
      null,
      209652396,
      null,
      [
        0.1548478689945756,
        0.08882658958435058
      ],
      37.605042934417725,
      1,
      1742236880.2214282,
      1742236917.8282678,
      {}
    ],
    [
      154,
      null,
      209652396,
      null,
      [
        0.14941183593878202,
        0.08471197485923768
      ],
      335.8110320568085,
      1,
      1742236917.876127,
      1742237253.6891,
      {}
    ],
    [
      155,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742237253.7339551,
      1742237253.8381958,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      156,
      null,
      209652396,
      null,
      [
        0.15435629874252627,
        0.08857463836669924
      ],
      41.86699366569519,
      1,
      1742237253.8824155,
      1742237295.7511482,
      {}
    ],
    [
      157,
      null,
      209652396,
      null,
      [
        0.1515309722645052,
        0.09645145177841187
      ],
      36.99364423751831,
      1,
      1742237295.7943556,
      1742237332.7898157,
      {}
    ],
    [
      158,
      null,
      209652396,
      null,
      [
        0.1507017716598555,
        0.0849523091316223
      ],
      34.70524287223816,
      1,
      1742237332.8712225,
      1742237367.5782006,
      {}
    ],
    [
      159,
      null,
      209652396,
      null,
      [
        0.15423336845492536,
        0.09118587017059326
      ],
      63.61802673339844,
      1,
      1742237369.857519,
      1742237433.4774966,
      {}
    ],
    [
      160,
      null,
      209652396,
      null,
      [
        0.15186864034169423,
        0.09458769321441651
      ],
      63.38164305686951,
      1,
      1742237433.5228257,
      1742237496.9062726,
      {}
    ],
    [
      161,
      null,
      209652396,
      null,
      [
        0.14882835915770048,
        0.09313843011856078
      ],
      247.35523653030396,
      1,
      1742237496.952823,
      1742237744.309948,
      {}
    ],
    [
      162,
      null,
      209652396,
      null,
      [
        0.15079393282986098,
        0.09985738039016724
      ],
      180.11946535110474,
      1,
      1742237744.355653,
      1742237924.4771817,
      {}
    ],
    [
      163,
      null,
      209652396,
      null,
      [
        0.15030238615567953,
        0.08415494561195372
      ],
      129.1958155632019,
      1,
      1742237924.523455,
      1742238053.7216127,
      {}
    ],
    [
      164,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742238053.7715313,
      1742238073.911011,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      165,
      null,
      209652396,
      null,
      [
        0.1502718481011894,
        0.08983645677566529
      ],
      57.45967745780945,
      1,
      1742238073.9573567,
      1742238131.4188445,
      {}
    ],
    [
      166,
      null,
      209652396,
      null,
      [
        0.15094738230965776,
        0.09366404294967651
      ],
      95.61324214935303,
      1,
      1742238133.9278412,
      1742238229.5430148,
      {}
    ],
    [
      167,
      null,
      209652396,
      null,
      [
        0.15153089681532791,
        0.08313761353492737
      ],
      65.26844143867493,
      1,
      1742238229.589132,
      1742238294.859637,
      {}
    ],
    [
      168,
      null,
      209652396,
      null,
      [
        0.1518686261949735,
        0.10049596905708313
      ],
      786.3227128982544,
      1,
      1742238294.9116268,
      1742239081.2364047,
      {}
    ],
    [
      169,
      null,
      209652396,
      null,
      [
        0.15162303912303912,
        0.08769616484642029
      ],
      60.01240420341492,
      1,
      1742239081.2836225,
      1742239141.2979746,
      {}
    ],
    [
      170,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742239141.344296,
      1742239141.4269063,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      171,
      null,
      209652396,
      null,
      [
        0.14974976337251786,
        0.08833677172660828
      ],
      260.7472257614136,
      1,
      1742239141.4735723,
      1742239402.2226498,
      {}
    ],
    [
      172,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742239402.270587,
      1742239402.351983,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      173,
      null,
      209652396,
      null,
      [
        0.1511009449632204,
        0.08485990524291992
      ],
      48.812702894210815,
      1,
      1742239402.3986135,
      1742239451.2130907,
      {}
    ],
    [
      174,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742239453.6371713,
      1742239504.3533177,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      175,
      null,
      209652396,
      null,
      [
        0.1503025842097698,
        0.093762686252594
      ],
      40.63066911697388,
      1,
      1742239504.4026465,
      1742239545.0351844,
      {}
    ],
    [
      176,
      null,
      209652396,
      null,
      [
        0.18967586467586467,
        0.06369242787361144
      ],
      68.79892182350159,
      1,
      1742239545.0872476,
      1742239613.8880117,
      {}
    ],
    [
      177,
      null,
      209652396,
      null,
      [
        0.15085523528637304,
        0.0915389496088028
      ],
      72.47968697547913,
      1,
      1742239613.940134,
      1742239686.4216592,
      {}
    ],
    [
      178,
      null,
      209652396,
      null,
      [
        0.1513774661978255,
        0.08565912187099456
      ],
      41.23535966873169,
      1,
      1742239686.473391,
      1742239727.710528,
      {}
    ],
    [
      179,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742239727.762104,
      1742239745.5392857,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      180,
      null,
      209652396,
      null,
      [
        0.15211458108164697,
        0.08290311455726623
      ],
      35.99991965293884,
      1,
      1742239745.5933552,
      1742239781.5952225,
      {}
    ],
    [
      181,
      null,
      209652396,
      null,
      [
        0.14962688024065268,
        0.09546475052833557
      ],
      694.83220744133,
      1,
      1742239781.6494303,
      1742240476.4835334,
      {}
    ],
    [
      182,
      null,
      209652396,
      null,
      [
        0.15260586368370796,
        0.08809510588645936
      ],
      421.716504573822,
      1,
      1742240478.9129176,
      1742240900.6314719,
      {}
    ],
    [
      183,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742240900.7010748,
      1742240900.7968395,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      184,
      null,
      209652396,
      null,
      [
        0.15189940002814253,
        0.08598025083541869
      ],
      84.7510416507721,
      1,
      1742240900.8494706,
      1742240985.602289,
      {}
    ],
    [
      185,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742240985.6557279,
      1742240985.733461,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      186,
      null,
      209652396,
      null,
      [
        0.15226806828603237,
        0.09465214729309082
      ],
      44.17697834968567,
      1,
      1742240985.7869604,
      1742241029.9656603,
      {}
    ],
    [
      187,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742241030.0186713,
      1742241050.5041203,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      188,
      null,
      209652396,
      null,
      [
        0.15196090996989198,
        0.09110897183418273
      ],
      34.957019567489624,
      1,
      1742241050.5592697,
      1742241085.5182395,
      {}
    ],
    [
      189,
      null,
      209652396,
      null,
      [
        0.15085534846013887,
        0.09137555360794067
      ],
      116.76294112205505,
      1,
      1742241085.5869174,
      1742241202.3517323,
      {}
    ],
    [
      190,
      null,
      209652396,
      null,
      [
        0.14858261175626444,
        0.09195698618888856
      ],
      46.01504993438721,
      1,
      1742241205.1134171,
      1742241251.1302843,
      {}
    ],
    [
      191,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742241251.1839802,
      1742241354.654495,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      192,
      null,
      209652396,
      null,
      [
        0.15171521915533892,
        0.09419229626655579
      ],
      117.47307085990906,
      1,
      1742241354.7158358,
      1742241472.191496,
      {}
    ],
    [
      193,
      null,
      209652396,
      null,
      [
        0.15140808441706644,
        0.0914568042755127
      ],
      130.89125871658325,
      1,
      1742241472.251948,
      1742241603.145998,
      {}
    ],
    [
      194,
      null,
      209652396,
      null,
      [
        0.1518686922130036,
        0.09140796542167665
      ],
      41.21402192115784,
      1,
      1742241603.2020187,
      1742241644.4179487,
      {}
    ],
    [
      195,
      null,
      209652396,
      null,
      [
        0.1529743716120962,
        0.08672466158866883
      ],
      44.266197681427,
      1,
      1742241644.4727068,
      1742241688.7406907,
      {}
    ],
    [
      196,
      null,
      209652396,
      null,
      [
        0.15208372236815348,
        0.08725627899169923
      ],
      54.811728715896606,
      1,
      1742241688.7962234,
      1742241743.609764,
      {}
    ],
    [
      197,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742241743.66744,
      1742241743.7505603,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      198,
      null,
      209652396,
      null,
      [
        0.14993390652073288,
        0.08887510776519776
      ],
      100.66384363174438,
      1,
      1742241743.85839,
      1742241844.5239415,
      {}
    ],
    [
      199,
      null,
      209652396,
      null,
      [
        0.15131607886098902,
        0.09100609064102173
      ],
      39.12364959716797,
      1,
      1742241847.2205427,
      1742241886.3462098,
      {}
    ],
    [
      200,
      null,
      209652396,
      null,
      [
        0.15146965094569884,
        0.09368575215339661
      ],
      49.16689348220825,
      1,
      1742241886.4020789,
      1742241935.5708318,
      {}
    ],
    [
      201,
      null,
      209652396,
      null,
      [
        0.15088604684413068,
        0.09857019662857056
      ],
      55.59960603713989,
      1,
      1742241935.6272616,
      1742241991.2286918,
      {}
    ],
    [
      202,
      null,
      209652396,
      null,
      [
        0.15365002370990394,
        0.0902065908908844
      ],
      499.7599546909332,
      1,
      1742241991.284056,
      1742242491.0458488,
      {}
    ],
    [
      203,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742242491.1041675,
      1742242491.181786,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      204,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742242491.23875,
      1742242491.3754447,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      205,
      null,
      209652396,
      null,
      [
        0.15122392712213073,
        0.08355343103408812
      ],
      116.00263166427612,
      1,
      1742242491.4330242,
      1742242607.4374187,
      {}
    ],
    [
      206,
      null,
      209652396,
      null,
      [
        0.1523601728691549,
        0.08459332108497619
      ],
      121.56302666664124,
      1,
      1742242610.358443,
      1742242731.9235954,
      {}
    ],
    [
      207,
      null,
      209652396,
      null,
      [
        0.1503024474581361,
        0.09174239993095398
      ],
      104.47487664222717,
      1,
      1742242732.0002003,
      1742242836.4776444,
      {}
    ],
    [
      208,
      null,
      209652396,
      null,
      [
        0.14993394896089507,
        0.0918713355064392
      ],
      102.4305567741394,
      1,
      1742242836.5373785,
      1742242938.970004,
      {}
    ],
    [
      209,
      null,
      209652396,
      null,
      [
        0.16160423907429897,
        0.09181991338729859
      ],
      35.305572271347046,
      1,
      1742242939.030311,
      1742242974.3378766,
      {}
    ],
    [
      210,
      null,
      209652396,
      null,
      [
        0.1497496926389142,
        0.08547552824020385
      ],
      53.776870250701904,
      1,
      1742242974.3960612,
      1742243028.1746964,
      {}
    ],
    [
      211,
      null,
      209652396,
      null,
      [
        0.15057891210585822,
        0.0886587929725647
      ],
      94.59789276123047,
      1,
      1742243028.234537,
      1742243122.8342643,
      {}
    ],
    [
      212,
      null,
      209652396,
      null,
      [
        0.15260586368370796,
        0.08694437026977538
      ],
      52.52072596549988,
      1,
      1742243122.8945863,
      1742243175.4172978,
      {}
    ],
    [
      213,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742243175.476822,
      1742243175.5568202,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      214,
      null,
      209652396,
      null,
      [
        0.15174586566802134,
        0.09313079953193663
      ],
      59.9756543636322,
      1,
      1742243178.436652,
      1742243238.4143972,
      {}
    ],
    [
      215,
      null,
      209652396,
      null,
      [
        0.15217591183160048,
        0.08388188004493713
      ],
      43.28260517120361,
      1,
      1742243238.4755065,
      1742243281.7601564,
      {}
    ],
    [
      216,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742243281.8201315,
      1742243347.3685644,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      217,
      null,
      209652396,
      null,
      [
        0.15097823630757765,
        0.09351964592933655
      ],
      442.49716114997864,
      1,
      1742243347.4305177,
      1742243789.929638,
      {}
    ],
    [
      218,
      null,
      209652396,
      null,
      [
        0.15100889225140723,
        0.09128472447395325
      ],
      82.29347348213196,
      1,
      1742243789.9916325,
      1742243872.2872298,
      {}
    ],
    [
      219,
      null,
      209652396,
      null,
      [
        0.152605896692723,
        0.09364393949508668
      ],
      49.987492084503174,
      1,
      1742243872.34943,
      1742243922.338998,
      {}
    ],
    [
      220,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742243922.4150343,
      1742243922.5180948,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      221,
      null,
      209652396,
      null,
      [
        0.15371150064263836,
        0.09293934226036074
      ],
      83.07087659835815,
      1,
      1742243922.591562,
      1742244005.6643074,
      {}
    ],
    [
      222,
      null,
      209652396,
      null,
      [
        0.149227659781552,
        0.08855512738227846
      ],
      179.20777416229248,
      1,
      1742244008.744673,
      1742244187.95469,
      {}
    ],
    [
      223,
      null,
      209652396,
      null,
      [
        0.1510704021931567,
        0.08755428194999695
      ],
      61.890597105026245,
      1,
      1742244188.0204241,
      1742244249.9135864,
      {}
    ],
    [
      224,
      null,
      209652396,
      null,
      [
        0.15171524744878034,
        0.09066838264465331
      ],
      95.55495810508728,
      1,
      1742244249.9757473,
      1742244345.5327194,
      {}
    ],
    [
      225,
      null,
      209652396,
      null,
      [
        0.1511931108487995,
        0.09103543877601623
      ],
      86.8071870803833,
      1,
      1742244345.5954294,
      1742244432.4045658,
      {}
    ],
    [
      226,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742244432.4707284,
      1742244530.4948654,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      227,
      null,
      209652396,
      null,
      [
        0.1529743433186547,
        0.09464296102523803
      ],
      51.315624475479126,
      1,
      1742244530.559378,
      1742244581.8770723,
      {}
    ],
    [
      228,
      null,
      209652396,
      null,
      [
        0.16584240798312655,
        0.0927680480480194
      ],
      42.24249482154846,
      1,
      1742244581.9407353,
      1742244624.1852608,
      {}
    ],
    [
      229,
      null,
      209652396,
      null,
      [
        0.15150028331166057,
        0.09494508624076843
      ],
      156.94354009628296,
      1,
      1742244624.2479844,
      1742244781.1934118,
      {}
    ],
    [
      230,
      null,
      209652396,
      null,
      [
        0.14993394424532153,
        0.09243496537208558
      ],
      58.46177577972412,
      1,
      1742244781.3578987,
      1742244839.822091,
      {}
    ],
    [
      231,
      null,
      209652396,
      null,
      [
        0.1520223963337736,
        0.09315296053886414
      ],
      41.74164056777954,
      1,
      1742244842.901222,
      1742244884.6447268,
      {}
    ],
    [
      232,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742244884.7089622,
      1742244898.5326488,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      233,
      null,
      209652396,
      null,
      [
        0.15051741159525592,
        0.0940999436378479
      ],
      105.19177436828613,
      1,
      1742244898.6108985,
      1742245003.8047295,
      {}
    ],
    [
      234,
      null,
      209652396,
      null,
      [
        0.15064029944269466,
        0.08898218393325805
      ],
      157.75669717788696,
      1,
      1742245003.8707833,
      1742245161.629868,
      {}
    ],
    [
      235,
      null,
      209652396,
      null,
      [
        0.1501489272447356,
        0.08153090953826905
      ],
      53.84886932373047,
      1,
      1742245161.699827,
      1742245215.5513904,
      {}
    ],
    [
      236,
      null,
      209652396,
      null,
      [
        0.1520530475620296,
        0.08457600593566894
      ],
      120.81644558906555,
      1,
      1742245215.6195133,
      1742245336.4378393,
      {}
    ],
    [
      237,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742245336.5082111,
      1742245361.2800338,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      238,
      null,
      209652396,
      null,
      [
        0.15094759451046874,
        0.08915213942527771
      ],
      133.07722520828247,
      1,
      1742245364.7505991,
      1742245497.829835,
      {}
    ],
    [
      239,
      null,
      209652396,
      null,
      [
        0.15189944718387832,
        0.09234745144844055
      ],
      100.07065749168396,
      1,
      1742245497.9006343,
      1742245597.9732141,
      {}
    ],
    [
      240,
      null,
      209652396,
      null,
      [
        0.1497496926389142,
        0.09698767900466919
      ],
      52.906453132629395,
      1,
      1742245598.0427186,
      1742245650.9509711,
      {}
    ],
    [
      241,
      null,
      209652396,
      null,
      [
        0.151070331459553,
        0.09804796814918518
      ],
      95.6082239151001,
      1,
      1742245651.020387,
      1742245746.6306226,
      {}
    ],
    [
      242,
      null,
      209652396,
      null,
      [
        0.15048653401946815,
        0.08231135249137879
      ],
      280.16761565208435,
      1,
      1742245746.7050657,
      1742246026.8749876,
      {}
    ],
    [
      243,
      null,
      209652396,
      null,
      [
        0.15070180938444408,
        0.09149675965309144
      ],
      136.44490003585815,
      1,
      1742246026.9508932,
      1742246163.398574,
      {}
    ],
    [
      244,
      null,
      209652396,
      null,
      [
        0.15186877237775437,
        0.08478250503540039
      ],
      40.915868520736694,
      1,
      1742246163.4708786,
      1742246204.3887172,
      {}
    ],
    [
      245,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742246204.4592366,
      1742246204.5404675,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      246,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742246207.7587235,
      1742246207.8019025,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      247,
      null,
      209652396,
      null,
      [
        0.1500567943681716,
        0.08507544159889222
      ],
      37.22828459739685,
      1,
      1742246207.8736577,
      1742246245.1036735,
      {}
    ],
    [
      248,
      null,
      209652396,
      null,
      [
        0.15223728973728973,
        0.09188873052597046
      ],
      62.152337074279785,
      1,
      1742246245.175905,
      1742246307.330187,
      {}
    ],
    [
      249,
      null,
      209652396,
      null,
      [
        0.1525444574845772,
        0.08816510558128357
      ],
      35.25284290313721,
      1,
      1742246307.4025419,
      1742246342.6572146,
      {}
    ],
    [
      250,
      null,
      209652396,
      null,
      [
        0.1514695283407858,
        0.08966136336326598
      ],
      94.07616424560547,
      1,
      1742246342.7288191,
      1742246436.8070035,
      {}
    ],
    [
      251,
      null,
      209652396,
      null,
      [
        0.15134682440071662,
        0.09416240215301513
      ],
      58.30203866958618,
      1,
      1742246436.8794854,
      1742246495.1835053,
      {}
    ],
    [
      252,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742246495.2564402,
      1742246503.617855,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      253,
      null,
      209652396,
      null,
      [
        0.15331220001878684,
        0.09775548100471496
      ],
      76.4919102191925,
      1,
      1742246503.6930254,
      1742246580.1869388,
      {}
    ],
    [
      254,
      null,
      209652396,
      null,
      [
        0.15306651391980733,
        0.0855530846118927
      ],
      50.44694113731384,
      1,
      1742246580.355237,
      1742246630.804186,
      {}
    ],
    [
      255,
      null,
      209652396,
      null,
      [
        0.15113169521852157,
        0.09098163843154906
      ],
      82.69350242614746,
      1,
      1742246634.1738505,
      1742246716.869412,
      {}
    ],
    [
      256,
      null,
      209652396,
      null,
      [
        0.15045605726743452,
        0.08808838248252869
      ],
      92.99959111213684,
      1,
      1742246716.944274,
      1742246809.9458518,
      {}
    ],
    [
      257,
      null,
      209652396,
      null,
      [
        0.1515309722645052,
        0.09385263323783874
      ],
      129.076491355896,
      1,
      1742246810.0189373,
      1742246939.0973423,
      {}
    ],
    [
      258,
      null,
      209652396,
      null,
      [
        0.15119301182175432,
        0.08984360337257385
      ],
      43.77109670639038,
      1,
      1742246939.1724617,
      1742246982.9455574,
      {}
    ],
    [
      259,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742246983.019284,
      1742247148.19993,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      260,
      null,
      209652396,
      null,
      [
        0.15180736617862367,
        0.08687947869300842
      ],
      36.07699918746948,
      1,
      1742247148.275244,
      1742247184.3542461,
      {}
    ],
    [
      261,
      null,
      209652396,
      null,
      [
        0.1514079288031384,
        0.08862919211387635
      ],
      75.35567355155945,
      1,
      1742247184.4363446,
      1742247259.7940142,
      {}
    ],
    [
      262,
      null,
      209652396,
      null,
      [
        0.15408006044233588,
        0.08362761378288268
      ],
      104.22961449623108,
      1,
      1742247263.3202178,
      1742247367.5519543,
      {}
    ],
    [
      263,
      null,
      209652396,
      null,
      [
        0.15027182452332152,
        0.10369063138961791
      ],
      84.23711133003235,
      1,
      1742247367.6290305,
      1742247451.8681266,
      {}
    ],
    [
      264,
      null,
      209652396,
      null,
      [
        0.1499647039317698,
        0.0969881510734558
      ],
      38.54836964607239,
      1,
      1742247451.9435415,
      1742247490.4938006,
      {}
    ],
    [
      265,
      null,
      209652396,
      null,
      [
        0.15033322129130514,
        0.09196282029151917
      ],
      52.3701753616333,
      1,
      1742247490.5684483,
      1742247542.940488,
      {}
    ],
    [
      266,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742247543.01747,
      1742247586.504274,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      267,
      null,
      209652396,
      null,
      [
        0.15116245018939628,
        0.08963786482810973
      ],
      139.56224608421326,
      1,
      1742247586.5818315,
      1742247726.1460547,
      {}
    ],
    [
      268,
      null,
      209652396,
      null,
      [
        0.1505789168214318,
        0.08212521433830262
      ],
      61.387099266052246,
      1,
      1742247726.2596967,
      1742247787.649229,
      {}
    ],
    [
      269,
      null,
      209652396,
      null,
      [
        0.1534043659043659,
        0.08359370708465577
      ],
      140.1477530002594,
      1,
      1742247787.7270935,
      1742247927.8766918,
      {}
    ],
    [
      270,
      null,
      209652396,
      null,
      [
        0.15285140831548016,
        0.0880159330368042
      ],
      70.4099850654602,
      1,
      1742247931.4318168,
      1742248001.8439605,
      {}
    ],
    [
      271,
      null,
      209652396,
      null,
      [
        0.14962679536032827,
        0.09295901298522949
      ],
      690.1846351623535,
      1,
      1742248001.9227693,
      1742248692.1094542,
      {}
    ],
    [
      272,
      null,
      209652396,
      null,
      [
        0.15057892625257896,
        0.09166755437850951
      ],
      202.4074742794037,
      1,
      1742248692.1878111,
      1742248894.5973225,
      {}
    ],
    [
      273,
      null,
      209652396,
      null,
      [
        0.1507630363917789,
        0.08318323016166687
      ],
      74.1297960281372,
      1,
      1742248894.6770663,
      1742248968.8092544,
      {}
    ],
    [
      274,
      null,
      209652396,
      null,
      [
        0.1523601917314492,
        0.0882651710510254
      ],
      39.531672954559326,
      1,
      1742248968.893245,
      1742249008.4273758,
      {}
    ],
    [
      275,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742249008.5052352,
      1742249030.3002532,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      276,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742249030.3821216,
      1742249129.588087,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      277,
      null,
      209652396,
      null,
      [
        0.15355797099809074,
        0.08909370660781861
      ],
      70.01003336906433,
      1,
      1742249129.6686852,
      1742249199.680719,
      {}
    ],
    [
      278,
      null,
      209652396,
      null,
      [
        0.14818335828814871,
        0.09574982881546021
      ],
      96.87184548377991,
      1,
      1742249203.30703,
      1742249300.1811006,
      {}
    ],
    [
      279,
      null,
      209652396,
      null,
      [
        0.14910476721853966,
        0.09279715061187743
      ],
      63.254905700683594,
      1,
      1742249300.2606575,
      1742249363.5175734,
      {}
    ],
    [
      280,
      null,
      209652396,
      null,
      [
        0.15880925731225135,
        0.0912550675868988
      ],
      129.94883346557617,
      1,
      1742249363.5984578,
      1742249493.5492456,
      {}
    ],
    [
      281,
      null,
      209652396,
      null,
      [
        0.1498111035536185,
        0.08510360956192017
      ],
      249.64656448364258,
      1,
      1742249493.630045,
      1742249743.2786622,
      {}
    ],
    [
      282,
      null,
      209652396,
      null,
      [
        0.15042534945229558,
        0.09553139686584473
      ],
      281.7745122909546,
      1,
      1742249743.3621018,
      1742250025.1386814,
      {}
    ],
    [
      283,
      null,
      209652396,
      null,
      [
        0.1493812554441297,
        0.09016705393791198
      ],
      420.7951316833496,
      1,
      1742250025.2200434,
      1742250446.0172591,
      {}
    ],
    [
      284,
      null,
      209652396,
      null,
      [
        0.15024101768113743,
        0.09985849499702455
      ],
      52.81371307373047,
      1,
      1742250446.1237056,
      1742250498.9399846,
      {}
    ],
    [
      285,
      null,
      209652396,
      null,
      [
        0.14984186795564042,
        0.08709567070007325
      ],
      179.96392703056335,
      1,
      1742250499.0231616,
      1742250678.9890158,
      {}
    ],
    [
      286,
      null,
      209652396,
      null,
      [
        0.15060964349886505,
        0.09081822514533996
      ],
      102.59288477897644,
      1,
      1742250682.7336528,
      1742250785.3285263,
      {}
    ],
    [
      287,
      null,
      209652396,
      null,
      [
        0.15174585152130063,
        0.08161924362182618
      ],
      52.817081928253174,
      1,
      1742250785.4108748,
      1742250838.2299209,
      {}
    ],
    [
      288,
      null,
      209652396,
      null,
      [
        0.15005672835014153,
        0.08838884592056274
      ],
      73.52588820457458,
      1,
      1742250838.310696,
      1742250911.838485,
      {}
    ],
    [
      289,
      null,
      209652396,
      null,
      [
        0.15177654047414524,
        0.0914858901500702
      ],
      128.83921837806702,
      1,
      1742250911.9245949,
      1742251040.7658236,
      {}
    ],
    [
      290,
      null,
      209652396,
      null,
      [
        0.1516230815632013,
        0.08777266263961793
      ],
      69.39908456802368,
      1,
      1742251040.8487742,
      1742251110.2498493,
      {}
    ],
    [
      291,
      null,
      209652396,
      null,
      [
        0.15340439891338092,
        0.08674835920333862
      ],
      45.38421654701233,
      1,
      1742251110.3358655,
      1742251155.7219105,
      {}
    ],
    [
      292,
      null,
      209652396,
      null,
      [
        0.15275937918153487,
        0.08893737077713011
      ],
      94.26046371459961,
      1,
      1742251155.8033097,
      1742251250.0656323,
      {}
    ],
    [
      293,
      null,
      209652396,
      null,
      [
        0.15057894039929967,
        0.09079668045043945
      ],
      67.10677361488342,
      1,
      1742251250.1498027,
      1742251317.2585433,
      {}
    ],
    [
      294,
      null,
      209652396,
      null,
      [
        0.15137739546422183,
        0.08785726666450501
      ],
      69.7215518951416,
      1,
      1742251321.1842234,
      1742251390.907986,
      {}
    ],
    [
      295,
      null,
      209652396,
      null,
      [
        0.15079383380281583,
        0.08691396594047547
      ],
      51.50040650367737,
      1,
      1742251390.992342,
      1742251442.494823,
      {}
    ],
    [
      296,
      null,
      209652396,
      null,
      [
        0.15177659234545463,
        0.09073707938194274
      ],
      140.52568221092224,
      1,
      1742251442.580151,
      1742251583.1078298,
      {}
    ],
    [
      297,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742251583.1932223,
      1742251583.324921,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      298,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742251583.4079864,
      1742251608.113645,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      299,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742251608.20672,
      1742251608.3158743,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      300,
      null,
      209652396,
      null,
      [
        0.15263669410376,
        0.0887061882019043
      ],
      53.39728093147278,
      1,
      1742251608.399873,
      1742251661.7988586,
      {}
    ],
    [
      301,
      null,
      209652396,
      null,
      [
        0.15189937173470108,
        0.09710615754127502
      ],
      141.54972648620605,
      1,
      1742251661.8836887,
      1742251803.4353373,
      {}
    ],
    [
      302,
      null,
      209652396,
      null,
      [
        0.15033324958474656,
        0.08955848693847655
      ],
      85.99306893348694,
      1,
      1742251803.6221693,
      1742251889.6173828,
      {}
    ],
    [
      303,
      null,
      209652396,
      null,
      [
        0.15220672338935812,
        0.08122835397720336
      ],
      139.36221551895142,
      1,
      1742251893.5052154,
      1742252032.8696876,
      {}
    ],
    [
      304,
      null,
      209652396,
      null,
      [
        0.16651805064978714,
        0.08908257782459258
      ],
      48.214181661605835,
      1,
      1742252032.9605467,
      1742252081.1773205,
      {}
    ],
    [
      305,
      null,
      209652396,
      null,
      [
        0.15054810997924772,
        0.0883719229698181
      ],
      83.16889500617981,
      1,
      1742252081.2626164,
      1742252164.433381,
      {}
    ],
    [
      306,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742252164.5184314,
      1742252172.7955654,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      307,
      null,
      209652396,
      null,
      [
        0.15254448106244514,
        0.08939024806022644
      ],
      52.98597836494446,
      1,
      1742252172.9013073,
      1742252225.8891184,
      {}
    ],
    [
      308,
      null,
      209652396,
      null,
      [
        0.15392625729452078,
        0.10256846189498903
      ],
      54.82473683357239,
      1,
      1742252225.9753509,
      1742252280.8019345,
      {}
    ],
    [
      309,
      null,
      209652396,
      null,
      [
        0.15248301356085786,
        0.08635654211044311
      ],
      37.44298553466797,
      1,
      1742252280.8892019,
      1742252318.3340323,
      {}
    ],
    [
      310,
      null,
      209652396,
      null,
      [
        0.15082460763598488,
        0.08408913254737854
      ],
      40.28512740135193,
      1,
      1742252322.3853574,
      1742252362.6724796,
      {}
    ],
    [
      311,
      null,
      209652396,
      null,
      [
        0.15371150064263836,
        0.09731573820114135
      ],
      103.91992354393005,
      1,
      1742252362.7592027,
      1742252466.6809738,
      {}
    ],
    [
      312,
      null,
      209652396,
      null,
      [
        0.15242157435271209,
        0.08521836280822755
      ],
      39.12289333343506,
      1,
      1742252466.769864,
      1742252505.8946872,
      {}
    ],
    [
      313,
      null,
      209652396,
      null,
      [
        0.15245226330555667,
        0.08641114115715028
      ],
      38.246604204177856,
      1,
      1742252505.9809387,
      1742252544.2293427,
      {}
    ],
    [
      314,
      null,
      209652396,
      null,
      [
        0.15021027685698343,
        0.09380245685577393
      ],
      204.30722165107727,
      1,
      1742252544.316871,
      1742252748.6259627,
      {}
    ],
    [
      315,
      null,
      209652396,
      null,
      [
        0.15076308354751464,
        0.0920298182964325
      ],
      43.35634660720825,
      1,
      1742252748.7151065,
      1742252792.073378,
      {}
    ],
    [
      316,
      null,
      209652396,
      null,
      [
        0.15073236158565498,
        0.09222057938575744
      ],
      132.1041522026062,
      1,
      1742252792.1613352,
      1742252924.2673342,
      {}
    ],
    [
      317,
      null,
      209652396,
      null,
      [
        0.15024103654343174,
        0.086704478263855
      ],
      35.556801557540894,
      1,
      1742252924.3563786,
      1742252959.915036,
      {}
    ],
    [
      318,
      null,
      209652396,
      null,
      [
        0.15248301827643146,
        0.08731578469276427
      ],
      61.46985387802124,
      1,
      1742252960.1041033,
      1742253021.57584,
      {}
    ],
    [
      319,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742253021.6676238,
      1742253033.1379547,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      320,
      null,
      209652396,
      null,
      [
        0.14987255219291146,
        0.09254092454910279
      ],
      80.46794390678406,
      1,
      1742253037.289158,
      1742253117.7592084,
      {}
    ],
    [
      321,
      null,
      209652396,
      null,
      [
        0.14971902726393743,
        0.08866646409034729
      ],
      37.96693229675293,
      1,
      1742253117.8555868,
      1742253155.8244877,
      {}
    ],
    [
      322,
      null,
      209652396,
      null,
      [
        0.1502718339544687,
        0.09584736347198487
      ],
      118.39035105705261,
      1,
      1742253155.913522,
      1742253274.3057477,
      {}
    ],
    [
      323,
      null,
      209652396,
      null,
      [
        0.1507323663012286,
        0.10011570334434508
      ],
      249.76886010169983,
      1,
      1742253274.3960845,
      1742253524.1670024,
      {}
    ],
    [
      324,
      null,
      209652396,
      null,
      [
        0.152974362180949,
        0.08562785863876343
      ],
      67.75525283813477,
      1,
      1742253524.2599034,
      1742253592.0171947,
      {}
    ],
    [
      325,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742253592.1082594,
      1742253592.187354,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      326,
      null,
      209652396,
      null,
      [
        0.15030234371551737,
        0.08555393457412719
      ],
      38.504332065582275,
      1,
      1742253596.624893,
      1742253635.1312528,
      {}
    ],
    [
      327,
      null,
      209652396,
      null,
      [
        0.15199161778503095,
        0.089636812210083
      ],
      91.08119249343872,
      1,
      1742253635.2208176,
      1742253726.3038807,
      {}
    ],
    [
      328,
      null,
      209652396,
      null,
      [
        0.15312777393615717,
        0.07857792258262634
      ],
      138.12206435203552,
      1,
      1742253726.3959508,
      1742253864.5199664,
      {}
    ],
    [
      329,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742253864.6187623,
      1742253864.7038014,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      330,
      null,
      209652396,
      null,
      [
        0.1506096576455858,
        0.09020143687725067
      ],
      110.09874105453491,
      1,
      1742253864.7949042,
      1742253974.895607,
      {}
    ],
    [
      331,
      null,
      209652396,
      null,
      [
        0.15303585326040417,
        0.08520960330963134
      ],
      70.5856351852417,
      1,
      1742253974.9889832,
      1742254045.576758,
      {}
    ],
    [
      332,
      null,
      209652396,
      null,
      [
        0.1530969859562674,
        0.09450070738792418
      ],
      86.06647968292236,
      1,
      1742254045.6701329,
      1742254131.7387843,
      {}
    ],
    [
      333,
      null,
      209652396,
      null,
      [
        0.1550628284161218,
        0.08791967988014221
      ],
      86.8726601600647,
      1,
      1742254131.83249,
      1742254218.707246,
      {}
    ],
    [
      334,
      null,
      209652396,
      null,
      [
        0.15257514172184833,
        0.0909156358242035
      ],
      40.81948184967041,
      1,
      1742254223.1329646,
      1742254263.95451,
      {}
    ],
    [
      335,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742254264.0482068,
      1742254264.1479354,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      336,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742254264.2414505,
      1742254302.4018161,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      337,
      null,
      209652396,
      null,
      [
        0.15146966980799315,
        0.08727240204811096
      ],
      46.405333280563354,
      1,
      1742254302.49747,
      1742254348.9047513,
      {}
    ],
    [
      338,
      null,
      209652396,
      null,
      [
        0.1521758976848797,
        0.08863877534866334
      ],
      46.07081437110901,
      1,
      1742254348.9979389,
      1742254395.0705028,
      {}
    ],
    [
      339,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742254395.164114,
      1742254395.256107,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      340,
      null,
      209652396,
      null,
      [
        0.149565417454639,
        0.08805441021919251
      ],
      74.95843815803528,
      1,
      1742254395.351504,
      1742254470.3117924,
      {}
    ],
    [
      341,
      null,
      209652396,
      null,
      [
        0.15137753221585556,
        0.09613924741744995
      ],
      74.02967286109924,
      1,
      1742254470.408025,
      1742254544.439703,
      {}
    ],
    [
      342,
      null,
      209652396,
      null,
      [
        0.14950396881534606,
        0.08955515265464782
      ],
      112.40426540374756,
      1,
      1742254548.7528524,
      1742254661.158987,
      {}
    ],
    [
      343,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742254661.2550187,
      1742254661.3717692,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      344,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742254661.4658835,
      1742254661.550332,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      345,
      null,
      209652396,
      null,
      [
        0.15933187018516357,
        0.09292222023010255
      ],
      65.46390175819397,
      1,
      1742254661.6448963,
      1742254727.110598,
      {}
    ],
    [
      346,
      null,
      209652396,
      null,
      [
        0.15466353722341747,
        0.08285366654396058
      ],
      46.657365560531616,
      1,
      1742254727.207511,
      1742254773.8668418,
      {}
    ],
    [
      347,
      null,
      209652396,
      null,
      [
        0.15672124848771554,
        0.0855217945575714
      ],
      118.83211541175842,
      1,
      1742254773.9621422,
      1742254892.796173,
      {}
    ],
    [
      348,
      null,
      209652396,
      null,
      [
        0.15199161778503098,
        0.08816038966178893
      ],
      47.71191740036011,
      1,
      1742254892.8939576,
      1742254940.6079144,
      {}
    ],
    [
      349,
      null,
      209652396,
      null,
      [
        0.1501796539221689,
        0.08826459288597108
      ],
      112.47489166259766,
      1,
      1742254940.7039943,
      1742255053.180963,
      {}
    ],
    [
      350,
      null,
      209652396,
      null,
      [
        0.15312796727467387,
        0.08109919905662537
      ],
      44.99071645736694,
      1,
      1742255057.8032277,
      1742255102.7962515,
      {}
    ],
    [
      351,
      null,
      209652396,
      null,
      [
        0.15140804669247782,
        0.09479443073272706
      ],
      129.98055982589722,
      1,
      1742255102.892142,
      1742255232.8745818,
      {}
    ],
    [
      352,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742255233.0042517,
      1742255277.4468093,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      353,
      null,
      209652396,
      null,
      [
        0.15294378640187023,
        0.09081464409828185
      ],
      74.57043838500977,
      1,
      1742255277.5444465,
      1742255352.116794,
      {}
    ],
    [
      354,
      null,
      209652396,
      null,
      [
        0.1517460684376852,
        0.08796430349349975
      ],
      129.80312633514404,
      1,
      1742255352.243117,
      1742255482.0486026,
      {}
    ],
    [
      355,
      null,
      209652396,
      null,
      [
        0.15057896397716758,
        0.08617509126663207
      ],
      213.09655570983887,
      1,
      1742255482.1478815,
      1742255695.2465005,
      {}
    ],
    [
      356,
      null,
      209652396,
      null,
      [
        0.1515002644493662,
        0.0909143829345703
      ],
      94.30818152427673,
      1,
      1742255695.3613288,
      1742255789.6715386,
      {}
    ],
    [
      357,
      null,
      209652396,
      null,
      [
        0.151561670648497,
        0.09195987820625304
      ],
      44.916821002960205,
      1,
      1742255789.7756882,
      1742255834.6944447,
      {}
    ],
    [
      358,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742255839.2540388,
      1742255875.0996807,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      359,
      null,
      209652396,
      null,
      [
        0.16888286364334268,
        0.09674659967422486
      ],
      38.89753985404968,
      1,
      1742255875.2041495,
      1742255914.103931,
      {}
    ],
    [
      360,
      null,
      209652396,
      null,
      [
        0.15146961322111024,
        0.09278619050979615
      ],
      70.36894965171814,
      1,
      1742255914.2008483,
      1742255984.571647,
      {}
    ],
    [
      361,
      null,
      209652396,
      null,
      [
        0.15189943303715758,
        0.09244045853614806
      ],
      207.6107301712036,
      1,
      1742255984.672463,
      1742256192.285373,
      {}
    ],
    [
      362,
      null,
      209652396,
      null,
      [
        0.14778407652659148,
        0.09660771369934082
      ],
      47.38767218589783,
      1,
      1742256192.3922293,
      1742256239.782536,
      {}
    ],
    [
      363,
      null,
      209652396,
      null,
      [
        0.1509781467116796,
        0.08696727156639099
      ],
      92.69866251945496,
      1,
      1742256239.8845048,
      1742256332.585008,
      {}
    ],
    [
      364,
      null,
      209652396,
      null,
      [
        0.16043735153016586,
        0.08363751053810119
      ],
      200.88181710243225,
      1,
      1742256332.684888,
      1742256533.568731,
      {}
    ],
    [
      365,
      null,
      209652396,
      null,
      [
        0.15325069479261094,
        0.09161354541778564
      ],
      156.63086700439453,
      1,
      1742256533.699552,
      1742256690.3325276,
      {}
    ],
    [
      366,
      null,
      209652396,
      null,
      [
        0.15361938191279506,
        0.08591158628463744
      ],
      158.26063442230225,
      1,
      1742256690.560011,
      1742256848.8228352,
      {}
    ],
    [
      367,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742256853.4819007,
      1742256853.5685608,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      368,
      null,
      209652396,
      null,
      [
        0.14849046473297972,
        0.09011568188667297
      ],
      73.55957126617432,
      1,
      1742256853.7130687,
      1742256927.2746105,
      {}
    ],
    [
      369,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742256927.3795528,
      1742256927.4670763,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      370,
      null,
      209652396,
      null,
      [
        0.15088605155970428,
        0.09101420044898986
      ],
      72.78485894203186,
      1,
      1742256927.567896,
      1742257000.35459,
      {}
    ],
    [
      371,
      null,
      209652396,
      null,
      [
        0.15214516629187286,
        0.0939882802963257
      ],
      103.7901508808136,
      1,
      1742257000.4559004,
      1742257104.2480328,
      {}
    ],
    [
      372,
      null,
      209652396,
      null,
      [
        0.1524830748633144,
        0.08671560287475585
      ],
      116.57695651054382,
      1,
      1742257104.3515275,
      1742257220.9305916,
      {}
    ],
    [
      373,
      null,
      209652396,
      null,
      [
        0.1536500189943304,
        0.0908156979084015
      ],
      47.48037505149841,
      1,
      1742257221.0350235,
      1742257268.5173934,
      {}
    ],
    [
      374,
      null,
      209652396,
      null,
      [
        0.15635264624785583,
        0.09049131393432616
      ],
      101.83586549758911,
      1,
      1742257273.2632666,
      1742257375.101279,
      {}
    ],
    [
      375,
      null,
      209652396,
      null,
      [
        0.15140810327936077,
        0.09220080494880675
      ],
      92.30280590057373,
      1,
      1742257375.2052727,
      1742257467.5101233,
      {}
    ],
    [
      376,
      null,
      209652396,
      null,
      [
        0.15282082782082784,
        0.08197299301624297
      ],
      50.275229692459106,
      1,
      1742257467.6139503,
      1742257517.8911552,
      {}
    ],
    [
      377,
      null,
      209652396,
      null,
      [
        0.15082457934254342,
        0.09714694857597353
      ],
      36.830389976501465,
      1,
      1742257517.9933124,
      1742257554.8254972,
      {}
    ],
    [
      378,
      null,
      209652396,
      null,
      [
        0.15103961892884046,
        0.08657843589782714
      ],
      71.98562860488892,
      1,
      1742257554.9291618,
      1742257626.916668,
      {}
    ],
    [
      379,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742257627.0214756,
      1742257654.7335415,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      380,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742257654.8424783,
      1742257684.851809,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      381,
      null,
      209652396,
      null,
      [
        0.15156155747473113,
        0.10111733198165893
      ],
      83.17253708839417,
      1,
      1742257684.959892,
      1742257768.1344898,
      {}
    ],
    [
      382,
      null,
      209652396,
      null,
      [
        0.1538035250610101,
        0.08670349955558777
      ],
      124.33468770980835,
      1,
      1742257773.074059,
      1742257897.4109952,
      {}
    ],
    [
      383,
      null,
      209652396,
      null,
      [
        0.1879839734630154,
        0.05672719717025757
      ],
      82.16471457481384,
      1,
      1742257897.517204,
      1742257979.684007,
      {}
    ],
    [
      384,
      null,
      209652396,
      null,
      [
        0.15328143090119137,
        0.09198616623878479
      ],
      129.09998965263367,
      1,
      1742257979.7914867,
      1742258108.8936448,
      {}
    ],
    [
      385,
      null,
      209652396,
      null,
      [
        0.15033321186015797,
        0.09219476103782653
      ],
      53.52930521965027,
      1,
      1742258109.0015273,
      1742258162.532871,
      {}
    ],
    [
      386,
      null,
      209652396,
      null,
      [
        0.15269790696437402,
        0.09069735288619996
      ],
      82.71737742424011,
      1,
      1742258162.6397645,
      1742258245.3591511,
      {}
    ],
    [
      387,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742258245.4667335,
      1742258245.5511506,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      388,
      null,
      209652396,
      null,
      [
        0.15036404699578348,
        0.08496949911117553
      ],
      85.31667399406433,
      1,
      1742258245.6561308,
      1742258330.9745462,
      {}
    ],
    [
      389,
      null,
      209652396,
      null,
      [
        0.15343506428835768,
        0.08433473229408264
      ],
      78.82283425331116,
      1,
      1742258331.0814896,
      1742258409.9062958,
      {}
    ],
    [
      390,
      null,
      209652396,
      null,
      [
        0.15242161679287428,
        0.0926811182498932
      ],
      40.787421464920044,
      1,
      1742258415.1953018,
      1742258455.9846084,
      {}
    ],
    [
      391,
      null,
      209652396,
      null,
      [
        0.15094746247440857,
        0.09307562828063964
      ],
      159.84237408638,
      1,
      1742258456.1228192,
      1742258615.9675481,
      {}
    ],
    [
      392,
      null,
      209652396,
      null,
      [
        0.15208373651487425,
        0.09822249054908752
      ],
      129.8940761089325,
      1,
      1742258616.0764058,
      1742258745.972613,
      {}
    ],
    [
      393,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742258746.0815833,
      1742258746.1672616,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      394,
      null,
      209652396,
      null,
      [
        0.15097811370266462,
        0.08889264822006226
      ],
      128.2162003517151,
      1,
      1742258746.275539,
      1742258874.4936125,
      {}
    ],
    [
      395,
      null,
      209652396,
      null,
      [
        0.1498724625970135,
        0.0884093427658081
      ],
      96.05132603645325,
      1,
      1742258874.602329,
      1742258970.6557612,
      {}
    ],
    [
      396,
      null,
      209652396,
      null,
      [
        0.15128529088109927,
        0.08254533410072326
      ],
      42.32682418823242,
      1,
      1742258970.770325,
      1742259013.0992794,
      {}
    ],
    [
      397,
      null,
      209652396,
      null,
      [
        0.1528821585707813,
        0.09548216819763183
      ],
      44.5985963344574,
      1,
      1742259013.2140937,
      1742259057.8146925,
      {}
    ],
    [
      398,
      null,
      209652396,
      null,
      [
        0.16409209081364767,
        0.08805095672607421
      ],
      52.37797212600708,
      1,
      1742259063.0236895,
      1742259115.4035037,
      {}
    ],
    [
      399,
      null,
      209652396,
      null,
      [
        0.15186875823103366,
        0.08703254461288452
      ],
      62.41942262649536,
      1,
      1742259115.5159404,
      1742259177.9371934,
      {}
    ],
    [
      400,
      null,
      209652396,
      null,
      [
        0.15134660276875847,
        0.08998658180236815
      ],
      69.05075430870056,
      1,
      1742259178.0461814,
      1742259247.098764,
      {}
    ],
    [
      401,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742259247.211224,
      1742259247.2868721,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      402,
      null,
      209652396,
      null,
      [
        0.15045617515677395,
        0.09525432109832763
      ],
      56.85442066192627,
      1,
      1742259247.3950417,
      1742259304.2512465,
      {}
    ],
    [
      403,
      null,
      209652396,
      null,
      [
        0.15279005398765877,
        0.08808491826057434
      ],
      38.42184662818909,
      1,
      1742259304.3623936,
      1742259342.7862465,
      {}
    ],
    [
      404,
      null,
      209652396,
      null,
      [
        0.15217584109799678,
        0.0927215313911438
      ],
      36.46421146392822,
      1,
      1742259342.8958495,
      1742259379.3620026,
      {}
    ],
    [
      405,
      null,
      209652396,
      null,
      [
        0.15183809285605693,
        0.09290806531906129
      ],
      49.35880947113037,
      1,
      1742259379.5006652,
      1742259428.8612602,
      {}
    ],
    [
      406,
      null,
      209652396,
      null,
      [
        0.1505788083632395,
        0.09493365287780761
      ],
      92.77930426597595,
      1,
      1742259433.9343355,
      1742259526.7156487,
      {}
    ],
    [
      407,
      null,
      209652396,
      null,
      [
        0.1523600927044041,
        0.0854468035697937
      ],
      94.76046824455261,
      1,
      1742259526.8278854,
      1742259621.5903733,
      {}
    ],
    [
      408,
      null,
      209652396,
      null,
      [
        0.1499954400403502,
        0.09152743935585021
      ],
      45.766634702682495,
      1,
      1742259621.7013686,
      1742259667.4699073,
      {}
    ],
    [
      409,
      null,
      209652396,
      null,
      [
        0.15024102711228457,
        0.09869387745857239
      ],
      196.4695246219635,
      1,
      1742259667.5806086,
      1742259864.0520043,
      {}
    ],
    [
      410,
      null,
      209652396,
      null,
      [
        0.1507323568700814,
        0.09236071586608886
      ],
      89.8097813129425,
      1,
      1742259864.1651907,
      1742259953.9769735,
      {}
    ],
    [
      411,
      null,
      209652396,
      null,
      [
        0.15266728874513308,
        0.08427918851375579
      ],
      95.18407988548279,
      1,
      1742259954.0901382,
      1742260049.276262,
      {}
    ],
    [
      412,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742260049.3890688,
      1742260180.1949213,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      413,
      null,
      209652396,
      null,
      [
        0.15119319101355028,
        0.09012384414672851
      ],
      77.52786016464233,
      1,
      1742260180.3096273,
      1742260257.8397968,
      {}
    ],
    [
      414,
      null,
      209652396,
      null,
      [
        0.15033325430032018,
        0.09920628547668457
      ],
      106.66263008117676,
      1,
      1742260263.1506586,
      1742260369.8156793,
      {}
    ],
    [
      415,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742260369.933863,
      1742260370.0191493,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      416,
      null,
      209652396,
      null,
      [
        0.15211448677017542,
        0.08422937035560608
      ],
      52.64997887611389,
      1,
      1742260370.1317499,
      1742260422.7834504,
      {}
    ],
    [
      417,
      null,
      209652396,
      null,
      [
        0.15156176024439497,
        0.09002528429031371
      ],
      58.84948110580444,
      1,
      1742260422.8952012,
      1742260481.7465432,
      {}
    ],
    [
      418,
      null,
      209652396,
      null,
      [
        0.15064034659843042,
        0.0989485812187195
      ],
      53.84328293800354,
      1,
      1742260481.86074,
      1742260535.7059445,
      {}
    ],
    [
      419,
      null,
      209652396,
      null,
      [
        0.1503024804671511,
        0.09261443734169006
      ],
      49.02497339248657,
      1,
      1742260535.819662,
      1742260584.8466473,
      {}
    ],
    [
      420,
      null,
      209652396,
      null,
      [
        0.15223729445286333,
        0.08781144380569458
      ],
      50.10175323486328,
      1,
      1742260584.9612377,
      1742260635.064932,
      {}
    ],
    [
      421,
      null,
      209652396,
      null,
      [
        0.14981116014050147,
        0.09080235123634338
      ],
      155.90223503112793,
      1,
      1742260635.1783495,
      1742260791.0825408,
      {}
    ],
    [
      422,
      null,
      209652396,
      null,
      [
        0.15791896173632697,
        0.08794439792633058
      ],
      48.18322014808655,
      1,
      1742260791.3573034,
      1742260839.5424726,
      {}
    ],
    [
      423,
      null,
      209652396,
      null,
      [
        0.15085527772653523,
        0.09036503970623018
      ],
      36.74708676338196,
      1,
      1742260839.6599808,
      1742260876.408911,
      {}
    ],
    [
      424,
      null,
      209652396,
      null,
      [
        0.15051752005344818,
        0.09152369260787964
      ],
      46.04152011871338,
      1,
      1742260876.5234108,
      1742260922.5668638,
      {}
    ],
    [
      425,
      null,
      209652396,
      null,
      [
        0.1523908618219995,
        0.08847834467887879
      ],
      172.76428198814392,
      1,
      1742260927.76518,
      1742261100.5316648,
      {}
    ],
    [
      426,
      null,
      209652396,
      null,
      [
        0.1513158713757516,
        0.0910888636112213
      ],
      52.95869255065918,
      1,
      1742261100.6487243,
      1742261153.6095252,
      {}
    ],
    [
      427,
      null,
      209652396,
      null,
      [
        0.15306653278210164,
        0.09450021982192994
      ],
      47.63760423660278,
      1,
      1742261153.725675,
      1742261201.3653836,
      {}
    ],
    [
      428,
      null,
      209652396,
      null,
      [
        0.15027165004709914,
        0.08750959396362304
      ],
      105.0916440486908,
      1,
      1742261201.480984,
      1742261306.5745108,
      {}
    ],
    [
      429,
      null,
      209652396,
      null,
      [
        0.14978042403192104,
        0.08808780312538146
      ],
      86.04941749572754,
      1,
      1742261306.6918545,
      1742261392.7433083,
      {}
    ],
    [
      430,
      null,
      209652396,
      null,
      [
        0.1755172418346071,
        0.07032704949378968
      ],
      164.22098684310913,
      1,
      1742261398.3252885,
      1742261562.548445,
      {}
    ],
    [
      431,
      null,
      209652396,
      null,
      [
        0.152943743961708,
        0.08667687892913818
      ],
      49.04182744026184,
      1,
      1742261562.6678464,
      1742261611.7116628,
      {}
    ],
    [
      432,
      null,
      209652396,
      null,
      [
        0.15110089780748465,
        0.09465860366821288
      ],
      70.92170763015747,
      1,
      1742261611.828735,
      1742261682.752458,
      {}
    ],
    [
      433,
      null,
      209652396,
      null,
      [
        0.15153105714482956,
        0.08592982172966004
      ],
      46.343138456344604,
      1,
      1742261682.906694,
      1742261729.2522607,
      {}
    ],
    [
      434,
      null,
      209652396,
      null,
      [
        0.14928886792659246,
        0.08908527016639708
      ],
      114.64724326133728,
      1,
      1742261729.368826,
      1742261844.017961,
      {}
    ],
    [
      435,
      null,
      209652396,
      null,
      [
        0.15168447833118492,
        0.09027247309684754
      ],
      52.29262661933899,
      1,
      1742261844.1368523,
      1742261896.4315462,
      {}
    ],
    [
      436,
      null,
      209652396,
      null,
      [
        0.15368079282749939,
        0.08441672325134277
      ],
      105.96458387374878,
      1,
      1742261896.549641,
      1742262002.5162742,
      {}
    ],
    [
      437,
      null,
      209652396,
      null,
      [
        0.1515308213661507,
        0.09323863744735719
      ],
      61.17908573150635,
      1,
      1742262002.643904,
      1742262063.825058,
      {}
    ],
    [
      438,
      null,
      209652396,
      null,
      [
        0.15085537203800675,
        0.09256636023521422
      ],
      44.111384868621826,
      1,
      1742262069.4651256,
      1742262113.5784278,
      {}
    ],
    [
      439,
      null,
      209652396,
      null,
      [
        0.24059455743587482,
        0.03136368691921234
      ],
      114.07808542251587,
      1,
      1742262113.6953857,
      1742262227.7753103,
      {}
    ],
    [
      440,
      null,
      209652396,
      null,
      [
        0.1518073708941972,
        0.09129475474357604
      ],
      85.43752217292786,
      1,
      1742262227.8959963,
      1742262313.335503,
      {}
    ],
    [
      441,
      null,
      209652396,
      null,
      [
        0.15202232560016987,
        0.09692827820777893
      ],
      44.22028708457947,
      1,
      1742262313.455251,
      1742262357.6775074,
      {}
    ],
    [
      442,
      null,
      209652396,
      null,
      [
        0.15294371566826656,
        0.09038743853569031
      ],
      72.56909966468811,
      1,
      1742262357.79487,
      1742262430.3657982,
      {}
    ],
    [
      443,
      null,
      209652396,
      null,
      [
        0.15146962265225739,
        0.08544966220855713
      ],
      129.1867618560791,
      1,
      1742262430.485376,
      1742262559.674095,
      {}
    ],
    [
      444,
      null,
      209652396,
      null,
      [
        0.15054818542842494,
        0.09695030570030212
      ],
      103.53700304031372,
      1,
      1742262559.795391,
      1742262663.3345487,
      {}
    ],
    [
      445,
      null,
      209652396,
      null,
      [
        0.15162316172795215,
        0.08917802333831787
      ],
      48.444169998168945,
      1,
      1742262663.46178,
      1742262711.908062,
      {}
    ],
    [
      446,
      null,
      209652396,
      null,
      [
        0.152237365186467,
        0.08571998715400696
      ],
      45.675137519836426,
      1,
      1742262717.7866087,
      1742262763.463699,
      {}
    ],
    [
      447,
      null,
      209652396,
      null,
      [
        0.15140816929739084,
        0.09549422025680543
      ],
      40.69022512435913,
      1,
      1742262763.5881677,
      1742262804.2802494,
      {}
    ],
    [
      448,
      null,
      209652396,
      null,
      [
        0.15024112142375615,
        0.09657691836357117
      ],
      58.78991627693176,
      1,
      1742262804.3996346,
      1742262863.1913745,
      {}
    ],
    [
      449,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742262863.3172972,
      1742262894.9037135,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      450,
      null,
      209652396,
      null,
      [
        0.15340437061993945,
        0.08813284993171691
      ],
      88.63128137588501,
      1,
      1742262895.0244713,
      1742262983.6575801,
      {}
    ],
    [
      451,
      null,
      209652396,
      null,
      [
        0.1513467065113772,
        0.09463093996047973
      ],
      47.54176044464111,
      1,
      1742262983.7797227,
      1742263031.3235457,
      {}
    ],
    [
      452,
      null,
      209652396,
      null,
      [
        0.14888978421912552,
        0.0916523563861847
      ],
      193.55960416793823,
      1,
      1742263031.4493258,
      1742263225.011005,
      {}
    ],
    [
      453,
      null,
      209652396,
      null,
      [
        0.15051753891574252,
        0.08704173743724823
      ],
      49.154013872146606,
      1,
      1742263225.1341908,
      1742263274.290288,
      {}
    ],
    [
      454,
      null,
      209652396,
      null,
      [
        0.15318940648281965,
        0.08818266749382017
      ],
      371.64088702201843,
      1,
      1742263279.9289849,
      1742263651.572092,
      {}
    ],
    [
      455,
      null,
      209652396,
      null,
      [
        0.15033310340196565,
        0.08909277081489562
      ],
      49.53938055038452,
      1,
      1742263651.6951122,
      1742263701.2366362,
      {}
    ],
    [
      456,
      null,
      209652396,
      null,
      [
        0.15128526730323136,
        0.08925577044487
      ],
      70.28035998344421,
      1,
      1742263701.3591313,
      1742263771.6414728,
      {}
    ],
    [
      457,
      null,
      209652396,
      null,
      [
        0.1517151106971466,
        0.08448718428611754
      ],
      46.620688676834106,
      1,
      1742263771.8013077,
      1742263818.424308,
      {}
    ],
    [
      458,
      null,
      209652396,
      null,
      [
        0.14968830530207777,
        0.09413927435874939
      ],
      142.6310474872589,
      1,
      1742263818.546815,
      1742263961.179719,
      {}
    ],
    [
      459,
      null,
      209652396,
      null,
      [
        0.15171527574222185,
        0.09839975595474244
      ],
      47.327898263931274,
      1,
      1742263961.302816,
      1742264008.6324682,
      {}
    ],
    [
      460,
      null,
      209652396,
      null,
      [
        0.15598403929242252,
        0.09710626125335693
      ],
      203.10892868041992,
      1,
      1742264008.7621248,
      1742264211.872944,
      {}
    ],
    [
      461,
      null,
      209652396,
      null,
      [
        0.14990321756788821,
        0.09565471649169921
      ],
      184.49826979637146,
      1,
      1742264211.9977448,
      1742264396.4982145,
      {}
    ],
    [
      462,
      null,
      209652396,
      null,
      [
        0.15027182452332152,
        0.08829013109207152
      ],
      139.9610903263092,
      1,
      1742264402.3929913,
      1742264542.356526,
      {}
    ],
    [
      463,
      null,
      209652396,
      null,
      [
        0.1494426286342454,
        0.09038746595382689
      ],
      233.68922019004822,
      1,
      1742264542.4838176,
      1742264776.175297,
      {}
    ],
    [
      464,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742264776.30775,
      1742264776.3673463,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      465,
      null,
      209652396,
      null,
      [
        0.1691277150857989,
        0.08060246825218201
      ],
      118.42227935791016,
      1,
      1742264776.489897,
      1742264894.9140108,
      {}
    ],
    [
      466,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742264895.0405555,
      1742264895.1245837,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      467,
      null,
      209652396,
      null,
      [
        0.15205312301120683,
        0.08901936650276183
      ],
      40.8693733215332,
      1,
      1742264895.2486334,
      1742264936.1198008,
      {}
    ],
    [
      468,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742264936.275403,
      1742264960.445366,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      469,
      null,
      209652396,
      null,
      [
        0.15168441702872842,
        0.09577564001083375
      ],
      44.01039791107178,
      1,
      1742264960.5720737,
      1742265004.5844047,
      {}
    ],
    [
      470,
      null,
      209652396,
      null,
      [
        0.14855201711489135,
        0.09653106093406678
      ],
      75.93980669975281,
      1,
      1742265010.543753,
      1742265086.4857981,
      {}
    ],
    [
      471,
      null,
      209652396,
      null,
      [
        0.1522372803061426,
        0.08477647423744201
      ],
      128.9862642288208,
      1,
      1742265086.6141474,
      1742265215.6025324,
      {}
    ],
    [
      472,
      null,
      209652396,
      null,
      [
        0.1510395293329425,
        0.09539870023727418
      ],
      39.91768980026245,
      1,
      1742265215.7288396,
      1742265255.6483393,
      {}
    ],
    [
      473,
      null,
      209652396,
      null,
      [
        0.1552162543180507,
        0.0814292860031128
      ],
      68.79174184799194,
      1,
      1742265255.7741358,
      1742265324.567787,
      {}
    ],
    [
      474,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742265324.7017982,
      1742265324.7694678,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      475,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742265324.8951027,
      1742265325.0146437,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      476,
      null,
      209652396,
      null,
      [
        0.15140813157280222,
        0.09141608119010924
      ],
      43.41397523880005,
      1,
      1742265325.1449902,
      1742265368.560837,
      {}
    ],
    [
      477,
      null,
      209652396,
      null,
      [
        0.15150029745838128,
        0.08956732034683228
      ],
      41.78580069541931,
      1,
      1742265368.6992052,
      1742265410.486894,
      {}
    ],
    [
      478,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742265416.4055789,
      1742265416.4813035,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      479,
      null,
      209652396,
      null,
      [
        0.15030248989829825,
        0.09750903844833374
      ],
      50.929911613464355,
      1,
      1742265416.6415095,
      1742265467.5732267,
      {}
    ],
    [
      480,
      null,
      209652396,
      null,
      [
        0.1509780005288987,
        0.09376140475273131
      ],
      90.418865442276,
      1,
      1742265467.7020106,
      1742265558.1229355,
      {}
    ],
    [
      481,
      null,
      209652396,
      null,
      [
        0.16019124574513796,
        0.08632474184036257
      ],
      120.50146889686584,
      1,
      1742265558.2534652,
      1742265678.7573485,
      {}
    ],
    [
      482,
      null,
      209652396,
      null,
      [
        0.15288227174454722,
        0.08834015488624572
      ],
      93.44149780273438,
      1,
      1742265678.9181128,
      1742265772.362394,
      {}
    ],
    [
      483,
      null,
      209652396,
      null,
      [
        0.15193023987934168,
        0.0878481525182724
      ],
      65.55529236793518,
      1,
      1742265772.4953685,
      1742265838.0527585,
      {}
    ],
    [
      484,
      null,
      209652396,
      null,
      [
        0.15039460862814152,
        0.08461666822433472
      ],
      42.19279074668884,
      1,
      1742265838.183061,
      1742265880.3778894,
      {}
    ],
    [
      485,
      null,
      209652396,
      null,
      [
        0.1502102862881306,
        0.09402496337890624
      ],
      51.86337447166443,
      1,
      1742265880.5068753,
      1742265932.37216,
      {}
    ],
    [
      486,
      null,
      209652396,
      null,
      [
        0.1493811281236431,
        0.08977806508541109
      ],
      52.655460596084595,
      1,
      1742265932.693807,
      1742265985.351067,
      {}
    ],
    [
      487,
      null,
      209652396,
      null,
      [
        0.16740878948962784,
        0.09193609833717346
      ],
      43.25900483131409,
      1,
      1742265991.240416,
      1742266034.5012813,
      {}
    ],
    [
      488,
      null,
      209652396,
      null,
      [
        0.15070176222870832,
        0.09486194610595704
      ],
      215.91001963615417,
      1,
      1742266034.6330283,
      1742266250.5450215,
      {}
    ],
    [
      489,
      null,
      209652396,
      null,
      [
        0.1497802778491401,
        0.09193402767181395
      ],
      120.33754134178162,
      1,
      1742266250.677121,
      1742266371.0166838,
      {}
    ],
    [
      490,
      null,
      209652396,
      null,
      [
        0.15045603368956662,
        0.0959701108932495
      ],
      38.54816961288452,
      1,
      1742266371.1535926,
      1742266409.703709,
      {}
    ],
    [
      491,
      null,
      209652396,
      null,
      [
        0.15721263011682174,
        0.08648833751678467
      ],
      43.81450343132019,
      1,
      1742266409.833127,
      1742266453.649451,
      {}
    ],
    [
      492,
      null,
      209652396,
      null,
      [
        0.152575122859554,
        0.08634045124053955
      ],
      167.27883625030518,
      1,
      1742266453.779559,
      1742266621.0602243,
      {}
    ],
    [
      493,
      null,
      209652396,
      null,
      [
        0.14971906027295248,
        0.09659922122955322
      ],
      114.81653571128845,
      1,
      1742266621.1973474,
      1742266736.015958,
      {}
    ],
    [
      494,
      null,
      209652396,
      null,
      [
        0.14919690952625084,
        0.09072695136070251
      ],
      319.3205223083496,
      1,
      1742266742.5912998,
      1742267061.9139187,
      {}
    ],
    [
      495,
      null,
      209652396,
      null,
      [
        0.15024099881884312,
        0.09836965560913086
      ],
      46.72635364532471,
      1,
      1742267062.046059,
      1742267108.7744484,
      {}
    ],
    [
      496,
      null,
      209652396,
      null,
      [
        0.15205300040629383,
        0.08951966047286988
      ],
      72.11750984191895,
      1,
      1742267108.933271,
      1742267181.0525696,
      {}
    ],
    [
      497,
      null,
      209652396,
      null,
      [
        0.14999541174690872,
        0.09857529401779175
      ],
      114.68587136268616,
      1,
      1742267181.1903052,
      1742267295.8782496,
      {}
    ],
    [
      498,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742267296.0118809,
      1742267296.1019566,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      499,
      null,
      209652396,
      null,
      [
        0.1512546113594018,
        0.09234534680843354
      ],
      73.15336537361145,
      1,
      1742267296.2332888,
      1742267369.3883755,
      {}
    ],
    [
      500,
      null,
      209652396,
      null,
      [
        0.15371146291804974,
        0.08654710292816162
      ],
      63.369401693344116,
      1,
      1742267369.5208635,
      1742267432.8920345,
      {}
    ],
    [
      501,
      null,
      209652396,
      null,
      [
        0.14938106682118657,
        0.09518847107887268
      ],
      174.79894924163818,
      1,
      1742267433.0287511,
      1742267607.8296008,
      {}
    ],
    [
      502,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742267614.1176982,
      1742267614.1599317,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      503,
      null,
      209652396,
      null,
      [
        0.15033319299786368,
        0.08597294569015504
      ],
      216.83331036567688,
      1,
      1742267614.2923841,
      1742267831.12753,
      {}
    ],
    [
      504,
      null,
      209652396,
      null,
      [
        0.1511622992910418,
        0.09037735223770142
      ],
      65.05332660675049,
      1,
      1742267831.268752,
      1742267896.3241003,
      {}
    ],
    [
      505,
      null,
      209652396,
      null,
      [
        0.1513465791908906,
        0.08631205320358276
      ],
      136.4832091331482,
      1,
      1742267896.4582942,
      1742268032.9433897,
      {}
    ],
    [
      506,
      null,
      209652396,
      null,
      [
        0.1518995556420706,
        0.09435303330421448
      ],
      44.67952847480774,
      1,
      1742268033.0794258,
      1742268077.7609396,
      {}
    ],
    [
      507,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742268077.897022,
      1742268108.5439248,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      508,
      null,
      209652396,
      null,
      [
        0.14999534572887865,
        0.09433244228363037
      ],
      64.86635065078735,
      1,
      1742268108.687016,
      1742268173.555639,
      {}
    ],
    [
      509,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742268173.6924584,
      1742268435.5399306,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      510,
      null,
      209652396,
      null,
      [
        0.1507017292196933,
        0.09722294330596923
      ],
      157.52782368659973,
      1,
      1742268442.056368,
      1742268599.5862799,
      {}
    ],
    [
      511,
      null,
      209652396,
      null,
      [
        0.15208382139519866,
        0.08603771567344667
      ],
      68.61799359321594,
      1,
      1742268599.7269268,
      1742268668.3469841,
      {}
    ],
    [
      512,
      null,
      209652396,
      null,
      [
        0.15196075435596396,
        0.08610411047935487
      ],
      64.306480884552,
      1,
      1742268668.4831371,
      1742268732.7916698,
      {}
    ],
    [
      513,
      null,
      209652396,
      null,
      [
        0.15150025030264552,
        0.08863094806671143
      ],
      35.261240005493164,
      1,
      1742268732.931739,
      1742268768.1949632,
      {}
    ],
    [
      514,
      null,
      209652396,
      null,
      [
        0.14922750888319752,
        0.09043154239654541
      ],
      346.7785892486572,
      1,
      1742268768.3350298,
      1742269115.115512,
      {}
    ],
    [
      515,
      null,
      209652396,
      null,
      [
        0.14990323643018252,
        0.09607349514961241
      ],
      221.49529719352722,
      1,
      1742269115.295182,
      1742269336.7930875,
      {}
    ],
    [
      516,
      null,
      209652396,
      null,
      [
        0.1541107588263277,
        0.09500599384307862
      ],
      43.518195390701294,
      1,
      1742269336.9353662,
      1742269380.4555209,
      {}
    ],
    [
      517,
      null,
      209652396,
      null,
      [
        0.1543257041011532,
        0.08515674948692323
      ],
      62.35602355003357,
      1,
      1742269380.5904887,
      1742269442.948285,
      {}
    ],
    [
      518,
      null,
      209652396,
      null,
      [
        0.15232944619172165,
        0.08735633134841918
      ],
      105.02522492408752,
      1,
      1742269449.506537,
      1742269554.5339768,
      {}
    ],
    [
      519,
      null,
      209652396,
      null,
      [
        0.15236026718062645,
        0.093927983045578
      ],
      129.1125409603119,
      1,
      1742269554.6743126,
      1742269683.789327,
      {}
    ],
    [
      520,
      null,
      209652396,
      null,
      [
        0.15088598554167415,
        0.09138464093208314
      ],
      127.37115526199341,
      1,
      1742269683.9322255,
      1742269811.306014,
      {}
    ],
    [
      521,
      null,
      209652396,
      null,
      [
        0.15291300313755404,
        0.08487043976783752
      ],
      90.63574838638306,
      1,
      1742269811.4458728,
      1742269902.0836866,
      {}
    ],
    [
      522,
      null,
      209652396,
      null,
      [
        0.1542028115381409,
        0.07564150929450988
      ],
      50.09077525138855,
      1,
      1742269902.2238252,
      1742269952.3166175,
      {}
    ],
    [
      523,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742269952.4575517,
      1742269952.5428274,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      524,
      null,
      209652396,
      null,
      [
        0.15137740017979537,
        0.09297009468078613
      ],
      69.84181571006775,
      1,
      1742269952.6809611,
      1742270022.5246127,
      {}
    ],
    [
      525,
      null,
      209652396,
      null,
      [
        0.14916624886684765,
        0.09130944013595581
      ],
      117.64718508720398,
      1,
      1742270022.665419,
      1742270140.3146412,
      {}
    ],
    [
      526,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742270147.2211893,
      1742270147.2585356,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      527,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742270147.396886,
      1742270172.4345953,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      528,
      null,
      209652396,
      null,
      [
        0.1492275937635219,
        0.09206183075904846
      ],
      40.46387505531311,
      1,
      1742270172.5765007,
      1742270213.0422668,
      {}
    ],
    [
      529,
      null,
      209652396,
      null,
      [
        0.15199172624322324,
        0.08680909156799316
      ],
      40.282254695892334,
      1,
      1742270213.1821773,
      1742270253.4662097,
      {}
    ],
    [
      530,
      null,
      209652396,
      null,
      [
        0.15306652335095447,
        0.09119631409645082
      ],
      87.08561110496521,
      1,
      1742270253.6056685,
      1742270340.6930838,
      {}
    ],
    [
      531,
      null,
      209652396,
      null,
      [
        0.1528514413244952,
        0.0918857753276825
      ],
      87.59638905525208,
      1,
      1742270340.8350616,
      1742270428.4332922,
      {}
    ],
    [
      532,
      null,
      209652396,
      null,
      [
        0.15076307411636752,
        0.09257757186889651
      ],
      38.078545808792114,
      1,
      1742270428.607066,
      1742270466.687629,
      {}
    ],
    [
      533,
      null,
      209652396,
      null,
      [
        0.1516538884053854,
        0.08468556523323059
      ],
      106.65236783027649,
      1,
      1742270466.827925,
      1742270573.4822598,
      {}
    ],
    [
      534,
      null,
      209652396,
      null,
      [
        0.15208370822143277,
        0.08089876234531403
      ],
      40.59676647186279,
      1,
      1742270573.8497138,
      1742270614.4484007,
      {}
    ],
    [
      535,
      null,
      209652396,
      null,
      [
        0.1529435176141763,
        0.09042018294334411
      ],
      138.30185508728027,
      1,
      1742270621.2596757,
      1742270759.5638843,
      {}
    ],
    [
      536,
      null,
      209652396,
      null,
      [
        0.15024107426802036,
        0.08877748727798462
      ],
      62.73076319694519,
      1,
      1742270759.7072217,
      1742270822.4399738,
      {}
    ],
    [
      537,
      null,
      209652396,
      null,
      [
        0.15343511144409344,
        0.08768778920173645
      ],
      38.72387719154358,
      1,
      1742270822.58177,
      1742270861.3075507,
      {}
    ],
    [
      538,
      null,
      209652396,
      null,
      [
        0.15177659234545463,
        0.08988512754440306
      ],
      125.91529774665833,
      1,
      1742270861.4478862,
      1742270987.3650155,
      {}
    ],
    [
      539,
      null,
      209652396,
      null,
      [
        0.15189941889043684,
        0.0999198567867279
      ],
      144.94284009933472,
      1,
      1742270987.5399618,
      1742271132.484881,
      {}
    ],
    [
      540,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742271132.6275492,
      1742271145.2514052,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      541,
      null,
      209652396,
      null,
      [
        0.15223727087499545,
        0.09033351421356202
      ],
      111.83902359008789,
      1,
      1742271145.3933647,
      1742271257.2341998,
      {}
    ],
    [
      542,
      null,
      209652396,
      null,
      [
        0.15076328631717853,
        0.09520680904388427
      ],
      278.4740333557129,
      1,
      1742271264.3582695,
      1742271542.8342624,
      {}
    ],
    [
      543,
      null,
      209652396,
      null,
      [
        0.15263661865458272,
        0.08894067406654357
      ],
      69.31788349151611,
      1,
      1742271542.9794276,
      1742271612.2993789,
      {}
    ],
    [
      544,
      null,
      209652396,
      null,
      [
        0.1510396236444141,
        0.09135103702545166
      ],
      133.26969075202942,
      1,
      1742271612.4442582,
      1742271745.7160096,
      {}
    ],
    [
      545,
      null,
      209652396,
      null,
      [
        0.15288222458881143,
        0.09529241919517517
      ],
      65.13438129425049,
      1,
      1742271745.8608599,
      1742271810.9972577,
      {}
    ],
    [
      546,
      null,
      209652396,
      null,
      [
        0.15186853659907554,
        0.09701055407524109
      ],
      233.10478854179382,
      1,
      1742271811.1410918,
      1742272044.2477212,
      {}
    ],
    [
      547,
      null,
      209652396,
      null,
      [
        0.1509782787477398,
        0.0982520282268524
      ],
      54.977559328079224,
      1,
      1742272044.3936694,
      1742272099.3731675,
      {}
    ],
    [
      548,
      null,
      209652396,
      null,
      [
        0.1493196276130408,
        0.09104756474494934
      ],
      60.03948998451233,
      1,
      1742272099.517571,
      1742272159.5588403,
      {}
    ],
    [
      549,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742272159.70437,
      1742272159.8023179,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      550,
      null,
      209652396,
      null,
      [
        0.15125460664382817,
        0.08695276737213134
      ],
      194.72314882278442,
      1,
      1742272166.5379713,
      1742272361.263129,
      {}
    ],
    [
      551,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742272361.4101455,
      1742272361.528948,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      552,
      null,
      209652396,
      null,
      [
        0.15140816458181727,
        0.09210778594017029
      ],
      74.95463371276855,
      1,
      1742272361.6750326,
      1742272436.6314611,
      {}
    ],
    [
      553,
      null,
      209652396,
      null,
      [
        0.15030248989829828,
        0.08875442147254944
      ],
      54.721914291381836,
      1,
      1742272436.7786634,
      1742272491.5025227,
      {}
    ],
    [
      554,
      null,
      209652396,
      null,
      [
        0.15002606769073834,
        0.09013578295707703
      ],
      67.7583339214325,
      1,
      1742272491.6477165,
      1742272559.4078677,
      {}
    ],
    [
      555,
      null,
      209652396,
      null,
      [
        0.16375408793073468,
        0.08921627044677734
      ],
      48.90666937828064,
      1,
      1742272559.5562093,
      1742272608.4648633,
      {}
    ],
    [
      556,
      null,
      209652396,
      null,
      [
        0.1529743857588169,
        0.0890650463104248
      ],
      66.01521944999695,
      1,
      1742272608.6117136,
      1742272674.6288986,
      {}
    ],
    [
      557,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742272674.7773173,
      1742272675.0471258,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      558,
      null,
      209652396,
      null,
      [
        0.15036383479497253,
        0.08859592795372011
      ],
      110.05292129516602,
      1,
      1742272682.3243558,
      1742272792.379471,
      {}
    ],
    [
      559,
      null,
      209652396,
      null,
      [
        0.15116239360251335,
        0.09539126992225647
      ],
      48.02402400970459,
      1,
      1742272792.5639513,
      1742272840.5900874,
      {}
    ],
    [
      560,
      null,
      209652396,
      null,
      [
        0.15076312127210328,
        0.09325613260269164
      ],
      149.86628365516663,
      1,
      1742272840.739128,
      1742272990.6074038,
      {}
    ],
    [
      561,
      null,
      209652396,
      null,
      [
        0.1528515497826875,
        0.0887779426574707
      ],
      43.18545627593994,
      1,
      1742272990.7574914,
      1742273033.9449284,
      {}
    ],
    [
      562,
      null,
      209652396,
      null,
      [
        0.1554313552068043,
        0.08566897749900818
      ],
      59.42225766181946,
      1,
      1742273034.0923553,
      1742273093.5165813,
      {}
    ],
    [
      563,
      null,
      209652396,
      null,
      [
        0.15159244448166603,
        0.08783725023269653
      ],
      214.73052167892456,
      1,
      1742273093.6650555,
      1742273308.3976047,
      {}
    ],
    [
      564,
      null,
      209652396,
      null,
      [
        0.1519915706292952,
        0.08901517629623412
      ],
      37.773834228515625,
      1,
      1742273308.5651395,
      1742273346.3409705,
      {}
    ],
    [
      565,
      null,
      209652396,
      null,
      [
        0.15183797968229107,
        0.08158119440078736
      ],
      97.66482090950012,
      1,
      1742273346.4892836,
      1742273444.1559882,
      {}
    ],
    [
      566,
      null,
      209652396,
      null,
      [
        0.15119309670207873,
        0.0897819709777832
      ],
      56.74862027168274,
      1,
      1742273451.2990413,
      1742273508.0497186,
      {}
    ],
    [
      567,
      null,
      209652396,
      null,
      [
        0.15143883938794117,
        0.0958332085609436
      ],
      155.6599042415619,
      1,
      1742273508.236541,
      1742273663.8984127,
      {}
    ],
    [
      568,
      null,
      209652396,
      null,
      [
        0.15131585722903088,
        0.09179477810859679
      ],
      114.25136399269104,
      1,
      1742273664.0513675,
      1742273778.3048303,
      {}
    ],
    [
      569,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742273778.4573379,
      1742273800.414486,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      570,
      null,
      209652396,
      null,
      [
        0.15070176694428192,
        0.09477877140045167
      ],
      76.55188608169556,
      1,
      1742273800.5646436,
      1742273877.1184368,
      {}
    ],
    [
      571,
      null,
      209652396,
      null,
      [
        0.1553387366261618,
        0.0778345239162445
      ],
      172.69160676002502,
      1,
      1742273877.3166842,
      1742274050.0109177,
      {}
    ],
    [
      572,
      null,
      209652396,
      null,
      [
        0.1534350454260634,
        0.08617791295051576
      ],
      40.42586159706116,
      1,
      1742274050.1663089,
      1742274090.594205,
      {}
    ],
    [
      573,
      null,
      209652396,
      null,
      [
        0.14999536459117296,
        0.0839610230922699
      ],
      140.21222352981567,
      1,
      1742274090.7476978,
      1742274230.9618895,
      {}
    ],
    [
      574,
      null,
      209652396,
      null,
      [
        0.15245222558096808,
        0.08457919359207153
      ],
      84.884840965271,
      1,
      1742274238.5075655,
      1742274323.3944182,
      {}
    ],
    [
      575,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742274323.5528617,
      1742274323.6607685,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      576,
      null,
      209652396,
      null,
      [
        0.17358222979480464,
        0.06885587811470033
      ],
      145.74254846572876,
      1,
      1742274323.8102808,
      1742274469.554676,
      {}
    ],
    [
      577,
      null,
      209652396,
      null,
      [
        0.16353953876408966,
        0.08610087096691131
      ],
      50.92609143257141,
      1,
      1742274469.7082837,
      1742274520.636334,
      {}
    ],
    [
      578,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742274520.792762,
      1742274520.901352,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      579,
      null,
      209652396,
      null,
      [
        0.15076306468522038,
        0.09021964073181152
      ],
      78.49963021278381,
      1,
      1742274521.0534236,
      1742274599.5549228,
      {}
    ],
    [
      580,
      null,
      209652396,
      null,
      [
        0.15168444532216985,
        0.08950351357460022
      ],
      46.60601592063904,
      1,
      1742274599.7075148,
      1742274646.315608,
      {}
    ],
    [
      581,
      null,
      209652396,
      null,
      [
        0.15067095067095068,
        0.08703814804553986
      ],
      41.8363401889801,
      1,
      1742274646.4720263,
      1742274688.3104234,
      {}
    ],
    [
      582,
      null,
      209652396,
      null,
      [
        0.15113168578737443,
        0.08816035628318787
      ],
      35.64845132827759,
      1,
      1742274688.7205281,
      1742274724.3710341,
      {}
    ],
    [
      583,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742274731.8066082,
      1742274731.8789682,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      584,
      null,
      209652396,
      null,
      [
        0.1499953551600258,
        0.09202141344547274
      ],
      460.0376646518707,
      1,
      1742274732.069143,
      1742275192.1087391,
      {}
    ],
    [
      585,
      null,
      209652396,
      null,
      [
        0.1515308873841808,
        0.08942200779914856
      ],
      48.701876401901245,
      1,
      1742275192.3121433,
      1742275241.016548,
      {}
    ],
    [
      586,
      null,
      209652396,
      null,
      [
        0.15110103927469196,
        0.09642068743705749
      ],
      116.47475051879883,
      1,
      1742275241.1701202,
      1742275357.6467447,
      {}
    ],
    [
      587,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742275357.8055928,
      1742275512.8748894,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      588,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742275513.0323071,
      1742275513.1188366,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      589,
      null,
      209652396,
      null,
      [
        0.15558489428249905,
        0.08340381383895874
      ],
      42.30820679664612,
      1,
      1742275513.275394,
      1742275555.5853872,
      {}
    ],
    [
      590,
      null,
      209652396,
      null,
      [
        0.15171519557747104,
        0.09433271527290345
      ],
      59.26697611808777,
      1,
      1742275563.1911855,
      1742275622.4603379,
      {}
    ],
    [
      591,
      null,
      209652396,
      null,
      [
        0.1515924727751075,
        0.08559678614139557
      ],
      90.35443043708801,
      1,
      1742275622.6157982,
      1742275712.97232,
      {}
    ],
    [
      592,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742275713.1302533,
      1742275713.269246,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      593,
      null,
      209652396,
      null,
      [
        0.15131596568722316,
        0.08443286657333374
      ],
      52.63414931297302,
      1,
      1742275713.4599965,
      1742275766.096006,
      {}
    ],
    [
      594,
      null,
      209652396,
      null,
      [
        0.15134678196055443,
        0.09704177975654601
      ],
      37.9965934753418,
      1,
      1742275766.252174,
      1742275804.2506878,
      {}
    ],
    [
      595,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742275804.4074452,
      1742275804.4982328,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      596,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742275804.655303,
      1742275836.693361,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      597,
      null,
      209652396,
      null,
      [
        0.1524215224814027,
        0.08787721037864685
      ],
      49.7220094203949,
      1,
      1742275836.8491771,
      1742275886.5729988,
      {}
    ],
    [
      598,
      null,
      209652396,
      null,
      [
        0.15094756150145372,
        0.08516124963760376
      ],
      113.6963050365448,
      1,
      1742275894.674373,
      1742276008.3727844,
      {}
    ],
    [
      599,
      null,
      209652396,
      null,
      [
        0.15331221888108115,
        0.08489720106124879
      ],
      41.52350163459778,
      1,
      1742276008.5325072,
      1742276050.0580156,
      {}
    ],
    [
      600,
      null,
      209652396,
      null,
      [
        0.1489205721990153,
        0.0910858404636383
      ],
      643.3690183162689,
      1,
      1742276050.2218633,
      1742276693.5928183,
      {}
    ],
    [
      601,
      null,
      209652396,
      null,
      [
        0.15239081938183735,
        0.08295389890670776
      ],
      77.20714664459229,
      1,
      1742276693.8046246,
      1742276771.0143588,
      {}
    ],
    [
      602,
      null,
      209652396,
      null,
      [
        0.151254564203666,
        0.09572375655174256
      ],
      102.18512606620789,
      1,
      1742276771.174694,
      1742276873.3619173,
      {}
    ],
    [
      603,
      null,
      209652396,
      null,
      [
        0.1517457949344177,
        0.08525307178497314
      ],
      60.65826773643494,
      1,
      1742276873.5234997,
      1742276934.1838818,
      {}
    ],
    [
      604,
      null,
      209652396,
      null,
      [
        0.1503331364109807,
        0.09110829055309295
      ],
      70.95176291465759,
      1,
      1742276934.392936,
      1742277005.3470566,
      {}
    ],
    [
      605,
      null,
      209652396,
      null,
      [
        0.15180729544501997,
        0.09076639056205749
      ],
      76.29914259910583,
      1,
      1742277005.505416,
      1742277081.8065147,
      {}
    ],
    [
      606,
      null,
      209652396,
      null,
      [
        0.1497189895393488,
        0.09180253505706788
      ],
      112.27864384651184,
      1,
      1742277082.2362008,
      1742277194.5168357,
      {}
    ],
    [
      607,
      null,
      209652396,
      null,
      [
        0.1507323804479493,
        0.0904530680179596
      ],
      73.25319981575012,
      1,
      1742277201.7028635,
      1742277274.9581249,
      {}
    ],
    [
      608,
      null,
      209652396,
      null,
      [
        0.15067101197340715,
        0.08301001250743867
      ],
      51.02187538146973,
      1,
      1742277275.118312,
      1742277326.1421742,
      {}
    ],
    [
      609,
      null,
      209652396,
      null,
      [
        0.14956539387677112,
        0.09413477957248688
      ],
      141.89287877082825,
      1,
      1742277326.302204,
      1742277468.197025,
      {}
    ],
    [
      610,
      null,
      209652396,
      null,
      [
        0.15085528715768234,
        0.09685703873634338
      ],
      228.94812488555908,
      1,
      1742277468.3585703,
      1742277697.308749,
      {}
    ],
    [
      611,
      null,
      209652396,
      null,
      [
        0.15091672165025455,
        0.0977801251411438
      ],
      43.435089349746704,
      1,
      1742277697.4700444,
      1742277740.9070995,
      {}
    ],
    [
      612,
      null,
      209652396,
      null,
      [
        0.1511316716406537,
        0.0877280592918396
      ],
      131.15365171432495,
      1,
      1742277741.0660818,
      1742277872.221692,
      {}
    ],
    [
      613,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742277872.384193,
      1742277872.4771616,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      614,
      null,
      209652396,
      null,
      [
        0.14892058163016247,
        0.09080335497856139
      ],
      156.29140067100525,
      1,
      1742277880.7802079,
      1742278037.0736005,
      {}
    ],
    [
      615,
      null,
      209652396,
      null,
      [
        0.1593008747200364,
        0.07857812166213989
      ],
      43.809205293655396,
      1,
      1742278037.2356968,
      1742278081.046949,
      {}
    ],
    [
      616,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742278081.2070575,
      1742278081.290752,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      617,
      null,
      209652396,
      null,
      [
        0.14968822042175334,
        0.09829167604446411
      ],
      181.3214225769043,
      1,
      1742278081.4506195,
      1742278262.7738364,
      {}
    ],
    [
      618,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742278262.935946,
      1742278262.98831,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      619,
      null,
      209652396,
      null,
      [
        0.15125448875448877,
        0.09170152068138122
      ],
      48.41717219352722,
      1,
      1742278263.1487293,
      1742278311.5676386,
      {}
    ],
    [
      620,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742278311.7290487,
      1742278325.7396476,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      621,
      null,
      209652396,
      null,
      [
        0.15407997556201147,
        0.0926395285129547
      ],
      128.9903302192688,
      1,
      1742278325.9041867,
      1742278454.8965268,
      {}
    ],
    [
      622,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742278462.6306043,
      1742278462.757853,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      623,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742278462.9374657,
      1742278463.0261996,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      624,
      null,
      209652396,
      null,
      [
        0.15291302671542192,
        0.09291220068931579
      ],
      85.33710408210754,
      1,
      1742278463.2143629,
      1742278548.5533133,
      {}
    ],
    [
      625,
      null,
      209652396,
      null,
      [
        0.15005678965259803,
        0.09323630392551421
      ],
      102.91856122016907,
      1,
      1742278548.7186472,
      1742278651.639225,
      {}
    ],
    [
      626,
      null,
      209652396,
      null,
      [
        0.15236016815358136,
        0.0991470992565155
      ],
      46.98053503036499,
      1,
      1742278651.8048933,
      1742278698.7874207,
      {}
    ],
    [
      627,
      null,
      209652396,
      null,
      [
        0.1483062791446025,
        0.09050566792488099
      ],
      81.60298562049866,
      1,
      1742278698.9508395,
      1742278780.5556533,
      {}
    ],
    [
      628,
      null,
      209652396,
      null,
      [
        0.15011821942959666,
        0.09095738649368286
      ],
      68.99321866035461,
      1,
      1742278780.7229629,
      1742278849.7182727,
      {}
    ],
    [
      629,
      null,
      209652396,
      null,
      [
        0.1493811894260996,
        0.0903175950050354
      ],
      82.5852575302124,
      1,
      1742278849.884713,
      1742278932.4719813,
      {}
    ],
    [
      630,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742278940.9226263,
      1742278941.015278,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      631,
      null,
      209652396,
      null,
      [
        0.1517459175393307,
        0.09155198574066162
      ],
      42.75426483154297,
      1,
      1742278941.185427,
      1742278983.941444,
      {}
    ],
    [
      632,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742278984.1057515,
      1742278984.191373,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      633,
      null,
      209652396,
      null,
      [
        0.15248293339610702,
        0.08479903221130372
      ],
      150.20229196548462,
      1,
      1742278984.3554516,
      1742279134.5595953,
      {}
    ],
    [
      634,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742279134.7773604,
      1742279226.5866787,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      635,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742279226.755938,
      1742279226.919208,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      636,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742279227.0847962,
      1742279227.1643496,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      637,
      null,
      209652396,
      null,
      [
        0.15183809285605693,
        0.0850218439102173
      ],
      146.90504932403564,
      1,
      1742279227.329245,
      1742279374.2361257,
      {}
    ],
    [
      638,
      null,
      209652396,
      null,
      [
        0.15036393853759122,
        0.09203060626983643
      ],
      328.03568840026855,
      1,
      1742279382.7440832,
      1742279710.7820642,
      {}
    ],
    [
      639,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742279710.9551017,
      1742279711.035421,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      640,
      null,
      209652396,
      null,
      [
        0.15236011628227195,
        0.0927306628227234
      ],
      63.75991773605347,
      1,
      1742279711.2555325,
      1742279775.0178375,
      {}
    ],
    [
      641,
      null,
      209652396,
      null,
      [
        0.15024100824999026,
        0.09329225301742554
      ],
      57.644843101501465,
      1,
      1742279775.192942,
      1742279832.8397093,
      {}
    ],
    [
      642,
      null,
      209652396,
      null,
      [
        0.15202225015099263,
        0.08761468648910523
      ],
      60.60120725631714,
      1,
      1742279833.0077527,
      1742279893.6108246,
      {}
    ],
    [
      643,
      null,
      209652396,
      null,
      [
        0.1507324889061416,
        0.08664414525032044
      ],
      44.17626953125,
      1,
      1742279893.783499,
      1742279937.9615824,
      {}
    ],
    [
      644,
      null,
      209652396,
      null,
      [
        0.15371145348690257,
        0.09552909612655638
      ],
      55.26895356178284,
      1,
      1742279938.1283166,
      1742279993.3991098,
      {}
    ],
    [
      645,
      null,
      209652396,
      null,
      [
        0.15073244175040582,
        0.09349890947341918
      ],
      35.62836170196533,
      1,
      1742279993.566596,
      1742280029.1968257,
      {}
    ],
    [
      646,
      null,
      209652396,
      null,
      [
        0.15091666506337162,
        0.09101951003074646
      ],
      152.9962079524994,
      1,
      1742280037.169688,
      1742280190.1678288,
      {}
    ],
    [
      647,
      null,
      209652396,
      null,
      [
        0.15245231989243965,
        0.09696487069129944
      ],
      78.03093075752258,
      1,
      1742280190.3429503,
      1742280268.3759878,
      {}
    ],
    [
      648,
      null,
      209652396,
      null,
      [
        0.15153098641122592,
        0.08669460535049438
      ],
      48.496471643447876,
      1,
      1742280268.5481327,
      1742280317.0466442,
      {}
    ],
    [
      649,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742280317.2194383,
      1742280317.3114061,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      650,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742280317.4801223,
      1742280317.5577338,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      651,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742280317.7257042,
      1742280825.9630752,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      652,
      null,
      209652396,
      null,
      [
        0.15309718401035768,
        0.0932837438583374
      ],
      53.18361043930054,
      1,
      1742280826.136507,
      1742280879.3235183,
      {}
    ],
    [
      653,
      null,
      209652396,
      null,
      [
        0.15285163937858548,
        0.09305804729461671
      ],
      38.5543372631073,
      1,
      1742280879.4929764,
      1742280918.0491536,
      {}
    ],
    [
      654,
      null,
      209652396,
      null,
      [
        0.15048673207355842,
        0.09159450411796569
      ],
      61.44545078277588,
      1,
      1742280926.5555592,
      1742280988.0029018,
      {}
    ],
    [
      655,
      null,
      209652396,
      null,
      [
        0.15119314857338811,
        0.08355955958366394
      ],
      43.74490737915039,
      1,
      1742280988.1751888,
      1742281031.9220085,
      {}
    ],
    [
      656,
      null,
      209652396,
      null,
      [
        0.15294369680597225,
        0.08896233439445496
      ],
      234.30830693244934,
      1,
      1742281032.0928693,
      1742281266.4030662,
      {}
    ],
    [
      657,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742281266.5783734,
      1742281307.4088192,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      658,
      null,
      209652396,
      null,
      [
        0.15322005771107566,
        0.08718851447105407
      ],
      58.09853458404541,
      1,
      1742281307.5819595,
      1742281365.6824365,
      {}
    ],
    [
      659,
      null,
      209652396,
      null,
      [
        0.15275939332825558,
        0.08265330553054809
      ],
      46.86883568763733,
      1,
      1742281365.8558588,
      1742281412.7266068,
      {}
    ],
    [
      660,
      null,
      209652396,
      null,
      [
        0.15067108270701085,
        0.09703825235366823
      ],
      39.16222405433655,
      1,
      1742281412.8984795,
      1742281452.0625925,
      {}
    ],
    [
      661,
      null,
      209652396,
      null,
      [
        0.19864217888169983,
        0.057383303642272954
      ],
      245.6067807674408,
      1,
      1742281452.2344346,
      1742281697.8431022,
      {}
    ],
    [
      662,
      null,
      209652396,
      null,
      [
        0.15328148277250073,
        0.08272114634513854
      ],
      149.45610857009888,
      1,
      1742281706.3543868,
      1742281855.812379,
      {}
    ],
    [
      663,
      null,
      209652396,
      null,
      [
        0.15189942360601044,
        0.08322385191917418
      ],
      85.71398544311523,
      1,
      1742281855.9866695,
      1742281941.702585,
      {}
    ],
    [
      664,
      null,
      209652396,
      null,
      [
        0.1517765923454546,
        0.083488028049469
      ],
      90.55093240737915,
      1,
      1742281941.874911,
      1742282032.4277084,
      {}
    ],
    [
      665,
      null,
      209652396,
      null,
      [
        0.15189933872568603,
        0.09026971340179443
      ],
      44.60205340385437,
      1,
      1742282032.6014643,
      1742282077.205467,
      {}
    ],
    [
      666,
      null,
      209652396,
      null,
      [
        0.1517458562368742,
        0.08669756889343264
      ],
      76.09457540512085,
      1,
      1742282077.377513,
      1742282153.473978,
      {}
    ],
    [
      667,
      null,
      209652396,
      null,
      [
        0.15340438948223378,
        0.09133027076721192
      ],
      60.92578148841858,
      1,
      1742282153.6490216,
      1742282214.5768194,
      {}
    ],
    [
      668,
      null,
      209652396,
      null,
      [
        0.1509166744945188,
        0.09011280179023742
      ],
      47.01492786407471,
      1,
      1742282214.7591453,
      1742282261.7760007,
      {}
    ],
    [
      669,
      null,
      209652396,
      null,
      [
        0.15248293339610705,
        0.08554131388664246
      ],
      68.63458490371704,
      1,
      1742282261.9494553,
      1742282330.5859299,
      {}
    ],
    [
      670,
      null,
      209652396,
      null,
      [
        0.1500568226616131,
        0.09453171372413635
      ],
      95.16688513755798,
      1,
      1742282339.2163699,
      1742282434.3853807,
      {}
    ],
    [
      671,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742282434.5617871,
      1742282434.642071,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      672,
      null,
      209652396,
      null,
      [
        0.15291294183509752,
        0.09228856682777406
      ],
      39.76354241371155,
      1,
      1742282434.816441,
      1742282474.5817719,
      {}
    ],
    [
      673,
      null,
      209652396,
      null,
      [
        0.150517477613286,
        0.09620240926742554
      ],
      45.240089893341064,
      1,
      1742282474.7563968,
      1742282519.998434,
      {}
    ],
    [
      674,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742282520.174194,
      1742282807.2027078,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      675,
      null,
      209652396,
      null,
      [
        0.15064030415826823,
        0.08842603206634522
      ],
      121.47124934196472,
      1,
      1742282807.3797774,
      1742282928.8531413,
      {}
    ],
    [
      676,
      null,
      209652396,
      null,
      [
        0.15936238937735944,
        0.0879511821269989
      ],
      58.57469987869263,
      1,
      1742282929.0304089,
      1742282987.6071825,
      {}
    ],
    [
      677,
      null,
      209652396,
      null,
      [
        0.1489205721990153,
        0.09360042452812194
      ],
      188.47716212272644,
      1,
      1742282987.7871592,
      1742283176.266413,
      {}
    ],
    [
      678,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742283184.9237595,
      1742283327.0597131,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      679,
      null,
      209652396,
      null,
      [
        0.15014891781358847,
        0.09005126595497132
      ],
      94.61135387420654,
      1,
      1742283327.238021,
      1742283421.8513272,
      {}
    ],
    [
      680,
      null,
      209652396,
      null,
      [
        0.15334300214539737,
        0.0916558611392975
      ],
      116.24195790290833,
      1,
      1742283422.035701,
      1742283538.2797394,
      {}
    ],
    [
      681,
      null,
      209652396,
      null,
      [
        0.15346581454365885,
        0.08814930081367493
      ],
      86.72127842903137,
      1,
      1742283538.4577823,
      1742283625.181133,
      {}
    ],
    [
      682,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742283625.3604136,
      1742283625.4594862,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      683,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742283625.6356735,
      1742283625.676442,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      684,
      null,
      209652396,
      null,
      [
        0.15279008699667382,
        0.08459187746047972
      ],
      43.65774750709534,
      1,
      1742283625.8553176,
      1742283669.5148432,
      {}
    ],
    [
      685,
      null,
      209652396,
      null,
      [
        0.15441770965723062,
        0.09995782971382142
      ],
      63.691508531570435,
      1,
      1742283669.693435,
      1742283733.3869731,
      {}
    ],
    [
      686,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742283742.2435591,
      1742283742.3342319,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      687,
      null,
      209652396,
      null,
      [
        0.15297441876783197,
        0.08938362717628479
      ],
      55.80458927154541,
      1,
      1742283742.5532238,
      1742283798.3596783,
      {}
    ],
    [
      688,
      null,
      209652396,
      null,
      [
        0.15180733316960862,
        0.0882561194896698
      ],
      34.221752882003784,
      1,
      1742283798.545077,
      1742283832.768805,
      {}
    ],
    [
      689,
      null,
      209652396,
      null,
      [
        0.15177656405201315,
        0.09031970500946043
      ],
      64.8723635673523,
      1,
      1742283832.949998,
      1742283897.8242033,
      {}
    ],
    [
      690,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742283898.0328736,
      1742283898.121964,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      691,
      null,
      209652396,
      null,
      [
        0.14999547304936528,
        0.08286299347877502
      ],
      61.56515598297119,
      1,
      1742283898.3002536,
      1742283959.8672633,
      {}
    ],
    [
      692,
      null,
      209652396,
      null,
      [
        0.15294369209039865,
        0.08351045608520506
      ],
      37.3951199054718,
      1,
      1742283960.0500686,
      1742283997.4473095,
      {}
    ],
    [
      693,
      null,
      209652396,
      null,
      [
        0.15143892898383915,
        0.09147168755531312
      ],
      295.8432786464691,
      1,
      1742283997.6310792,
      1742284293.4765084,
      {}
    ],
    [
      694,
      null,
      209652396,
      null,
      [
        0.15331228489911125,
        0.0921801006793976
      ],
      70.92622375488281,
      1,
      1742284302.823839,
      1742284373.7521567,
      {}
    ],
    [
      695,
      null,
      209652396,
      null,
      [
        0.15331228489911125,
        0.09615971207618713
      ],
      57.088732957839966,
      1,
      1742284373.9336507,
      1742284431.0242617,
      {}
    ],
    [
      696,
      null,
      209652396,
      null,
      [
        0.15082449917779256,
        0.08612979292869567
      ],
      229.56112480163574,
      1,
      1742284431.204442,
      1742284660.767418,
      {}
    ],
    [
      697,
      null,
      209652396,
      null,
      [
        0.1525443867509736,
        0.08504768133163451
      ],
      48.16360640525818,
      1,
      1742284660.949755,
      1742284709.1153028,
      {}
    ],
    [
      698,
      null,
      209652396,
      null,
      [
        0.15097809012479668,
        0.09451868891716003
      ],
      84.49339199066162,
      1,
      1742284709.2964675,
      1742284793.791863,
      {}
    ],
    [
      699,
      null,
      209652396,
      null,
      [
        0.1489204684563966,
        0.09518148541450501
      ],
      279.152779340744,
      1,
      1742284793.977363,
      1742285073.1322277,
      {}
    ],
    [
      700,
      null,
      209652396,
      null,
      [
        0.15008750689888414,
        0.07770191907882691
      ],
      107.50603342056274,
      1,
      1742285073.316261,
      1742285180.8243606,
      {}
    ],
    [
      701,
      null,
      209652396,
      null,
      [
        0.1510088781046865,
        0.0902710497379303
      ],
      437.3708064556122,
      1,
      1742285181.0088313,
      1742285618.3816996,
      {}
    ],
    [
      702,
      null,
      209652396,
      null,
      [
        0.14993394896089504,
        0.09525302767753602
      ],
      52.415231227874756,
      1,
      1742285618.9116695,
      1742285671.3287954,
      {}
    ],
    [
      703,
      null,
      209652396,
      null,
      [
        0.151008849811245,
        0.09107555508613586
      ],
      179.66747784614563,
      1,
      1742285671.5108082,
      1742285851.180092,
      {}
    ],
    [
      704,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742285859.5966182,
      1742285859.6909292,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      705,
      null,
      209652396,
      null,
      [
        0.15202235860918495,
        0.07948034226894378
      ],
      63.2609965801239,
      1,
      1742285859.8889015,
      1742285923.1518686,
      {}
    ],
    [
      706,
      null,
      209652396,
      null,
      [
        0.15183807399376262,
        0.0910124158859253
      ],
      69.52189207077026,
      1,
      1742285923.337506,
      1742285992.8614972,
      {}
    ],
    [
      707,
      null,
      209652396,
      null,
      [
        0.19302341263419107,
        0.06414064884185791
      ],
      87.55238604545593,
      1,
      1742285993.0462244,
      1742286080.6007078,
      {}
    ],
    [
      708,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742286080.7882838,
      1742286080.8295286,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      709,
      null,
      209652396,
      null,
      [
        0.15143882995679403,
        0.08936598896980286
      ],
      88.03373718261719,
      1,
      1742286081.0108821,
      1742286169.0464642,
      {}
    ],
    [
      710,
      null,
      209652396,
      null,
      [
        0.1531587411078429,
        0.08888329029083253
      ],
      185.42545366287231,
      1,
      1742286178.176241,
      1742286363.6037972,
      {}
    ],
    [
      711,
      null,
      209652396,
      null,
      [
        0.15017961619758027,
        0.09375770211219787
      ],
      731.1458594799042,
      1,
      1742286363.7891507,
      1742287094.9370782,
      {}
    ],
    [
      712,
      null,
      209652396,
      null,
      [
        0.15263659979228844,
        0.08512130141258241
      ],
      118.58996343612671,
      1,
      1742287095.123124,
      1742287213.7150943,
      {}
    ],
    [
      713,
      null,
      209652396,
      null,
      [
        0.1495346624837643,
        0.09668845415115357
      ],
      67.5480146408081,
      1,
      1742287213.9024425,
      1742287281.4524388,
      {}
    ],
    [
      714,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742287281.6801722,
      1742287281.7838032,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      715,
      null,
      209652396,
      null,
      [
        0.15036393382201763,
        0.09274200797080993
      ],
      75.83064126968384,
      1,
      1742287282.008329,
      1742287357.8407562,
      {}
    ],
    [
      716,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742287358.0268164,
      1742287358.0709395,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      717,
      null,
      209652396,
      null,
      [
        0.1510394821772067,
        0.09074679970741273
      ],
      56.031893730163574,
      1,
      1742287358.2543328,
      1742287414.2879498,
      {}
    ],
    [
      718,
      null,
      209652396,
      null,
      [
        0.15862526977796437,
        0.09225462675094605
      ],
      48.14279866218567,
      1,
      1742287423.3814838,
      1742287471.5261924,
      {}
    ],
    [
      719,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742287471.7565284,
      1742287471.8642168,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      720,
      null,
      209652396,
      null,
      [
        0.15966959013366197,
        0.0903927779197693
      ],
      50.29753065109253,
      1,
      1742287472.0506656,
      1742287522.350053,
      {}
    ],
    [
      721,
      null,
      209652396,
      null,
      [
        0.1536499907008889,
        0.08840538620948792
      ],
      44.81407880783081,
      1,
      1742287522.53599,
      1742287567.3519502,
      {}
    ],
    [
      722,
      null,
      209652396,
      null,
      [
        0.15060959162755572,
        0.09721808552742005
      ],
      92.87470078468323,
      1,
      1742287567.596729,
      1742287660.4737935,
      {}
    ],
    [
      723,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742287660.6616895,
      1742287662.1688118,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      724,
      null,
      209652396,
      null,
      [
        0.15189959336665926,
        0.09216338276863098
      ],
      108.5442304611206,
      1,
      1742287662.35973,
      1742287770.9059181,
      {}
    ],
    [
      725,
      null,
      209652396,
      null,
      [
        0.15033322600687868,
        0.08665519714355469
      ],
      46.61420392990112,
      1,
      1742287771.0965269,
      1742287817.7127738,
      {}
    ],
    [
      726,
      null,
      209652396,
      null,
      [
        0.15933170514008838,
        0.07722630560398101
      ],
      109.88313031196594,
      1,
      1742287827.1853507,
      1742287937.0705552,
      {}
    ],
    [
      727,
      null,
      209652396,
      null,
      [
        0.15193032475966606,
        0.08804585337638855
      ],
      158.47205758094788,
      1,
      1742287937.263735,
      1742288095.7379253,
      {}
    ],
    [
      728,
      null,
      209652396,
      null,
      [
        0.15033312697983356,
        0.09046125173568725
      ],
      146.43147706985474,
      1,
      1742288095.9293523,
      1742288242.3629096,
      {}
    ],
    [
      729,
      null,
      209652396,
      null,
      [
        0.15156159048374618,
        0.09650482594966889
      ],
      44.386945962905884,
      1,
      1742288242.5536637,
      1742288286.942772,
      {}
    ],
    [
      730,
      null,
      209652396,
      null,
      [
        0.15309727360625563,
        0.08536192059516907
      ],
      59.036046504974365,
      1,
      1742288287.1411457,
      1742288346.1793187,
      {}
    ],
    [
      731,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742288346.373557,
      1742288346.4540184,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      732,
      null,
      209652396,
      null,
      [
        0.14901259190181343,
        0.09472819685935974
      ],
      304.16628193855286,
      1,
      1742288346.641421,
      1742288650.8095543,
      {}
    ],
    [
      733,
      null,
      209652396,
      null,
      [
        0.15248299469856358,
        0.08902559161186219
      ],
      113.97095274925232,
      1,
      1742288651.0038462,
      1742288764.9769163,
      {}
    ],
    [
      734,
      null,
      209652396,
      null,
      [
        0.15140814571952296,
        0.09153112173080444
      ],
      55.94588899612427,
      1,
      1742288774.7008512,
      1742288830.6486776,
      {}
    ],
    [
      735,
      null,
      209652396,
      null,
      [
        0.150118148695993,
        0.09728443264961242
      ],
      169.8985583782196,
      1,
      1742288830.8407984,
      1742289000.741505,
      {}
    ],
    [
      736,
      null,
      209652396,
      null,
      [
        0.1513158525134573,
        0.09118677854537964
      ],
      112.0275936126709,
      1,
      1742289000.9337854,
      1742289112.963389,
      {}
    ],
    [
      737,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742289113.2012358,
      1742289113.29312,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      738,
      null,
      209652396,
      null,
      [
        0.15263661865458275,
        0.09003301978111267
      ],
      110.3023042678833,
      1,
      1742289113.5273342,
      1742289223.8315353,
      {}
    ],
    [
      739,
      null,
      209652396,
      null,
      [
        0.150087530476752,
        0.10042280912399293
      ],
      59.68425011634827,
      1,
      1742289224.025152,
      1742289283.7115014,
      {}
    ],
    [
      740,
      null,
      209652396,
      null,
      [
        0.1536191980054255,
        0.08791151046752929
      ],
      55.2018883228302,
      1,
      1742289283.9049635,
      1742289339.1088548,
      {}
    ],
    [
      741,
      null,
      209652396,
      null,
      [
        0.1526672981762802,
        0.0836087417602539
      ],
      43.020357847213745,
      1,
      1742289339.360967,
      1742289382.3836367,
      {}
    ],
    [
      742,
      null,
      209652396,
      null,
      [
        0.17831209156059452,
        0.07095292687416077
      ],
      40.93622922897339,
      1,
      1742289391.7008274,
      1742289432.6389244,
      {}
    ],
    [
      743,
      null,
      209652396,
      null,
      [
        0.1504254437637671,
        0.09220245480537415
      ],
      227.52089095115662,
      1,
      1742289432.8295124,
      1742289660.3524008,
      {}
    ],
    [
      744,
      null,
      209652396,
      null,
      [
        0.15122379980164408,
        0.08543498992919922
      ],
      45.70384383201599,
      1,
      1742289660.546395,
      1742289706.252167,
      {}
    ],
    [
      745,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742289706.4443667,
      1742289706.5243645,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      746,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742289706.7160685,
      1742289706.7948682,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      747,
      null,
      209652396,
      null,
      [
        0.15196100899693715,
        0.09593582868576049
      ],
      44.178202390670776,
      1,
      1742289706.9851823,
      1742289751.1651783,
      {}
    ],
    [
      748,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742289751.3590202,
      1742289751.4606287,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      749,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742289751.655376,
      1742289751.718627,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      750,
      null,
      209652396,
      null,
      [
        0.15318944420740827,
        0.07932769238948822
      ],
      167.1046657562256,
      1,
      1742289761.086115,
      1742289928.1927202,
      {}
    ],
    [
      751,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742289928.3888574,
      1742289937.798864,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      752,
      null,
      209652396,
      null,
      [
        0.1537115147893591,
        0.08536896228790283
      ],
      55.45787191390991,
      1,
      1742289938.056399,
      1742289993.516612,
      {}
    ],
    [
      753,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742289993.714815,
      1742290001.728649,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      754,
      null,
      209652396,
      null,
      [
        0.1506709223775092,
        0.08307658553123475
      ],
      40.843465089797974,
      1,
      1742290001.9295273,
      1742290042.774774,
      {}
    ],
    [
      755,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742290042.9707234,
      1742290143.8033197,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      756,
      null,
      209652396,
      null,
      [
        0.15291292768837678,
        0.08776580691337585
      ],
      86.99794816970825,
      1,
      1742290144.002376,
      1742290231.0023682,
      {}
    ],
    [
      757,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742290231.1985533,
      1742290231.2937813,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      758,
      null,
      209652396,
      null,
      [
        0.14873619327212143,
        0.08895010828971864
      ],
      444.58668851852417,
      1,
      1742290241.4079447,
      1742290685.996734,
      {}
    ],
    [
      759,
      null,
      209652396,
      null,
      [
        0.1518380504158947,
        0.09464703083038331
      ],
      67.75719785690308,
      1,
      1742290686.1990502,
      1742290753.9582434,
      {}
    ],
    [
      760,
      null,
      209652396,
      null,
      [
        0.17226090721599702,
        0.07265617370605469
      ],
      58.39927935600281,
      1,
      1742290754.1542091,
      1742290812.5553226,
      {}
    ],
    [
      761,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742290812.756087,
      1742290853.1669097,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      762,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742290853.371727,
      1742290879.2194116,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      763,
      null,
      209652396,
      null,
      [
        0.14944251546047954,
        0.09594643115997314
      ],
      113.37513303756714,
      1,
      1742290879.425675,
      1742290992.8033874,
      {}
    ],
    [
      764,
      null,
      209652396,
      null,
      [
        0.15331224245894903,
        0.08579058766365052
      ],
      60.632800817489624,
      1,
      1742290993.003586,
      1742291053.6385012,
      {}
    ],
    [
      765,
      null,
      209652396,
      null,
      [
        0.15601477068542935,
        0.09053858041763305
      ],
      98.50995707511902,
      1,
      1742291053.837913,
      1742291152.349968,
      {}
    ],
    [
      766,
      null,
      209652396,
      null,
      [
        0.16568856239514923,
        0.07963555037975312
      ],
      255.77062439918518,
      1,
      1742291162.3784153,
      1742291418.151145,
      {}
    ],
    [
      767,
      null,
      209652396,
      null,
      [
        0.15186878180890157,
        0.09164200663566589
      ],
      77.3191020488739,
      1,
      1742291418.3499398,
      1742291495.6711981,
      {}
    ],
    [
      768,
      null,
      209652396,
      null,
      [
        0.1530357730956533,
        0.09109313607215881
      ],
      273.6713044643402,
      1,
      1742291495.872839,
      1742291769.5462503,
      {}
    ],
    [
      769,
      null,
      209652396,
      null,
      [
        0.15174586095244774,
        0.08621750712394713
      ],
      56.87830853462219,
      1,
      1742291769.7447555,
      1742291826.6250262,
      {}
    ],
    [
      770,
      null,
      209652396,
      null,
      [
        0.14901259661738703,
        0.0907925546169281
      ],
      41.17023682594299,
      1,
      1742291826.823356,
      1742291867.9953825,
      {}
    ],
    [
      771,
      null,
      209652396,
      null,
      [
        0.15076312598767688,
        0.09031468987464905
      ],
      42.443785667419434,
      1,
      1742291868.196755,
      1742291910.6423907,
      {}
    ],
    [
      772,
      null,
      209652396,
      null,
      [
        0.16138942583553362,
        0.07381154477596283
      ],
      76.97734808921814,
      1,
      1742291910.8406107,
      1742291987.8198576,
      {}
    ],
    [
      773,
      null,
      209652396,
      null,
      [
        0.15033319299786363,
        0.0968765938282013
      ],
      52.156062841415405,
      1,
      1742291988.0214427,
      1742292040.1795118,
      {}
    ],
    [
      774,
      null,
      209652396,
      null,
      [
        0.15137734359291247,
        0.09382973432540893
      ],
      45.78577923774719,
      1,
      1742292050.1727443,
      1742292095.9606297,
      {}
    ],
    [
      775,
      null,
      209652396,
      null,
      [
        0.15045609027644954,
        0.0928382980823517
      ],
      219.34956765174866,
      1,
      1742292096.161268,
      1742292315.5128255,
      {}
    ],
    [
      776,
      null,
      209652396,
      null,
      [
        0.15165391198325331,
        0.09776790499687195
      ],
      494.26235723495483,
      1,
      1742292315.716497,
      1742292809.9807782,
      {}
    ],
    [
      777,
      null,
      209652396,
      null,
      [
        0.15275943105284423,
        0.085202077627182
      ],
      42.652175426483154,
      1,
      1742292810.1833365,
      1742292852.8375251,
      {}
    ],
    [
      778,
      null,
      209652396,
      null,
      [
        0.15309723588166702,
        0.0898397433757782
      ],
      144.7571518421173,
      1,
      1742292853.0373068,
      1742292997.7963877,
      {}
    ],
    [
      779,
      null,
      209652396,
      null,
      [
        0.15156170365751204,
        0.09166426539421083
      ],
      41.243062019348145,
      1,
      1742292998.0030622,
      1742293039.24807,
      {}
    ],
    [
      780,
      null,
      209652396,
      null,
      [
        0.15064038903859261,
        0.09485787868499757
      ],
      98.43653750419617,
      1,
      1742293039.4481769,
      1742293137.8866186,
      {}
    ],
    [
      781,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742293138.089202,
      1742293138.133148,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      782,
      null,
      209652396,
      null,
      [
        0.15183803626917397,
        0.09593242287635803
      ],
      99.51289677619934,
      1,
      1742293147.975782,
      1742293247.49053,
      {}
    ],
    [
      783,
      null,
      209652396,
      null,
      [
        0.15137739074864826,
        0.0890168023109436
      ],
      45.87867832183838,
      1,
      1742293247.6918073,
      1742293293.5724347,
      {}
    ],
    [
      784,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742293293.7746162,
      1742293359.6143763,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      785,
      null,
      209652396,
      null,
      [
        0.15030251347616616,
        0.08665342092514036
      ],
      608.6526708602905,
      1,
      1742293359.8188071,
      1742293968.4735534,
      {}
    ],
    [
      786,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742293968.7449307,
      1742293968.8487568,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      787,
      null,
      209652396,
      null,
      [
        0.15450994156083978,
        0.09198870539665222
      ],
      128.69584941864014,
      1,
      1742293969.0500388,
      1742294097.747716,
      {}
    ],
    [
      788,
      null,
      209652396,
      null,
      [
        0.15794971199162816,
        0.08290730237960817
      ],
      43.608378171920776,
      1,
      1742294097.9523258,
      1742294141.5627859,
      {}
    ],
    [
      789,
      null,
      209652396,
      null,
      [
        0.15091676409041677,
        0.09274756789207458
      ],
      486.6927750110626,
      1,
      1742294141.7650945,
      1742294628.4598541,
      {}
    ],
    [
      790,
      null,
      209652396,
      null,
      [
        0.1499032411457561,
        0.09435316324234008
      ],
      76.42348265647888,
      1,
      1742294629.1936371,
      1742294705.6191008,
      {}
    ],
    [
      791,
      null,
      209652396,
      null,
      [
        0.14928901882494697,
        0.09410242199897766
      ],
      57.09567952156067,
      1,
      1742294705.8248289,
      1742294762.9224536,
      {}
    ],
    [
      792,
      null,
      209652396,
      null,
      [
        0.15189956035764418,
        0.09536566495895386
      ],
      50.09224462509155,
      1,
      1742294772.6517863,
      1742294822.7458785,
      {}
    ],
    [
      793,
      null,
      209652396,
      null,
      [
        0.15153093925549016,
        0.09726673483848572
      ],
      40.618008613586426,
      1,
      1742294822.9500713,
      1742294863.569879,
      {}
    ],
    [
      794,
      null,
      209652396,
      null,
      [
        0.15245224444326239,
        0.09243090629577635
      ],
      86.6251003742218,
      1,
      1742294863.773639,
      1742294950.4005826,
      {}
    ],
    [
      795,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742294950.6070573,
      1742294950.710221,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      796,
      null,
      209652396,
      null,
      [
        0.1495347615108094,
        0.09713525533676147
      ],
      269.336918592453,
      1,
      1742294950.9148412,
      1742295220.2536287,
      {}
    ],
    [
      797,
      null,
      209652396,
      null,
      [
        0.1503331882822901,
        0.08957000851631165
      ],
      158.3395869731903,
      1,
      1742295220.4633503,
      1742295378.8050637,
      {}
    ],
    [
      798,
      null,
      209652396,
      null,
      [
        0.15165377051604595,
        0.09247400403022765
      ],
      129.1367883682251,
      1,
      1742295389.2291307,
      1742295518.3679924,
      {}
    ],
    [
      799,
      null,
      209652396,
      null,
      [
        0.15116249734513204,
        0.09033743202686309
      ],
      90.74346590042114,
      1,
      1742295518.6049173,
      1742295609.3504822,
      {}
    ],
    [
      800,
      null,
      209652396,
      null,
      [
        0.15361939134394223,
        0.08592310190200805
      ],
      36.829930782318115,
      1,
      1742295609.5601828,
      1742295646.3921814,
      {}
    ],
    [
      801,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742295646.5985034,
      1742295685.9337902,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      802,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742295686.1432996,
      1742295760.2451906,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      803,
      null,
      209652396,
      null,
      [
        0.15180741804993297,
        0.08739566326141358
      ],
      41.334033250808716,
      1,
      1742295760.460271,
      1742295801.7969036,
      {}
    ],
    [
      804,
      null,
      209652396,
      null,
      [
        0.16016070297507426,
        0.08808795213699341
      ],
      66.90760064125061,
      1,
      1742295802.002437,
      1742295868.9119532,
      {}
    ],
    [
      805,
      null,
      209652396,
      null,
      [
        0.15051740687968235,
        0.08889811873435974
      ],
      125.36969637870789,
      1,
      1742295869.1207085,
      1742295994.4926012,
      {}
    ],
    [
      806,
      null,
      209652396,
      null,
      [
        0.15358853734602235,
        0.09978147864341737
      ],
      41.01463532447815,
      1,
      1742295995.1438959,
      1742296036.1604128,
      {}
    ],
    [
      807,
      null,
      209652396,
      null,
      [
        0.15196103729037863,
        0.09413723468780519
      ],
      64.39582061767578,
      1,
      1742296045.8291538,
      1742296110.2270024,
      {}
    ],
    [
      808,
      null,
      209652396,
      null,
      [
        0.1507938479495366,
        0.09145147919654847
      ],
      41.00836515426636,
      1,
      1742296110.4347916,
      1742296151.4449708,
      {}
    ],
    [
      809,
      null,
      209652396,
      null,
      [
        0.14993404327236665,
        0.09032232642173768
      ],
      64.55330634117126,
      1,
      1742296151.6524842,
      1742296216.2076974,
      {}
    ],
    [
      810,
      null,
      209652396,
      null,
      [
        0.1503638819507083,
        0.09471761465072633
      ],
      42.26462388038635,
      1,
      1742296216.4169576,
      1742296258.6835346,
      {}
    ],
    [
      811,
      null,
      209652396,
      null,
      [
        0.15297443763012625,
        0.08534452557563782
      ],
      130.67392897605896,
      1,
      1742296258.8928897,
      1742296389.5687199,
      {}
    ],
    [
      812,
      null,
      209652396,
      null,
      [
        0.1521144443300132,
        0.08854074001312255
      ],
      63.567100048065186,
      1,
      1742296389.77838,
      1742296453.347494,
      {}
    ],
    [
      813,
      null,
      209652396,
      null,
      [
        0.15119322873813892,
        0.08586211800575257
      ],
      69.78575778007507,
      1,
      1742296453.5601473,
      1742296523.3479075,
      {}
    ],
    [
      814,
      null,
      209652396,
      null,
      [
        0.1518994801928934,
        0.09351829886436462
      ],
      79.77539277076721,
      1,
      1742296533.7394373,
      1742296613.5166779,
      {}
    ],
    [
      815,
      null,
      209652396,
      null,
      [
        0.15002609598417982,
        0.09187171697616577
      ],
      113.06293845176697,
      1,
      1742296613.7269003,
      1742296726.7917252,
      {}
    ],
    [
      816,
      null,
      209652396,
      null,
      [
        0.15199159420716307,
        0.09174464344978332
      ],
      46.40986490249634,
      1,
      1742296727.0044124,
      1742296773.41632,
      {}
    ],
    [
      817,
      null,
      209652396,
      null,
      [
        0.15079387152740445,
        0.09359507441520691
      ],
      105.83403420448303,
      1,
      1742296773.6275313,
      1742296879.4635646,
      {}
    ],
    [
      818,
      null,
      209652396,
      null,
      [
        0.1531280615861454,
        0.08452601313591003
      ],
      109.42639470100403,
      1,
      1742296879.674829,
      1742296989.1033301,
      {}
    ],
    [
      819,
      null,
      209652396,
      null,
      [
        0.1513160222741061,
        0.08957076191902161
      ],
      57.197619676589966,
      1,
      1742296989.3641782,
      1742297046.5639038,
      {}
    ],
    [
      820,
      null,
      209652396,
      null,
      [
        0.1496881874127383,
        0.08881612896919248
      ],
      338.2314963340759,
      1,
      1742297046.7863402,
      1742297385.0198848,
      {}
    ],
    [
      821,
      null,
      209652396,
      null,
      [
        0.15174601185080228,
        0.1064577329158783
      ],
      198.13320446014404,
      1,
      1742297385.2329292,
      1742297583.3682075,
      {}
    ],
    [
      822,
      null,
      209652396,
      null,
      [
        0.15837956010111698,
        0.09053011059761047
      ],
      72.50007700920105,
      1,
      1742297584.0326998,
      1742297656.534871,
      {}
    ],
    [
      823,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742297666.395771,
      1742297674.8237824,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      824,
      null,
      209652396,
      null,
      [
        0.15045601954284588,
        0.09463459968566895
      ],
      52.464592933654785,
      1,
      1742297675.0411987,
      1742297727.5079694,
      {}
    ],
    [
      825,
      null,
      209652396,
      null,
      [
        0.15097801467561947,
        0.0941486418247223
      ],
      129.96764707565308,
      1,
      1742297727.7215059,
      1742297857.6912212,
      {}
    ],
    [
      826,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742297857.9068418,
      1742297857.9983802,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      827,
      null,
      209652396,
      null,
      [
        0.15171525687992754,
        0.08348244667053223
      ],
      118.06612157821655,
      1,
      1742297858.2485032,
      1742297976.3165164,
      {}
    ],
    [
      828,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742297976.5328958,
      1742297976.6064155,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      829,
      null,
      209652396,
      null,
      [
        0.15137743318881045,
        0.09196427166461943
      ],
      63.93797779083252,
      1,
      1742297976.818203,
      1742298040.7579992,
      {}
    ],
    [
      830,
      null,
      209652396,
      null,
      [
        0.14965756919349732,
        0.09678456664085389
      ],
      187.03268766403198,
      1,
      1742298051.4440773,
      1742298238.4788783,
      {}
    ],
    [
      831,
      null,
      209652396,
      null,
      [
        0.15146965094569884,
        0.08496811509132385
      ],
      112.14100575447083,
      1,
      1742298238.7024949,
      1742298350.845594,
      {}
    ],
    [
      832,
      null,
      209652396,
      null,
      [
        0.15070184710903273,
        0.09627113580703736
      ],
      77.76589012145996,
      1,
      1742298351.0608754,
      1742298428.8291488,
      {}
    ],
    [
      833,
      null,
      209652396,
      null,
      [
        0.15171519086189744,
        0.09648631930351258
      ],
      50.821696281433105,
      1,
      1742298429.0496824,
      1742298479.8741314,
      {}
    ],
    [
      834,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742298480.0872383,
      1742298480.1788094,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      835,
      null,
      209652396,
      null,
      [
        0.14944252960720025,
        0.09563005328178406
      ],
      39.49440789222717,
      1,
      1742298480.3920195,
      1742298519.8882074,
      {}
    ],
    [
      836,
      null,
      209652396,
      null,
      [
        0.15094742003424638,
        0.09842991828918457
      ],
      45.077975273132324,
      1,
      1742298520.102477,
      1742298565.1824093,
      {}
    ],
    [
      837,
      null,
      209652396,
      null,
      [
        0.15116243132710197,
        0.09509072780609132
      ],
      45.94356155395508,
      1,
      1742298565.3981733,
      1742298611.343669,
      {}
    ],
    [
      838,
      null,
      209652396,
      null,
      [
        0.1517152427332068,
        0.09461883664131165
      ],
      41.13424372673035,
      1,
      1742298622.121772,
      1742298663.2580798,
      {}
    ],
    [
      839,
      null,
      209652396,
      null,
      [
        0.15060951146280488,
        0.09592949032783508
      ],
      142.56939435005188,
      1,
      1742298663.4730012,
      1742298806.0443594,
      {}
    ],
    [
      840,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742298806.2597225,
      1742298806.3321707,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      841,
      null,
      209652396,
      null,
      [
        0.16412280334436022,
        0.08190716624259949
      ],
      113.94544124603271,
      1,
      1742298806.5463703,
      1742298920.4936898,
      {}
    ],
    [
      842,
      null,
      209652396,
      null,
      [
        0.15156164707062908,
        0.09554164052009581
      ],
      217.5413637161255,
      1,
      1742298920.7192135,
      1742299138.2631395,
      {}
    ],
    [
      843,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742299138.4885676,
      1742299138.5738885,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      844,
      null,
      209652396,
      null,
      [
        0.1588092431655306,
        0.080897433757782
      ],
      201.39248061180115,
      1,
      1742299138.7955208,
      1742299340.1899307,
      {}
    ],
    [
      845,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742299340.4094582,
      1742299340.4580019,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      846,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742299351.4138823,
      1742299351.4953108,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      847,
      null,
      209652396,
      null,
      [
        0.1519915847760159,
        0.0930553162097931
      ],
      54.52512288093567,
      1,
      1742299351.7462938,
      1742299406.2733188,
      {}
    ],
    [
      848,
      null,
      209652396,
      null,
      [
        0.15223734632417268,
        0.0934737467765808
      ],
      69.07848000526428,
      1,
      1742299406.4914076,
      1742299475.571819,
      {}
    ],
    [
      849,
      null,
      209652396,
      null,
      [
        0.15257517944643692,
        0.09083498120307923
      ],
      53.14842891693115,
      1,
      1742299475.7963219,
      1742299528.9467893,
      {}
    ],
    [
      850,
      null,
      209652396,
      null,
      [
        0.15355792384235498,
        0.0905344045162201
      ],
      40.583553314208984,
      1,
      1742299529.1638944,
      1742299569.749267,
      {}
    ],
    [
      851,
      null,
      209652396,
      null,
      [
        0.16955926080177577,
        0.06701048731803895
      ],
      52.58260917663574,
      1,
      1742299569.967807,
      1742299622.5522473,
      {}
    ],
    [
      852,
      null,
      209652396,
      null,
      [
        0.15266715670907288,
        0.08880626320838927
      ],
      82.58725476264954,
      1,
      1742299622.7504904,
      1742299705.3397112,
      {}
    ],
    [
      853,
      null,
      209652396,
      null,
      [
        0.15248298998298998,
        0.09185868859291076
      ],
      54.085867404937744,
      1,
      1742299705.5310771,
      1742299759.6189766,
      {}
    ],
    [
      854,
      null,
      209652396,
      null,
      [
        0.15082466422286783,
        0.09360852360725402
      ],
      64.9296555519104,
      1,
      1742299770.616526,
      1742299835.5482342,
      {}
    ],
    [
      855,
      null,
      209652396,
      null,
      [
        0.15021032872829276,
        0.10170667052268981
      ],
      36.85847759246826,
      1,
      1742299835.7392,
      1742299872.5994825,
      {}
    ],
    [
      856,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742299872.7905707,
      1742299956.8603475,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      857,
      null,
      209652396,
      null,
      [
        0.1506096717923065,
        0.0992215597629547
      ],
      40.11296200752258,
      1,
      1742299957.059149,
      1742299997.174171,
      {}
    ],
    [
      858,
      null,
      209652396,
      null,
      [
        0.1538957663957664,
        0.09435634016990661
      ],
      49.68272113800049,
      1,
      1742299997.3667672,
      1742300047.0513813,
      {}
    ],
    [
      859,
      null,
      209652396,
      null,
      [
        0.15054824673088146,
        0.10012582898139955
      ],
      134.63581895828247,
      1,
      1742300047.2452083,
      1742300181.8830745,
      {}
    ],
    [
      860,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742300182.0802686,
      1742300182.1488695,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      861,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742300182.35547,
      1742300221.7704086,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      862,
      null,
      209652396,
      null,
      [
        0.15085528715768237,
        0.10012327313423157
      ],
      51.306398153305054,
      1,
      1742300222.4553401,
      1742300273.763741,
      {}
    ],
    [
      863,
      null,
      209652396,
      null,
      [
        0.15094742003424638,
        0.0909215122461319
      ],
      49.741857051849365,
      1,
      1742300284.5628817,
      1742300334.3068016,
      {}
    ],
    [
      864,
      null,
      209652396,
      null,
      [
        0.1512544981856359,
        0.09014071941375731
      ],
      89.55218458175659,
      1,
      1742300334.502137,
      1742300424.0562394,
      {}
    ],
    [
      865,
      null,
      209652396,
      null,
      [
        0.1515616282083348,
        0.08371049523353577
      ],
      64.62242436408997,
      1,
      1742300424.2552557,
      1742300488.8795516,
      {}
    ],
    [
      866,
      null,
      209652396,
      null,
      [
        0.15094747662112934,
        0.09226332783699036
      ],
      160.9060094356537,
      1,
      1742300489.078583,
      1742300649.9864957,
      {}
    ],
    [
      867,
      null,
      209652396,
      null,
      [
        0.1499646379137397,
        0.08780289053916931
      ],
      211.98075127601624,
      1,
      1742300650.182598,
      1742300862.1654088,
      {}
    ],
    [
      868,
      null,
      209652396,
      null,
      [
        0.15217593540946833,
        0.08515639781951904
      ],
      43.74942469596863,
      1,
      1742300862.3611858,
      1742300906.1125321,
      {}
    ],
    [
      869,
      null,
      209652396,
      null,
      [
        0.1497189706770545,
        0.09662246346473694
      ],
      44.1676549911499,
      1,
      1742300906.3064036,
      1742300950.4758947,
      {}
    ],
    [
      870,
      null,
      209652396,
      null,
      [
        0.15226808714832668,
        0.09386392593383788
      ],
      103.13419246673584,
      1,
      1742300961.9098926,
      1742301065.0461564,
      {}
    ],
    [
      871,
      null,
      209652396,
      null,
      [
        0.15131596568722316,
        0.09153321623802184
      ],
      58.83619689941406,
      1,
      1742301065.242101,
      1742301124.080275,
      {}
    ],
    [
      872,
      null,
      209652396,
      null,
      [
        0.1508245416179548,
        0.08468651175498963
      ],
      82.33415794372559,
      1,
      1742301124.2793186,
      1742301206.6154993,
      {}
    ],
    [
      873,
      null,
      209652396,
      null,
      [
        0.15091665563222448,
        0.08858847737312317
      ],
      121.75822353363037,
      1,
      1742301206.8121858,
      1742301328.572466,
      {}
    ],
    [
      874,
      null,
      209652396,
      null,
      [
        0.15426429790202245,
        0.08823565363883971
      ],
      43.159913539886475,
      1,
      1742301328.7732484,
      1742301371.9350688,
      {}
    ],
    [
      875,
      null,
      209652396,
      null,
      [
        0.15411077768862197,
        0.09124559164047241
      ],
      39.174798011779785,
      1,
      1742301372.1350908,
      1742301411.3118205,
      {}
    ],
    [
      876,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742301411.5123177,
      1742301571.9149022,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      877,
      null,
      209652396,
      null,
      [
        0.15039463220600946,
        0.08780282855033875
      ],
      82.61574459075928,
      1,
      1742301572.1163535,
      1742301654.7340393,
      {}
    ],
    [
      878,
      null,
      209652396,
      null,
      [
        0.1517152002930446,
        0.09175801992416381
      ],
      130.94177198410034,
      1,
      1742301666.379223,
      1742301797.323241,
      {}
    ],
    [
      879,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742301797.5268166,
      1742301797.586278,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      880,
      null,
      209652396,
      null,
      [
        0.15285155921383467,
        0.09568239688873292
      ],
      45.3601815700531,
      1,
      1742301797.782502,
      1742301843.1444912,
      {}
    ],
    [
      881,
      null,
      209652396,
      null,
      [
        0.1531893781893782,
        0.08959255099296569
      ],
      57.094939947128296,
      1,
      1742301843.3445568,
      1742301900.4415805,
      {}
    ],
    [
      882,
      null,
      209652396,
      null,
      [
        0.1516230815632013,
        0.09254541277885436
      ],
      109.52721047401428,
      1,
      1742301900.6440582,
      1742302010.1733365,
      {}
    ],
    [
      883,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742302010.3746998,
      1742302010.4521549,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      884,
      null,
      209652396,
      null,
      [
        0.15128535689912934,
        0.08829798579216003
      ],
      98.86706066131592,
      1,
      1742302010.6507137,
      1742302109.5196476,
      {}
    ],
    [
      885,
      null,
      209652396,
      null,
      [
        0.23199585048387444,
        0.0302096426486969
      ],
      99.01589608192444,
      1,
      1742302109.7199888,
      1742302208.7379854,
      {}
    ],
    [
      886,
      null,
      209652396,
      null,
      [
        0.15088601383511563,
        0.08894765615463256
      ],
      89.32569551467896,
      1,
      1742302220.8479917,
      1742302310.175605,
      {}
    ],
    [
      887,
      null,
      209652396,
      null,
      [
        0.14907392265176694,
        0.09837150454521179
      ],
      38.9671106338501,
      1,
      1742302310.3834825,
      1742302349.352601,
      {}
    ],
    [
      888,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742302349.5569723,
      1742302349.6357086,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      889,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742302349.8335068,
      1742302418.7673552,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      890,
      null,
      209652396,
      null,
      [
        0.14959605925174788,
        0.09205241322517395
      ],
      133.79706740379333,
      1,
      1742302418.9695115,
      1742302552.7686198,
      {}
    ],
    [
      891,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742302552.9702935,
      1742302553.0589948,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      892,
      null,
      209652396,
      null,
      [
        0.15583062753721436,
        0.08346567034721374
      ],
      149.49107241630554,
      1,
      1742302553.2568638,
      1742302702.7497191,
      {}
    ],
    [
      893,
      null,
      209652396,
      null,
      [
        0.15039459448142084,
        0.08849152445793151
      ],
      59.40002989768982,
      1,
      1742302702.956336,
      1742302762.3583975,
      {}
    ],
    [
      894,
      null,
      209652396,
      null,
      [
        0.15122379037049694,
        0.08957053780555727
      ],
      60.118263244628906,
      1,
      1742302763.074886,
      1742302823.1950407,
      {}
    ],
    [
      895,
      null,
      209652396,
      null,
      [
        0.15226795982784008,
        0.0926404869556427
      ],
      123.79514026641846,
      1,
      1742302834.2608702,
      1742302958.058131,
      {}
    ],
    [
      896,
      null,
      209652396,
      null,
      [
        0.1505175153378746,
        0.08858832120895385
      ],
      59.15356707572937,
      1,
      1742302958.2616756,
      1742303017.417277,
      {}
    ],
    [
      897,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742303017.6241288,
      1742303052.839586,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      898,
      null,
      209652396,
      null,
      [
        0.15125453119465096,
        0.08913550496101379
      ],
      151.49906086921692,
      1,
      1742303053.055302,
      1742303204.55636,
      {}
    ],
    [
      899,
      null,
      209652396,
      null,
      [
        0.16965122863326457,
        0.06672356963157654
      ],
      197.81240963935852,
      1,
      1742303204.766533,
      1742303402.5810437,
      {}
    ],
    [
      900,
      null,
      209652396,
      null,
      [
        0.1533429455585144,
        0.09011612415313722
      ],
      128.33461380004883,
      1,
      1742303402.8000164,
      1742303531.1367252,
      {}
    ],
    [
      901,
      null,
      209652396,
      null,
      [
        0.14950396409977246,
        0.08956227898597718
      ],
      77.97536373138428,
      1,
      1742303531.3605447,
      1742303609.3380024,
      {}
    ],
    [
      902,
      null,
      209652396,
      null,
      [
        0.15076322029914846,
        0.09636587858200073
      ],
      396.95294642448425,
      1,
      1742303620.9009392,
      1742304017.8559964,
      {}
    ],
    [
      903,
      null,
      209652396,
      null,
      [
        0.1517767385282355,
        0.09168694615364074
      ],
      76.81568384170532,
      1,
      1742304018.0748267,
      1742304094.89262,
      {}
    ],
    [
      904,
      null,
      209652396,
      null,
      [
        0.15279021903273401,
        0.08410030364990233
      ],
      58.777899980545044,
      1,
      1742304095.1107776,
      1742304153.890741,
      {}
    ],
    [
      905,
      null,
      209652396,
      null,
      [
        0.15042532587442764,
        0.094466290473938
      ],
      38.67836594581604,
      1,
      1742304154.1080177,
      1742304192.7883875,
      {}
    ],
    [
      906,
      null,
      209652396,
      null,
      [
        0.15309728775297635,
        0.08643744945526124
      ],
      50.38728070259094,
      1,
      1742304193.0059237,
      1742304243.3949673,
      {}
    ],
    [
      907,
      null,
      209652396,
      null,
      [
        0.15334296442080875,
        0.08683583855628967
      ],
      50.709033489227295,
      1,
      1742304243.615087,
      1742304294.3259346,
      {}
    ],
    [
      908,
      null,
      209652396,
      null,
      [
        0.15067108742258445,
        0.08558348536491395
      ],
      45.456297874450684,
      1,
      1742304294.5444636,
      1742304340.00259,
      {}
    ],
    [
      909,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742304340.219892,
      1742304340.2781177,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      910,
      null,
      209652396,
      null,
      [
        0.1527286289262337,
        0.08869093298912048
      ],
      47.38732933998108,
      1,
      1742304351.453857,
      1742304398.8430862,
      {}
    ],
    [
      911,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742304399.0608187,
      1742304435.5802913,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      912,
      null,
      209652396,
      null,
      [
        0.15275952064874218,
        0.09429009914398193
      ],
      41.21908664703369,
      1,
      1742304435.8025098,
      1742304477.023512,
      {}
    ],
    [
      913,
      null,
      209652396,
      null,
      [
        0.15610699315789134,
        0.08662390232086181
      ],
      63.392937898635864,
      1,
      1742304477.2464638,
      1742304540.6413035,
      {}
    ],
    [
      914,
      null,
      209652396,
      null,
      [
        0.15011813454927228,
        0.08942767143249511
      ],
      60.97494578361511,
      1,
      1742304540.8669078,
      1742304601.8437788,
      {}
    ],
    [
      915,
      null,
      209652396,
      null,
      [
        0.15260584953698728,
        0.09474157810211183
      ],
      79.99925708770752,
      1,
      1742304602.070965,
      1742304682.0721083,
      {}
    ],
    [
      916,
      null,
      209652396,
      null,
      [
        0.15269811916518503,
        0.0955353844165802
      ],
      52.60670804977417,
      1,
      1742304682.302125,
      1742304734.910864,
      {}
    ],
    [
      917,
      null,
      209652396,
      null,
      [
        0.15064034659843042,
        0.08853110015392303
      ],
      65.1826810836792,
      1,
      1742304735.132024,
      1742304800.3166757,
      {}
    ],
    [
      918,
      null,
      209652396,
      null,
      [
        0.15088603269740997,
        0.09089728474617004
      ],
      57.27592182159424,
      1,
      1742304812.0489426,
      1742304869.3270042,
      {}
    ],
    [
      919,
      null,
      209652396,
      null,
      [
        0.15017968693118394,
        0.09328152894973755
      ],
      52.746147871017456,
      1,
      1742304869.551837,
      1742304922.299996,
      {}
    ],
    [
      920,
      null,
      209652396,
      null,
      [
        0.1495653561521825,
        0.09490891218185424
      ],
      52.426677227020264,
      1,
      1742304922.520143,
      1742304974.9486303,
      {}
    ],
    [
      921,
      null,
      209652396,
      null,
      [
        0.1505482608776022,
        0.08782124876976014
      ],
      51.02438187599182,
      1,
      1742304975.1696727,
      1742305026.1958876,
      {}
    ],
    [
      922,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742305026.4188762,
      1742305026.5086915,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      923,
      null,
      209652396,
      null,
      [
        0.1507325313463038,
        0.08987822175025939
      ],
      146.92181396484375,
      1,
      1742305026.732024,
      1742305173.655871,
      {}
    ],
    [
      924,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742305173.8801224,
      1742305173.9200478,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      925,
      null,
      209652396,
      null,
      [
        0.1516538271029289,
        0.08489625930786134
      ],
      117.17569422721863,
      1,
      1742305174.1398363,
      1742305291.3173847,
      {}
    ],
    [
      926,
      null,
      209652396,
      null,
      [
        0.15064028058040033,
        0.09722930669784546
      ],
      70.77036833763123,
      1,
      1742305303.9178035,
      1742305374.6902802,
      {}
    ],
    [
      927,
      null,
      209652396,
      null,
      [
        0.15150012769773247,
        0.09067412137985228
      ],
      54.018983602523804,
      1,
      1742305374.9206202,
      1742305428.9417396,
      {}
    ],
    [
      928,
      null,
      209652396,
      null,
      [
        0.15042521270066184,
        0.09149989247322084
      ],
      150.14175701141357,
      1,
      1742305429.1715055,
      1742305579.3153317,
      {}
    ],
    [
      929,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742305579.5389788,
      1742305714.565898,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      930,
      null,
      209652396,
      null,
      [
        0.1523601068511248,
        0.09371765971183778
      ],
      88.27625370025635,
      1,
      1742305714.7955573,
      1742305803.0739598,
      {}
    ],
    [
      931,
      null,
      209652396,
      null,
      [
        0.15306651391980733,
        0.08976478099822997
      ],
      65.11016750335693,
      1,
      1742305803.300696,
      1742305868.4128788,
      {}
    ],
    [
      932,
      null,
      209652396,
      null,
      [
        0.1512238422418063,
        0.08594873607158661
      ],
      56.800020694732666,
      1,
      1742305868.6404734,
      1742305925.4425075,
      {}
    ],
    [
      933,
      null,
      209652396,
      null,
      [
        0.15091670750353386,
        0.08723405718803406
      ],
      46.17155981063843,
      1,
      1742305925.6916375,
      1742305971.8652165,
      {}
    ],
    [
      934,
      null,
      209652396,
      null,
      [
        0.15125456891923955,
        0.09849936842918397
      ],
      161.0978138446808,
      1,
      1742305984.2580674,
      1742306145.3579266,
      {}
    ],
    [
      935,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742306145.6072564,
      1742306145.7585692,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      936,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742306145.9874663,
      1742306146.0824058,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      937,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742306146.3076606,
      1742306146.3871002,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      938,
      null,
      209652396,
      null,
      [
        0.15094742003424638,
        0.08836894631385803
      ],
      92.13437151908875,
      1,
      1742306146.6122663,
      1742306238.748509,
      {}
    ],
    [
      939,
      null,
      209652396,
      null,
      [
        0.15027173964299712,
        0.09427824854850768
      ],
      199.26538634300232,
      1,
      1742306238.9778042,
      1742306438.2452,
      {}
    ],
    [
      940,
      null,
      209652396,
      null,
      [
        0.1506403088738418,
        0.09025204062461853
      ],
      65.98273801803589,
      1,
      1742306438.471495,
      1742306504.4561985,
      {}
    ],
    [
      941,
      null,
      209652396,
      null,
      [
        0.15331230847697913,
        0.08678489685058595
      ],
      41.77896070480347,
      1,
      1742306504.6817179,
      1742306546.4625432,
      {}
    ],
    [
      942,
      null,
      209652396,
      null,
      [
        0.15162316644352572,
        0.07845685243606568
      ],
      58.81442666053772,
      1,
      1742306559.1241214,
      1742306617.9405818,
      {}
    ],
    [
      943,
      null,
      209652396,
      null,
      [
        0.15291295598181825,
        0.08720635414123536
      ],
      43.825419425964355,
      1,
      1742306618.1823888,
      1742306662.009633,
      {}
    ],
    [
      944,
      null,
      209652396,
      null,
      [
        0.16228004207046123,
        0.08856415390968322
      ],
      39.04203987121582,
      1,
      1742306662.249723,
      1742306701.2935412,
      {}
    ],
    [
      945,
      null,
      209652396,
      null,
      [
        0.1514693963047256,
        0.08653388381004333
      ],
      74.14321064949036,
      1,
      1742306701.5364208,
      1742306775.681509,
      {}
    ],
    [
      946,
      null,
      209652396,
      null,
      [
        0.15417217917217918,
        0.08826648473739625
      ],
      63.81411623954773,
      1,
      1742306775.9251838,
      1742306839.7412963,
      {}
    ],
    [
      947,
      null,
      209652396,
      null,
      [
        0.15239088068429385,
        0.08895539045333863
      ],
      64.98609328269958,
      1,
      1742306839.9839969,
      1742306904.972124,
      {}
    ],
    [
      948,
      null,
      209652396,
      null,
      [
        0.15119305897749008,
        0.0843800175189972
      ],
      733.7065615653992,
      1,
      1742306905.2145464,
      1742307638.923111,
      {}
    ],
    [
      949,
      null,
      209652396,
      null,
      [
        0.15186889026709388,
        0.09647635221481324
      ],
      105.35149836540222,
      1,
      1742307639.1681197,
      1742307744.5217764,
      {}
    ],
    [
      950,
      null,
      209652396,
      null,
      [
        0.15088602798183637,
        0.09077676773071289
      ],
      94.61069250106812,
      1,
      1742307757.5731986,
      1742307852.1862874,
      {}
    ],
    [
      951,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742307852.4356742,
      1742307852.4818044,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      952,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742307852.7269368,
      1742307871.0354912,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      953,
      null,
      209652396,
      null,
      [
        0.1502717066339821,
        0.08860110402107238
      ],
      87.90474700927734,
      1,
      1742307871.281623,
      1742307959.188409,
      {}
    ],
    [
      954,
      null,
      209652396,
      null,
      [
        0.15263650548081686,
        0.08932891249656677
      ],
      81.01621603965759,
      1,
      1742307959.4348314,
      1742308040.4531004,
      {}
    ],
    [
      955,
      null,
      209652396,
      null,
      [
        0.1545714562181628,
        0.0861303699016571
      ],
      45.69427275657654,
      1,
      1742308040.699499,
      1742308086.395807,
      {}
    ],
    [
      956,
      null,
      209652396,
      null,
      [
        0.15137731529947096,
        0.09023346185684204
      ],
      39.59500789642334,
      1,
      1742308086.6442244,
      1742308126.2411873,
      {}
    ],
    [
      957,
      null,
      209652396,
      null,
      [
        0.1491354986115465,
        0.08795340061187744
      ],
      112.89191508293152,
      1,
      1742308126.4841342,
      1742308239.3779402,
      {}
    ],
    [
      958,
      null,
      209652396,
      null,
      [
        0.15242162150844787,
        0.08699573397636415
      ],
      56.474172830581665,
      1,
      1742308240.2010834,
      1742308296.677249,
      {}
    ],
    [
      959,
      null,
      209652396,
      null,
      [
        0.15322019917828297,
        0.08660064458847047
      ],
      221.5641303062439,
      1,
      1742308308.1852427,
      1742308529.7513242,
      {}
    ],
    [
      960,
      null,
      209652396,
      null,
      [
        0.15156174609767425,
        0.08832911729812623
      ],
      153.97891354560852,
      1,
      1742308529.9987686,
      1742308683.9796364,
      {}
    ],
    [
      961,
      null,
      209652396,
      null,
      [
        0.15005683680833382,
        0.09137355208396912
      ],
      57.10065746307373,
      1,
      1742308684.2266598,
      1742308741.329185,
      {}
    ],
    [
      962,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742308741.5789623,
      1742308741.6666062,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      963,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1742308741.9088817,
      1742308741.9908555,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      964,
      null,
      209652396,
      null,
      [
        0.1504866943489698,
        0.08896640062332153
      ],
      72.27021884918213,
      1,
      1742308742.2345042,
      1742308814.5065086,
      {}
    ]
  ],
  "configs": {
    "1": {
      "batch_size": 297,
      "lambda_value": 0.6205646954477,
      "learning_rate": 0.000210147218,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 697
    },
    "2": {
      "batch_size": 979,
      "lambda_value": 0.3596079321578,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "3": {
      "batch_size": 652,
      "lambda_value": 0.7642785040662,
      "learning_rate": 0.0014379647071,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 136
    },
    "4": {
      "batch_size": 94,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 339
    },
    "5": {
      "batch_size": 241,
      "lambda_value": 0.9708397453651,
      "learning_rate": 0.0329667406801,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 407
    },
    "6": {
      "batch_size": 107,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0301390578778,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 338
    },
    "7": {
      "batch_size": 322,
      "lambda_value": 0.412513526121,
      "learning_rate": 0.0006441000446,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "8": {
      "batch_size": 815,
      "lambda_value": 0.8617159873378,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 752
    },
    "9": {
      "batch_size": 925,
      "lambda_value": 0.3837167412653,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "10": {
      "batch_size": 150,
      "lambda_value": 0.1709107359706,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "11": {
      "batch_size": 1024,
      "lambda_value": 0.9367846473174,
      "learning_rate": 0.0044448572887,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "12": {
      "batch_size": 102,
      "lambda_value": 0.6765698196157,
      "learning_rate": 0.0001975638963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 697
    },
    "13": {
      "batch_size": 659,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0117063616816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "14": {
      "batch_size": 59,
      "lambda_value": 0.0030815114132,
      "learning_rate": 0.0057836649805,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 153
    },
    "15": {
      "batch_size": 659,
      "lambda_value": 0.4262363360775,
      "learning_rate": 0.0063782393736,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "16": {
      "batch_size": 176,
      "lambda_value": 0.5650710721095,
      "learning_rate": 0.0001467921737,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 463
    },
    "17": {
      "batch_size": 78,
      "lambda_value": 0.9864346619144,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "18": {
      "batch_size": 752,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0255903600372,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 709
    },
    "19": {
      "batch_size": 85,
      "lambda_value": 0.6624668076433,
      "learning_rate": 0.0001461455212,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 455
    },
    "20": {
      "batch_size": 277,
      "lambda_value": 0.0788153739624,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 788
    },
    "21": {
      "batch_size": 895,
      "lambda_value": 0.7897473442105,
      "learning_rate": 0.011623077444,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 411
    },
    "22": {
      "batch_size": 597,
      "lambda_value": 0.4199483890762,
      "learning_rate": 0.0062957704128,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1002
    },
    "23": {
      "batch_size": 498,
      "lambda_value": 0.4997052812651,
      "learning_rate": 0.0008260624616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 201
    },
    "24": {
      "batch_size": 81,
      "lambda_value": 0.801774956151,
      "learning_rate": 0.0054916470096,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "25": {
      "batch_size": 69,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0027189688569,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "26": {
      "batch_size": 544,
      "lambda_value": 0.3566148090088,
      "learning_rate": 0.0077072238861,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "27": {
      "batch_size": 635,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0144818936694,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "28": {
      "batch_size": 184,
      "lambda_value": 0.5249395800268,
      "learning_rate": 0.0002461496774,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 328
    },
    "29": {
      "batch_size": 40,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0216101868293,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "30": {
      "batch_size": 497,
      "lambda_value": 0.4323787825414,
      "learning_rate": 0.0004186695981,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 866
    },
    "31": {
      "batch_size": 47,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0584663913961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 229
    },
    "32": {
      "batch_size": 242,
      "lambda_value": 0.5897873412338,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 140
    },
    "33": {
      "batch_size": 59,
      "lambda_value": 0.9315102941087,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "34": {
      "batch_size": 53,
      "lambda_value": 0.7431359447524,
      "learning_rate": 0.0001324462442,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 383
    },
    "35": {
      "batch_size": 55,
      "lambda_value": 0.5959451110671,
      "learning_rate": 0.0279512903626,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "36": {
      "batch_size": 62,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0042972583038,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 456
    },
    "37": {
      "batch_size": 40,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0591287940477,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 557
    },
    "38": {
      "batch_size": 143,
      "lambda_value": 0.4893136075805,
      "learning_rate": 0.0143524519362,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 124
    },
    "39": {
      "batch_size": 111,
      "lambda_value": 0.6237206127861,
      "learning_rate": 0.0011527170707,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "40": {
      "batch_size": 203,
      "lambda_value": 0.836270266563,
      "learning_rate": 0.0026409543209,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 612
    },
    "41": {
      "batch_size": 68,
      "lambda_value": 0.1473946081284,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 788
    },
    "42": {
      "batch_size": 682,
      "lambda_value": 0.8411544066865,
      "learning_rate": 0.0006865924239,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 174
    },
    "43": {
      "batch_size": 61,
      "lambda_value": 0.9525627850943,
      "learning_rate": 0.0886799955763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 133
    },
    "44": {
      "batch_size": 766,
      "lambda_value": 0.8645144427745,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 276
    },
    "45": {
      "batch_size": 680,
      "lambda_value": 0.2601044820299,
      "learning_rate": 0.0155794633931,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 532
    },
    "46": {
      "batch_size": 61,
      "lambda_value": 0.737447287188,
      "learning_rate": 0.0001600052257,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 408
    },
    "47": {
      "batch_size": 563,
      "lambda_value": 0.5684020796476,
      "learning_rate": 0.0360030852203,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 276
    },
    "48": {
      "batch_size": 342,
      "lambda_value": 0.3794140715116,
      "learning_rate": 0.0094428768473,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "49": {
      "batch_size": 539,
      "lambda_value": 0.4096195582972,
      "learning_rate": 0.0014614146338,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 269
    },
    "50": {
      "batch_size": 540,
      "lambda_value": 0.6011431890687,
      "learning_rate": 0.0002228815534,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "51": {
      "batch_size": 65,
      "lambda_value": 0.2425091147505,
      "learning_rate": 0.0001738203182,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "52": {
      "batch_size": 313,
      "lambda_value": 0.4545499988336,
      "learning_rate": 0.0003879558517,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 696
    },
    "53": {
      "batch_size": 582,
      "lambda_value": 0.0387496336331,
      "learning_rate": 0.0003356147463,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 83
    },
    "54": {
      "batch_size": 841,
      "lambda_value": 0.3293608465041,
      "learning_rate": 0.0018412961777,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "55": {
      "batch_size": 507,
      "lambda_value": 0.5071325061685,
      "learning_rate": 0.0001639990325,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 291
    },
    "56": {
      "batch_size": 523,
      "lambda_value": 0.5220340899809,
      "learning_rate": 0.0261351106367,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 332
    },
    "57": {
      "batch_size": 63,
      "lambda_value": 0.1525805406835,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "58": {
      "batch_size": 51,
      "lambda_value": 0.6743427482514,
      "learning_rate": 0.0203488979235,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 182
    },
    "59": {
      "batch_size": 526,
      "lambda_value": 0.1558490208903,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 71
    },
    "60": {
      "batch_size": 571,
      "lambda_value": 0.1632290921883,
      "learning_rate": 0.0403526510329,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 155
    },
    "61": {
      "batch_size": 900,
      "lambda_value": 0.4300912433377,
      "learning_rate": 0.0152683361273,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 574
    },
    "62": {
      "batch_size": 946,
      "lambda_value": 0.240475409915,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "63": {
      "batch_size": 45,
      "lambda_value": 0.025892842149,
      "learning_rate": 0.0064701372435,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 138
    },
    "64": {
      "batch_size": 578,
      "lambda_value": 0.466940713799,
      "learning_rate": 0.0069166965864,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 247
    },
    "65": {
      "batch_size": 71,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0043214032666,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 297
    },
    "66": {
      "batch_size": 921,
      "lambda_value": 0.0402320288874,
      "learning_rate": 0.0695202977577,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 410
    },
    "67": {
      "batch_size": 217,
      "lambda_value": 0.6966025769503,
      "learning_rate": 0.0609459009151,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 409
    },
    "68": {
      "batch_size": 506,
      "lambda_value": 0.2774871972287,
      "learning_rate": 0.000458934893,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 239
    },
    "69": {
      "batch_size": 435,
      "lambda_value": 0.6182493089424,
      "learning_rate": 0.0313142741224,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "70": {
      "batch_size": 193,
      "lambda_value": 0.4888227212062,
      "learning_rate": 0.0678987026873,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 198
    },
    "71": {
      "batch_size": 799,
      "lambda_value": 0.0490666417774,
      "learning_rate": 0.000188798116,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 231
    },
    "72": {
      "batch_size": 83,
      "lambda_value": 0.9431689307954,
      "learning_rate": 0.0005462678091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 381
    },
    "73": {
      "batch_size": 962,
      "lambda_value": 0.1658029844256,
      "learning_rate": 0.0009078367561,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 387
    },
    "74": {
      "batch_size": 633,
      "lambda_value": 0.4527774250837,
      "learning_rate": 0.0005033519202,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 444
    },
    "75": {
      "batch_size": 632,
      "lambda_value": 0.2859097380484,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 145
    },
    "76": {
      "batch_size": 681,
      "lambda_value": 0.9252130831835,
      "learning_rate": 0.000225824127,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 160
    },
    "77": {
      "batch_size": 442,
      "lambda_value": 0.5011312487499,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 162
    },
    "78": {
      "batch_size": 363,
      "lambda_value": 0.5999613374055,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 119
    },
    "79": {
      "batch_size": 500,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0227301664178,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 487
    },
    "80": {
      "batch_size": 387,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0407226893036,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 860
    },
    "81": {
      "batch_size": 917,
      "lambda_value": 0.2528729324812,
      "learning_rate": 0.0002112474838,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 84
    },
    "82": {
      "batch_size": 683,
      "lambda_value": 0.4302554532778,
      "learning_rate": 0.0069425824515,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 336
    },
    "83": {
      "batch_size": 869,
      "lambda_value": 0.3577941791914,
      "learning_rate": 0.0001144897283,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 85
    },
    "84": {
      "batch_size": 219,
      "lambda_value": 0.1326945416802,
      "learning_rate": 0.0055501982149,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 497
    },
    "85": {
      "batch_size": 603,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.050363997522,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 431
    },
    "86": {
      "batch_size": 33,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0043216314201,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 925
    },
    "87": {
      "batch_size": 39,
      "lambda_value": 0.568414398817,
      "learning_rate": 0.0066942051347,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "88": {
      "batch_size": 959,
      "lambda_value": 0.0099039525899,
      "learning_rate": 0.0001330037572,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 856
    },
    "89": {
      "batch_size": 156,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0053294934748,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "90": {
      "batch_size": 844,
      "lambda_value": 0.2250047838217,
      "learning_rate": 0.0777989782816,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "91": {
      "batch_size": 84,
      "lambda_value": 0.0464184110839,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "92": {
      "batch_size": 65,
      "lambda_value": 0.4572054964111,
      "learning_rate": 0.0269030355547,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 150
    },
    "93": {
      "batch_size": 501,
      "lambda_value": 0.4344636044526,
      "learning_rate": 0.0343406853747,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 551
    },
    "94": {
      "batch_size": 193,
      "lambda_value": 0.6825317392541,
      "learning_rate": 0.0012800826778,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 78
    },
    "95": {
      "batch_size": 59,
      "lambda_value": 0.0982368328669,
      "learning_rate": 0.0062053850896,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "96": {
      "batch_size": 44,
      "lambda_value": 0.0105993407731,
      "learning_rate": 0.0059496031762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 116
    },
    "97": {
      "batch_size": 61,
      "lambda_value": 0.4695952651957,
      "learning_rate": 0.0024192530494,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 136
    },
    "98": {
      "batch_size": 355,
      "lambda_value": 0.9137569290511,
      "learning_rate": 0.034912055568,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 196
    },
    "99": {
      "batch_size": 431,
      "lambda_value": 0.0822383740424,
      "learning_rate": 0.0075073454367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 156
    },
    "100": {
      "batch_size": 259,
      "lambda_value": 0.6182439422905,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 90
    },
    "101": {
      "batch_size": 103,
      "lambda_value": 0.2833626254686,
      "learning_rate": 0.0005003261748,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 490
    },
    "102": {
      "batch_size": 37,
      "lambda_value": 0.5840919399451,
      "learning_rate": 0.0001459429644,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 355
    },
    "103": {
      "batch_size": 441,
      "lambda_value": 0.1020683828299,
      "learning_rate": 0.0037946946911,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 771
    },
    "104": {
      "batch_size": 298,
      "lambda_value": 0.6523313109885,
      "learning_rate": 0.0418434218437,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 217
    },
    "105": {
      "batch_size": 105,
      "lambda_value": 0.5175676044407,
      "learning_rate": 0.0804624104669,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 720
    },
    "106": {
      "batch_size": 132,
      "lambda_value": 0.8645510243583,
      "learning_rate": 0.0065231774625,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "107": {
      "batch_size": 222,
      "lambda_value": 0.3163643900406,
      "learning_rate": 0.0077402548612,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "108": {
      "batch_size": 274,
      "lambda_value": 0.8391282420355,
      "learning_rate": 0.0007788324639,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 627
    },
    "109": {
      "batch_size": 202,
      "lambda_value": 0.9814558991599,
      "learning_rate": 0.0305959268152,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 681
    },
    "110": {
      "batch_size": 118,
      "lambda_value": 0.0095926156531,
      "learning_rate": 0.0001209499004,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 489
    },
    "111": {
      "batch_size": 725,
      "lambda_value": 0.4495361860686,
      "learning_rate": 0.0001828620707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "112": {
      "batch_size": 142,
      "lambda_value": 0.3018269311536,
      "learning_rate": 0.0013615516581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 156
    },
    "113": {
      "batch_size": 39,
      "lambda_value": 0.6366104708849,
      "learning_rate": 0.0911637803703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 197
    },
    "114": {
      "batch_size": 48,
      "lambda_value": 0.8393505362879,
      "learning_rate": 0.000335227891,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 278
    },
    "115": {
      "batch_size": 456,
      "lambda_value": 0.2025097518032,
      "learning_rate": 0.000165906658,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "116": {
      "batch_size": 52,
      "lambda_value": 0.1777602005584,
      "learning_rate": 0.0071062444482,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 245
    },
    "117": {
      "batch_size": 387,
      "lambda_value": 0.8469855847131,
      "learning_rate": 0.0159663538365,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 871
    },
    "118": {
      "batch_size": 544,
      "lambda_value": 0.7637452690801,
      "learning_rate": 0.0189128877645,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "119": {
      "batch_size": 78,
      "lambda_value": 0.1333517870819,
      "learning_rate": 0.0379151435743,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 376
    },
    "120": {
      "batch_size": 858,
      "lambda_value": 0.5295439381285,
      "learning_rate": 0.0008570201388,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 874
    },
    "121": {
      "batch_size": 514,
      "lambda_value": 0.9751001598295,
      "learning_rate": 0.0023139794505,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 290
    },
    "122": {
      "batch_size": 181,
      "lambda_value": 0.1042301237216,
      "learning_rate": 0.0056294156898,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 184
    },
    "123": {
      "batch_size": 852,
      "lambda_value": 0.1477343378818,
      "learning_rate": 0.0001720754894,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 578
    },
    "124": {
      "batch_size": 287,
      "lambda_value": 0.0042305286159,
      "learning_rate": 0.0003825520686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 280
    },
    "125": {
      "batch_size": 38,
      "lambda_value": 0.4950446899782,
      "learning_rate": 0.0006069868363,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "126": {
      "batch_size": 713,
      "lambda_value": 0.4736068584881,
      "learning_rate": 0.0484101532431,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "127": {
      "batch_size": 46,
      "lambda_value": 0.2266582964608,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 481
    },
    "128": {
      "batch_size": 876,
      "lambda_value": 0.3843229233274,
      "learning_rate": 0.0312081445008,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "129": {
      "batch_size": 102,
      "lambda_value": 0.0243599966944,
      "learning_rate": 0.0034664159679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 142
    },
    "130": {
      "batch_size": 145,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0036689786017,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 86
    },
    "131": {
      "batch_size": 884,
      "lambda_value": 0.0240476070589,
      "learning_rate": 0.0001244318996,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 523
    },
    "132": {
      "batch_size": 725,
      "lambda_value": 0.5275737085407,
      "learning_rate": 0.0962149393336,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 78
    },
    "133": {
      "batch_size": 267,
      "lambda_value": 0.2227488758416,
      "learning_rate": 0.0133378701537,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "134": {
      "batch_size": 276,
      "lambda_value": 0.1850431063149,
      "learning_rate": 0.0050170483991,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 101
    },
    "135": {
      "batch_size": 852,
      "lambda_value": 0.2554158173882,
      "learning_rate": 0.0001859212949,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "136": {
      "batch_size": 66,
      "lambda_value": 0.0453077602809,
      "learning_rate": 0.0038705299809,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 173
    },
    "137": {
      "batch_size": 33,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 375
    },
    "138": {
      "batch_size": 313,
      "lambda_value": 0.4943773457039,
      "learning_rate": 0.0025848473367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 885
    },
    "139": {
      "batch_size": 74,
      "lambda_value": 0.0927269727559,
      "learning_rate": 0.0011079056334,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 465
    },
    "140": {
      "batch_size": 460,
      "lambda_value": 0.2886737918534,
      "learning_rate": 0.011874222675,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 145
    },
    "141": {
      "batch_size": 139,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0457859391684,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "142": {
      "batch_size": 776,
      "lambda_value": 0.1506642600813,
      "learning_rate": 0.00253628593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 529
    },
    "143": {
      "batch_size": 330,
      "lambda_value": 0.9821690174032,
      "learning_rate": 0.0229054208914,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "144": {
      "batch_size": 542,
      "lambda_value": 0.3884680740375,
      "learning_rate": 0.0047964066063,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 599
    },
    "145": {
      "batch_size": 46,
      "lambda_value": 0.7914718216174,
      "learning_rate": 0.0567631885834,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 276
    },
    "146": {
      "batch_size": 814,
      "lambda_value": 0.4706617753678,
      "learning_rate": 0.0280124201071,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 405
    },
    "147": {
      "batch_size": 671,
      "lambda_value": 0.477805553039,
      "learning_rate": 0.0001000439302,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 742
    },
    "148": {
      "batch_size": 307,
      "lambda_value": 0.3966296496465,
      "learning_rate": 0.0065078037431,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 550
    },
    "149": {
      "batch_size": 67,
      "lambda_value": 0.1238591984675,
      "learning_rate": 0.0008622153901,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 450
    },
    "150": {
      "batch_size": 538,
      "lambda_value": 0.1472817942137,
      "learning_rate": 0.0073574994525,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 635
    },
    "151": {
      "batch_size": 49,
      "lambda_value": 0.0688601702784,
      "learning_rate": 0.0003239179582,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 237
    },
    "152": {
      "batch_size": 793,
      "lambda_value": 0.2500518198771,
      "learning_rate": 0.0072989042556,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 564
    },
    "153": {
      "batch_size": 776,
      "lambda_value": 0.3086653060848,
      "learning_rate": 0.0004287369379,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "154": {
      "batch_size": 39,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0037841646219,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 544
    },
    "155": {
      "batch_size": 962,
      "lambda_value": 0.7517036849034,
      "learning_rate": 0.0123398549816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 611
    },
    "156": {
      "batch_size": 915,
      "lambda_value": 0.2951589262888,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 325
    },
    "157": {
      "batch_size": 831,
      "lambda_value": 0.9121447002385,
      "learning_rate": 0.0258958220048,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 86
    },
    "158": {
      "batch_size": 976,
      "lambda_value": 0.3603359633198,
      "learning_rate": 0.0163222644592,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 278
    },
    "159": {
      "batch_size": 493,
      "lambda_value": 0.6414907887986,
      "learning_rate": 0.0751665791976,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 235
    },
    "160": {
      "batch_size": 454,
      "lambda_value": 0.1246000775699,
      "learning_rate": 0.0038598459083,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "161": {
      "batch_size": 137,
      "lambda_value": 0.6329745326815,
      "learning_rate": 0.0016575807729,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 351
    },
    "162": {
      "batch_size": 50,
      "lambda_value": 0.740179719234,
      "learning_rate": 0.0059510273029,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 165
    },
    "163": {
      "batch_size": 41,
      "lambda_value": 0.2084059817426,
      "learning_rate": 0.0013291369141,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "164": {
      "batch_size": 64,
      "lambda_value": 0.5561857015528,
      "learning_rate": 0.0035434237772,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "165": {
      "batch_size": 498,
      "lambda_value": 0.6579712863223,
      "learning_rate": 0.00944846031,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 146
    },
    "166": {
      "batch_size": 60,
      "lambda_value": 0.9268347430002,
      "learning_rate": 0.0039761620925,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "167": {
      "batch_size": 317,
      "lambda_value": 0.5774632610946,
      "learning_rate": 0.0004289380476,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 90
    },
    "168": {
      "batch_size": 33,
      "lambda_value": 0.844330408685,
      "learning_rate": 0.0036197636688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 852
    },
    "169": {
      "batch_size": 451,
      "lambda_value": 0.1924494999061,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 88
    },
    "170": {
      "batch_size": 537,
      "lambda_value": 0.2461028946703,
      "learning_rate": 0.0320480978609,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 482
    },
    "171": {
      "batch_size": 160,
      "lambda_value": 0.4670716943235,
      "learning_rate": 0.0028172952438,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 556
    },
    "172": {
      "batch_size": 188,
      "lambda_value": 0.2461939552216,
      "learning_rate": 0.0409216311654,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 474
    },
    "173": {
      "batch_size": 546,
      "lambda_value": 0.328880259391,
      "learning_rate": 0.0012850548044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "174": {
      "batch_size": 205,
      "lambda_value": 0.5479223007212,
      "learning_rate": 0.0362149473803,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 552
    },
    "175": {
      "batch_size": 805,
      "lambda_value": 0.3334198233134,
      "learning_rate": 0.0012575315579,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 213
    },
    "176": {
      "batch_size": 404,
      "lambda_value": 0.9522543525878,
      "learning_rate": 0.0620108034853,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "177": {
      "batch_size": 364,
      "lambda_value": 0.2034449398154,
      "learning_rate": 0.0042526599584,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 495
    },
    "178": {
      "batch_size": 733,
      "lambda_value": 0.1597686694848,
      "learning_rate": 0.031534156064,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 249
    },
    "179": {
      "batch_size": 296,
      "lambda_value": 0.3073615378608,
      "learning_rate": 0.0006343167147,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 541
    },
    "180": {
      "batch_size": 846,
      "lambda_value": 0.3837065982754,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "181": {
      "batch_size": 68,
      "lambda_value": 0.4765783643147,
      "learning_rate": 0.0022563929374,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "182": {
      "batch_size": 103,
      "lambda_value": 0.2461385129023,
      "learning_rate": 0.0001337143277,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 315
    },
    "183": {
      "batch_size": 390,
      "lambda_value": 0.9070245463357,
      "learning_rate": 0.0627349351707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 287
    },
    "184": {
      "batch_size": 473,
      "lambda_value": 0.9899025879147,
      "learning_rate": 0.0001115728064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 248
    },
    "185": {
      "batch_size": 621,
      "lambda_value": 0.2078800181557,
      "learning_rate": 0.0984325826781,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 277
    },
    "186": {
      "batch_size": 803,
      "lambda_value": 0.6304196192746,
      "learning_rate": 0.0013917449989,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 500
    },
    "187": {
      "batch_size": 64,
      "lambda_value": 0.0584250613346,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 229
    },
    "188": {
      "batch_size": 948,
      "lambda_value": 0.5201064105195,
      "learning_rate": 0.0644814831068,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 76
    },
    "189": {
      "batch_size": 52,
      "lambda_value": 0.1224029330303,
      "learning_rate": 0.008250906644,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 135
    },
    "190": {
      "batch_size": 791,
      "lambda_value": 0.8335977075286,
      "learning_rate": 0.0032926830009,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 494
    },
    "191": {
      "batch_size": 52,
      "lambda_value": 0.6956110933781,
      "learning_rate": 0.019084000727,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 305
    },
    "192": {
      "batch_size": 65,
      "lambda_value": 0.0858165163043,
      "learning_rate": 0.0001396075788,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 217
    },
    "193": {
      "batch_size": 38,
      "lambda_value": 0.5819568111468,
      "learning_rate": 0.0002132918471,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 249
    },
    "194": {
      "batch_size": 754,
      "lambda_value": 0.2698123628689,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 173
    },
    "195": {
      "batch_size": 668,
      "lambda_value": 0.8470592534302,
      "learning_rate": 0.0006430637512,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 141
    },
    "196": {
      "batch_size": 386,
      "lambda_value": 0.6863903558802,
      "learning_rate": 0.0008170013725,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "197": {
      "batch_size": 266,
      "lambda_value": 0.4414773952143,
      "learning_rate": 0.0268449154553,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 432
    },
    "198": {
      "batch_size": 222,
      "lambda_value": 0.3646827688118,
      "learning_rate": 0.0162151725013,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 81
    },
    "199": {
      "batch_size": 828,
      "lambda_value": 0.6994291661053,
      "learning_rate": 0.0048399368793,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 417
    },
    "200": {
      "batch_size": 845,
      "lambda_value": 0.5639110820217,
      "learning_rate": 0.0014623104992,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 463
    },
    "201": {
      "batch_size": 542,
      "lambda_value": 0.4027838092624,
      "learning_rate": 0.001307904062,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 561
    },
    "202": {
      "batch_size": 47,
      "lambda_value": 0.3342370768098,
      "learning_rate": 0.0066597022586,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 540
    },
    "203": {
      "batch_size": 234,
      "lambda_value": 0.4344920974789,
      "learning_rate": 0.032527985566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 278
    },
    "204": {
      "batch_size": 1022,
      "lambda_value": 0.2594121754683,
      "learning_rate": 0.0925450324862,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1007
    },
    "205": {
      "batch_size": 212,
      "lambda_value": 0.5286350730685,
      "learning_rate": 0.0071310853992,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 161
    },
    "206": {
      "batch_size": 190,
      "lambda_value": 0.5933051286032,
      "learning_rate": 0.0003288523716,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "207": {
      "batch_size": 93,
      "lambda_value": 0.5720078172236,
      "learning_rate": 0.000164626935,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "208": {
      "batch_size": 48,
      "lambda_value": 0.4541612209449,
      "learning_rate": 0.0019654478707,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "209": {
      "batch_size": 912,
      "lambda_value": 0.6501855402958,
      "learning_rate": 0.0001602316999,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 182
    },
    "210": {
      "batch_size": 642,
      "lambda_value": 0.3218750954514,
      "learning_rate": 0.0083602316064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "211": {
      "batch_size": 221,
      "lambda_value": 0.5098011891873,
      "learning_rate": 0.018540436892,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 105
    },
    "212": {
      "batch_size": 457,
      "lambda_value": 0.4042878294431,
      "learning_rate": 0.0008100329996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 108
    },
    "213": {
      "batch_size": 378,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.0637641872301,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 330
    },
    "214": {
      "batch_size": 460,
      "lambda_value": 0.2902332847431,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "215": {
      "batch_size": 686,
      "lambda_value": 0.3967036195568,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "216": {
      "batch_size": 150,
      "lambda_value": 0.6873889937377,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 97
    },
    "217": {
      "batch_size": 46,
      "lambda_value": 0.5442420143571,
      "learning_rate": 0.0041065218421,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 626
    },
    "218": {
      "batch_size": 69,
      "lambda_value": 0.0571109552735,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 64
    },
    "219": {
      "batch_size": 534,
      "lambda_value": 0.278817431718,
      "learning_rate": 0.054738169918,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 93
    },
    "220": {
      "batch_size": 637,
      "lambda_value": 0.6218435051405,
      "learning_rate": 0.0392186381003,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 555
    },
    "221": {
      "batch_size": 85,
      "lambda_value": 0.5498388846059,
      "learning_rate": 0.0279389198285,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "222": {
      "batch_size": 65,
      "lambda_value": 0.8734633914291,
      "learning_rate": 0.0026232078723,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 377
    },
    "223": {
      "batch_size": 416,
      "lambda_value": 0.4083321161572,
      "learning_rate": 0.0032544993566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 113
    },
    "224": {
      "batch_size": 51,
      "lambda_value": 0.1388957563608,
      "learning_rate": 0.000366593903,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "225": {
      "batch_size": 438,
      "lambda_value": 0.561111631904,
      "learning_rate": 0.0006101854537,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 288
    },
    "226": {
      "batch_size": 53,
      "lambda_value": 0.0741220638225,
      "learning_rate": 0.0304844386375,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "227": {
      "batch_size": 703,
      "lambda_value": 0.6124061564869,
      "learning_rate": 0.0035069436309,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 329
    },
    "228": {
      "batch_size": 710,
      "lambda_value": 0.3471934695898,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "229": {
      "batch_size": 131,
      "lambda_value": 0.3877559393645,
      "learning_rate": 0.0004915697162,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 112
    },
    "230": {
      "batch_size": 437,
      "lambda_value": 0.7574403115985,
      "learning_rate": 0.0087990083065,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 97
    },
    "231": {
      "batch_size": 769,
      "lambda_value": 0.5363343601572,
      "learning_rate": 0.0050951608204,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "232": {
      "batch_size": 435,
      "lambda_value": 0.2176978224086,
      "learning_rate": 0.0263258332272,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 245
    },
    "233": {
      "batch_size": 63,
      "lambda_value": 0.2336341509155,
      "learning_rate": 0.0004226593644,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "234": {
      "batch_size": 49,
      "lambda_value": 0.6806976718747,
      "learning_rate": 0.0069988860332,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 128
    },
    "235": {
      "batch_size": 455,
      "lambda_value": 0.8495232198256,
      "learning_rate": 0.0095403809884,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 110
    },
    "236": {
      "batch_size": 50,
      "lambda_value": 0.1519592189992,
      "learning_rate": 0.0155866756906,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 330
    },
    "237": {
      "batch_size": 32,
      "lambda_value": 0.6276940584115,
      "learning_rate": 0.0001745200849,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "238": {
      "batch_size": 51,
      "lambda_value": 0.4978130092022,
      "learning_rate": 0.0006479136368,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 168
    },
    "239": {
      "batch_size": 344,
      "lambda_value": 0.8248795737402,
      "learning_rate": 0.0002610219568,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 407
    },
    "240": {
      "batch_size": 641,
      "lambda_value": 0.280073581512,
      "learning_rate": 0.0016486629264,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 530
    },
    "241": {
      "batch_size": 71,
      "lambda_value": 0.2886039406427,
      "learning_rate": 0.0043323441692,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 192
    },
    "242": {
      "batch_size": 111,
      "lambda_value": 0.3255187079453,
      "learning_rate": 0.002088036926,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 492
    },
    "243": {
      "batch_size": 70,
      "lambda_value": 0.1630554128522,
      "learning_rate": 0.0003439187365,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 176
    },
    "244": {
      "batch_size": 961,
      "lambda_value": 0.417971716796,
      "learning_rate": 0.0002595916085,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 334
    },
    "245": {
      "batch_size": 294,
      "lambda_value": 0.729133400265,
      "learning_rate": 0.0666283501018,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 590
    },
    "246": {
      "batch_size": 40,
      "lambda_value": 0.7967112548555,
      "learning_rate": 0.0353565829307,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 238
    },
    "247": {
      "batch_size": 780,
      "lambda_value": 0.7083343086535,
      "learning_rate": 0.0326606169,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 105
    },
    "248": {
      "batch_size": 442,
      "lambda_value": 0.5201046118183,
      "learning_rate": 0.0001811518715,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 102
    },
    "249": {
      "batch_size": 816,
      "lambda_value": 0.1006982395772,
      "learning_rate": 0.0001623275114,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 419
    },
    "250": {
      "batch_size": 60,
      "lambda_value": 0.1914094420551,
      "learning_rate": 0.0004606071383,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "251": {
      "batch_size": 753,
      "lambda_value": 0.2435795480092,
      "learning_rate": 0.0004095912949,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 722
    },
    "252": {
      "batch_size": 704,
      "lambda_value": 0.144880579601,
      "learning_rate": 0.0002366997783,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 328
    },
    "253": {
      "batch_size": 102,
      "lambda_value": 0.1894695080254,
      "learning_rate": 0.0026068828701,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "254": {
      "batch_size": 547,
      "lambda_value": 0.4239860884209,
      "learning_rate": 0.0001356935227,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 149
    },
    "255": {
      "batch_size": 86,
      "lambda_value": 0.0045154409777,
      "learning_rate": 0.0030138194765,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 199
    },
    "256": {
      "batch_size": 376,
      "lambda_value": 0.1582188227815,
      "learning_rate": 0.0045780134808,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 524
    },
    "257": {
      "batch_size": 51,
      "lambda_value": 0.9108112310834,
      "learning_rate": 0.0001277308521,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 341
    },
    "258": {
      "batch_size": 765,
      "lambda_value": 0.1783089366069,
      "learning_rate": 0.0005607461675,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 336
    },
    "259": {
      "batch_size": 54,
      "lambda_value": 0.7760907682766,
      "learning_rate": 0.019084000727,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 262
    },
    "260": {
      "batch_size": 782,
      "lambda_value": 0.4208203917144,
      "learning_rate": 0.0344213993223,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 98
    },
    "261": {
      "batch_size": 363,
      "lambda_value": 0.2913048958122,
      "learning_rate": 0.0115743270024,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "262": {
      "batch_size": 387,
      "lambda_value": 0.4808552083858,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 205
    },
    "263": {
      "batch_size": 465,
      "lambda_value": 0.6264949327585,
      "learning_rate": 0.0081532443273,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 208
    },
    "264": {
      "batch_size": 843,
      "lambda_value": 0.2755907586144,
      "learning_rate": 0.0014261932923,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 310
    },
    "265": {
      "batch_size": 534,
      "lambda_value": 0.3886122845379,
      "learning_rate": 0.0011270176996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 644
    },
    "266": {
      "batch_size": 32,
      "lambda_value": 0.0555308977991,
      "learning_rate": 0.0009211259258,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 260
    },
    "267": {
      "batch_size": 178,
      "lambda_value": 0.7361547279816,
      "learning_rate": 0.0002666736091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "268": {
      "batch_size": 540,
      "lambda_value": 0.1126117643449,
      "learning_rate": 0.0042339443161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 461
    },
    "269": {
      "batch_size": 237,
      "lambda_value": 0.9976105432415,
      "learning_rate": 0.0001410508481,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 216
    },
    "270": {
      "batch_size": 334,
      "lambda_value": 0.6608835092183,
      "learning_rate": 0.0007244468698,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 86
    },
    "271": {
      "batch_size": 50,
      "lambda_value": 0.3539514749546,
      "learning_rate": 0.0001473504196,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 737
    },
    "272": {
      "batch_size": 39,
      "lambda_value": 0.0434074217682,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "273": {
      "batch_size": 63,
      "lambda_value": 0.1011284741403,
      "learning_rate": 0.0057869377883,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "274": {
      "batch_size": 758,
      "lambda_value": 0.1773664279903,
      "learning_rate": 0.0002236086227,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "275": {
      "batch_size": 176,
      "lambda_value": 0.8080018143185,
      "learning_rate": 0.0016972267439,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 87
    },
    "276": {
      "batch_size": 55,
      "lambda_value": 0.0245481552275,
      "learning_rate": 0.0038124057677,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "277": {
      "batch_size": 384,
      "lambda_value": 0.8210957953613,
      "learning_rate": 0.0003022091502,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "278": {
      "batch_size": 58,
      "lambda_value": 0.486513851508,
      "learning_rate": 0.000972353582,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 114
    },
    "279": {
      "batch_size": 463,
      "lambda_value": 0.0886199292692,
      "learning_rate": 0.0028951068882,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 374
    },
    "280": {
      "batch_size": 42,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0419915713539,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "281": {
      "batch_size": 34,
      "lambda_value": 0.0110450647425,
      "learning_rate": 0.0037398300895,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 132
    },
    "282": {
      "batch_size": 125,
      "lambda_value": 0.073563589368,
      "learning_rate": 0.0007287942283,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 662
    },
    "283": {
      "batch_size": 105,
      "lambda_value": 0.0244539059088,
      "learning_rate": 0.00837156209,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 270
    },
    "284": {
      "batch_size": 521,
      "lambda_value": 0.8089856629774,
      "learning_rate": 0.0076508599827,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "285": {
      "batch_size": 35,
      "lambda_value": 0.7719643918195,
      "learning_rate": 0.0017623959647,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "286": {
      "batch_size": 381,
      "lambda_value": 0.3834047145119,
      "learning_rate": 0.0038237497074,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 234
    },
    "287": {
      "batch_size": 413,
      "lambda_value": 0.0535191435259,
      "learning_rate": 0.0377148256786,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 100
    },
    "288": {
      "batch_size": 290,
      "lambda_value": 0.1320726262101,
      "learning_rate": 0.0023254224427,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "289": {
      "batch_size": 217,
      "lambda_value": 0.9365282264493,
      "learning_rate": 0.0050431783915,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 123
    },
    "290": {
      "batch_size": 544,
      "lambda_value": 0.4355872915023,
      "learning_rate": 0.0103945201972,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 237
    },
    "291": {
      "batch_size": 1011,
      "lambda_value": 0.4804118476289,
      "learning_rate": 0.0005972414841,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 587
    },
    "292": {
      "batch_size": 262,
      "lambda_value": 0.8036567934905,
      "learning_rate": 0.0001911999794,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "293": {
      "batch_size": 522,
      "lambda_value": 0.6810171385066,
      "learning_rate": 0.0363285889677,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 226
    },
    "294": {
      "batch_size": 68,
      "lambda_value": 0.1122108482366,
      "learning_rate": 0.0004946291044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 66
    },
    "295": {
      "batch_size": 697,
      "lambda_value": 0.7873240093307,
      "learning_rate": 0.0001594353537,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "296": {
      "batch_size": 33,
      "lambda_value": 0.1052317687943,
      "learning_rate": 0.0003359396443,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 148
    },
    "297": {
      "batch_size": 79,
      "lambda_value": 0.4196490252802,
      "learning_rate": 0.0100423699896,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 642
    },
    "298": {
      "batch_size": 148,
      "lambda_value": 0.4101648178047,
      "learning_rate": 0.0170134585068,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "299": {
      "batch_size": 801,
      "lambda_value": 0.833097150633,
      "learning_rate": 0.0862965434581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 217
    },
    "300": {
      "batch_size": 722,
      "lambda_value": 0.0686970530845,
      "learning_rate": 0.000118835971,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 426
    },
    "301": {
      "batch_size": 151,
      "lambda_value": 0.1765449594378,
      "learning_rate": 0.0005750675549,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "302": {
      "batch_size": 90,
      "lambda_value": 0.80285407825,
      "learning_rate": 0.0079014107354,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 97
    },
    "303": {
      "batch_size": 162,
      "lambda_value": 0.8985286621682,
      "learning_rate": 0.0174342739555,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 113
    },
    "304": {
      "batch_size": 621,
      "lambda_value": 0.3360339953694,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "305": {
      "batch_size": 377,
      "lambda_value": 0.0764293009661,
      "learning_rate": 0.0019926714499,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 617
    },
    "306": {
      "batch_size": 571,
      "lambda_value": 0.353016718935,
      "learning_rate": 0.0440802633021,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 155
    },
    "307": {
      "batch_size": 640,
      "lambda_value": 0.0011522622186,
      "learning_rate": 0.0001056551388,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 362
    },
    "308": {
      "batch_size": 661,
      "lambda_value": 0.2229809643412,
      "learning_rate": 0.0018678134703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 379
    },
    "309": {
      "batch_size": 831,
      "lambda_value": 0.2298700683603,
      "learning_rate": 0.0004065521248,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 216
    },
    "310": {
      "batch_size": 861,
      "lambda_value": 0.4043921180506,
      "learning_rate": 0.0053265918237,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 209
    },
    "311": {
      "batch_size": 390,
      "lambda_value": 0.5314194809525,
      "learning_rate": 0.0013443259838,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 242
    },
    "312": {
      "batch_size": 741,
      "lambda_value": 0.7148476112948,
      "learning_rate": 0.0021213467033,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 82
    },
    "313": {
      "batch_size": 849,
      "lambda_value": 0.3099768475404,
      "learning_rate": 0.0006553087978,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 124
    },
    "314": {
      "batch_size": 41,
      "lambda_value": 0.0660568722404,
      "learning_rate": 0.0040521423813,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "315": {
      "batch_size": 780,
      "lambda_value": 0.2064525755689,
      "learning_rate": 0.0002593296815,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 548
    },
    "316": {
      "batch_size": 277,
      "lambda_value": 0.0994308555944,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 397
    },
    "317": {
      "batch_size": 905,
      "lambda_value": 0.8059902862067,
      "learning_rate": 0.0018633581119,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 416
    },
    "318": {
      "batch_size": 437,
      "lambda_value": 0.7358982056678,
      "learning_rate": 0.0067680718763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 82
    },
    "319": {
      "batch_size": 659,
      "lambda_value": 0.6213471081522,
      "learning_rate": 0.0060203559486,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 718
    },
    "320": {
      "batch_size": 498,
      "lambda_value": 0.3797333205204,
      "learning_rate": 0.0026146954891,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 235
    },
    "321": {
      "batch_size": 843,
      "lambda_value": 0.1865370858349,
      "learning_rate": 0.0020195892834,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 235
    },
    "322": {
      "batch_size": 47,
      "lambda_value": 0.5182538469109,
      "learning_rate": 0.0089358135385,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 103
    },
    "323": {
      "batch_size": 121,
      "lambda_value": 0.541339152825,
      "learning_rate": 0.0002017361907,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 438
    },
    "324": {
      "batch_size": 418,
      "lambda_value": 0.4806562688073,
      "learning_rate": 0.0001280087689,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 151
    },
    "325": {
      "batch_size": 505,
      "lambda_value": 0.1804699936187,
      "learning_rate": 0.0515528982345,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 512
    },
    "326": {
      "batch_size": 756,
      "lambda_value": 0.0563130399479,
      "learning_rate": 0.0022234197184,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 129
    },
    "327": {
      "batch_size": 58,
      "lambda_value": 0.4944094677612,
      "learning_rate": 0.0002060823911,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 247
    },
    "328": {
      "batch_size": 156,
      "lambda_value": 0.8337801698394,
      "learning_rate": 0.0499835912667,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "329": {
      "batch_size": 443,
      "lambda_value": 0.2533722448979,
      "learning_rate": 0.020662701703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 439
    },
    "330": {
      "batch_size": 60,
      "lambda_value": 0.1306990600206,
      "learning_rate": 0.0065000343887,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 106
    },
    "331": {
      "batch_size": 307,
      "lambda_value": 0.2683873329488,
      "learning_rate": 0.0002594694874,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 107
    },
    "332": {
      "batch_size": 272,
      "lambda_value": 0.0894764468418,
      "learning_rate": 0.0003411331376,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 114
    },
    "333": {
      "batch_size": 257,
      "lambda_value": 0.5553544255642,
      "learning_rate": 0.0002451181655,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 77
    },
    "334": {
      "batch_size": 839,
      "lambda_value": 0.6434392806542,
      "learning_rate": 0.0004632122203,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 847
    },
    "335": {
      "batch_size": 743,
      "lambda_value": 0.215031883639,
      "learning_rate": 0.01152356152,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "336": {
      "batch_size": 435,
      "lambda_value": 0.6808719321627,
      "learning_rate": 0.0679194637572,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 90
    },
    "337": {
      "batch_size": 717,
      "lambda_value": 0.7887801615769,
      "learning_rate": 0.0005094724236,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 356
    },
    "338": {
      "batch_size": 581,
      "lambda_value": 0.0178358357788,
      "learning_rate": 0.0003477267856,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 103
    },
    "339": {
      "batch_size": 218,
      "lambda_value": 0.1696888094239,
      "learning_rate": 0.052309575188,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 810
    },
    "340": {
      "batch_size": 401,
      "lambda_value": 0.7568355160604,
      "learning_rate": 0.0005585359023,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 520
    },
    "341": {
      "batch_size": 473,
      "lambda_value": 0.4546944937188,
      "learning_rate": 0.0027846284343,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 236
    },
    "342": {
      "batch_size": 350,
      "lambda_value": 0.5559936772425,
      "learning_rate": 0.0100529394688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 231
    },
    "343": {
      "batch_size": 530,
      "lambda_value": 0.8712284711014,
      "learning_rate": 0.0299782918803,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 218
    },
    "344": {
      "batch_size": 635,
      "lambda_value": 0.6639737340676,
      "learning_rate": 0.0558536530177,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 602
    },
    "345": {
      "batch_size": 395,
      "lambda_value": 0.6229592140736,
      "learning_rate": 0.089214428506,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 76
    },
    "346": {
      "batch_size": 766,
      "lambda_value": 0.2242789140878,
      "learning_rate": 0.0201515256305,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 162
    },
    "347": {
      "batch_size": 50,
      "lambda_value": 0.0852627285054,
      "learning_rate": 0.0308602695679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 125
    },
    "348": {
      "batch_size": 663,
      "lambda_value": 0.2197957309267,
      "learning_rate": 0.0006061254588,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 69
    },
    "349": {
      "batch_size": 52,
      "lambda_value": 0.9515193689156,
      "learning_rate": 0.0002946615193,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "350": {
      "batch_size": 785,
      "lambda_value": 0.6064813774206,
      "learning_rate": 0.0044035167819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 382
    },
    "351": {
      "batch_size": 254,
      "lambda_value": 0.9054709401563,
      "learning_rate": 0.0002642115192,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 665
    },
    "352": {
      "batch_size": 549,
      "lambda_value": 0.674096520909,
      "learning_rate": 0.0188256591059,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "353": {
      "batch_size": 288,
      "lambda_value": 0.5248121876714,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 103
    },
    "354": {
      "batch_size": 51,
      "lambda_value": 0.4900602108518,
      "learning_rate": 0.0033119573752,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "355": {
      "batch_size": 51,
      "lambda_value": 0.0864264480572,
      "learning_rate": 0.0036006553919,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 339
    },
    "356": {
      "batch_size": 254,
      "lambda_value": 0.1335888882005,
      "learning_rate": 0.0293502269983,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "357": {
      "batch_size": 948,
      "lambda_value": 0.1227161072199,
      "learning_rate": 0.0003706377685,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 814
    },
    "358": {
      "batch_size": 32,
      "lambda_value": 0.5590620740748,
      "learning_rate": 0.0001887486611,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "359": {
      "batch_size": 736,
      "lambda_value": 0.5877962768707,
      "learning_rate": 0.000173328844,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 86
    },
    "360": {
      "batch_size": 96,
      "lambda_value": 0.6820598906435,
      "learning_rate": 0.0137231840115,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "361": {
      "batch_size": 152,
      "lambda_value": 0.4622814816124,
      "learning_rate": 0.0001798692692,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 350
    },
    "362": {
      "batch_size": 584,
      "lambda_value": 0.0554709545819,
      "learning_rate": 0.002867925593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "363": {
      "batch_size": 381,
      "lambda_value": 0.2759440299071,
      "learning_rate": 0.005834854811,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 315
    },
    "364": {
      "batch_size": 155,
      "lambda_value": 0.0126718534249,
      "learning_rate": 0.068001605758,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 179
    },
    "365": {
      "batch_size": 47,
      "lambda_value": 0.5370564885229,
      "learning_rate": 0.0139226790705,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 86
    },
    "366": {
      "batch_size": 143,
      "lambda_value": 0.3048283869862,
      "learning_rate": 0.0001422244224,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 95
    },
    "367": {
      "batch_size": 47,
      "lambda_value": 0.6556781774429,
      "learning_rate": 0.0165539675071,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 702
    },
    "368": {
      "batch_size": 514,
      "lambda_value": 0.9325032292789,
      "learning_rate": 0.0028561687279,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 196
    },
    "369": {
      "batch_size": 482,
      "lambda_value": 0.3176803263535,
      "learning_rate": 0.0398799204606,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 370
    },
    "370": {
      "batch_size": 361,
      "lambda_value": 0.1317226997102,
      "learning_rate": 0.0079847689986,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 131
    },
    "371": {
      "batch_size": 54,
      "lambda_value": 0.5065217763128,
      "learning_rate": 0.0005039206588,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "372": {
      "batch_size": 195,
      "lambda_value": 0.1182898929868,
      "learning_rate": 0.0006307295736,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 88
    },
    "373": {
      "batch_size": 615,
      "lambda_value": 0.1713031609062,
      "learning_rate": 0.000327779834,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "374": {
      "batch_size": 210,
      "lambda_value": 0.5999363245098,
      "learning_rate": 0.0001227598618,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 109
    },
    "375": {
      "batch_size": 228,
      "lambda_value": 0.2097534663918,
      "learning_rate": 0.0044908007691,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 98
    },
    "376": {
      "batch_size": 588,
      "lambda_value": 0.6921191491618,
      "learning_rate": 0.0002698674969,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 117
    },
    "377": {
      "batch_size": 827,
      "lambda_value": 0.7449112412928,
      "learning_rate": 0.0088357537548,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 265
    },
    "378": {
      "batch_size": 306,
      "lambda_value": 0.4408812080456,
      "learning_rate": 0.0149767955939,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 136
    },
    "379": {
      "batch_size": 32,
      "lambda_value": 0.2036762467285,
      "learning_rate": 0.0007120181963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 298
    },
    "380": {
      "batch_size": 44,
      "lambda_value": 0.363548252842,
      "learning_rate": 0.0146518248161,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "381": {
      "batch_size": 392,
      "lambda_value": 0.8530809109696,
      "learning_rate": 0.0068378774336,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 936
    },
    "382": {
      "batch_size": 285,
      "lambda_value": 0.0405681071044,
      "learning_rate": 0.0004518383496,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 354
    },
    "383": {
      "batch_size": 85,
      "lambda_value": 0.4744191316373,
      "learning_rate": 0.0427057286624,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "384": {
      "batch_size": 306,
      "lambda_value": 0.2010288654859,
      "learning_rate": 0.0002725464319,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "385": {
      "batch_size": 651,
      "lambda_value": 0.8976907571079,
      "learning_rate": 0.0051642740405,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 317
    },
    "386": {
      "batch_size": 315,
      "lambda_value": 0.4797039031948,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "387": {
      "batch_size": 472,
      "lambda_value": 0.4614628028735,
      "learning_rate": 0.0291505470366,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 392
    },
    "388": {
      "batch_size": 458,
      "lambda_value": 0.0995730051319,
      "learning_rate": 0.0039095602593,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 299
    },
    "389": {
      "batch_size": 56,
      "lambda_value": 0.6254740258478,
      "learning_rate": 0.0002301867794,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "390": {
      "batch_size": 693,
      "lambda_value": 0.5463370696629,
      "learning_rate": 0.080973575191,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "391": {
      "batch_size": 209,
      "lambda_value": 0.5536684799516,
      "learning_rate": 0.0129454765127,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 208
    },
    "392": {
      "batch_size": 58,
      "lambda_value": 0.2603218459407,
      "learning_rate": 0.0001532968651,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "393": {
      "batch_size": 58,
      "lambda_value": 0.1620409311437,
      "learning_rate": 0.0735796471111,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 627
    },
    "394": {
      "batch_size": 36,
      "lambda_value": 0.7723035029214,
      "learning_rate": 0.0009204157787,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "395": {
      "batch_size": 205,
      "lambda_value": 0.7727489068701,
      "learning_rate": 0.0140877870417,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 92
    },
    "396": {
      "batch_size": 657,
      "lambda_value": 0.4360791272104,
      "learning_rate": 0.0003511187487,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 326
    },
    "397": {
      "batch_size": 785,
      "lambda_value": 0.4730155072588,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "398": {
      "batch_size": 540,
      "lambda_value": 0.5582406622968,
      "learning_rate": 0.0001278093202,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "399": {
      "batch_size": 366,
      "lambda_value": 0.0727961021739,
      "learning_rate": 0.0402294898411,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "400": {
      "batch_size": 538,
      "lambda_value": 0.9368961678792,
      "learning_rate": 0.0004181432648,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 271
    },
    "401": {
      "batch_size": 757,
      "lambda_value": 0.9354630310557,
      "learning_rate": 0.0888041723761,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "402": {
      "batch_size": 90,
      "lambda_value": 0.7273220355144,
      "learning_rate": 0.0069453207755,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "403": {
      "batch_size": 844,
      "lambda_value": 0.4824731983172,
      "learning_rate": 0.0003002825268,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 244
    },
    "404": {
      "batch_size": 935,
      "lambda_value": 0.5230953842041,
      "learning_rate": 0.0189973487557,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "405": {
      "batch_size": 995,
      "lambda_value": 0.2168455217586,
      "learning_rate": 0.0027721601592,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 821
    },
    "406": {
      "batch_size": 89,
      "lambda_value": 0.3156048390222,
      "learning_rate": 0.0022198634559,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 194
    },
    "407": {
      "batch_size": 262,
      "lambda_value": 0.8093492297006,
      "learning_rate": 0.0006733972521,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "408": {
      "batch_size": 730,
      "lambda_value": 0.7664908687939,
      "learning_rate": 0.001002848265,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 630
    },
    "409": {
      "batch_size": 154,
      "lambda_value": 0.0952613435301,
      "learning_rate": 0.0006647907154,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 798
    },
    "410": {
      "batch_size": 452,
      "lambda_value": 0.4100844074923,
      "learning_rate": 0.0009856662478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 251
    },
    "411": {
      "batch_size": 231,
      "lambda_value": 0.3275671178479,
      "learning_rate": 0.0002000204542,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 89
    },
    "412": {
      "batch_size": 57,
      "lambda_value": 0.0463424973171,
      "learning_rate": 0.0195673926561,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 200
    },
    "413": {
      "batch_size": 122,
      "lambda_value": 0.110140993716,
      "learning_rate": 0.0026667648338,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 78
    },
    "414": {
      "batch_size": 327,
      "lambda_value": 0.9688895059356,
      "learning_rate": 0.0166234825902,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 359
    },
    "415": {
      "batch_size": 111,
      "lambda_value": 0.1290040542266,
      "learning_rate": 0.0383601008507,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 872
    },
    "416": {
      "batch_size": 554,
      "lambda_value": 0.875718867045,
      "learning_rate": 0.0001409537536,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 913
    },
    "417": {
      "batch_size": 411,
      "lambda_value": 0.6791133254209,
      "learning_rate": 0.003080698466,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 99
    },
    "418": {
      "batch_size": 751,
      "lambda_value": 0.2964694426296,
      "learning_rate": 0.0006311637991,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 964
    },
    "419": {
      "batch_size": 638,
      "lambda_value": 0.809871371246,
      "learning_rate": 0.0012990282325,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 318
    },
    "420": {
      "batch_size": 577,
      "lambda_value": 0.4342900910398,
      "learning_rate": 0.0481822694665,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "421": {
      "batch_size": 45,
      "lambda_value": 0.8518940421392,
      "learning_rate": 0.0079236122108,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 102
    },
    "422": {
      "batch_size": 623,
      "lambda_value": 0.5327950896181,
      "learning_rate": 0.0001028681582,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "423": {
      "batch_size": 1024,
      "lambda_value": 0.8973291223541,
      "learning_rate": 0.0150597220624,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 217
    },
    "424": {
      "batch_size": 629,
      "lambda_value": 0.0960157047896,
      "learning_rate": 0.0109639694441,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "425": {
      "batch_size": 36,
      "lambda_value": 0.2024840795611,
      "learning_rate": 0.0001960291943,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "426": {
      "batch_size": 607,
      "lambda_value": 0.1383618143966,
      "learning_rate": 0.0026266122149,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 180
    },
    "427": {
      "batch_size": 649,
      "lambda_value": 0.6641101531537,
      "learning_rate": 0.0009131406471,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 121
    },
    "428": {
      "batch_size": 359,
      "lambda_value": 0.777661779255,
      "learning_rate": 0.0012177002287,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 242
    },
    "429": {
      "batch_size": 251,
      "lambda_value": 0.9902859186046,
      "learning_rate": 0.0079500805258,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 104
    },
    "430": {
      "batch_size": 120,
      "lambda_value": 0.6401709483762,
      "learning_rate": 0.0511947218235,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 143
    },
    "431": {
      "batch_size": 625,
      "lambda_value": 0.547026907589,
      "learning_rate": 0.0348766379912,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "432": {
      "batch_size": 318,
      "lambda_value": 0.1976681376706,
      "learning_rate": 0.0078438662891,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 69
    },
    "433": {
      "batch_size": 786,
      "lambda_value": 0.3304246919642,
      "learning_rate": 0.0010188720378,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 200
    },
    "434": {
      "batch_size": 240,
      "lambda_value": 0.3250953520818,
      "learning_rate": 0.0158235846031,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 178
    },
    "435": {
      "batch_size": 519,
      "lambda_value": 0.576923925179,
      "learning_rate": 0.016810576472,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "436": {
      "batch_size": 46,
      "lambda_value": 0.0448820923995,
      "learning_rate": 0.0001231661583,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 180
    },
    "437": {
      "batch_size": 119,
      "lambda_value": 0.4059533800196,
      "learning_rate": 0.0003517171686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "438": {
      "batch_size": 791,
      "lambda_value": 0.8071511713332,
      "learning_rate": 0.0044489428443,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 230
    },
    "439": {
      "batch_size": 68,
      "lambda_value": 0.0779707639047,
      "learning_rate": 0.0461783232972,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 111
    },
    "440": {
      "batch_size": 130,
      "lambda_value": 0.5248121876714,
      "learning_rate": 0.0138796755616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "441": {
      "batch_size": 816,
      "lambda_value": 0.8717455164644,
      "learning_rate": 0.0001786287251,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 565
    },
    "442": {
      "batch_size": 357,
      "lambda_value": 0.2177427493109,
      "learning_rate": 0.0002357764524,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 477
    },
    "443": {
      "batch_size": 43,
      "lambda_value": 0.8920943096487,
      "learning_rate": 0.0001742152858,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "444": {
      "batch_size": 375,
      "lambda_value": 0.3164903259613,
      "learning_rate": 0.0026873277912,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 259
    },
    "445": {
      "batch_size": 776,
      "lambda_value": 0.2497535308347,
      "learning_rate": 0.0066559651906,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 190
    },
    "446": {
      "batch_size": 716,
      "lambda_value": 0.3506635014426,
      "learning_rate": 0.0006431334297,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 66
    },
    "447": {
      "batch_size": 742,
      "lambda_value": 0.6142547760672,
      "learning_rate": 0.0520499710913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "448": {
      "batch_size": 569,
      "lambda_value": 0.7592947955,
      "learning_rate": 0.0023713833184,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 293
    },
    "449": {
      "batch_size": 880,
      "lambda_value": 0.1861251225005,
      "learning_rate": 0.0156666338249,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "450": {
      "batch_size": 273,
      "lambda_value": 0.6672254078551,
      "learning_rate": 0.0004944291762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "451": {
      "batch_size": 593,
      "lambda_value": 0.7127453109276,
      "learning_rate": 0.0014902672058,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "452": {
      "batch_size": 201,
      "lambda_value": 0.1226827152264,
      "learning_rate": 0.001252697061,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 274
    },
    "453": {
      "batch_size": 591,
      "lambda_value": 0.9997697342144,
      "learning_rate": 0.0055276967725,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 76
    },
    "454": {
      "batch_size": 99,
      "lambda_value": 0.4459274560053,
      "learning_rate": 0.0009666060551,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 735
    },
    "455": {
      "batch_size": 105,
      "lambda_value": 0.8333531176676,
      "learning_rate": 0.0019146177708,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "456": {
      "batch_size": 387,
      "lambda_value": 0.5128221535186,
      "learning_rate": 0.0005640287916,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 76
    },
    "457": {
      "batch_size": 615,
      "lambda_value": 0.3993193127766,
      "learning_rate": 0.0376217765146,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 67
    },
    "458": {
      "batch_size": 255,
      "lambda_value": 0.7094066976144,
      "learning_rate": 0.0002327913586,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 544
    },
    "459": {
      "batch_size": 681,
      "lambda_value": 0.9246676613873,
      "learning_rate": 0.0039294321189,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 68
    },
    "460": {
      "batch_size": 33,
      "lambda_value": 0.8937828362628,
      "learning_rate": 0.0216101868293,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 225
    },
    "461": {
      "batch_size": 49,
      "lambda_value": 0.4876675329261,
      "learning_rate": 0.0002844103914,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 315
    },
    "462": {
      "batch_size": 284,
      "lambda_value": 0.4491058389733,
      "learning_rate": 0.0024031864803,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 217
    },
    "463": {
      "batch_size": 135,
      "lambda_value": 0.6408264521199,
      "learning_rate": 0.0063257124081,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 283
    },
    "464": {
      "batch_size": 62,
      "lambda_value": 0.8428736516667,
      "learning_rate": 0.042039485552,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 196
    },
    "465": {
      "batch_size": 67,
      "lambda_value": 0.6231828124433,
      "learning_rate": 0.0146142958703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 92
    },
    "466": {
      "batch_size": 752,
      "lambda_value": 0.3069827864306,
      "learning_rate": 0.0284171458994,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 436
    },
    "467": {
      "batch_size": 780,
      "lambda_value": 0.5299790087701,
      "learning_rate": 0.0046493160938,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 76
    },
    "468": {
      "batch_size": 38,
      "lambda_value": 0.1431065102332,
      "learning_rate": 0.0581046114744,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 379
    },
    "469": {
      "batch_size": 786,
      "lambda_value": 0.8132945800527,
      "learning_rate": 0.0014645453026,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 885
    },
    "470": {
      "batch_size": 105,
      "lambda_value": 0.8333531176676,
      "learning_rate": 0.0046987969504,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "471": {
      "batch_size": 248,
      "lambda_value": 0.1211002383812,
      "learning_rate": 0.0002548874535,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 493
    },
    "472": {
      "batch_size": 747,
      "lambda_value": 0.2895420787823,
      "learning_rate": 0.003406725168,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "473": {
      "batch_size": 366,
      "lambda_value": 0.0231602598096,
      "learning_rate": 0.0565293919412,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "474": {
      "batch_size": 270,
      "lambda_value": 0.6163972430054,
      "learning_rate": 0.0893466898303,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 90
    },
    "475": {
      "batch_size": 627,
      "lambda_value": 0.2660401017344,
      "learning_rate": 0.01005651579,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 519
    },
    "476": {
      "batch_size": 754,
      "lambda_value": 0.1722003959012,
      "learning_rate": 0.0088476982204,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "477": {
      "batch_size": 821,
      "lambda_value": 0.3005225087541,
      "learning_rate": 0.0124905205425,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 285
    },
    "478": {
      "batch_size": 187,
      "lambda_value": 0.7683191819873,
      "learning_rate": 0.0725416351251,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 210
    },
    "479": {
      "batch_size": 517,
      "lambda_value": 0.8220084638887,
      "learning_rate": 0.011291352857,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "480": {
      "batch_size": 48,
      "lambda_value": 0.528443960705,
      "learning_rate": 0.002291534357,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 69
    },
    "481": {
      "batch_size": 41,
      "lambda_value": 0.7926407552659,
      "learning_rate": 0.0284915711954,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "482": {
      "batch_size": 382,
      "lambda_value": 0.9211659506392,
      "learning_rate": 0.0003454820205,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 207
    },
    "483": {
      "batch_size": 601,
      "lambda_value": 0.4144072760939,
      "learning_rate": 0.0058613517741,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 550
    },
    "484": {
      "batch_size": 749,
      "lambda_value": 0.8617159873378,
      "learning_rate": 0.0001836760493,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 388
    },
    "485": {
      "batch_size": 646,
      "lambda_value": 0.6813282339738,
      "learning_rate": 0.0037409291542,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 717
    },
    "486": {
      "batch_size": 660,
      "lambda_value": 0.3948238859662,
      "learning_rate": 0.0105476488257,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 211
    },
    "487": {
      "batch_size": 763,
      "lambda_value": 0.2618861711778,
      "learning_rate": 0.0001097035558,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "488": {
      "batch_size": 150,
      "lambda_value": 0.8173536924154,
      "learning_rate": 0.00237009611,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 301
    },
    "489": {
      "batch_size": 320,
      "lambda_value": 0.9585151788592,
      "learning_rate": 0.0033380807183,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 290
    },
    "490": {
      "batch_size": 808,
      "lambda_value": 0.5863496171544,
      "learning_rate": 0.0043235298889,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 215
    },
    "491": {
      "batch_size": 636,
      "lambda_value": 0.4897793674156,
      "learning_rate": 0.0002278717314,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 127
    },
    "492": {
      "batch_size": 201,
      "lambda_value": 0.4870672671662,
      "learning_rate": 0.0002157903437,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 124
    },
    "493": {
      "batch_size": 46,
      "lambda_value": 0.7206015572169,
      "learning_rate": 0.0057590107986,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 200
    },
    "494": {
      "batch_size": 34,
      "lambda_value": 0.3960054885911,
      "learning_rate": 0.0005350837422,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 469
    },
    "495": {
      "batch_size": 794,
      "lambda_value": 0.8243294603364,
      "learning_rate": 0.0006436728419,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 407
    },
    "496": {
      "batch_size": 336,
      "lambda_value": 0.8060632521795,
      "learning_rate": 0.0003273879467,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "497": {
      "batch_size": 288,
      "lambda_value": 0.0714829915638,
      "learning_rate": 0.0016135141591,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 446
    },
    "498": {
      "batch_size": 516,
      "lambda_value": 0.6693324959229,
      "learning_rate": 0.0356662603433,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 211
    },
    "499": {
      "batch_size": 554,
      "lambda_value": 0.2285299370789,
      "learning_rate": 0.004677318249,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 660
    },
    "500": {
      "batch_size": 605,
      "lambda_value": 0.6508257156304,
      "learning_rate": 0.0001031788835,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "501": {
      "batch_size": 53,
      "lambda_value": 0.6823513948608,
      "learning_rate": 0.0001572545687,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 303
    },
    "502": {
      "batch_size": 71,
      "lambda_value": 0.5573084349525,
      "learning_rate": 0.0505152106799,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 163
    },
    "503": {
      "batch_size": 149,
      "lambda_value": 0.6279608283276,
      "learning_rate": 0.0004457136545,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "504": {
      "batch_size": 411,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0105826134632,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 71
    },
    "505": {
      "batch_size": 35,
      "lambda_value": 0.6560284497133,
      "learning_rate": 0.0129861552471,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 67
    },
    "506": {
      "batch_size": 780,
      "lambda_value": 0.4725842164371,
      "learning_rate": 0.0055288337335,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 66
    },
    "507": {
      "batch_size": 32,
      "lambda_value": 0.51600824763,
      "learning_rate": 0.0001906758121,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 73
    },
    "508": {
      "batch_size": 351,
      "lambda_value": 0.9533456854678,
      "learning_rate": 0.0045660379397,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 75
    },
    "509": {
      "batch_size": 55,
      "lambda_value": 0.6229731445495,
      "learning_rate": 0.0038847150378,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 474
    },
    "510": {
      "batch_size": 213,
      "lambda_value": 0.1689956184691,
      "learning_rate": 0.0047092230045,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 411
    },
    "511": {
      "batch_size": 130,
      "lambda_value": 0.5279324707843,
      "learning_rate": 0.0138796755616,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 67
    },
    "512": {
      "batch_size": 421,
      "lambda_value": 0.3758516095051,
      "learning_rate": 0.0362929038997,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "513": {
      "batch_size": 978,
      "lambda_value": 0.0744104096509,
      "learning_rate": 0.0260585675862,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 150
    },
    "514": {
      "batch_size": 127,
      "lambda_value": 0.633238947746,
      "learning_rate": 0.0018035530187,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 215
    },
    "515": {
      "batch_size": 167,
      "lambda_value": 0.3906399533428,
      "learning_rate": 0.0070318592816,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 425
    },
    "516": {
      "batch_size": 849,
      "lambda_value": 0.0041035960818,
      "learning_rate": 0.0050620300633,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 286
    },
    "517": {
      "batch_size": 423,
      "lambda_value": 0.6921300115593,
      "learning_rate": 0.0002602116217,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "518": {
      "batch_size": 53,
      "lambda_value": 0.5964385451403,
      "learning_rate": 0.0001029394984,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 137
    },
    "519": {
      "batch_size": 56,
      "lambda_value": 0.5470413172319,
      "learning_rate": 0.0007782224297,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 96
    },
    "520": {
      "batch_size": 190,
      "lambda_value": 0.6009572485473,
      "learning_rate": 0.0005319832345,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "521": {
      "batch_size": 250,
      "lambda_value": 0.0427621731005,
      "learning_rate": 0.0003348878331,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 68
    },
    "522": {
      "batch_size": 582,
      "lambda_value": 0.5521956202541,
      "learning_rate": 0.0002917173747,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "523": {
      "batch_size": 534,
      "lambda_value": 0.8609185401172,
      "learning_rate": 0.0875999392673,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 412
    },
    "524": {
      "batch_size": 344,
      "lambda_value": 0.5250529069188,
      "learning_rate": 0.0058940740331,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 127
    },
    "525": {
      "batch_size": 324,
      "lambda_value": 0.5930429174166,
      "learning_rate": 0.0083833898211,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 479
    },
    "526": {
      "batch_size": 38,
      "lambda_value": 0.6107790697176,
      "learning_rate": 0.0911637803703,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 180
    },
    "527": {
      "batch_size": 351,
      "lambda_value": 0.6808719321627,
      "learning_rate": 0.0750706909129,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "528": {
      "batch_size": 808,
      "lambda_value": 0.707144460687,
      "learning_rate": 0.0258381834066,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 241
    },
    "529": {
      "batch_size": 865,
      "lambda_value": 0.2229286798622,
      "learning_rate": 0.0232998074386,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 150
    },
    "530": {
      "batch_size": 261,
      "lambda_value": 0.4159376482463,
      "learning_rate": 0.0006375142568,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 170
    },
    "531": {
      "batch_size": 246,
      "lambda_value": 0.7487399085362,
      "learning_rate": 0.0006982706335,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "532": {
      "batch_size": 819,
      "lambda_value": 0.1715721745315,
      "learning_rate": 0.0027521521809,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "533": {
      "batch_size": 43,
      "lambda_value": 0.8504601430568,
      "learning_rate": 0.0079236122108,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 102
    },
    "534": {
      "batch_size": 703,
      "lambda_value": 0.2938889825625,
      "learning_rate": 0.0473577942329,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 109
    },
    "535": {
      "batch_size": 43,
      "lambda_value": 0.7450500773386,
      "learning_rate": 0.0137231840115,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "536": {
      "batch_size": 553,
      "lambda_value": 0.1839127426189,
      "learning_rate": 0.0004573244322,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 496
    },
    "537": {
      "batch_size": 864,
      "lambda_value": 0.1355567992583,
      "learning_rate": 0.0002557704953,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 137
    },
    "538": {
      "batch_size": 67,
      "lambda_value": 0.4009078748603,
      "learning_rate": 0.0002421082016,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "539": {
      "batch_size": 66,
      "lambda_value": 0.5588370986384,
      "learning_rate": 0.0001524174094,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 252
    },
    "540": {
      "batch_size": 910,
      "lambda_value": 0.2157809687138,
      "learning_rate": 0.0362462794097,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 131
    },
    "541": {
      "batch_size": 335,
      "lambda_value": 0.0713637891236,
      "learning_rate": 0.0001242626529,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 323
    },
    "542": {
      "batch_size": 106,
      "lambda_value": 0.8351784921736,
      "learning_rate": 0.0028009439295,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 585
    },
    "543": {
      "batch_size": 383,
      "lambda_value": 0.7315931494257,
      "learning_rate": 0.0056857393049,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 118
    },
    "544": {
      "batch_size": 39,
      "lambda_value": 0.9842518610153,
      "learning_rate": 0.0078260849563,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 183
    },
    "545": {
      "batch_size": 545,
      "lambda_value": 0.4027028162047,
      "learning_rate": 0.0016708502536,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 184
    },
    "546": {
      "batch_size": 151,
      "lambda_value": 0.9868537159485,
      "learning_rate": 0.0009464379409,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 503
    },
    "547": {
      "batch_size": 634,
      "lambda_value": 0.4017456094133,
      "learning_rate": 0.0029535991258,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 421
    },
    "548": {
      "batch_size": 515,
      "lambda_value": 0.7551166032471,
      "learning_rate": 0.0060032651755,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 475
    },
    "549": {
      "batch_size": 722,
      "lambda_value": 0.8463995112482,
      "learning_rate": 0.0519367988348,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 642
    },
    "550": {
      "batch_size": 183,
      "lambda_value": 0.2010235605655,
      "learning_rate": 0.0060236499344,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 348
    },
    "551": {
      "batch_size": 1010,
      "lambda_value": 0.5323793352116,
      "learning_rate": 0.0136617144728,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 878
    },
    "552": {
      "batch_size": 493,
      "lambda_value": 0.1784524747634,
      "learning_rate": 0.000458088078,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 265
    },
    "553": {
      "batch_size": 626,
      "lambda_value": 0.6775234188135,
      "learning_rate": 0.0023992424321,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 224
    },
    "554": {
      "batch_size": 514,
      "lambda_value": 0.6127213312821,
      "learning_rate": 0.0053670246264,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 324
    },
    "555": {
      "batch_size": 646,
      "lambda_value": 0.0952707865123,
      "learning_rate": 0.0001140611149,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "556": {
      "batch_size": 382,
      "lambda_value": 0.4292983157616,
      "learning_rate": 0.0207580568195,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "557": {
      "batch_size": 1019,
      "lambda_value": 0.5181932269457,
      "learning_rate": 0.0827024986497,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 233
    },
    "558": {
      "batch_size": 202,
      "lambda_value": 0.6258346776881,
      "learning_rate": 0.0071600724112,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "559": {
      "batch_size": 591,
      "lambda_value": 0.6928195943897,
      "learning_rate": 0.0038775370445,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "560": {
      "batch_size": 262,
      "lambda_value": 0.7514538147241,
      "learning_rate": 0.0057105989154,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 348
    },
    "561": {
      "batch_size": 591,
      "lambda_value": 0.4663507906931,
      "learning_rate": 0.0010208140141,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 103
    },
    "562": {
      "batch_size": 459,
      "lambda_value": 0.5065284633963,
      "learning_rate": 0.0001309105975,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 116
    },
    "563": {
      "batch_size": 58,
      "lambda_value": 0.6124199042013,
      "learning_rate": 0.0001332015913,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 405
    },
    "564": {
      "batch_size": 915,
      "lambda_value": 0.2951589262888,
      "learning_rate": 0.0063898385009,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 202
    },
    "565": {
      "batch_size": 382,
      "lambda_value": 0.9559982082686,
      "learning_rate": 0.0116638076106,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 195
    },
    "566": {
      "batch_size": 519,
      "lambda_value": 0.9192806086684,
      "learning_rate": 0.0014492529953,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "567": {
      "batch_size": 213,
      "lambda_value": 0.3077314564176,
      "learning_rate": 0.00026303672,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 458
    },
    "568": {
      "batch_size": 49,
      "lambda_value": 0.0198185276211,
      "learning_rate": 0.0098074043409,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 101
    },
    "569": {
      "batch_size": 64,
      "lambda_value": 0.7273220355144,
      "learning_rate": 0.0076542300478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 73
    },
    "570": {
      "batch_size": 317,
      "lambda_value": 0.0713910004827,
      "learning_rate": 0.0349222638618,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "571": {
      "batch_size": 53,
      "lambda_value": 0.1067038176195,
      "learning_rate": 0.0111918408176,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 138
    },
    "572": {
      "batch_size": 882,
      "lambda_value": 0.3966846670944,
      "learning_rate": 0.0455676229708,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 75
    },
    "573": {
      "batch_size": 38,
      "lambda_value": 0.93987003705,
      "learning_rate": 0.0136903551507,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "574": {
      "batch_size": 291,
      "lambda_value": 0.1364949636771,
      "learning_rate": 0.0407867870963,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "575": {
      "batch_size": 366,
      "lambda_value": 0.9050934851493,
      "learning_rate": 0.0520880493928,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 206
    },
    "576": {
      "batch_size": 122,
      "lambda_value": 0.8252295483668,
      "learning_rate": 0.066100331554,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 122
    },
    "577": {
      "batch_size": 602,
      "lambda_value": 0.2976810297754,
      "learning_rate": 0.0759563643287,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "578": {
      "batch_size": 285,
      "lambda_value": 0.1394542476688,
      "learning_rate": 0.071252528928,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 834
    },
    "579": {
      "batch_size": 57,
      "lambda_value": 0.9340619361723,
      "learning_rate": 0.0010335548559,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 67
    },
    "580": {
      "batch_size": 663,
      "lambda_value": 0.1975412227261,
      "learning_rate": 0.0005495859735,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "581": {
      "batch_size": 786,
      "lambda_value": 0.9722149595521,
      "learning_rate": 0.0336075344769,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "582": {
      "batch_size": 892,
      "lambda_value": 0.7512961906375,
      "learning_rate": 0.0005511465198,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 320
    },
    "583": {
      "batch_size": 111,
      "lambda_value": 0.1835129686986,
      "learning_rate": 0.0393040798424,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 535
    },
    "584": {
      "batch_size": 73,
      "lambda_value": 0.1766041807861,
      "learning_rate": 0.0010935442683,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 377
    },
    "585": {
      "batch_size": 557,
      "lambda_value": 0.1012348045489,
      "learning_rate": 0.000402564444,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 137
    },
    "586": {
      "batch_size": 290,
      "lambda_value": 0.7480890180051,
      "learning_rate": 0.0183968736202,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 218
    },
    "587": {
      "batch_size": 185,
      "lambda_value": 0.4622883416581,
      "learning_rate": 0.0026867043175,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 375
    },
    "588": {
      "batch_size": 240,
      "lambda_value": 0.729133400265,
      "learning_rate": 0.0685480668032,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 428
    },
    "589": {
      "batch_size": 753,
      "lambda_value": 0.9675732057788,
      "learning_rate": 0.0001863465964,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 77
    },
    "590": {
      "batch_size": 460,
      "lambda_value": 0.2519924860831,
      "learning_rate": 0.0143034363919,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 105
    },
    "591": {
      "batch_size": 49,
      "lambda_value": 0.2972077500713,
      "learning_rate": 0.0241679865324,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 70
    },
    "592": {
      "batch_size": 58,
      "lambda_value": 0.6542186168601,
      "learning_rate": 0.008503359008,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 963
    },
    "593": {
      "batch_size": 639,
      "lambda_value": 0.4243411681477,
      "learning_rate": 0.000652620617,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 204
    },
    "594": {
      "batch_size": 845,
      "lambda_value": 0.7129552076351,
      "learning_rate": 0.0331152353859,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 212
    },
    "595": {
      "batch_size": 104,
      "lambda_value": 0.9541903980346,
      "learning_rate": 0.0515505592913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 520
    },
    "596": {
      "batch_size": 740,
      "lambda_value": 0.0836379112516,
      "learning_rate": 0.0019468886144,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 126
    },
    "597": {
      "batch_size": 647,
      "lambda_value": 0.320124945835,
      "learning_rate": 0.0092679210172,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 384
    },
    "598": {
      "batch_size": 266,
      "lambda_value": 0.8650823766705,
      "learning_rate": 0.0059221015506,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 735
    },
    "599": {
      "batch_size": 855,
      "lambda_value": 0.8509205817819,
      "learning_rate": 0.0007910970692,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "600": {
      "batch_size": 68,
      "lambda_value": 0.1895907174494,
      "learning_rate": 0.0049274789056,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 464
    },
    "601": {
      "batch_size": 276,
      "lambda_value": 0.5824603455951,
      "learning_rate": 0.0301048087959,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 142
    },
    "602": {
      "batch_size": 59,
      "lambda_value": 0.3450738954337,
      "learning_rate": 0.0007146675871,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 168
    },
    "603": {
      "batch_size": 542,
      "lambda_value": 0.472775527792,
      "learning_rate": 0.0019627530561,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 434
    },
    "604": {
      "batch_size": 369,
      "lambda_value": 0.3454924582211,
      "learning_rate": 0.0035454173984,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 108
    },
    "605": {
      "batch_size": 72,
      "lambda_value": 0.4800990502176,
      "learning_rate": 0.000203321345,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "606": {
      "batch_size": 335,
      "lambda_value": 0.1959318472423,
      "learning_rate": 0.0001565276098,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 345
    },
    "607": {
      "batch_size": 356,
      "lambda_value": 0.3030382732656,
      "learning_rate": 0.0096189942399,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "608": {
      "batch_size": 540,
      "lambda_value": 0.7654646982086,
      "learning_rate": 0.0011513696149,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 112
    },
    "609": {
      "batch_size": 247,
      "lambda_value": 0.972883763497,
      "learning_rate": 0.0069015643178,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 182
    },
    "610": {
      "batch_size": 179,
      "lambda_value": 0.0985055459863,
      "learning_rate": 0.000530470953,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 560
    },
    "611": {
      "batch_size": 701,
      "lambda_value": 0.130938355233,
      "learning_rate": 0.0047236813508,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "612": {
      "batch_size": 54,
      "lambda_value": 0.4522632190449,
      "learning_rate": 0.0062971673124,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 222
    },
    "613": {
      "batch_size": 174,
      "lambda_value": 0.1696888094239,
      "learning_rate": 0.0418778065088,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 623
    },
    "614": {
      "batch_size": 42,
      "lambda_value": 0.0347211695278,
      "learning_rate": 0.0006941260505,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 237
    },
    "615": {
      "batch_size": 730,
      "lambda_value": 0.9770952291832,
      "learning_rate": 0.0001315068271,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "616": {
      "batch_size": 612,
      "lambda_value": 0.4680569656988,
      "learning_rate": 0.0517909049795,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 193
    },
    "617": {
      "batch_size": 196,
      "lambda_value": 0.0797450362584,
      "learning_rate": 0.0018094742292,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 500
    },
    "618": {
      "batch_size": 78,
      "lambda_value": 0.2724218602519,
      "learning_rate": 0.0478137783426,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 137
    },
    "619": {
      "batch_size": 756,
      "lambda_value": 0.9420858840928,
      "learning_rate": 0.0006023331186,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 402
    },
    "620": {
      "batch_size": 88,
      "lambda_value": 0.937643472628,
      "learning_rate": 0.0612301491406,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 215
    },
    "621": {
      "batch_size": 51,
      "lambda_value": 0.4706311807226,
      "learning_rate": 0.0007184177837,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 87
    },
    "622": {
      "batch_size": 74,
      "lambda_value": 0.7113663845488,
      "learning_rate": 0.0120857975585,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 550
    },
    "623": {
      "batch_size": 277,
      "lambda_value": 0.838696582428,
      "learning_rate": 0.058607253832,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 203
    },
    "624": {
      "batch_size": 413,
      "lambda_value": 0.4774159874337,
      "learning_rate": 0.0004966853478,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 301
    },
    "625": {
      "batch_size": 248,
      "lambda_value": 0.2051367903944,
      "learning_rate": 0.008597137403,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 157
    },
    "626": {
      "batch_size": 959,
      "lambda_value": 0.6755743933782,
      "learning_rate": 0.0024711589148,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 445
    },
    "627": {
      "batch_size": 275,
      "lambda_value": 0.2869652838949,
      "learning_rate": 0.0053744653207,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "628": {
      "batch_size": 419,
      "lambda_value": 0.468935895119,
      "learning_rate": 0.000535917298,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 174
    },
    "629": {
      "batch_size": 276,
      "lambda_value": 0.787561736109,
      "learning_rate": 0.009868449491,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "630": {
      "batch_size": 747,
      "lambda_value": 0.1128036239417,
      "learning_rate": 0.0707874243596,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 156
    },
    "631": {
      "batch_size": 722,
      "lambda_value": 0.6381573184394,
      "learning_rate": 0.0003578055478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 117
    },
    "632": {
      "batch_size": 552,
      "lambda_value": 0.7576951377322,
      "learning_rate": 0.0975940182231,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 553
    },
    "633": {
      "batch_size": 143,
      "lambda_value": 0.3252262614562,
      "learning_rate": 0.0002601871373,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 81
    },
    "634": {
      "batch_size": 55,
      "lambda_value": 0.0979980576943,
      "learning_rate": 0.0002676983581,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 196
    },
    "635": {
      "batch_size": 799,
      "lambda_value": 0.0914512617954,
      "learning_rate": 0.0067604574612,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 869
    },
    "636": {
      "batch_size": 110,
      "lambda_value": 0.9494296894906,
      "learning_rate": 0.0933788153474,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 342
    },
    "637": {
      "batch_size": 242,
      "lambda_value": 0.1645240374282,
      "learning_rate": 0.0001743494646,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 183
    },
    "638": {
      "batch_size": 135,
      "lambda_value": 0.7785097535491,
      "learning_rate": 0.0015335239742,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 203
    },
    "639": {
      "batch_size": 581,
      "lambda_value": 0.3424489730732,
      "learning_rate": 0.0628392937014,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 591
    },
    "640": {
      "batch_size": 450,
      "lambda_value": 0.8686301968519,
      "learning_rate": 0.0002490210408,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 165
    },
    "641": {
      "batch_size": 480,
      "lambda_value": 0.0249229856679,
      "learning_rate": 0.0080150139811,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 832
    },
    "642": {
      "batch_size": 418,
      "lambda_value": 0.7096578575302,
      "learning_rate": 0.0118689383411,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "643": {
      "batch_size": 603,
      "lambda_value": 0.3848042200289,
      "learning_rate": 0.0119798941429,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 118
    },
    "644": {
      "batch_size": 499,
      "lambda_value": 0.1558490208903,
      "learning_rate": 0.0005926823678,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "645": {
      "batch_size": 995,
      "lambda_value": 0.256703725783,
      "learning_rate": 0.0023740627403,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 625
    },
    "646": {
      "batch_size": 246,
      "lambda_value": 0.8576480829962,
      "learning_rate": 0.0002610219568,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 270
    },
    "647": {
      "batch_size": 331,
      "lambda_value": 0.2529248176737,
      "learning_rate": 0.0046653863913,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "648": {
      "batch_size": 598,
      "lambda_value": 0.6090657845907,
      "learning_rate": 0.0010543409122,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "649": {
      "batch_size": 862,
      "lambda_value": 0.0380175296012,
      "learning_rate": 0.041557335749,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 313
    },
    "650": {
      "batch_size": 172,
      "lambda_value": 0.2461939552216,
      "learning_rate": 0.052017125424,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 302
    },
    "651": {
      "batch_size": 73,
      "lambda_value": 0.7470946574587,
      "learning_rate": 0.0002429181124,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 621
    },
    "652": {
      "batch_size": 530,
      "lambda_value": 0.4818459073778,
      "learning_rate": 0.0061287523169,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 118
    },
    "653": {
      "batch_size": 761,
      "lambda_value": 0.5714394919992,
      "learning_rate": 0.0111656909616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 306
    },
    "654": {
      "batch_size": 379,
      "lambda_value": 0.675283456528,
      "learning_rate": 0.0010197010328,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 143
    },
    "655": {
      "batch_size": 920,
      "lambda_value": 0.8798775134851,
      "learning_rate": 0.0079752983744,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 323
    },
    "656": {
      "batch_size": 149,
      "lambda_value": 0.7111103424448,
      "learning_rate": 0.0004604338038,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 180
    },
    "657": {
      "batch_size": 266,
      "lambda_value": 0.2021631301137,
      "learning_rate": 0.049459953253,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 138
    },
    "658": {
      "batch_size": 491,
      "lambda_value": 0.0178358357788,
      "learning_rate": 0.000688299046,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "659": {
      "batch_size": 849,
      "lambda_value": 0.9333043667865,
      "learning_rate": 0.004602992178,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 673
    },
    "660": {
      "batch_size": 824,
      "lambda_value": 0.1426025314378,
      "learning_rate": 0.0024798644553,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 448
    },
    "661": {
      "batch_size": 51,
      "lambda_value": 0.2853731288485,
      "learning_rate": 0.0150933643819,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 302
    },
    "662": {
      "batch_size": 36,
      "lambda_value": 0.7186132579807,
      "learning_rate": 0.0149887638244,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "663": {
      "batch_size": 471,
      "lambda_value": 0.0434289189987,
      "learning_rate": 0.0220228045306,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 210
    },
    "664": {
      "batch_size": 231,
      "lambda_value": 0.1333294873512,
      "learning_rate": 0.0003116520664,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 105
    },
    "665": {
      "batch_size": 885,
      "lambda_value": 0.0287526203974,
      "learning_rate": 0.000646149194,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 311
    },
    "666": {
      "batch_size": 289,
      "lambda_value": 0.5098365217722,
      "learning_rate": 0.0173959693985,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 161
    },
    "667": {
      "batch_size": 545,
      "lambda_value": 0.1790465673948,
      "learning_rate": 0.01152356152,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 348
    },
    "668": {
      "batch_size": 598,
      "lambda_value": 0.5962372605178,
      "learning_rate": 0.0003361725475,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 611
    },
    "669": {
      "batch_size": 359,
      "lambda_value": 0.2597217108998,
      "learning_rate": 0.0003133878261,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 158
    },
    "670": {
      "batch_size": 78,
      "lambda_value": 0.1933304620614,
      "learning_rate": 0.0016145014932,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 239
    },
    "671": {
      "batch_size": 680,
      "lambda_value": 0.5393072453416,
      "learning_rate": 0.0582498957569,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 99
    },
    "672": {
      "batch_size": 843,
      "lambda_value": 0.1865370858349,
      "learning_rate": 0.0018258624516,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 135
    },
    "673": {
      "batch_size": 643,
      "lambda_value": 0.5315968413064,
      "learning_rate": 0.0037188641341,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 83
    },
    "674": {
      "batch_size": 40,
      "lambda_value": 0.5632911300415,
      "learning_rate": 0.0015122606034,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 570
    },
    "675": {
      "batch_size": 60,
      "lambda_value": 0.5251155220329,
      "learning_rate": 0.000688562193,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 83
    },
    "676": {
      "batch_size": 432,
      "lambda_value": 0.5335032753074,
      "learning_rate": 0.0002187393567,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "677": {
      "batch_size": 33,
      "lambda_value": 0.8969473837759,
      "learning_rate": 0.0002270540924,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 289
    },
    "678": {
      "batch_size": 55,
      "lambda_value": 0.4712334805465,
      "learning_rate": 0.0028116145161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 217
    },
    "679": {
      "batch_size": 290,
      "lambda_value": 0.7578449357539,
      "learning_rate": 0.001747683087,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 625
    },
    "680": {
      "batch_size": 277,
      "lambda_value": 0.8341862704396,
      "learning_rate": 0.0044854410519,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 665
    },
    "681": {
      "batch_size": 383,
      "lambda_value": 0.2795991865869,
      "learning_rate": 0.0003051949076,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 302
    },
    "682": {
      "batch_size": 700,
      "lambda_value": 0.4458432171074,
      "learning_rate": 0.0475875046668,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 620
    },
    "683": {
      "batch_size": 57,
      "lambda_value": 0.9923115725844,
      "learning_rate": 0.0412396742542,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 319
    },
    "684": {
      "batch_size": 582,
      "lambda_value": 0.0882312426492,
      "learning_rate": 0.0006257629424,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 91
    },
    "685": {
      "batch_size": 482,
      "lambda_value": 0.3738430101925,
      "learning_rate": 0.0097649928648,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 530
    },
    "686": {
      "batch_size": 386,
      "lambda_value": 0.9370814240227,
      "learning_rate": 0.0721080020906,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 256
    },
    "687": {
      "batch_size": 504,
      "lambda_value": 0.8642676295756,
      "learning_rate": 0.0004480591119,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 123
    },
    "688": {
      "batch_size": 971,
      "lambda_value": 0.053336558594,
      "learning_rate": 0.0146424832105,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "689": {
      "batch_size": 353,
      "lambda_value": 0.4713850033628,
      "learning_rate": 0.0103566918153,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "690": {
      "batch_size": 647,
      "lambda_value": 0.1353366297365,
      "learning_rate": 0.0632788950233,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 138
    },
    "691": {
      "batch_size": 96,
      "lambda_value": 0.3646827688118,
      "learning_rate": 0.014687132835,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "692": {
      "batch_size": 940,
      "lambda_value": 0.3854924768875,
      "learning_rate": 0.0004367657386,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 257
    },
    "693": {
      "batch_size": 133,
      "lambda_value": 0.0899519065497,
      "learning_rate": 0.0021051415194,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 182
    },
    "694": {
      "batch_size": 346,
      "lambda_value": 0.6981127794005,
      "learning_rate": 0.0011047440656,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "695": {
      "batch_size": 703,
      "lambda_value": 0.554813140065,
      "learning_rate": 0.0001226958649,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 549
    },
    "696": {
      "batch_size": 113,
      "lambda_value": 0.739237688008,
      "learning_rate": 0.0041487062879,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 726
    },
    "697": {
      "batch_size": 599,
      "lambda_value": 0.5191855109882,
      "learning_rate": 0.0001499445936,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 147
    },
    "698": {
      "batch_size": 338,
      "lambda_value": 0.4438493610531,
      "learning_rate": 0.0027872253733,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 177
    },
    "699": {
      "batch_size": 68,
      "lambda_value": 0.1473946081284,
      "learning_rate": 0.0006243714092,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 375
    },
    "700": {
      "batch_size": 204,
      "lambda_value": 0.2078968143643,
      "learning_rate": 0.0081190583679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 146
    },
    "701": {
      "batch_size": 77,
      "lambda_value": 0.2456245736743,
      "learning_rate": 0.0028369801276,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 890
    },
    "702": {
      "batch_size": 750,
      "lambda_value": 0.662500151442,
      "learning_rate": 0.0052131932898,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 466
    },
    "703": {
      "batch_size": 227,
      "lambda_value": 0.6147778112373,
      "learning_rate": 0.0005688211075,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 506
    },
    "704": {
      "batch_size": 189,
      "lambda_value": 0.404846374353,
      "learning_rate": 0.044302151,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 505
    },
    "705": {
      "batch_size": 86,
      "lambda_value": 0.8077667139698,
      "learning_rate": 0.058607253832,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 106
    },
    "706": {
      "batch_size": 541,
      "lambda_value": 0.1192207997063,
      "learning_rate": 0.000266174872,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 186
    },
    "707": {
      "batch_size": 97,
      "lambda_value": 0.043774452953,
      "learning_rate": 0.0329189063269,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 91
    },
    "708": {
      "batch_size": 69,
      "lambda_value": 0.5912669832802,
      "learning_rate": 0.0760680116102,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 308
    },
    "709": {
      "batch_size": 250,
      "lambda_value": 0.9992595000691,
      "learning_rate": 0.0039991080728,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 89
    },
    "710": {
      "batch_size": 54,
      "lambda_value": 0.0574950683369,
      "learning_rate": 0.0123747046447,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 225
    },
    "711": {
      "batch_size": 45,
      "lambda_value": 0.5335333365546,
      "learning_rate": 0.0001175388961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 929
    },
    "712": {
      "batch_size": 291,
      "lambda_value": 0.0432434563493,
      "learning_rate": 0.0001198982341,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 309
    },
    "713": {
      "batch_size": 416,
      "lambda_value": 0.2927437762592,
      "learning_rate": 0.0004165106581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 864
    },
    "714": {
      "batch_size": 171,
      "lambda_value": 0.7017369627446,
      "learning_rate": 0.0262479399797,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 735
    },
    "715": {
      "batch_size": 327,
      "lambda_value": 0.773639327066,
      "learning_rate": 0.0486446136112,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 137
    },
    "716": {
      "batch_size": 32,
      "lambda_value": 0.519490717935,
      "learning_rate": 0.0664075672294,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 152
    },
    "717": {
      "batch_size": 594,
      "lambda_value": 0.7676942789801,
      "learning_rate": 0.0002070408086,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 749
    },
    "718": {
      "batch_size": 501,
      "lambda_value": 0.7124630665623,
      "learning_rate": 0.0001839069405,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 101
    },
    "719": {
      "batch_size": 804,
      "lambda_value": 0.0900642859186,
      "learning_rate": 0.0576220055426,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 624
    },
    "720": {
      "batch_size": 630,
      "lambda_value": 0.0070373936517,
      "learning_rate": 0.0001801942713,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "721": {
      "batch_size": 738,
      "lambda_value": 0.6294477689627,
      "learning_rate": 0.0014144820323,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 66
    },
    "722": {
      "batch_size": 410,
      "lambda_value": 0.9962139099619,
      "learning_rate": 0.0224712593796,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 199
    },
    "723": {
      "batch_size": 61,
      "lambda_value": 0.3259198240339,
      "learning_rate": 0.0005350837422,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 325
    },
    "724": {
      "batch_size": 75,
      "lambda_value": 0.6624668076433,
      "learning_rate": 0.0002205744543,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 281
    },
    "725": {
      "batch_size": 707,
      "lambda_value": 0.7362812362773,
      "learning_rate": 0.0048651223548,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 175
    },
    "726": {
      "batch_size": 45,
      "lambda_value": 0.6401594394208,
      "learning_rate": 0.0397372858533,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 68
    },
    "727": {
      "batch_size": 43,
      "lambda_value": 0.2010235605655,
      "learning_rate": 0.0090989475121,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 257
    },
    "728": {
      "batch_size": 239,
      "lambda_value": 0.0519355181158,
      "learning_rate": 0.0017014566808,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 613
    },
    "729": {
      "batch_size": 657,
      "lambda_value": 0.7903425788755,
      "learning_rate": 0.0168454081159,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 66
    },
    "730": {
      "batch_size": 455,
      "lambda_value": 0.0905484627769,
      "learning_rate": 0.0006288743992,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 67
    },
    "731": {
      "batch_size": 320,
      "lambda_value": 0.4594254672559,
      "learning_rate": 0.0638503575764,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 257
    },
    "732": {
      "batch_size": 81,
      "lambda_value": 0.0075065460018,
      "learning_rate": 0.0007986256546,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 307
    },
    "733": {
      "batch_size": 41,
      "lambda_value": 0.2752216311776,
      "learning_rate": 0.0002412265754,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "734": {
      "batch_size": 533,
      "lambda_value": 0.9766595333667,
      "learning_rate": 0.0024229210966,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "735": {
      "batch_size": 56,
      "lambda_value": 0.3259198240339,
      "learning_rate": 0.0005256218687,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 288
    },
    "736": {
      "batch_size": 307,
      "lambda_value": 0.5420132858805,
      "learning_rate": 0.0030442729783,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 240
    },
    "737": {
      "batch_size": 95,
      "lambda_value": 0.3777812449113,
      "learning_rate": 0.0324606584167,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 225
    },
    "738": {
      "batch_size": 49,
      "lambda_value": 0.238550029918,
      "learning_rate": 0.0001030540462,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 369
    },
    "739": {
      "batch_size": 441,
      "lambda_value": 0.957077534628,
      "learning_rate": 0.0019086022176,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 122
    },
    "740": {
      "batch_size": 511,
      "lambda_value": 0.0134710781272,
      "learning_rate": 0.0002034418803,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "741": {
      "batch_size": 749,
      "lambda_value": 0.9600020506604,
      "learning_rate": 0.0001517254312,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 230
    },
    "742": {
      "batch_size": 866,
      "lambda_value": 0.2660077884752,
      "learning_rate": 0.065288525576,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 73
    },
    "743": {
      "batch_size": 35,
      "lambda_value": 0.5887164604719,
      "learning_rate": 0.0001085075279,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 438
    },
    "744": {
      "batch_size": 1006,
      "lambda_value": 0.6548621749241,
      "learning_rate": 0.0004851750436,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 615
    },
    "745": {
      "batch_size": 478,
      "lambda_value": 0.9359967997182,
      "learning_rate": 0.0797566893098,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 208
    },
    "746": {
      "batch_size": 181,
      "lambda_value": 0.0788884902226,
      "learning_rate": 0.0356093297887,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 244
    },
    "747": {
      "batch_size": 792,
      "lambda_value": 0.0846128278305,
      "learning_rate": 0.0010692560968,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 261
    },
    "748": {
      "batch_size": 182,
      "lambda_value": 0.8387040787334,
      "learning_rate": 0.0237193227301,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 976
    },
    "749": {
      "batch_size": 349,
      "lambda_value": 0.9283152318161,
      "learning_rate": 0.0608974147776,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 156
    },
    "750": {
      "batch_size": 45,
      "lambda_value": 0.0764939439186,
      "learning_rate": 0.0161756051982,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 302
    },
    "751": {
      "batch_size": 61,
      "lambda_value": 0.5064612203765,
      "learning_rate": 0.0025751529376,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 987
    },
    "752": {
      "batch_size": 482,
      "lambda_value": 0.0955146112821,
      "learning_rate": 0.0002725275691,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "753": {
      "batch_size": 592,
      "lambda_value": 0.4036268062948,
      "learning_rate": 0.0992177195258,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 84
    },
    "754": {
      "batch_size": 898,
      "lambda_value": 0.3005544267723,
      "learning_rate": 0.0010809426098,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 187
    },
    "755": {
      "batch_size": 40,
      "lambda_value": 0.731018292064,
      "learning_rate": 0.0069410453299,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "756": {
      "batch_size": 269,
      "lambda_value": 0.1347333366607,
      "learning_rate": 0.0003075024,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "757": {
      "batch_size": 244,
      "lambda_value": 0.4124326809633,
      "learning_rate": 0.0364061830506,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 233
    },
    "758": {
      "batch_size": 45,
      "lambda_value": 0.0614658505319,
      "learning_rate": 0.0007727818206,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 665
    },
    "759": {
      "batch_size": 356,
      "lambda_value": 0.7817121774942,
      "learning_rate": 0.0604511602161,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "760": {
      "batch_size": 434,
      "lambda_value": 0.188771792012,
      "learning_rate": 0.0591237961506,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 93
    },
    "761": {
      "batch_size": 38,
      "lambda_value": 0.6046924405509,
      "learning_rate": 0.0705605284383,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "762": {
      "batch_size": 32,
      "lambda_value": 0.733674657486,
      "learning_rate": 0.0029855210439,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "763": {
      "batch_size": 229,
      "lambda_value": 0.6653808187797,
      "learning_rate": 0.0048386511835,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 116
    },
    "764": {
      "batch_size": 83,
      "lambda_value": 0.6162627556656,
      "learning_rate": 0.0001740183882,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 96
    },
    "765": {
      "batch_size": 243,
      "lambda_value": 0.9238471962863,
      "learning_rate": 0.025566851215,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 136
    },
    "766": {
      "batch_size": 45,
      "lambda_value": 0.0595094713465,
      "learning_rate": 0.0109875328631,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 233
    },
    "767": {
      "batch_size": 114,
      "lambda_value": 0.1580185386064,
      "learning_rate": 0.0028008284542,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 100
    },
    "768": {
      "batch_size": 34,
      "lambda_value": 0.5203870878914,
      "learning_rate": 0.0066722291256,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 149
    },
    "769": {
      "batch_size": 627,
      "lambda_value": 0.9889162365371,
      "learning_rate": 0.0001303634444,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 251
    },
    "770": {
      "batch_size": 758,
      "lambda_value": 0.2717527880428,
      "learning_rate": 0.0171813586196,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "771": {
      "batch_size": 712,
      "lambda_value": 0.7426811270571,
      "learning_rate": 0.002274841247,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "772": {
      "batch_size": 59,
      "lambda_value": 0.6554628939413,
      "learning_rate": 0.0779537018236,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "773": {
      "batch_size": 501,
      "lambda_value": 0.3540897532194,
      "learning_rate": 0.004684812456,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "774": {
      "batch_size": 601,
      "lambda_value": 0.1261139374009,
      "learning_rate": 0.0014821316592,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 78
    },
    "775": {
      "batch_size": 177,
      "lambda_value": 0.2985203369822,
      "learning_rate": 0.0003721692269,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 330
    },
    "776": {
      "batch_size": 39,
      "lambda_value": 0.8193332005299,
      "learning_rate": 0.0002357500492,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 714
    },
    "777": {
      "batch_size": 681,
      "lambda_value": 0.6719515540501,
      "learning_rate": 0.0001891974099,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 576
    },
    "778": {
      "batch_size": 155,
      "lambda_value": 0.8001259345119,
      "learning_rate": 0.0008217272679,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 65
    },
    "779": {
      "batch_size": 909,
      "lambda_value": 0.5942387206669,
      "learning_rate": 0.0093310627964,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 985
    },
    "780": {
      "batch_size": 70,
      "lambda_value": 0.1041490760141,
      "learning_rate": 0.0079847689986,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 116
    },
    "781": {
      "batch_size": 37,
      "lambda_value": 0.5795747237148,
      "learning_rate": 0.034477491717,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "782": {
      "batch_size": 53,
      "lambda_value": 0.6726064023568,
      "learning_rate": 0.0014866940031,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 264
    },
    "783": {
      "batch_size": 622,
      "lambda_value": 0.5580374956601,
      "learning_rate": 0.0183947306774,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 107
    },
    "784": {
      "batch_size": 55,
      "lambda_value": 0.1420907879148,
      "learning_rate": 0.0005023242656,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "785": {
      "batch_size": 66,
      "lambda_value": 0.2353584173771,
      "learning_rate": 0.0001568480226,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 487
    },
    "786": {
      "batch_size": 281,
      "lambda_value": 0.3164310006969,
      "learning_rate": 0.019844871819,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 571
    },
    "787": {
      "batch_size": 48,
      "lambda_value": 0.3304960822444,
      "learning_rate": 0.0146518248161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "788": {
      "batch_size": 773,
      "lambda_value": 0.3708169142748,
      "learning_rate": 0.0001815211482,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "789": {
      "batch_size": 96,
      "lambda_value": 0.7382195902741,
      "learning_rate": 0.0002503660621,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 277
    },
    "790": {
      "batch_size": 452,
      "lambda_value": 0.1775327963751,
      "learning_rate": 0.0005431873665,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 1005
    },
    "791": {
      "batch_size": 594,
      "lambda_value": 0.0464967507918,
      "learning_rate": 0.0010838202755,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 779
    },
    "792": {
      "batch_size": 601,
      "lambda_value": 0.3720022649347,
      "learning_rate": 0.0077029441749,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 76
    },
    "793": {
      "batch_size": 756,
      "lambda_value": 0.9960547775379,
      "learning_rate": 0.0112208775279,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 179
    },
    "794": {
      "batch_size": 303,
      "lambda_value": 0.450982199933,
      "learning_rate": 0.0005012374979,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "795": {
      "batch_size": 953,
      "lambda_value": 0.9645746140483,
      "learning_rate": 0.0147384733544,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 695
    },
    "796": {
      "batch_size": 50,
      "lambda_value": 0.4213986141764,
      "learning_rate": 0.0009397133765,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 503
    },
    "797": {
      "batch_size": 159,
      "lambda_value": 0.3495717980859,
      "learning_rate": 0.0187631887146,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 151
    },
    "798": {
      "batch_size": 47,
      "lambda_value": 0.6692619633472,
      "learning_rate": 0.011170113952,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "799": {
      "batch_size": 283,
      "lambda_value": 0.2121933179459,
      "learning_rate": 0.0311376749648,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 67
    },
    "800": {
      "batch_size": 875,
      "lambda_value": 0.4964053407048,
      "learning_rate": 0.000233893915,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 385
    },
    "801": {
      "batch_size": 66,
      "lambda_value": 0.4747623360116,
      "learning_rate": 0.0367607449195,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 192
    },
    "802": {
      "batch_size": 55,
      "lambda_value": 0.1773838620933,
      "learning_rate": 0.0005247790343,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "803": {
      "batch_size": 694,
      "lambda_value": 0.0024972332736,
      "learning_rate": 0.0124934216342,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 108
    },
    "804": {
      "batch_size": 315,
      "lambda_value": 0.3486223356758,
      "learning_rate": 0.0001046386648,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 129
    },
    "805": {
      "batch_size": 142,
      "lambda_value": 0.3717453140462,
      "learning_rate": 0.0009339912832,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 71
    },
    "806": {
      "batch_size": 747,
      "lambda_value": 0.487908290671,
      "learning_rate": 0.0445635706735,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 144
    },
    "807": {
      "batch_size": 544,
      "lambda_value": 0.1457385575358,
      "learning_rate": 0.0017966323514,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 242
    },
    "808": {
      "batch_size": 711,
      "lambda_value": 0.9394178354264,
      "learning_rate": 0.0009146044621,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 407
    },
    "809": {
      "batch_size": 429,
      "lambda_value": 0.6746885001993,
      "learning_rate": 0.0003434118541,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 440
    },
    "810": {
      "batch_size": 768,
      "lambda_value": 0.4326820145284,
      "learning_rate": 0.001970264983,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 209
    },
    "811": {
      "batch_size": 48,
      "lambda_value": 0.9547300785872,
      "learning_rate": 0.0228904807089,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 97
    },
    "812": {
      "batch_size": 436,
      "lambda_value": 0.372084913002,
      "learning_rate": 0.0014581884067,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 157
    },
    "813": {
      "batch_size": 509,
      "lambda_value": 0.5035036108687,
      "learning_rate": 0.0026943021997,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 218
    },
    "814": {
      "batch_size": 420,
      "lambda_value": 0.5821782460442,
      "learning_rate": 0.0001455596377,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 417
    },
    "815": {
      "batch_size": 317,
      "lambda_value": 0.5474633844823,
      "learning_rate": 0.0015534194913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 197
    },
    "816": {
      "batch_size": 673,
      "lambda_value": 0.1066059282631,
      "learning_rate": 0.0008710879723,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "817": {
      "batch_size": 63,
      "lambda_value": 0.7368898787714,
      "learning_rate": 0.0001287558542,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 243
    },
    "818": {
      "batch_size": 217,
      "lambda_value": 0.4318198835859,
      "learning_rate": 0.0268565507901,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 129
    },
    "819": {
      "batch_size": 446,
      "lambda_value": 0.5487591412663,
      "learning_rate": 0.0155537296446,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "820": {
      "batch_size": 35,
      "lambda_value": 0.1272232163978,
      "learning_rate": 0.000798174472,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 708
    },
    "821": {
      "batch_size": 42,
      "lambda_value": 0.7692129676901,
      "learning_rate": 0.000294008565,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 193
    },
    "822": {
      "batch_size": 401,
      "lambda_value": 0.3408468811228,
      "learning_rate": 0.0471076860744,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 400
    },
    "823": {
      "batch_size": 67,
      "lambda_value": 0.2984404563597,
      "learning_rate": 0.0298996049283,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 81
    },
    "824": {
      "batch_size": 580,
      "lambda_value": 0.8985707855197,
      "learning_rate": 0.007097376244,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 162
    },
    "825": {
      "batch_size": 34,
      "lambda_value": 0.6245113502644,
      "learning_rate": 0.0006479136368,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 131
    },
    "826": {
      "batch_size": 649,
      "lambda_value": 0.876056080956,
      "learning_rate": 0.0247423131016,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 391
    },
    "827": {
      "batch_size": 328,
      "lambda_value": 0.4422225387084,
      "learning_rate": 0.0005342471317,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 252
    },
    "828": {
      "batch_size": 286,
      "lambda_value": 0.5972663859522,
      "learning_rate": 0.0950770439815,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "829": {
      "batch_size": 568,
      "lambda_value": 0.06984546795,
      "learning_rate": 0.0064326042354,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 757
    },
    "830": {
      "batch_size": 181,
      "lambda_value": 0.8546996861515,
      "learning_rate": 0.003884414875,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 196
    },
    "831": {
      "batch_size": 46,
      "lambda_value": 0.7147531891872,
      "learning_rate": 0.0101916980141,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 158
    },
    "832": {
      "batch_size": 86,
      "lambda_value": 0.4670596381143,
      "learning_rate": 0.0145022867515,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 92
    },
    "833": {
      "batch_size": 553,
      "lambda_value": 0.0760059398096,
      "learning_rate": 0.0019040246749,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 154
    },
    "834": {
      "batch_size": 365,
      "lambda_value": 0.45893177935,
      "learning_rate": 0.0934713079823,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 222
    },
    "835": {
      "batch_size": 924,
      "lambda_value": 0.7206978230855,
      "learning_rate": 0.0012373734352,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 841
    },
    "836": {
      "batch_size": 969,
      "lambda_value": 0.428401135847,
      "learning_rate": 0.0008334194262,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 418
    },
    "837": {
      "batch_size": 750,
      "lambda_value": 0.3219208286941,
      "learning_rate": 0.0030707951835,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 231
    },
    "838": {
      "batch_size": 840,
      "lambda_value": 0.5543002829439,
      "learning_rate": 0.0063954933819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 199
    },
    "839": {
      "batch_size": 69,
      "lambda_value": 0.3268557069186,
      "learning_rate": 0.000518426571,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 181
    },
    "840": {
      "batch_size": 307,
      "lambda_value": 0.1147156522977,
      "learning_rate": 0.0376238583264,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 254
    },
    "841": {
      "batch_size": 39,
      "lambda_value": 0.9315939665366,
      "learning_rate": 0.0720331565773,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 76
    },
    "842": {
      "batch_size": 144,
      "lambda_value": 0.4964140385327,
      "learning_rate": 0.000504632314,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 331
    },
    "843": {
      "batch_size": 238,
      "lambda_value": 0.7916083975465,
      "learning_rate": 0.0431968495609,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 741
    },
    "844": {
      "batch_size": 36,
      "lambda_value": 0.0922755146442,
      "learning_rate": 0.015488858488,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 333
    },
    "845": {
      "batch_size": 62,
      "lambda_value": 0.1235767932958,
      "learning_rate": 0.0573474607136,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 221
    },
    "846": {
      "batch_size": 115,
      "lambda_value": 0.1048307134026,
      "learning_rate": 0.086845268262,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 379
    },
    "847": {
      "batch_size": 918,
      "lambda_value": 0.7753920649686,
      "learning_rate": 0.0033415948456,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 915
    },
    "848": {
      "batch_size": 394,
      "lambda_value": 0.4114805869974,
      "learning_rate": 0.0246606083822,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "849": {
      "batch_size": 480,
      "lambda_value": 0.2527823091835,
      "learning_rate": 0.0023290548355,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 121
    },
    "850": {
      "batch_size": 813,
      "lambda_value": 0.2375395052378,
      "learning_rate": 0.000200496163,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 373
    },
    "851": {
      "batch_size": 565,
      "lambda_value": 0.3125792668112,
      "learning_rate": 0.0428114646491,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "852": {
      "batch_size": 65,
      "lambda_value": 0.2253981348432,
      "learning_rate": 0.0224414413065,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 139
    },
    "853": {
      "batch_size": 546,
      "lambda_value": 0.0519471402765,
      "learning_rate": 0.0004601751306,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 166
    },
    "854": {
      "batch_size": 394,
      "lambda_value": 0.0653187882234,
      "learning_rate": 0.0088925801928,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 121
    },
    "855": {
      "batch_size": 828,
      "lambda_value": 0.1142106433492,
      "learning_rate": 0.0051761028604,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 348
    },
    "856": {
      "batch_size": 220,
      "lambda_value": 0.2667676704071,
      "learning_rate": 0.0001384460995,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 80
    },
    "857": {
      "batch_size": 884,
      "lambda_value": 0.256703725783,
      "learning_rate": 0.002675383363,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 178
    },
    "858": {
      "batch_size": 620,
      "lambda_value": 0.1843408613267,
      "learning_rate": 0.0189808718634,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 159
    },
    "859": {
      "batch_size": 66,
      "lambda_value": 0.3746932698949,
      "learning_rate": 0.0009397133765,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 324
    },
    "860": {
      "batch_size": 347,
      "lambda_value": 0.0062841385275,
      "learning_rate": 0.0592202254669,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 724
    },
    "861": {
      "batch_size": 32,
      "lambda_value": 0.843904063371,
      "learning_rate": 0.0145471628832,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "862": {
      "batch_size": 512,
      "lambda_value": 0.6864116127537,
      "learning_rate": 0.03634404751,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "863": {
      "batch_size": 558,
      "lambda_value": 0.547816731618,
      "learning_rate": 0.0425180720701,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "864": {
      "batch_size": 415,
      "lambda_value": 0.4133175941219,
      "learning_rate": 0.000380172427,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 352
    },
    "865": {
      "batch_size": 600,
      "lambda_value": 0.5754413284617,
      "learning_rate": 0.0002539380586,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 185
    },
    "866": {
      "batch_size": 226,
      "lambda_value": 0.071662405483,
      "learning_rate": 0.0029603751373,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 304
    },
    "867": {
      "batch_size": 167,
      "lambda_value": 0.552823694988,
      "learning_rate": 0.0186863950035,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 154
    },
    "868": {
      "batch_size": 697,
      "lambda_value": 0.1316787393133,
      "learning_rate": 0.0749527971149,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 163
    },
    "869": {
      "batch_size": 693,
      "lambda_value": 0.4419936560983,
      "learning_rate": 0.0069141362097,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "870": {
      "batch_size": 49,
      "lambda_value": 0.4221123655622,
      "learning_rate": 0.0138787719249,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "871": {
      "batch_size": 412,
      "lambda_value": 0.6898265122125,
      "learning_rate": 0.001804720202,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 91
    },
    "872": {
      "batch_size": 101,
      "lambda_value": 0.0446215165864,
      "learning_rate": 0.0028881260475,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 146
    },
    "873": {
      "batch_size": 302,
      "lambda_value": 0.0634242276013,
      "learning_rate": 0.0001928920376,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 316
    },
    "874": {
      "batch_size": 761,
      "lambda_value": 0.4440764459472,
      "learning_rate": 0.0794097816022,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "875": {
      "batch_size": 933,
      "lambda_value": 0.5999377421281,
      "learning_rate": 0.0006445146717,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 144
    },
    "876": {
      "batch_size": 55,
      "lambda_value": 0.238550029918,
      "learning_rate": 0.0001049481509,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 291
    },
    "877": {
      "batch_size": 577,
      "lambda_value": 0.2056557390908,
      "learning_rate": 0.0003915268753,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 945
    },
    "878": {
      "batch_size": 163,
      "lambda_value": 0.167239280953,
      "learning_rate": 0.0004681909946,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "879": {
      "batch_size": 53,
      "lambda_value": 0.6387826393548,
      "learning_rate": 0.0243304353679,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 456
    },
    "880": {
      "batch_size": 650,
      "lambda_value": 0.1614852659784,
      "learning_rate": 0.0075796500753,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 70
    },
    "881": {
      "batch_size": 506,
      "lambda_value": 0.3753041698627,
      "learning_rate": 0.0163865784673,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "882": {
      "batch_size": 340,
      "lambda_value": 0.3643883697683,
      "learning_rate": 0.0006740568048,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 256
    },
    "883": {
      "batch_size": 33,
      "lambda_value": 0.1875184980927,
      "learning_rate": 0.0843460243282,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 749
    },
    "884": {
      "batch_size": 389,
      "lambda_value": 0.9219372234064,
      "learning_rate": 0.0008238993902,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 238
    },
    "885": {
      "batch_size": 58,
      "lambda_value": 0.7390799893981,
      "learning_rate": 0.0886799955763,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 94
    },
    "886": {
      "batch_size": 230,
      "lambda_value": 0.8290386601668,
      "learning_rate": 0.0082958882239,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 97
    },
    "887": {
      "batch_size": 729,
      "lambda_value": 0.6561598698686,
      "learning_rate": 0.0200242469415,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 83
    },
    "888": {
      "batch_size": 365,
      "lambda_value": 0.3361992196662,
      "learning_rate": 0.079998799585,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 200
    },
    "889": {
      "batch_size": 57,
      "lambda_value": 0.6844051624874,
      "learning_rate": 0.0354968826355,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 534
    },
    "890": {
      "batch_size": 49,
      "lambda_value": 0.3507544796617,
      "learning_rate": 0.0003035474614,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 316
    },
    "891": {
      "batch_size": 832,
      "lambda_value": 0.1559151475291,
      "learning_rate": 0.0588613075688,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 150
    },
    "892": {
      "batch_size": 104,
      "lambda_value": 0.4259903925482,
      "learning_rate": 0.024197175793,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "893": {
      "batch_size": 609,
      "lambda_value": 0.7921589658006,
      "learning_rate": 0.0078022777825,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "894": {
      "batch_size": 432,
      "lambda_value": 0.342530200838,
      "learning_rate": 0.0023157640153,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "895": {
      "batch_size": 307,
      "lambda_value": 0.7255893135138,
      "learning_rate": 0.0022899433426,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 188
    },
    "896": {
      "batch_size": 429,
      "lambda_value": 0.6857681112319,
      "learning_rate": 0.0011833277287,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 449
    },
    "897": {
      "batch_size": 740,
      "lambda_value": 0.6150053751439,
      "learning_rate": 0.0211502006423,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 73
    },
    "898": {
      "batch_size": 251,
      "lambda_value": 0.0015968440481,
      "learning_rate": 0.0014089945053,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 274
    },
    "899": {
      "batch_size": 41,
      "lambda_value": 0.3588119411049,
      "learning_rate": 0.0194142362086,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 177
    },
    "900": {
      "batch_size": 254,
      "lambda_value": 0.8726615114865,
      "learning_rate": 0.0001722746333,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 431
    },
    "901": {
      "batch_size": 303,
      "lambda_value": 0.1381935470232,
      "learning_rate": 0.0028801068378,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 123
    },
    "902": {
      "batch_size": 111,
      "lambda_value": 0.4482297010366,
      "learning_rate": 0.001419663145,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 348
    },
    "903": {
      "batch_size": 298,
      "lambda_value": 0.3390676674274,
      "learning_rate": 0.0227587978931,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "904": {
      "batch_size": 489,
      "lambda_value": 0.6410773181511,
      "learning_rate": 0.0006330867153,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "905": {
      "batch_size": 962,
      "lambda_value": 0.1272255343596,
      "learning_rate": 0.0010648882536,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 252
    },
    "906": {
      "batch_size": 525,
      "lambda_value": 0.5683327918539,
      "learning_rate": 0.0005445030847,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 162
    },
    "907": {
      "batch_size": 537,
      "lambda_value": 0.0709703179888,
      "learning_rate": 0.0004329924399,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 80
    },
    "908": {
      "batch_size": 859,
      "lambda_value": 0.6599022226383,
      "learning_rate": 0.0006294564585,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 612
    },
    "909": {
      "batch_size": 265,
      "lambda_value": 0.5160569609208,
      "learning_rate": 0.0865148615222,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 122
    },
    "910": {
      "batch_size": 535,
      "lambda_value": 0.2128071671198,
      "learning_rate": 0.0008886182822,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 121
    },
    "911": {
      "batch_size": 32,
      "lambda_value": 0.8939450080598,
      "learning_rate": 0.0003050846447,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 179
    },
    "912": {
      "batch_size": 755,
      "lambda_value": 0.2983177699812,
      "learning_rate": 0.0043300321463,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 82
    },
    "913": {
      "batch_size": 400,
      "lambda_value": 0.5797136972999,
      "learning_rate": 0.0001601439692,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 67
    },
    "914": {
      "batch_size": 479,
      "lambda_value": 0.4177813572394,
      "learning_rate": 0.0002541297708,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 363
    },
    "915": {
      "batch_size": 475,
      "lambda_value": 0.3614739032996,
      "learning_rate": 0.0040927356236,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 184
    },
    "916": {
      "batch_size": 676,
      "lambda_value": 0.8729600212192,
      "learning_rate": 0.00109263889,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 349
    },
    "917": {
      "batch_size": 316,
      "lambda_value": 0.5530103694374,
      "learning_rate": 0.0310886080457,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "918": {
      "batch_size": 447,
      "lambda_value": 0.2394974448085,
      "learning_rate": 0.0006860336662,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 458
    },
    "919": {
      "batch_size": 527,
      "lambda_value": 0.3395665856392,
      "learning_rate": 0.0021441267137,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 159
    },
    "920": {
      "batch_size": 636,
      "lambda_value": 0.0708632872733,
      "learning_rate": 0.0015902159765,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 473
    },
    "921": {
      "batch_size": 527,
      "lambda_value": 0.5526716720699,
      "learning_rate": 0.0162072859801,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "922": {
      "batch_size": 185,
      "lambda_value": 0.1435148227746,
      "learning_rate": 0.032766704256,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 301
    },
    "923": {
      "batch_size": 39,
      "lambda_value": 0.7900567988827,
      "learning_rate": 0.0030425418623,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 452
    },
    "924": {
      "batch_size": 57,
      "lambda_value": 0.7046766642737,
      "learning_rate": 0.0770940554474,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 194
    },
    "925": {
      "batch_size": 302,
      "lambda_value": 0.098569993888,
      "learning_rate": 0.0001579182877,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 196
    },
    "926": {
      "batch_size": 298,
      "lambda_value": 0.1200700726986,
      "learning_rate": 0.0121857707176,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 143
    },
    "927": {
      "batch_size": 452,
      "lambda_value": 0.5171197540921,
      "learning_rate": 0.0013004477143,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 140
    },
    "928": {
      "batch_size": 41,
      "lambda_value": 0.6296356425263,
      "learning_rate": 0.0123222581549,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "929": {
      "batch_size": 40,
      "lambda_value": 0.7180535500534,
      "learning_rate": 0.0020317120707,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 177
    },
    "930": {
      "batch_size": 283,
      "lambda_value": 0.5487591412663,
      "learning_rate": 0.0149266082593,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "931": {
      "batch_size": 358,
      "lambda_value": 0.4266985305875,
      "learning_rate": 0.0001806237603,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 128
    },
    "932": {
      "batch_size": 479,
      "lambda_value": 0.4802245090807,
      "learning_rate": 0.0047919706819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "933": {
      "batch_size": 825,
      "lambda_value": 0.7843157148061,
      "learning_rate": 0.0066976571924,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 352
    },
    "934": {
      "batch_size": 50,
      "lambda_value": 0.5931147725298,
      "learning_rate": 0.0002429181124,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 453
    },
    "935": {
      "batch_size": 935,
      "lambda_value": 0.1042431965836,
      "learning_rate": 0.0860508301995,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 1007
    },
    "936": {
      "batch_size": 51,
      "lambda_value": 0.6111303644039,
      "learning_rate": 0.0930282850873,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 768
    },
    "937": {
      "batch_size": 195,
      "lambda_value": 0.401267304123,
      "learning_rate": 0.0301147399686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 255
    },
    "938": {
      "batch_size": 375,
      "lambda_value": 0.207280030057,
      "learning_rate": 0.0009177628162,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 187
    },
    "939": {
      "batch_size": 200,
      "lambda_value": 0.2983810181249,
      "learning_rate": 0.0001836146639,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 790
    },
    "940": {
      "batch_size": 422,
      "lambda_value": 0.0158208424749,
      "learning_rate": 0.0009490944438,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "941": {
      "batch_size": 762,
      "lambda_value": 0.020724417578,
      "learning_rate": 0.0003355580233,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 177
    },
    "942": {
      "batch_size": 497,
      "lambda_value": 0.3703394225824,
      "learning_rate": 0.0010809426098,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 171
    },
    "943": {
      "batch_size": 654,
      "lambda_value": 0.2815189758395,
      "learning_rate": 0.000142054368,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 547
    },
    "944": {
      "batch_size": 811,
      "lambda_value": 0.7360326119571,
      "learning_rate": 0.00010291166,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 85
    },
    "945": {
      "batch_size": 344,
      "lambda_value": 0.7086044755179,
      "learning_rate": 0.0012724902524,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 105
    },
    "946": {
      "batch_size": 433,
      "lambda_value": 0.9986754294793,
      "learning_rate": 0.0001092588107,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 126
    },
    "947": {
      "batch_size": 501,
      "lambda_value": 0.6985335247515,
      "learning_rate": 0.000436179448,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 278
    },
    "948": {
      "batch_size": 54,
      "lambda_value": 0.6996023323351,
      "learning_rate": 0.0018925506808,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 772
    },
    "949": {
      "batch_size": 50,
      "lambda_value": 0.493875570031,
      "learning_rate": 0.0049287562853,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 177
    },
    "950": {
      "batch_size": 249,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0042426744501,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "951": {
      "batch_size": 62,
      "lambda_value": 0.6529575109489,
      "learning_rate": 0.0866229397567,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "952": {
      "batch_size": 64,
      "lambda_value": 0.8996088275144,
      "learning_rate": 0.0381644700336,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 141
    },
    "953": {
      "batch_size": 71,
      "lambda_value": 0.8526437487769,
      "learning_rate": 0.0019043468288,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 79
    },
    "954": {
      "batch_size": 429,
      "lambda_value": 0.0054792037583,
      "learning_rate": 0.0013808246905,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 187
    },
    "955": {
      "batch_size": 717,
      "lambda_value": 0.7913626437791,
      "learning_rate": 0.0001036948064,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 174
    },
    "956": {
      "batch_size": 876,
      "lambda_value": 0.5620922051651,
      "learning_rate": 0.0161148976779,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 772
    },
    "957": {
      "batch_size": 50,
      "lambda_value": 0.7444304647954,
      "learning_rate": 0.0129067763488,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "958": {
      "batch_size": 625,
      "lambda_value": 0.335428589203,
      "learning_rate": 0.0001753046785,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 184
    },
    "959": {
      "batch_size": 157,
      "lambda_value": 0.4136544936724,
      "learning_rate": 0.0001328354583,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 239
    },
    "960": {
      "batch_size": 256,
      "lambda_value": 0.9677064937434,
      "learning_rate": 0.0002257394796,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 377
    },
    "961": {
      "batch_size": 601,
      "lambda_value": 0.6285300752365,
      "learning_rate": 0.0072125566688,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 228
    },
    "962": {
      "batch_size": 774,
      "lambda_value": 0.2223054853185,
      "learning_rate": 0.0705254572169,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 79
    },
    "963": {
      "batch_size": 803,
      "lambda_value": 0.049798848006,
      "learning_rate": 0.0424426548634,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 206
    },
    "964": {
      "batch_size": 304,
      "lambda_value": 0.9690636930872,
      "learning_rate": 0.0045660379397,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    }
  },
  "config_origins": {
    "1": "Initial Design: Sobol",
    "2": "Initial Design: Sobol",
    "3": "Initial Design: Sobol",
    "4": "Initial Design: Sobol",
    "5": "Initial Design: Sobol",
    "6": "Acquisition Function Maximizer: Local Search",
    "7": "Acquisition Function Maximizer: Local Search",
    "8": "Acquisition Function Maximizer: Local Search",
    "9": "Acquisition Function Maximizer: Local Search",
    "10": "Acquisition Function Maximizer: Local Search",
    "11": "Acquisition Function Maximizer: Local Search",
    "12": "Acquisition Function Maximizer: Local Search",
    "13": "Acquisition Function Maximizer: Local Search",
    "14": "Acquisition Function Maximizer: Local Search",
    "15": "Acquisition Function Maximizer: Local Search",
    "16": "Acquisition Function Maximizer: Local Search",
    "17": "Acquisition Function Maximizer: Local Search",
    "18": "Acquisition Function Maximizer: Local Search",
    "19": "Acquisition Function Maximizer: Local Search",
    "20": "Random Search",
    "21": "Random Search",
    "22": "Random Search",
    "23": "Acquisition Function Maximizer: Local Search",
    "24": "Acquisition Function Maximizer: Local Search",
    "25": "Acquisition Function Maximizer: Local Search",
    "26": "Acquisition Function Maximizer: Local Search",
    "27": "Acquisition Function Maximizer: Local Search",
    "28": "Acquisition Function Maximizer: Local Search",
    "29": "Acquisition Function Maximizer: Local Search",
    "30": "Random Search",
    "31": "Acquisition Function Maximizer: Local Search",
    "32": "Random Search",
    "33": "Acquisition Function Maximizer: Local Search",
    "34": "Acquisition Function Maximizer: Local Search",
    "35": "Acquisition Function Maximizer: Local Search",
    "36": "Acquisition Function Maximizer: Local Search",
    "37": "Acquisition Function Maximizer: Local Search",
    "38": "Acquisition Function Maximizer: Local Search",
    "39": "Acquisition Function Maximizer: Local Search",
    "40": "Random Search",
    "41": "Acquisition Function Maximizer: Local Search",
    "42": "Acquisition Function Maximizer: Local Search",
    "43": "Acquisition Function Maximizer: Local Search",
    "44": "Acquisition Function Maximizer: Local Search",
    "45": "Acquisition Function Maximizer: Local Search",
    "46": "Acquisition Function Maximizer: Local Search",
    "47": "Acquisition Function Maximizer: Local Search",
    "48": "Acquisition Function Maximizer: Local Search",
    "49": "Random Search",
    "50": "Acquisition Function Maximizer: Local Search",
    "51": "Acquisition Function Maximizer: Local Search",
    "52": "Acquisition Function Maximizer: Local Search",
    "53": "Random Search",
    "54": "Acquisition Function Maximizer: Local Search",
    "55": "Acquisition Function Maximizer: Local Search",
    "56": "Acquisition Function Maximizer: Local Search",
    "57": "Acquisition Function Maximizer: Local Search",
    "58": "Acquisition Function Maximizer: Local Search",
    "59": "Random Search",
    "60": "Acquisition Function Maximizer: Local Search",
    "61": "Random Search",
    "62": "Acquisition Function Maximizer: Local Search",
    "63": "Acquisition Function Maximizer: Local Search",
    "64": "Acquisition Function Maximizer: Local Search",
    "65": "Acquisition Function Maximizer: Local Search",
    "66": "Random Search",
    "67": "Random Search",
    "68": "Acquisition Function Maximizer: Local Search",
    "69": "Random Search",
    "70": "Random Search",
    "71": "Acquisition Function Maximizer: Local Search",
    "72": "Acquisition Function Maximizer: Local Search",
    "73": "Random Search",
    "74": "Acquisition Function Maximizer: Local Search",
    "75": "Random Search",
    "76": "Acquisition Function Maximizer: Local Search",
    "77": "Acquisition Function Maximizer: Local Search",
    "78": "Acquisition Function Maximizer: Local Search",
    "79": "Acquisition Function Maximizer: Local Search",
    "80": "Acquisition Function Maximizer: Local Search",
    "81": "Random Search",
    "82": "Acquisition Function Maximizer: Local Search",
    "83": "Random Search",
    "84": "Acquisition Function Maximizer: Local Search",
    "85": "Random Search",
    "86": "Acquisition Function Maximizer: Local Search",
    "87": "Acquisition Function Maximizer: Local Search",
    "88": "Random Search",
    "89": "Acquisition Function Maximizer: Local Search",
    "90": "Acquisition Function Maximizer: Local Search",
    "91": "Acquisition Function Maximizer: Local Search",
    "92": "Acquisition Function Maximizer: Local Search",
    "93": "Random Search",
    "94": "Acquisition Function Maximizer: Local Search",
    "95": "Acquisition Function Maximizer: Local Search",
    "96": "Acquisition Function Maximizer: Local Search",
    "97": "Acquisition Function Maximizer: Local Search",
    "98": "Random Search",
    "99": "Acquisition Function Maximizer: Local Search",
    "100": "Acquisition Function Maximizer: Local Search",
    "101": "Random Search",
    "102": "Acquisition Function Maximizer: Local Search",
    "103": "Random Search",
    "104": "Acquisition Function Maximizer: Local Search",
    "105": "Random Search",
    "106": "Acquisition Function Maximizer: Local Search",
    "107": "Acquisition Function Maximizer: Local Search",
    "108": "Acquisition Function Maximizer: Local Search",
    "109": "Acquisition Function Maximizer: Local Search",
    "110": "Acquisition Function Maximizer: Local Search",
    "111": "Acquisition Function Maximizer: Local Search",
    "112": "Acquisition Function Maximizer: Local Search",
    "113": "Acquisition Function Maximizer: Local Search",
    "114": "Acquisition Function Maximizer: Local Search",
    "115": "Acquisition Function Maximizer: Local Search",
    "116": "Acquisition Function Maximizer: Local Search",
    "117": "Acquisition Function Maximizer: Local Search",
    "118": "Acquisition Function Maximizer: Local Search",
    "119": "Acquisition Function Maximizer: Local Search",
    "120": "Acquisition Function Maximizer: Local Search",
    "121": "Acquisition Function Maximizer: Local Search",
    "122": "Acquisition Function Maximizer: Local Search",
    "123": "Acquisition Function Maximizer: Local Search",
    "124": "Acquisition Function Maximizer: Local Search",
    "125": "Acquisition Function Maximizer: Local Search",
    "126": "Acquisition Function Maximizer: Local Search",
    "127": "Acquisition Function Maximizer: Local Search",
    "128": "Acquisition Function Maximizer: Local Search",
    "129": "Acquisition Function Maximizer: Local Search",
    "130": "Acquisition Function Maximizer: Local Search",
    "131": "Acquisition Function Maximizer: Local Search",
    "132": "Random Search",
    "133": "Acquisition Function Maximizer: Local Search",
    "134": "Acquisition Function Maximizer: Local Search",
    "135": "Acquisition Function Maximizer: Local Search",
    "136": "Acquisition Function Maximizer: Local Search",
    "137": "Acquisition Function Maximizer: Local Search",
    "138": "Random Search",
    "139": "Acquisition Function Maximizer: Local Search",
    "140": "Acquisition Function Maximizer: Local Search",
    "141": "Acquisition Function Maximizer: Local Search",
    "142": "Acquisition Function Maximizer: Local Search",
    "143": "Acquisition Function Maximizer: Local Search",
    "144": "Acquisition Function Maximizer: Local Search",
    "145": "Acquisition Function Maximizer: Local Search",
    "146": "Acquisition Function Maximizer: Local Search",
    "147": "Acquisition Function Maximizer: Local Search",
    "148": "Acquisition Function Maximizer: Local Search",
    "149": "Acquisition Function Maximizer: Local Search",
    "150": "Acquisition Function Maximizer: Local Search",
    "151": "Acquisition Function Maximizer: Local Search",
    "152": "Random Search",
    "153": "Acquisition Function Maximizer: Local Search",
    "154": "Acquisition Function Maximizer: Local Search",
    "155": "Acquisition Function Maximizer: Local Search",
    "156": "Random Search",
    "157": "Acquisition Function Maximizer: Local Search",
    "158": "Random Search",
    "159": "Acquisition Function Maximizer: Local Search",
    "160": "Random Search",
    "161": "Acquisition Function Maximizer: Local Search",
    "162": "Acquisition Function Maximizer: Local Search",
    "163": "Acquisition Function Maximizer: Local Search",
    "164": "Acquisition Function Maximizer: Local Search",
    "165": "Random Search",
    "166": "Acquisition Function Maximizer: Local Search",
    "167": "Acquisition Function Maximizer: Local Search",
    "168": "Acquisition Function Maximizer: Local Search",
    "169": "Acquisition Function Maximizer: Local Search",
    "170": "Acquisition Function Maximizer: Local Search",
    "171": "Acquisition Function Maximizer: Local Search",
    "172": "Random Search",
    "173": "Acquisition Function Maximizer: Local Search",
    "174": "Acquisition Function Maximizer: Local Search",
    "175": "Random Search",
    "176": "Acquisition Function Maximizer: Local Search",
    "177": "Random Search",
    "178": "Random Search",
    "179": "Random Search",
    "180": "Acquisition Function Maximizer: Local Search",
    "181": "Acquisition Function Maximizer: Local Search",
    "182": "Acquisition Function Maximizer: Local Search",
    "183": "Acquisition Function Maximizer: Local Search",
    "184": "Acquisition Function Maximizer: Local Search",
    "185": "Random Search",
    "186": "Random Search",
    "187": "Acquisition Function Maximizer: Local Search",
    "188": "Acquisition Function Maximizer: Local Search",
    "189": "Acquisition Function Maximizer: Local Search",
    "190": "Acquisition Function Maximizer: Local Search",
    "191": "Acquisition Function Maximizer: Local Search",
    "192": "Acquisition Function Maximizer: Local Search",
    "193": "Acquisition Function Maximizer: Local Search",
    "194": "Acquisition Function Maximizer: Local Search",
    "195": "Acquisition Function Maximizer: Local Search",
    "196": "Acquisition Function Maximizer: Local Search",
    "197": "Acquisition Function Maximizer: Local Search",
    "198": "Random Search",
    "199": "Acquisition Function Maximizer: Local Search",
    "200": "Acquisition Function Maximizer: Local Search",
    "201": "Acquisition Function Maximizer: Local Search",
    "202": "Acquisition Function Maximizer: Local Search",
    "203": "Acquisition Function Maximizer: Local Search",
    "204": "Random Search",
    "205": "Acquisition Function Maximizer: Local Search",
    "206": "Acquisition Function Maximizer: Local Search",
    "207": "Acquisition Function Maximizer: Local Search",
    "208": "Acquisition Function Maximizer: Local Search",
    "209": "Random Search",
    "210": "Random Search",
    "211": "Random Search",
    "212": "Acquisition Function Maximizer: Local Search",
    "213": "Acquisition Function Maximizer: Local Search",
    "214": "Acquisition Function Maximizer: Local Search",
    "215": "Acquisition Function Maximizer: Local Search",
    "216": "Acquisition Function Maximizer: Local Search",
    "217": "Acquisition Function Maximizer: Local Search",
    "218": "Acquisition Function Maximizer: Local Search",
    "219": "Acquisition Function Maximizer: Local Search",
    "220": "Random Search",
    "221": "Acquisition Function Maximizer: Local Search",
    "222": "Acquisition Function Maximizer: Local Search",
    "223": "Acquisition Function Maximizer: Local Search",
    "224": "Acquisition Function Maximizer: Local Search",
    "225": "Acquisition Function Maximizer: Local Search",
    "226": "Acquisition Function Maximizer: Local Search",
    "227": "Acquisition Function Maximizer: Local Search",
    "228": "Acquisition Function Maximizer: Local Search",
    "229": "Acquisition Function Maximizer: Local Search",
    "230": "Random Search",
    "231": "Acquisition Function Maximizer: Local Search",
    "232": "Acquisition Function Maximizer: Local Search",
    "233": "Acquisition Function Maximizer: Local Search",
    "234": "Acquisition Function Maximizer: Local Search",
    "235": "Acquisition Function Maximizer: Local Search",
    "236": "Acquisition Function Maximizer: Local Search",
    "237": "Acquisition Function Maximizer: Local Search",
    "238": "Acquisition Function Maximizer: Local Search",
    "239": "Random Search",
    "240": "Acquisition Function Maximizer: Local Search",
    "241": "Acquisition Function Maximizer: Local Search",
    "242": "Acquisition Function Maximizer: Local Search",
    "243": "Acquisition Function Maximizer: Local Search",
    "244": "Acquisition Function Maximizer: Local Search",
    "245": "Acquisition Function Maximizer: Local Search",
    "246": "Acquisition Function Maximizer: Local Search",
    "247": "Random Search",
    "248": "Acquisition Function Maximizer: Local Search",
    "249": "Random Search",
    "250": "Acquisition Function Maximizer: Local Search",
    "251": "Acquisition Function Maximizer: Local Search",
    "252": "Acquisition Function Maximizer: Local Search",
    "253": "Random Search",
    "254": "Random Search",
    "255": "Acquisition Function Maximizer: Local Search",
    "256": "Acquisition Function Maximizer: Local Search",
    "257": "Acquisition Function Maximizer: Local Search",
    "258": "Acquisition Function Maximizer: Local Search",
    "259": "Acquisition Function Maximizer: Local Search",
    "260": "Acquisition Function Maximizer: Local Search",
    "261": "Random Search",
    "262": "Acquisition Function Maximizer: Local Search",
    "263": "Acquisition Function Maximizer: Local Search",
    "264": "Acquisition Function Maximizer: Local Search",
    "265": "Acquisition Function Maximizer: Local Search",
    "266": "Acquisition Function Maximizer: Local Search",
    "267": "Random Search",
    "268": "Random Search",
    "269": "Acquisition Function Maximizer: Local Search",
    "270": "Acquisition Function Maximizer: Local Search",
    "271": "Acquisition Function Maximizer: Local Search",
    "272": "Acquisition Function Maximizer: Local Search",
    "273": "Acquisition Function Maximizer: Local Search",
    "274": "Random Search",
    "275": "Acquisition Function Maximizer: Local Search",
    "276": "Acquisition Function Maximizer: Local Search",
    "277": "Acquisition Function Maximizer: Local Search",
    "278": "Acquisition Function Maximizer: Local Search",
    "279": "Acquisition Function Maximizer: Local Search",
    "280": "Acquisition Function Maximizer: Local Search",
    "281": "Acquisition Function Maximizer: Local Search",
    "282": "Acquisition Function Maximizer: Local Search",
    "283": "Acquisition Function Maximizer: Local Search",
    "284": "Acquisition Function Maximizer: Local Search",
    "285": "Acquisition Function Maximizer: Local Search",
    "286": "Acquisition Function Maximizer: Local Search",
    "287": "Acquisition Function Maximizer: Local Search",
    "288": "Acquisition Function Maximizer: Local Search",
    "289": "Random Search",
    "290": "Acquisition Function Maximizer: Local Search",
    "291": "Random Search",
    "292": "Acquisition Function Maximizer: Local Search",
    "293": "Acquisition Function Maximizer: Local Search",
    "294": "Acquisition Function Maximizer: Local Search",
    "295": "Acquisition Function Maximizer: Local Search",
    "296": "Acquisition Function Maximizer: Local Search",
    "297": "Random Search",
    "298": "Acquisition Function Maximizer: Local Search",
    "299": "Random Search",
    "300": "Acquisition Function Maximizer: Local Search",
    "301": "Acquisition Function Maximizer: Local Search",
    "302": "Random Search",
    "303": "Acquisition Function Maximizer: Local Search",
    "304": "Acquisition Function Maximizer: Local Search",
    "305": "Acquisition Function Maximizer: Local Search",
    "306": "Acquisition Function Maximizer: Local Search",
    "307": "Acquisition Function Maximizer: Local Search",
    "308": "Acquisition Function Maximizer: Local Search",
    "309": "Random Search",
    "310": "Acquisition Function Maximizer: Local Search",
    "311": "Acquisition Function Maximizer: Local Search",
    "312": "Random Search",
    "313": "Random Search",
    "314": "Acquisition Function Maximizer: Local Search",
    "315": "Random Search",
    "316": "Acquisition Function Maximizer: Local Search",
    "317": "Random Search",
    "318": "Random Search",
    "319": "Random Search",
    "320": "Acquisition Function Maximizer: Local Search",
    "321": "Acquisition Function Maximizer: Local Search",
    "322": "Acquisition Function Maximizer: Local Search",
    "323": "Acquisition Function Maximizer: Local Search",
    "324": "Acquisition Function Maximizer: Local Search",
    "325": "Acquisition Function Maximizer: Local Search",
    "326": "Acquisition Function Maximizer: Local Search",
    "327": "Random Search",
    "328": "Random Search",
    "329": "Acquisition Function Maximizer: Local Search",
    "330": "Acquisition Function Maximizer: Local Search",
    "331": "Acquisition Function Maximizer: Local Search",
    "332": "Acquisition Function Maximizer: Local Search",
    "333": "Acquisition Function Maximizer: Local Search",
    "334": "Acquisition Function Maximizer: Local Search",
    "335": "Acquisition Function Maximizer: Local Search",
    "336": "Random Search",
    "337": "Acquisition Function Maximizer: Local Search",
    "338": "Random Search",
    "339": "Acquisition Function Maximizer: Local Search",
    "340": "Acquisition Function Maximizer: Local Search",
    "341": "Acquisition Function Maximizer: Local Search",
    "342": "Acquisition Function Maximizer: Local Search",
    "343": "Acquisition Function Maximizer: Local Search",
    "344": "Acquisition Function Maximizer: Local Search",
    "345": "Acquisition Function Maximizer: Local Search",
    "346": "Acquisition Function Maximizer: Local Search",
    "347": "Random Search",
    "348": "Acquisition Function Maximizer: Local Search",
    "349": "Random Search",
    "350": "Acquisition Function Maximizer: Local Search",
    "351": "Random Search",
    "352": "Acquisition Function Maximizer: Local Search",
    "353": "Acquisition Function Maximizer: Local Search",
    "354": "Acquisition Function Maximizer: Local Search",
    "355": "Acquisition Function Maximizer: Local Search",
    "356": "Acquisition Function Maximizer: Local Search",
    "357": "Random Search",
    "358": "Acquisition Function Maximizer: Local Search",
    "359": "Acquisition Function Maximizer: Local Search",
    "360": "Acquisition Function Maximizer: Local Search",
    "361": "Acquisition Function Maximizer: Local Search",
    "362": "Acquisition Function Maximizer: Local Search",
    "363": "Random Search",
    "364": "Acquisition Function Maximizer: Local Search",
    "365": "Acquisition Function Maximizer: Local Search",
    "366": "Random Search",
    "367": "Acquisition Function Maximizer: Local Search",
    "368": "Acquisition Function Maximizer: Local Search",
    "369": "Acquisition Function Maximizer: Local Search",
    "370": "Acquisition Function Maximizer: Local Search",
    "371": "Acquisition Function Maximizer: Local Search",
    "372": "Acquisition Function Maximizer: Local Search",
    "373": "Acquisition Function Maximizer: Local Search",
    "374": "Acquisition Function Maximizer: Local Search",
    "375": "Acquisition Function Maximizer: Local Search",
    "376": "Acquisition Function Maximizer: Local Search",
    "377": "Acquisition Function Maximizer: Local Search",
    "378": "Acquisition Function Maximizer: Local Search",
    "379": "Acquisition Function Maximizer: Local Search",
    "380": "Acquisition Function Maximizer: Local Search",
    "381": "Random Search",
    "382": "Acquisition Function Maximizer: Local Search",
    "383": "Acquisition Function Maximizer: Local Search",
    "384": "Acquisition Function Maximizer: Local Search",
    "385": "Acquisition Function Maximizer: Local Search",
    "386": "Acquisition Function Maximizer: Local Search",
    "387": "Acquisition Function Maximizer: Local Search",
    "388": "Acquisition Function Maximizer: Local Search",
    "389": "Acquisition Function Maximizer: Local Search",
    "390": "Acquisition Function Maximizer: Local Search",
    "391": "Acquisition Function Maximizer: Local Search",
    "392": "Acquisition Function Maximizer: Local Search",
    "393": "Random Search",
    "394": "Acquisition Function Maximizer: Local Search",
    "395": "Acquisition Function Maximizer: Local Search",
    "396": "Random Search",
    "397": "Acquisition Function Maximizer: Local Search",
    "398": "Acquisition Function Maximizer: Local Search",
    "399": "Acquisition Function Maximizer: Local Search",
    "400": "Random Search",
    "401": "Acquisition Function Maximizer: Local Search",
    "402": "Acquisition Function Maximizer: Local Search",
    "403": "Acquisition Function Maximizer: Local Search",
    "404": "Random Search",
    "405": "Random Search",
    "406": "Acquisition Function Maximizer: Local Search",
    "407": "Acquisition Function Maximizer: Local Search",
    "408": "Random Search",
    "409": "Acquisition Function Maximizer: Local Search",
    "410": "Acquisition Function Maximizer: Local Search",
    "411": "Acquisition Function Maximizer: Local Search",
    "412": "Acquisition Function Maximizer: Local Search",
    "413": "Acquisition Function Maximizer: Local Search",
    "414": "Acquisition Function Maximizer: Local Search",
    "415": "Random Search",
    "416": "Random Search",
    "417": "Acquisition Function Maximizer: Local Search",
    "418": "Random Search",
    "419": "Acquisition Function Maximizer: Local Search",
    "420": "Acquisition Function Maximizer: Local Search",
    "421": "Acquisition Function Maximizer: Local Search",
    "422": "Random Search",
    "423": "Random Search",
    "424": "Random Search",
    "425": "Acquisition Function Maximizer: Local Search",
    "426": "Acquisition Function Maximizer: Local Search",
    "427": "Acquisition Function Maximizer: Local Search",
    "428": "Acquisition Function Maximizer: Local Search",
    "429": "Random Search",
    "430": "Acquisition Function Maximizer: Local Search",
    "431": "Acquisition Function Maximizer: Local Search",
    "432": "Acquisition Function Maximizer: Local Search",
    "433": "Random Search",
    "434": "Acquisition Function Maximizer: Local Search",
    "435": "Acquisition Function Maximizer: Local Search",
    "436": "Acquisition Function Maximizer: Local Search",
    "437": "Acquisition Function Maximizer: Local Search",
    "438": "Acquisition Function Maximizer: Local Search",
    "439": "Acquisition Function Maximizer: Local Search",
    "440": "Acquisition Function Maximizer: Local Search",
    "441": "Acquisition Function Maximizer: Local Search",
    "442": "Acquisition Function Maximizer: Local Search",
    "443": "Acquisition Function Maximizer: Local Search",
    "444": "Acquisition Function Maximizer: Local Search",
    "445": "Acquisition Function Maximizer: Local Search",
    "446": "Acquisition Function Maximizer: Local Search",
    "447": "Acquisition Function Maximizer: Local Search",
    "448": "Acquisition Function Maximizer: Local Search",
    "449": "Random Search",
    "450": "Acquisition Function Maximizer: Local Search",
    "451": "Acquisition Function Maximizer: Local Search",
    "452": "Acquisition Function Maximizer: Local Search",
    "453": "Acquisition Function Maximizer: Local Search",
    "454": "Acquisition Function Maximizer: Local Search",
    "455": "Acquisition Function Maximizer: Local Search",
    "456": "Acquisition Function Maximizer: Local Search",
    "457": "Acquisition Function Maximizer: Local Search",
    "458": "Acquisition Function Maximizer: Local Search",
    "459": "Random Search",
    "460": "Acquisition Function Maximizer: Local Search",
    "461": "Acquisition Function Maximizer: Local Search",
    "462": "Acquisition Function Maximizer: Local Search",
    "463": "Random Search",
    "464": "Acquisition Function Maximizer: Local Search",
    "465": "Acquisition Function Maximizer: Local Search",
    "466": "Acquisition Function Maximizer: Local Search",
    "467": "Acquisition Function Maximizer: Local Search",
    "468": "Acquisition Function Maximizer: Local Search",
    "469": "Acquisition Function Maximizer: Local Search",
    "470": "Acquisition Function Maximizer: Local Search",
    "471": "Random Search",
    "472": "Acquisition Function Maximizer: Local Search",
    "473": "Acquisition Function Maximizer: Local Search",
    "474": "Acquisition Function Maximizer: Local Search",
    "475": "Acquisition Function Maximizer: Local Search",
    "476": "Acquisition Function Maximizer: Local Search",
    "477": "Acquisition Function Maximizer: Local Search",
    "478": "Acquisition Function Maximizer: Local Search",
    "479": "Acquisition Function Maximizer: Local Search",
    "480": "Acquisition Function Maximizer: Local Search",
    "481": "Acquisition Function Maximizer: Local Search",
    "482": "Acquisition Function Maximizer: Local Search",
    "483": "Acquisition Function Maximizer: Local Search",
    "484": "Acquisition Function Maximizer: Local Search",
    "485": "Acquisition Function Maximizer: Local Search",
    "486": "Random Search",
    "487": "Acquisition Function Maximizer: Local Search",
    "488": "Random Search",
    "489": "Acquisition Function Maximizer: Local Search",
    "490": "Random Search",
    "491": "Acquisition Function Maximizer: Local Search",
    "492": "Acquisition Function Maximizer: Local Search",
    "493": "Acquisition Function Maximizer: Local Search",
    "494": "Acquisition Function Maximizer: Local Search",
    "495": "Acquisition Function Maximizer: Local Search",
    "496": "Acquisition Function Maximizer: Local Search",
    "497": "Acquisition Function Maximizer: Local Search",
    "498": "Acquisition Function Maximizer: Local Search",
    "499": "Acquisition Function Maximizer: Local Search",
    "500": "Acquisition Function Maximizer: Local Search",
    "501": "Acquisition Function Maximizer: Local Search",
    "502": "Acquisition Function Maximizer: Local Search",
    "503": "Acquisition Function Maximizer: Local Search",
    "504": "Acquisition Function Maximizer: Local Search",
    "505": "Acquisition Function Maximizer: Local Search",
    "506": "Acquisition Function Maximizer: Local Search",
    "507": "Acquisition Function Maximizer: Local Search",
    "508": "Acquisition Function Maximizer: Local Search",
    "509": "Acquisition Function Maximizer: Local Search",
    "510": "Acquisition Function Maximizer: Local Search",
    "511": "Acquisition Function Maximizer: Local Search",
    "512": "Acquisition Function Maximizer: Local Search",
    "513": "Random Search",
    "514": "Acquisition Function Maximizer: Local Search",
    "515": "Acquisition Function Maximizer: Local Search",
    "516": "Random Search",
    "517": "Acquisition Function Maximizer: Local Search",
    "518": "Acquisition Function Maximizer: Local Search",
    "519": "Acquisition Function Maximizer: Local Search",
    "520": "Acquisition Function Maximizer: Local Search",
    "521": "Acquisition Function Maximizer: Local Search",
    "522": "Acquisition Function Maximizer: Local Search",
    "523": "Acquisition Function Maximizer: Local Search",
    "524": "Acquisition Function Maximizer: Local Search",
    "525": "Acquisition Function Maximizer: Local Search",
    "526": "Acquisition Function Maximizer: Local Search",
    "527": "Acquisition Function Maximizer: Local Search",
    "528": "Random Search",
    "529": "Acquisition Function Maximizer: Local Search",
    "530": "Random Search",
    "531": "Acquisition Function Maximizer: Local Search",
    "532": "Acquisition Function Maximizer: Local Search",
    "533": "Acquisition Function Maximizer: Local Search",
    "534": "Random Search",
    "535": "Acquisition Function Maximizer: Local Search",
    "536": "Random Search",
    "537": "Acquisition Function Maximizer: Local Search",
    "538": "Acquisition Function Maximizer: Local Search",
    "539": "Acquisition Function Maximizer: Local Search",
    "540": "Acquisition Function Maximizer: Local Search",
    "541": "Random Search",
    "542": "Acquisition Function Maximizer: Local Search",
    "543": "Acquisition Function Maximizer: Local Search",
    "544": "Acquisition Function Maximizer: Local Search",
    "545": "Acquisition Function Maximizer: Local Search",
    "546": "Random Search",
    "547": "Acquisition Function Maximizer: Local Search",
    "548": "Acquisition Function Maximizer: Local Search",
    "549": "Acquisition Function Maximizer: Local Search",
    "550": "Acquisition Function Maximizer: Local Search",
    "551": "Random Search",
    "552": "Acquisition Function Maximizer: Local Search",
    "553": "Acquisition Function Maximizer: Local Search",
    "554": "Acquisition Function Maximizer: Local Search",
    "555": "Acquisition Function Maximizer: Local Search",
    "556": "Acquisition Function Maximizer: Local Search",
    "557": "Random Search",
    "558": "Acquisition Function Maximizer: Local Search",
    "559": "Acquisition Function Maximizer: Local Search",
    "560": "Acquisition Function Maximizer: Local Search",
    "561": "Random Search",
    "562": "Acquisition Function Maximizer: Local Search",
    "563": "Acquisition Function Maximizer: Local Search",
    "564": "Acquisition Function Maximizer: Local Search",
    "565": "Acquisition Function Maximizer: Local Search",
    "566": "Acquisition Function Maximizer: Local Search",
    "567": "Random Search",
    "568": "Acquisition Function Maximizer: Local Search",
    "569": "Acquisition Function Maximizer: Local Search",
    "570": "Acquisition Function Maximizer: Local Search",
    "571": "Acquisition Function Maximizer: Local Search",
    "572": "Acquisition Function Maximizer: Local Search",
    "573": "Acquisition Function Maximizer: Local Search",
    "574": "Acquisition Function Maximizer: Local Search",
    "575": "Acquisition Function Maximizer: Local Search",
    "576": "Acquisition Function Maximizer: Local Search",
    "577": "Random Search",
    "578": "Random Search",
    "579": "Acquisition Function Maximizer: Local Search",
    "580": "Acquisition Function Maximizer: Local Search",
    "581": "Acquisition Function Maximizer: Local Search",
    "582": "Random Search",
    "583": "Acquisition Function Maximizer: Local Search",
    "584": "Acquisition Function Maximizer: Local Search",
    "585": "Acquisition Function Maximizer: Local Search",
    "586": "Random Search",
    "587": "Acquisition Function Maximizer: Local Search",
    "588": "Acquisition Function Maximizer: Local Search",
    "589": "Random Search",
    "590": "Acquisition Function Maximizer: Local Search",
    "591": "Acquisition Function Maximizer: Local Search",
    "592": "Random Search",
    "593": "Random Search",
    "594": "Random Search",
    "595": "Acquisition Function Maximizer: Local Search",
    "596": "Acquisition Function Maximizer: Local Search",
    "597": "Acquisition Function Maximizer: Local Search",
    "598": "Acquisition Function Maximizer: Local Search",
    "599": "Acquisition Function Maximizer: Local Search",
    "600": "Acquisition Function Maximizer: Local Search",
    "601": "Acquisition Function Maximizer: Local Search",
    "602": "Acquisition Function Maximizer: Local Search",
    "603": "Acquisition Function Maximizer: Local Search",
    "604": "Acquisition Function Maximizer: Local Search",
    "605": "Acquisition Function Maximizer: Local Search",
    "606": "Random Search",
    "607": "Acquisition Function Maximizer: Local Search",
    "608": "Acquisition Function Maximizer: Local Search",
    "609": "Random Search",
    "610": "Acquisition Function Maximizer: Local Search",
    "611": "Acquisition Function Maximizer: Local Search",
    "612": "Acquisition Function Maximizer: Local Search",
    "613": "Acquisition Function Maximizer: Local Search",
    "614": "Acquisition Function Maximizer: Local Search",
    "615": "Acquisition Function Maximizer: Local Search",
    "616": "Acquisition Function Maximizer: Local Search",
    "617": "Acquisition Function Maximizer: Local Search",
    "618": "Acquisition Function Maximizer: Local Search",
    "619": "Random Search",
    "620": "Random Search",
    "621": "Acquisition Function Maximizer: Local Search",
    "622": "Acquisition Function Maximizer: Local Search",
    "623": "Acquisition Function Maximizer: Local Search",
    "624": "Acquisition Function Maximizer: Local Search",
    "625": "Acquisition Function Maximizer: Local Search",
    "626": "Acquisition Function Maximizer: Local Search",
    "627": "Acquisition Function Maximizer: Local Search",
    "628": "Acquisition Function Maximizer: Local Search",
    "629": "Acquisition Function Maximizer: Local Search",
    "630": "Acquisition Function Maximizer: Local Search",
    "631": "Acquisition Function Maximizer: Local Search",
    "632": "Acquisition Function Maximizer: Local Search",
    "633": "Acquisition Function Maximizer: Local Search",
    "634": "Acquisition Function Maximizer: Local Search",
    "635": "Random Search",
    "636": "Random Search",
    "637": "Acquisition Function Maximizer: Local Search",
    "638": "Acquisition Function Maximizer: Local Search",
    "639": "Acquisition Function Maximizer: Local Search",
    "640": "Acquisition Function Maximizer: Local Search",
    "641": "Acquisition Function Maximizer: Local Search",
    "642": "Random Search",
    "643": "Random Search",
    "644": "Acquisition Function Maximizer: Local Search",
    "645": "Acquisition Function Maximizer: Local Search",
    "646": "Acquisition Function Maximizer: Local Search",
    "647": "Acquisition Function Maximizer: Local Search",
    "648": "Acquisition Function Maximizer: Local Search",
    "649": "Acquisition Function Maximizer: Local Search",
    "650": "Acquisition Function Maximizer: Local Search",
    "651": "Random Search",
    "652": "Acquisition Function Maximizer: Local Search",
    "653": "Acquisition Function Maximizer: Local Search",
    "654": "Acquisition Function Maximizer: Local Search",
    "655": "Random Search",
    "656": "Acquisition Function Maximizer: Local Search",
    "657": "Acquisition Function Maximizer: Local Search",
    "658": "Acquisition Function Maximizer: Local Search",
    "659": "Random Search",
    "660": "Acquisition Function Maximizer: Local Search",
    "661": "Random Search",
    "662": "Acquisition Function Maximizer: Local Search",
    "663": "Random Search",
    "664": "Acquisition Function Maximizer: Local Search",
    "665": "Acquisition Function Maximizer: Local Search",
    "666": "Acquisition Function Maximizer: Local Search",
    "667": "Acquisition Function Maximizer: Local Search",
    "668": "Random Search",
    "669": "Acquisition Function Maximizer: Local Search",
    "670": "Acquisition Function Maximizer: Local Search",
    "671": "Acquisition Function Maximizer: Local Search",
    "672": "Acquisition Function Maximizer: Local Search",
    "673": "Acquisition Function Maximizer: Local Search",
    "674": "Acquisition Function Maximizer: Local Search",
    "675": "Acquisition Function Maximizer: Local Search",
    "676": "Acquisition Function Maximizer: Local Search",
    "677": "Acquisition Function Maximizer: Local Search",
    "678": "Acquisition Function Maximizer: Local Search",
    "679": "Random Search",
    "680": "Acquisition Function Maximizer: Local Search",
    "681": "Acquisition Function Maximizer: Local Search",
    "682": "Acquisition Function Maximizer: Local Search",
    "683": "Acquisition Function Maximizer: Local Search",
    "684": "Random Search",
    "685": "Acquisition Function Maximizer: Local Search",
    "686": "Acquisition Function Maximizer: Local Search",
    "687": "Acquisition Function Maximizer: Local Search",
    "688": "Random Search",
    "689": "Acquisition Function Maximizer: Local Search",
    "690": "Random Search",
    "691": "Acquisition Function Maximizer: Local Search",
    "692": "Acquisition Function Maximizer: Local Search",
    "693": "Acquisition Function Maximizer: Local Search",
    "694": "Acquisition Function Maximizer: Local Search",
    "695": "Random Search",
    "696": "Acquisition Function Maximizer: Local Search",
    "697": "Random Search",
    "698": "Acquisition Function Maximizer: Local Search",
    "699": "Acquisition Function Maximizer: Local Search",
    "700": "Acquisition Function Maximizer: Local Search",
    "701": "Acquisition Function Maximizer: Local Search",
    "702": "Random Search",
    "703": "Random Search",
    "704": "Acquisition Function Maximizer: Local Search",
    "705": "Acquisition Function Maximizer: Local Search",
    "706": "Acquisition Function Maximizer: Local Search",
    "707": "Acquisition Function Maximizer: Local Search",
    "708": "Random Search",
    "709": "Random Search",
    "710": "Acquisition Function Maximizer: Local Search",
    "711": "Random Search",
    "712": "Acquisition Function Maximizer: Local Search",
    "713": "Random Search",
    "714": "Random Search",
    "715": "Acquisition Function Maximizer: Local Search",
    "716": "Random Search",
    "717": "Acquisition Function Maximizer: Local Search",
    "718": "Acquisition Function Maximizer: Local Search",
    "719": "Acquisition Function Maximizer: Local Search",
    "720": "Random Search",
    "721": "Random Search",
    "722": "Acquisition Function Maximizer: Local Search",
    "723": "Acquisition Function Maximizer: Local Search",
    "724": "Acquisition Function Maximizer: Local Search",
    "725": "Acquisition Function Maximizer: Local Search",
    "726": "Acquisition Function Maximizer: Local Search",
    "727": "Acquisition Function Maximizer: Local Search",
    "728": "Random Search",
    "729": "Acquisition Function Maximizer: Local Search",
    "730": "Acquisition Function Maximizer: Local Search",
    "731": "Acquisition Function Maximizer: Local Search",
    "732": "Acquisition Function Maximizer: Local Search",
    "733": "Acquisition Function Maximizer: Local Search",
    "734": "Acquisition Function Maximizer: Local Search",
    "735": "Acquisition Function Maximizer: Local Search",
    "736": "Acquisition Function Maximizer: Local Search",
    "737": "Acquisition Function Maximizer: Local Search",
    "738": "Acquisition Function Maximizer: Local Search",
    "739": "Acquisition Function Maximizer: Local Search",
    "740": "Acquisition Function Maximizer: Local Search",
    "741": "Acquisition Function Maximizer: Local Search",
    "742": "Acquisition Function Maximizer: Local Search",
    "743": "Acquisition Function Maximizer: Local Search",
    "744": "Random Search",
    "745": "Random Search",
    "746": "Random Search",
    "747": "Acquisition Function Maximizer: Local Search",
    "748": "Random Search",
    "749": "Random Search",
    "750": "Acquisition Function Maximizer: Local Search",
    "751": "Random Search",
    "752": "Acquisition Function Maximizer: Local Search",
    "753": "Acquisition Function Maximizer: Local Search",
    "754": "Acquisition Function Maximizer: Local Search",
    "755": "Acquisition Function Maximizer: Local Search",
    "756": "Acquisition Function Maximizer: Local Search",
    "757": "Acquisition Function Maximizer: Local Search",
    "758": "Acquisition Function Maximizer: Local Search",
    "759": "Acquisition Function Maximizer: Local Search",
    "760": "Acquisition Function Maximizer: Local Search",
    "761": "Acquisition Function Maximizer: Local Search",
    "762": "Acquisition Function Maximizer: Local Search",
    "763": "Random Search",
    "764": "Acquisition Function Maximizer: Local Search",
    "765": "Acquisition Function Maximizer: Local Search",
    "766": "Acquisition Function Maximizer: Local Search",
    "767": "Acquisition Function Maximizer: Local Search",
    "768": "Acquisition Function Maximizer: Local Search",
    "769": "Acquisition Function Maximizer: Local Search",
    "770": "Acquisition Function Maximizer: Local Search",
    "771": "Acquisition Function Maximizer: Local Search",
    "772": "Acquisition Function Maximizer: Local Search",
    "773": "Acquisition Function Maximizer: Local Search",
    "774": "Acquisition Function Maximizer: Local Search",
    "775": "Acquisition Function Maximizer: Local Search",
    "776": "Acquisition Function Maximizer: Local Search",
    "777": "Acquisition Function Maximizer: Local Search",
    "778": "Acquisition Function Maximizer: Local Search",
    "779": "Random Search",
    "780": "Acquisition Function Maximizer: Local Search",
    "781": "Acquisition Function Maximizer: Local Search",
    "782": "Acquisition Function Maximizer: Local Search",
    "783": "Acquisition Function Maximizer: Local Search",
    "784": "Acquisition Function Maximizer: Local Search",
    "785": "Acquisition Function Maximizer: Local Search",
    "786": "Random Search",
    "787": "Acquisition Function Maximizer: Local Search",
    "788": "Acquisition Function Maximizer: Local Search",
    "789": "Acquisition Function Maximizer: Local Search",
    "790": "Random Search",
    "791": "Random Search",
    "792": "Acquisition Function Maximizer: Local Search",
    "793": "Random Search",
    "794": "Acquisition Function Maximizer: Local Search",
    "795": "Random Search",
    "796": "Acquisition Function Maximizer: Local Search",
    "797": "Acquisition Function Maximizer: Local Search",
    "798": "Acquisition Function Maximizer: Local Search",
    "799": "Random Search",
    "800": "Acquisition Function Maximizer: Local Search",
    "801": "Acquisition Function Maximizer: Local Search",
    "802": "Acquisition Function Maximizer: Local Search",
    "803": "Acquisition Function Maximizer: Local Search",
    "804": "Acquisition Function Maximizer: Local Search",
    "805": "Acquisition Function Maximizer: Local Search",
    "806": "Random Search",
    "807": "Acquisition Function Maximizer: Local Search",
    "808": "Acquisition Function Maximizer: Local Search",
    "809": "Acquisition Function Maximizer: Local Search",
    "810": "Acquisition Function Maximizer: Local Search",
    "811": "Acquisition Function Maximizer: Local Search",
    "812": "Acquisition Function Maximizer: Local Search",
    "813": "Acquisition Function Maximizer: Local Search",
    "814": "Acquisition Function Maximizer: Local Search",
    "815": "Acquisition Function Maximizer: Local Search",
    "816": "Acquisition Function Maximizer: Local Search",
    "817": "Acquisition Function Maximizer: Local Search",
    "818": "Acquisition Function Maximizer: Local Search",
    "819": "Acquisition Function Maximizer: Local Search",
    "820": "Random Search",
    "821": "Acquisition Function Maximizer: Local Search",
    "822": "Random Search",
    "823": "Acquisition Function Maximizer: Local Search",
    "824": "Acquisition Function Maximizer: Local Search",
    "825": "Acquisition Function Maximizer: Local Search",
    "826": "Acquisition Function Maximizer: Local Search",
    "827": "Random Search",
    "828": "Acquisition Function Maximizer: Local Search",
    "829": "Random Search",
    "830": "Acquisition Function Maximizer: Local Search",
    "831": "Acquisition Function Maximizer: Local Search",
    "832": "Acquisition Function Maximizer: Local Search",
    "833": "Acquisition Function Maximizer: Local Search",
    "834": "Acquisition Function Maximizer: Local Search",
    "835": "Random Search",
    "836": "Acquisition Function Maximizer: Local Search",
    "837": "Random Search",
    "838": "Acquisition Function Maximizer: Local Search",
    "839": "Acquisition Function Maximizer: Local Search",
    "840": "Acquisition Function Maximizer: Local Search",
    "841": "Acquisition Function Maximizer: Local Search",
    "842": "Acquisition Function Maximizer: Local Search",
    "843": "Random Search",
    "844": "Acquisition Function Maximizer: Local Search",
    "845": "Acquisition Function Maximizer: Local Search",
    "846": "Acquisition Function Maximizer: Local Search",
    "847": "Random Search",
    "848": "Random Search",
    "849": "Acquisition Function Maximizer: Local Search",
    "850": "Acquisition Function Maximizer: Local Search",
    "851": "Acquisition Function Maximizer: Local Search",
    "852": "Acquisition Function Maximizer: Local Search",
    "853": "Acquisition Function Maximizer: Local Search",
    "854": "Acquisition Function Maximizer: Local Search",
    "855": "Acquisition Function Maximizer: Local Search",
    "856": "Acquisition Function Maximizer: Local Search",
    "857": "Acquisition Function Maximizer: Local Search",
    "858": "Random Search",
    "859": "Acquisition Function Maximizer: Local Search",
    "860": "Acquisition Function Maximizer: Local Search",
    "861": "Acquisition Function Maximizer: Local Search",
    "862": "Random Search",
    "863": "Acquisition Function Maximizer: Local Search",
    "864": "Random Search",
    "865": "Acquisition Function Maximizer: Local Search",
    "866": "Acquisition Function Maximizer: Local Search",
    "867": "Acquisition Function Maximizer: Local Search",
    "868": "Acquisition Function Maximizer: Local Search",
    "869": "Acquisition Function Maximizer: Local Search",
    "870": "Acquisition Function Maximizer: Local Search",
    "871": "Acquisition Function Maximizer: Local Search",
    "872": "Random Search",
    "873": "Acquisition Function Maximizer: Local Search",
    "874": "Acquisition Function Maximizer: Local Search",
    "875": "Acquisition Function Maximizer: Local Search",
    "876": "Acquisition Function Maximizer: Local Search",
    "877": "Random Search",
    "878": "Acquisition Function Maximizer: Local Search",
    "879": "Acquisition Function Maximizer: Local Search",
    "880": "Acquisition Function Maximizer: Local Search",
    "881": "Acquisition Function Maximizer: Local Search",
    "882": "Acquisition Function Maximizer: Local Search",
    "883": "Acquisition Function Maximizer: Local Search",
    "884": "Acquisition Function Maximizer: Local Search",
    "885": "Acquisition Function Maximizer: Local Search",
    "886": "Acquisition Function Maximizer: Local Search",
    "887": "Acquisition Function Maximizer: Local Search",
    "888": "Acquisition Function Maximizer: Local Search",
    "889": "Acquisition Function Maximizer: Local Search",
    "890": "Acquisition Function Maximizer: Local Search",
    "891": "Acquisition Function Maximizer: Local Search",
    "892": "Acquisition Function Maximizer: Local Search",
    "893": "Acquisition Function Maximizer: Local Search",
    "894": "Random Search",
    "895": "Acquisition Function Maximizer: Local Search",
    "896": "Acquisition Function Maximizer: Local Search",
    "897": "Acquisition Function Maximizer: Local Search",
    "898": "Acquisition Function Maximizer: Local Search",
    "899": "Acquisition Function Maximizer: Local Search",
    "900": "Acquisition Function Maximizer: Local Search",
    "901": "Acquisition Function Maximizer: Local Search",
    "902": "Acquisition Function Maximizer: Local Search",
    "903": "Acquisition Function Maximizer: Local Search",
    "904": "Acquisition Function Maximizer: Local Search",
    "905": "Acquisition Function Maximizer: Local Search",
    "906": "Acquisition Function Maximizer: Local Search",
    "907": "Acquisition Function Maximizer: Local Search",
    "908": "Acquisition Function Maximizer: Local Search",
    "909": "Random Search",
    "910": "Acquisition Function Maximizer: Local Search",
    "911": "Acquisition Function Maximizer: Local Search",
    "912": "Random Search",
    "913": "Acquisition Function Maximizer: Local Search",
    "914": "Random Search",
    "915": "Random Search",
    "916": "Acquisition Function Maximizer: Local Search",
    "917": "Random Search",
    "918": "Acquisition Function Maximizer: Local Search",
    "919": "Random Search",
    "920": "Acquisition Function Maximizer: Local Search",
    "921": "Acquisition Function Maximizer: Local Search",
    "922": "Acquisition Function Maximizer: Local Search",
    "923": "Acquisition Function Maximizer: Local Search",
    "924": "Acquisition Function Maximizer: Local Search",
    "925": "Acquisition Function Maximizer: Local Search",
    "926": "Acquisition Function Maximizer: Local Search",
    "927": "Acquisition Function Maximizer: Local Search",
    "928": "Acquisition Function Maximizer: Local Search",
    "929": "Acquisition Function Maximizer: Local Search",
    "930": "Acquisition Function Maximizer: Local Search",
    "931": "Acquisition Function Maximizer: Local Search",
    "932": "Acquisition Function Maximizer: Local Search",
    "933": "Random Search",
    "934": "Acquisition Function Maximizer: Local Search",
    "935": "Acquisition Function Maximizer: Local Search",
    "936": "Acquisition Function Maximizer: Local Search",
    "937": "Random Search",
    "938": "Acquisition Function Maximizer: Local Search",
    "939": "Random Search",
    "940": "Acquisition Function Maximizer: Local Search",
    "941": "Acquisition Function Maximizer: Local Search",
    "942": "Acquisition Function Maximizer: Local Search",
    "943": "Random Search",
    "944": "Acquisition Function Maximizer: Local Search",
    "945": "Acquisition Function Maximizer: Local Search",
    "946": "Random Search",
    "947": "Acquisition Function Maximizer: Local Search",
    "948": "Random Search",
    "949": "Acquisition Function Maximizer: Local Search",
    "950": "Acquisition Function Maximizer: Local Search",
    "951": "Acquisition Function Maximizer: Local Search",
    "952": "Acquisition Function Maximizer: Local Search",
    "953": "Acquisition Function Maximizer: Local Search",
    "954": "Acquisition Function Maximizer: Local Search",
    "955": "Acquisition Function Maximizer: Local Search",
    "956": "Acquisition Function Maximizer: Local Search",
    "957": "Acquisition Function Maximizer: Local Search",
    "958": "Random Search",
    "959": "Acquisition Function Maximizer: Local Search",
    "960": "Random Search",
    "961": "Acquisition Function Maximizer: Local Search",
    "962": "Acquisition Function Maximizer: Local Search",
    "963": "Acquisition Function Maximizer: Local Search",
    "964": "Acquisition Function Maximizer: Local Search"
  }
}