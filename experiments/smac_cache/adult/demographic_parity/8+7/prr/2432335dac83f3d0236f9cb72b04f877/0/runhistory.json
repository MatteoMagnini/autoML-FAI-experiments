{
  "stats": {
    "submitted": 1664,
    "finished": 1664,
    "running": 0
  },
  "data": [
    [
      1,
      null,
      209652396,
      null,
      [
        0.23285543824465985,
        0.022729554772377016
      ],
      196.49516129493713,
      1,
      1743844557.6655593,
      1743844754.1635315,
      {}
    ],
    [
      2,
      null,
      209652396,
      null,
      [
        0.21958795978257056,
        0.015856373459100723
      ],
      98.14518117904663,
      1,
      1743844754.170757,
      1743844852.3181493,
      {}
    ],
    [
      3,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015537011921405794
      ],
      120.42525506019592,
      1,
      1743844852.3258803,
      1743844972.7537556,
      {}
    ],
    [
      4,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743844972.7625935,
      1743844991.9649472,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      5,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743844992.0003145,
      1743844992.2117808,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      6,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743844993.0933232,
      1743844993.2942395,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      7,
      null,
      209652396,
      null,
      [
        0.19781342625654003,
        0.03475473001599312
      ],
      143.57929730415344,
      1,
      1743844993.3043582,
      1743845136.8862927,
      {}
    ],
    [
      8,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010697834193706512
      ],
      105.85353541374207,
      1,
      1743845136.8946974,
      1743845242.7501776,
      {}
    ],
    [
      9,
      null,
      209652396,
      null,
      [
        0.23638695015940528,
        0.028477711379528044
      ],
      95.10613965988159,
      1,
      1743845242.7612069,
      1743845337.8697004,
      {}
    ],
    [
      10,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743845337.8852344,
      1743845409.35509,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      11,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0037122520804405207
      ],
      93.14765667915344,
      1,
      1743845409.367076,
      1743845502.516874,
      {}
    ],
    [
      12,
      null,
      209652396,
      null,
      [
        0.23718590035955306,
        0.02012640312314034
      ],
      443.61646246910095,
      1,
      1743845502.5283136,
      1743845946.147445,
      {}
    ],
    [
      13,
      null,
      209652396,
      null,
      [
        0.21009844325712593,
        0.026374775022268298
      ],
      116.75989842414856,
      1,
      1743845946.1586478,
      1743846062.920683,
      {}
    ],
    [
      14,
      null,
      209652396,
      null,
      [
        0.1495961158386308,
        0.09563277527689934
      ],
      235.48291969299316,
      1,
      1743846063.7552986,
      1743846299.2402298,
      {}
    ],
    [
      15,
      null,
      209652396,
      null,
      [
        0.20183661216595347,
        0.03001113682985306
      ],
      117.6010148525238,
      1,
      1743846299.253145,
      1743846416.85637,
      {}
    ],
    [
      16,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743846416.8706124,
      1743846459.986286,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      17,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743846459.9996498,
      1743846460.1378877,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      18,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743846460.1504018,
      1743846460.4125059,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      19,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743846460.4246125,
      1743846929.3570833,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      20,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743846929.417678,
      1743846942.1602142,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      21,
      null,
      209652396,
      null,
      [
        0.23758471056375247,
        0.0192719916254282
      ],
      88.18178868293762,
      1,
      1743846942.1776235,
      1743847030.3613842,
      {}
    ],
    [
      22,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743847030.3829184,
      1743847030.74177,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      23,
      null,
      209652396,
      null,
      [
        0.2137831358639742,
        0.02997093617916107
      ],
      123.33547902107239,
      1,
      1743847031.6518402,
      1743847154.9891396,
      {}
    ],
    [
      24,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.014715249836444854
      ],
      89.42350339889526,
      1,
      1743847155.0159347,
      1743847244.4417288,
      {}
    ],
    [
      25,
      null,
      209652396,
      null,
      [
        0.14984178779088958,
        0.09789860948920251
      ],
      103.02818298339844,
      1,
      1743847244.459903,
      1743847347.490418,
      {}
    ],
    [
      26,
      null,
      209652396,
      null,
      [
        0.19486500916141633,
        0.036503542065620426
      ],
      121.22366166114807,
      1,
      1743847347.505261,
      1743847468.731287,
      {}
    ],
    [
      27,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743847468.7523534,
      1743847470.4309645,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      28,
      null,
      209652396,
      null,
      [
        0.2146125109448463,
        0.029648362398147582
      ],
      211.2710554599762,
      1,
      1743847470.4496207,
      1743847681.723191,
      {}
    ],
    [
      29,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743847681.739482,
      1743847684.2784932,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      30,
      null,
      209652396,
      null,
      [
        0.2026658552107654,
        0.03192433193325996
      ],
      106.91831970214844,
      1,
      1743847684.3009367,
      1743847791.2211704,
      {}
    ],
    [
      31,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743847792.1777234,
      1743847792.320077,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      32,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743847792.3364253,
      1743847792.5531576,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      33,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0003232759237289429
      ],
      133.22557997703552,
      1,
      1743847792.5729277,
      1743847925.8008733,
      {}
    ],
    [
      34,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.01973947688937187
      ],
      163.76212430000305,
      1,
      1743847925.818454,
      1743848089.5829391,
      {}
    ],
    [
      35,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743848089.6017237,
      1743848127.1357343,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      36,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743848127.1897976,
      1743848130.2109745,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      37,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743848130.2286415,
      1743848130.377996,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      38,
      null,
      209652396,
      null,
      [
        0.2039250784011263,
        0.029521846175193787
      ],
      160.4292392730713,
      1,
      1743848131.404144,
      1743848291.8351974,
      {}
    ],
    [
      39,
      null,
      209652396,
      null,
      [
        0.2388440657901736,
        0.021808125823736188
      ],
      278.2845342159271,
      1,
      1743848291.8546584,
      1743848570.1413257,
      {}
    ],
    [
      40,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011839181184768677
      ],
      351.75810408592224,
      1,
      1743848570.1756015,
      1743848921.935803,
      {}
    ],
    [
      41,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743848921.9546628,
      1743848932.370943,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      42,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010319928377866746
      ],
      102.5437433719635,
      1,
      1743848932.3908517,
      1743849034.9366815,
      {}
    ],
    [
      43,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743849034.9573526,
      1743849035.0872924,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      44,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743849035.1064456,
      1743849036.3647802,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      45,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743849036.3829482,
      1743849036.6171522,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      46,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743849037.7118118,
      1743849039.8517618,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      47,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743849039.871621,
      1743849040.075478,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      48,
      null,
      209652396,
      null,
      [
        0.19538710803680864,
        0.03452210143208504
      ],
      126.3078920841217,
      1,
      1743849040.095233,
      1743849166.405052,
      {}
    ],
    [
      49,
      null,
      209652396,
      null,
      [
        0.2042013968660675,
        0.03125192508101463
      ],
      114.62629723548889,
      1,
      1743849166.4269373,
      1743849281.0552087,
      {}
    ],
    [
      50,
      null,
      209652396,
      null,
      [
        0.23285533450204107,
        0.02271345615386963
      ],
      116.93687582015991,
      1,
      1743849281.0757542,
      1743849398.0144405,
      {}
    ],
    [
      51,
      null,
      209652396,
      null,
      [
        0.17705220818993275,
        0.04938586860895157
      ],
      100.29530453681946,
      1,
      1743849398.0353725,
      1743849498.3375502,
      {}
    ],
    [
      52,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743849498.3612278,
      1743849673.2833989,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      53,
      null,
      209652396,
      null,
      [
        0.1771136143890635,
        0.048741755485534666
      ],
      119.96409821510315,
      1,
      1743849673.3077056,
      1743849793.2739081,
      {}
    ],
    [
      54,
      null,
      209652396,
      null,
      [
        0.19544834447529055,
        0.03765958338975907
      ],
      102.84418511390686,
      1,
      1743849794.661241,
      1743849897.5075119,
      {}
    ],
    [
      55,
      null,
      209652396,
      null,
      [
        0.21190976108640774,
        0.02717154175043106
      ],
      130.0834448337555,
      1,
      1743849897.5391943,
      1743850027.6252763,
      {}
    ],
    [
      56,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743850027.6505044,
      1743850027.896578,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      57,
      null,
      209652396,
      null,
      [
        0.16535120083024274,
        0.06140689462423325
      ],
      114.94401836395264,
      1,
      1743850027.921067,
      1743850142.8671036,
      {}
    ],
    [
      58,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.014278895258903504
      ],
      252.70693278312683,
      1,
      1743850142.9110649,
      1743850395.620359,
      {}
    ],
    [
      59,
      null,
      209652396,
      null,
      [
        0.18973626174224975,
        0.042447174787521365
      ],
      131.66755986213684,
      1,
      1743850395.646872,
      1743850527.3164911,
      {}
    ],
    [
      60,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743850527.3433633,
      1743850629.4393804,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      61,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743850629.4865284,
      1743850629.9174018,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      62,
      null,
      209652396,
      null,
      [
        0.19839709637613828,
        0.036463221609592436
      ],
      99.03681707382202,
      1,
      1743850631.1969192,
      1743850730.2357013,
      {}
    ],
    [
      63,
      null,
      209652396,
      null,
      [
        0.15137751335356125,
        0.08896352916955949
      ],
      236.79476714134216,
      1,
      1743850730.271745,
      1743850967.0691738,
      {}
    ],
    [
      64,
      null,
      209652396,
      null,
      [
        0.2203863299671683,
        0.026429904252290727
      ],
      119.1162178516388,
      1,
      1743850967.0979683,
      1743851086.2162635,
      {}
    ],
    [
      65,
      null,
      209652396,
      null,
      [
        0.18258013362803782,
        0.04225050032138824
      ],
      221.46389245986938,
      1,
      1743851086.2430913,
      1743851307.709044,
      {}
    ],
    [
      66,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743851307.7377656,
      1743851307.9447978,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      67,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743851307.9717138,
      1743851308.1600938,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      68,
      null,
      209652396,
      null,
      [
        0.1966769117218219,
        0.03873747244477272
      ],
      121.19627118110657,
      1,
      1743851308.191228,
      1743851429.3892891,
      {}
    ],
    [
      69,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743851429.4170587,
      1743851429.6663444,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      70,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743851429.7087033,
      1743851429.8942895,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      71,
      null,
      209652396,
      null,
      [
        0.18221188977177,
        0.04520119339227676
      ],
      97.27551579475403,
      1,
      1743851431.1976588,
      1743851528.4749794,
      {}
    ],
    [
      72,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00478495478630066
      ],
      242.7459499835968,
      1,
      1743851528.5134032,
      1743851771.261844,
      {}
    ],
    [
      73,
      null,
      209652396,
      null,
      [
        0.19336023190813612,
        0.04030856356024742
      ],
      93.48528146743774,
      1,
      1743851771.2922063,
      1743851864.7794845,
      {}
    ],
    [
      74,
      null,
      209652396,
      null,
      [
        0.20718030957551914,
        0.030311489850282668
      ],
      112.75989770889282,
      1,
      1743851864.8368063,
      1743851977.5991206,
      {}
    ],
    [
      75,
      null,
      209652396,
      null,
      [
        0.19022762450906164,
        0.04114277482032776
      ],
      120.63842511177063,
      1,
      1743851977.636231,
      1743852098.2769608,
      {}
    ],
    [
      76,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0068636548519134515
      ],
      110.43062829971313,
      1,
      1743852098.3154538,
      1743852208.7484117,
      {}
    ],
    [
      77,
      null,
      209652396,
      null,
      [
        0.21670114222509432,
        0.02799254342913628
      ],
      135.66918683052063,
      1,
      1743852208.7854593,
      1743852344.457056,
      {}
    ],
    [
      78,
      null,
      209652396,
      null,
      [
        0.23098166264333927,
        0.024057218581438063
      ],
      140.8322629928589,
      1,
      1743852345.9096143,
      1743852486.7438872,
      {}
    ],
    [
      79,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743852486.7884169,
      1743852487.0146441,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      80,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743852487.044527,
      1743852487.2589676,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      81,
      null,
      209652396,
      null,
      [
        0.20417088710501882,
        0.03486210405826569
      ],
      94.18856167793274,
      1,
      1743852487.2904205,
      1743852581.480827,
      {}
    ],
    [
      82,
      null,
      209652396,
      null,
      [
        0.22253653249162234,
        0.02772003278136253
      ],
      104.84492444992065,
      1,
      1743852581.5260766,
      1743852686.3734982,
      {}
    ],
    [
      83,
      null,
      209652396,
      null,
      [
        0.23353075082116997,
        0.02003079056739807
      ],
      96.20168733596802,
      1,
      1743852686.4141083,
      1743852782.6182516,
      {}
    ],
    [
      84,
      null,
      209652396,
      null,
      [
        0.18522159989225856,
        0.04525977313518524
      ],
      241.71857810020447,
      1,
      1743852782.6577015,
      1743853024.3787699,
      {}
    ],
    [
      85,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743853024.4111753,
      1743853024.6180193,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      86,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743853026.3124788,
      1743853035.4938836,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      87,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743853035.5276575,
      1743853104.4764519,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      88,
      null,
      209652396,
      null,
      [
        0.16424559688032742,
        0.06507186695933342
      ],
      114.2765281200409,
      1,
      1743853104.511146,
      1743853218.789713,
      {}
    ],
    [
      89,
      null,
      209652396,
      null,
      [
        0.20352578720842196,
        0.029757225066423414
      ],
      244.09646940231323,
      1,
      1743853218.823159,
      1743853462.9214807,
      {}
    ],
    [
      90,
      null,
      209652396,
      null,
      [
        0.20235743783647972,
        0.028764249235391615
      ],
      105.14011740684509,
      1,
      1743853462.9566684,
      1743853568.0988278,
      {}
    ],
    [
      91,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743853568.142292,
      1743853571.8953533,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      92,
      null,
      209652396,
      null,
      [
        0.21504329745347714,
        0.03150713115930557
      ],
      151.98737931251526,
      1,
      1743853571.9307208,
      1743853723.920253,
      {}
    ],
    [
      93,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743853723.953924,
      1743853724.1602213,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      94,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.01925383061170578
      ],
      204.49046349525452,
      1,
      1743853725.720426,
      1743853930.2128546,
      {}
    ],
    [
      95,
      null,
      209652396,
      null,
      [
        0.1603144683983007,
        0.0702462586760521
      ],
      104.74887657165527,
      1,
      1743853930.2478895,
      1743854034.9988427,
      {}
    ],
    [
      96,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743854035.0349383,
      1743854075.0175028,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      97,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743854075.0708017,
      1743854079.2181592,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      98,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743854079.2829432,
      1743854208.4165053,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      99,
      null,
      209652396,
      null,
      [
        0.18362436438783744,
        0.04716934651136398
      ],
      140.13581824302673,
      1,
      1743854208.4530184,
      1743854348.5908792,
      {}
    ],
    [
      100,
      null,
      209652396,
      null,
      [
        0.23479001173611952,
        0.022395318001508714
      ],
      168.1251220703125,
      1,
      1743854348.6257963,
      1743854516.7528672,
      {}
    ],
    [
      101,
      null,
      209652396,
      null,
      [
        0.184515249410459,
        0.04170042470097542
      ],
      465.3834581375122,
      1,
      1743854516.7905557,
      1743854982.176074,
      {}
    ],
    [
      102,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743854984.0384128,
      1743855005.418928,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      103,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743855005.4572914,
      1743855029.1911683,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      104,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743855029.2280712,
      1743855082.7286453,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      105,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743855082.828688,
      1743855083.0192757,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      106,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00868282526731491
      ],
      75.46219158172607,
      1,
      1743855083.0754032,
      1743855158.539326,
      {}
    ],
    [
      107,
      null,
      209652396,
      null,
      [
        0.1874019868031844,
        0.0381485615670681
      ],
      150.4415431022644,
      1,
      1743855158.575224,
      1743855309.0187316,
      {}
    ],
    [
      108,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743855309.0617492,
      1743855330.6131065,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      109,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743855330.6519587,
      1743855330.886893,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      110,
      null,
      209652396,
      null,
      [
        0.1505174351731238,
        0.0928543235361576
      ],
      436.4783368110657,
      1,
      1743855332.8481193,
      1743855769.3285606,
      {}
    ],
    [
      111,
      null,
      209652396,
      null,
      [
        0.21995633567489853,
        0.02807580903172493
      ],
      109.58811330795288,
      1,
      1743855769.38208,
      1743855878.9722145,
      {}
    ],
    [
      112,
      null,
      209652396,
      null,
      [
        0.19050400427645936,
        0.03848033249378205
      ],
      232.24076533317566,
      1,
      1743855879.019492,
      1743856111.262616,
      {}
    ],
    [
      113,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743856111.30712,
      1743856111.441186,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      114,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743856111.4782412,
      1743856287.0263464,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      115,
      null,
      209652396,
      null,
      [
        0.19170164207589357,
        0.040866383612155915
      ],
      142.32013869285583,
      1,
      1743856287.0686636,
      1743856429.39096,
      {}
    ],
    [
      116,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743856429.4341218,
      1743856542.6650045,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      117,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743856542.7195458,
      1743856543.0058184,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      118,
      null,
      209652396,
      null,
      [
        0.24010313808218,
        0.012452726066112519
      ],
      125.22651815414429,
      1,
      1743856544.844979,
      1743856670.0733833,
      {}
    ],
    [
      119,
      null,
      209652396,
      null,
      [
        0.1677467452168051,
        0.061591175943613054
      ],
      129.13177704811096,
      1,
      1743856670.11454,
      1743856799.2483816,
      {}
    ],
    [
      120,
      null,
      209652396,
      null,
      [
        0.23279381041357086,
        0.025061282366514205
      ],
      98.03586483001709,
      1,
      1743856799.3124936,
      1743856897.3504097,
      {}
    ],
    [
      121,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0009684419631958007
      ],
      127.41367721557617,
      1,
      1743856897.401252,
      1743857024.817256,
      {}
    ],
    [
      122,
      null,
      209652396,
      null,
      [
        0.17542455723593448,
        0.04673881337046623
      ],
      294.38003373146057,
      1,
      1743857024.8567398,
      1743857319.238632,
      {}
    ],
    [
      123,
      null,
      209652396,
      null,
      [
        0.18810871453087022,
        0.04225204199552536
      ],
      90.42431831359863,
      1,
      1743857319.2848814,
      1743857409.7112892,
      {}
    ],
    [
      124,
      null,
      209652396,
      null,
      [
        0.15358865051978823,
        0.09027712270617486
      ],
      196.6099030971527,
      1,
      1743857409.7850373,
      1743857606.3975267,
      {}
    ],
    [
      125,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743857606.4391377,
      1743857624.1576092,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      126,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.025353986024856567
      ],
      110.06739330291748,
      1,
      1743857626.3689399,
      1743857736.4385676,
      {}
    ],
    [
      127,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743857736.4919024,
      1743857745.8020241,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      128,
      null,
      209652396,
      null,
      [
        0.2090235942780853,
        0.03122928336262703
      ],
      95.61247420310974,
      1,
      1743857745.845199,
      1743857841.4596603,
      {}
    ],
    [
      129,
      null,
      209652396,
      null,
      [
        0.153066495057513,
        0.08230608120560647
      ],
      91.43290495872498,
      1,
      1743857841.5147376,
      1743857932.9500778,
      {}
    ],
    [
      130,
      null,
      209652396,
      null,
      [
        0.21381413132910138,
        0.02750266805291176
      ],
      91.54644250869751,
      1,
      1743857932.9946573,
      1743858024.5432582,
      {}
    ],
    [
      131,
      null,
      209652396,
      null,
      [
        0.17192334759700031,
        0.05350750714540482
      ],
      91.72115468978882,
      1,
      1743858024.5854702,
      1743858116.308683,
      {}
    ],
    [
      132,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743858116.352674,
      1743858133.829412,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      133,
      null,
      209652396,
      null,
      [
        0.192192886953366,
        0.04011796966195107
      ],
      152.83223366737366,
      1,
      1743858133.8844726,
      1743858286.7191257,
      {}
    ],
    [
      134,
      null,
      209652396,
      null,
      [
        0.18684917539707957,
        0.04069184929132461
      ],
      154.76096272468567,
      1,
      1743858288.6938262,
      1743858443.4567716,
      {}
    ],
    [
      135,
      null,
      209652396,
      null,
      [
        0.20189806080524644,
        0.035167835354804985
      ],
      102.95946311950684,
      1,
      1743858443.5024996,
      1743858546.464022,
      {}
    ],
    [
      136,
      null,
      209652396,
      null,
      [
        0.15438718103388763,
        0.08071528777480126
      ],
      142.92872858047485,
      1,
      1743858546.5245984,
      1743858689.455877,
      {}
    ],
    [
      137,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743858689.509185,
      1743858689.6533227,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      138,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743858689.6961026,
      1743858827.0360296,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      139,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743858827.0903044,
      1743858878.3315487,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      140,
      null,
      209652396,
      null,
      [
        0.19329877383769598,
        0.03885664746165276
      ],
      128.9954526424408,
      1,
      1743858878.378292,
      1743859007.3758292,
      {}
    ],
    [
      141,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743859007.4457457,
      1743859007.734637,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      142,
      null,
      209652396,
      null,
      [
        0.19228525560860893,
        0.04030894741415978
      ],
      96.90937376022339,
      1,
      1743859009.9487734,
      1743859106.8601563,
      {}
    ],
    [
      143,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        8.677899837493896e-05
      ],
      137.48630285263062,
      1,
      1743859106.9224257,
      1743859244.411189,
      {}
    ],
    [
      144,
      null,
      209652396,
      null,
      [
        0.1940051148883484,
        0.029460177868604664
      ],
      115.97553300857544,
      1,
      1743859244.4578352,
      1743859360.4354181,
      {}
    ],
    [
      145,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743859360.4830194,
      1743859360.6180232,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      146,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743859360.6632695,
      1743859360.8664544,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      147,
      null,
      209652396,
      null,
      [
        0.20896165993471386,
        0.02915839537978172
      ],
      87.30043005943298,
      1,
      1743859360.913655,
      1743859448.2159047,
      {}
    ],
    [
      148,
      null,
      209652396,
      null,
      [
        0.20254315127069616,
        0.03351426228880883
      ],
      189.35269141197205,
      1,
      1743859448.264887,
      1743859637.6194627,
      {}
    ],
    [
      149,
      null,
      209652396,
      null,
      [
        0.16366186545827266,
        0.06472992643713951
      ],
      279.9049291610718,
      1,
      1743859637.6677778,
      1743859917.574763,
      {}
    ],
    [
      150,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743859919.6848679,
      1743859997.7155106,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      151,
      null,
      209652396,
      null,
      [
        0.15607628062717882,
        0.0816637958586216
      ],
      192.87852931022644,
      1,
      1743859997.7783473,
      1743860190.6589718,
      {}
    ],
    [
      152,
      null,
      209652396,
      null,
      [
        0.19461942680505553,
        0.032908586263656614
      ],
      105.12791728973389,
      1,
      1743860190.7114573,
      1743860295.8414514,
      {}
    ],
    [
      153,
      null,
      209652396,
      null,
      [
        0.20401703208589436,
        0.03413222745060921
      ],
      101.58631610870361,
      1,
      1743860295.9037328,
      1743860397.492383,
      {}
    ],
    [
      154,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743860397.6157742,
      1743860584.848538,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      155,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743860584.8979316,
      1743860585.151556,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      156,
      null,
      209652396,
      null,
      [
        0.2029730842605094,
        0.035009156614542
      ],
      94.51793551445007,
      1,
      1743860585.200016,
      1743860679.7197719,
      {}
    ],
    [
      157,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004457796514034272
      ],
      101.61088466644287,
      1,
      1743860679.7835927,
      1743860781.3969357,
      {}
    ],
    [
      158,
      null,
      209652396,
      null,
      [
        0.20192874975809105,
        0.035835415869951245
      ],
      83.14542937278748,
      1,
      1743860781.5084903,
      1743860864.6563776,
      {}
    ],
    [
      159,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743860867.2421696,
      1743860868.1145759,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      160,
      null,
      209652396,
      null,
      [
        0.18605062130511232,
        0.0422187952697277
      ],
      135.3293764591217,
      1,
      1743860868.1771173,
      1743861003.508714,
      {}
    ],
    [
      161,
      null,
      209652396,
      null,
      [
        0.2361721180583456,
        0.02282644838094711
      ],
      405.6817934513092,
      1,
      1743861003.5579522,
      1743861409.2416563,
      {}
    ],
    [
      162,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743861409.2913504,
      1743861601.5326703,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      163,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743861601.5834527,
      1743861608.7692907,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      164,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743861608.8187885,
      1743861632.0932515,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      165,
      null,
      209652396,
      null,
      [
        0.2388746368536788,
        0.024006785452365877
      ],
      130.23613500595093,
      1,
      1743861632.1695738,
      1743861762.4081676,
      {}
    ],
    [
      166,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743861764.9374843,
      1743861768.5289843,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      167,
      null,
      209652396,
      null,
      [
        0.22615999337556225,
        0.024162621051073075
      ],
      136.64475893974304,
      1,
      1743861768.5811174,
      1743861905.2280095,
      {}
    ],
    [
      168,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743861905.2783833,
      1743861910.5300584,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      169,
      null,
      209652396,
      null,
      [
        0.19320641932917376,
        0.037713203132152553
      ],
      129.0042245388031,
      1,
      1743861910.5994549,
      1743862039.6058686,
      {}
    ],
    [
      170,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743862039.6636763,
      1743862039.8670845,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      171,
      null,
      209652396,
      null,
      [
        0.21577895522506302,
        0.030522385686635976
      ],
      317.16029238700867,
      1,
      1743862039.9186935,
      1743862357.0808432,
      {}
    ],
    [
      172,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743862357.1626523,
      1743862357.3454602,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      173,
      null,
      209652396,
      null,
      [
        0.19867344313452098,
        0.035155203640460965
      ],
      120.22324872016907,
      1,
      1743862357.398609,
      1743862477.6236293,
      {}
    ],
    [
      174,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743862480.2510178,
      1743862480.5380292,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      175,
      null,
      209652396,
      null,
      [
        0.2011302428218596,
        0.034893731474876406
      ],
      101.41452193260193,
      1,
      1743862480.6202664,
      1743862582.037002,
      {}
    ],
    [
      176,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743862582.105755,
      1743862681.2593617,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      177,
      null,
      209652396,
      null,
      [
        0.1889376840724146,
        0.04448756352066994
      ],
      153.4450342655182,
      1,
      1743862681.313515,
      1743862834.7604659,
      {}
    ],
    [
      178,
      null,
      209652396,
      null,
      [
        0.19044258393060787,
        0.041460567712783815
      ],
      93.49552297592163,
      1,
      1743862834.8492513,
      1743862928.346761,
      {}
    ],
    [
      179,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743862928.4012704,
      1743862962.9154005,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      180,
      null,
      209652396,
      null,
      [
        0.21436739071469607,
        0.03185873799026013
      ],
      100.15778183937073,
      1,
      1743862962.96968,
      1743863063.1295204,
      {}
    ],
    [
      181,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743863063.198952,
      1743863103.714772,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      182,
      null,
      209652396,
      null,
      [
        0.18245757115517597,
        0.04299062818288803
      ],
      335.1417670249939,
      1,
      1743863106.224631,
      1743863441.3684323,
      {}
    ],
    [
      183,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743863441.424653,
      1743863441.641328,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      184,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0008953848481178282
      ],
      136.64949870109558,
      1,
      1743863441.694565,
      1743863578.3458865,
      {}
    ],
    [
      185,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743863578.4009929,
      1743863578.60014,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      186,
      null,
      209652396,
      null,
      [
        0.23991886289790482,
        0.019437416046857833
      ],
      100.32671403884888,
      1,
      1743863578.6537259,
      1743863678.982246,
      {}
    ],
    [
      187,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743863679.0639663,
      1743863704.6870697,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      188,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.02076459467411041
      ],
      93.33161497116089,
      1,
      1743863704.7457798,
      1743863798.0796783,
      {}
    ],
    [
      189,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743863798.1515424,
      1743863885.1972504,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      190,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011808932721614837
      ],
      104.10894632339478,
      1,
      1743863888.0427845,
      1743863992.1536655,
      {}
    ],
    [
      191,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743863992.2305868,
      1743864034.7603838,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      192,
      null,
      209652396,
      null,
      [
        0.15862528864025865,
        0.07128243327140808
      ],
      145.54403066635132,
      1,
      1743864034.827362,
      1743864180.3734753,
      {}
    ],
    [
      193,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743864180.4310472,
      1743864208.7358675,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      194,
      null,
      209652396,
      null,
      [
        0.19197813501705716,
        0.03876273840665817
      ],
      102.22316217422485,
      1,
      1743864208.7917001,
      1743864311.016668,
      {}
    ],
    [
      195,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.009501250982284546
      ],
      116.35873007774353,
      1,
      1743864311.092834,
      1743864427.4539926,
      {}
    ],
    [
      196,
      null,
      209652396,
      null,
      [
        0.23770769743823633,
        0.019885066151618957
      ],
      119.47154307365417,
      1,
      1743864427.531629,
      1743864547.0056388,
      {}
    ],
    [
      197,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743864547.0635436,
      1743864547.43044,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      198,
      null,
      209652396,
      null,
      [
        0.19461919574195025,
        0.036698210835456845
      ],
      179.62188529968262,
      1,
      1743864547.5452821,
      1743864727.1689403,
      {}
    ],
    [
      199,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01892046719789505
      ],
      96.01701855659485,
      1,
      1743864729.8522038,
      1743864825.871255,
      {}
    ],
    [
      200,
      null,
      209652396,
      null,
      [
        0.22935399754262029,
        0.025070739686489107
      ],
      102.62242937088013,
      1,
      1743864825.9470897,
      1743864928.5715122,
      {}
    ],
    [
      201,
      null,
      209652396,
      null,
      [
        0.19793599816054905,
        0.03377498909831047
      ],
      105.95536088943481,
      1,
      1743864928.643081,
      1743865034.600307,
      {}
    ],
    [
      202,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743865034.6589599,
      1743865050.3870196,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      203,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743865050.4466896,
      1743865050.6270845,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      204,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743865050.6844592,
      1743865050.9390855,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      205,
      null,
      209652396,
      null,
      [
        0.2153182719799486,
        0.026320745050907136
      ],
      252.6874167919159,
      1,
      1743865050.9978163,
      1743865303.687039,
      {}
    ],
    [
      206,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743865306.5892074,
      1743865412.6106663,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      207,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743865412.6720734,
      1743865421.2039876,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      208,
      null,
      209652396,
      null,
      [
        0.18820076252710985,
        0.03705645933747291
      ],
      128.95751404762268,
      1,
      1743865421.264388,
      1743865550.2239592,
      {}
    ],
    [
      209,
      null,
      209652396,
      null,
      [
        0.2335001703265176,
        0.01813736200332642
      ],
      91.38694024085999,
      1,
      1743865550.3103867,
      1743865641.6994627,
      {}
    ],
    [
      210,
      null,
      209652396,
      null,
      [
        0.19532598005651897,
        0.033815956562757495
      ],
      110.75053286552429,
      1,
      1743865641.7783923,
      1743865752.5315146,
      {}
    ],
    [
      211,
      null,
      209652396,
      null,
      [
        0.21587164925488275,
        0.029118359088897705
      ],
      173.46627855300903,
      1,
      1743865752.6036022,
      1743865926.0718558,
      {}
    ],
    [
      212,
      null,
      209652396,
      null,
      [
        0.20263522756037727,
        0.030584444850683214
      ],
      133.17222428321838,
      1,
      1743865926.1341925,
      1743866059.3085008,
      {}
    ],
    [
      213,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743866059.382768,
      1743866059.584221,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      214,
      null,
      209652396,
      null,
      [
        0.18724839585618028,
        0.04126723289489746
      ],
      127.81857299804688,
      1,
      1743866062.6999736,
      1743866190.5204308,
      {}
    ],
    [
      215,
      null,
      209652396,
      null,
      [
        0.22726637067954436,
        0.023372947871685028
      ],
      113.91780018806458,
      1,
      1743866190.6247845,
      1743866304.544678,
      {}
    ],
    [
      216,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743866304.6262383,
      1743866408.389044,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      217,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743866408.451892,
      1743866438.0763583,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      218,
      null,
      209652396,
      null,
      [
        0.1557385229540918,
        0.07896282777190208
      ],
      102.99630737304688,
      1,
      1743866438.14094,
      1743866541.1393604,
      {}
    ],
    [
      219,
      null,
      209652396,
      null,
      [
        0.20475301523205713,
        0.032818752080202095
      ],
      127.87121772766113,
      1,
      1743866541.2070787,
      1743866669.0805297,
      {}
    ],
    [
      220,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743866669.145789,
      1743866669.6303394,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      221,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743866669.692726,
      1743866758.9554513,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      222,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.009711813628673554
      ],
      117.95179057121277,
      1,
      1743866762.0301898,
      1743866879.9842217,
      {}
    ],
    [
      223,
      null,
      209652396,
      null,
      [
        0.20340232877658027,
        0.03092922851443291
      ],
      138.92388558387756,
      1,
      1743866880.062373,
      1743867018.9885743,
      {}
    ],
    [
      224,
      null,
      209652396,
      null,
      [
        0.16304784590712734,
        0.06418379858136178
      ],
      118.1651291847229,
      1,
      1743867019.0538075,
      1743867137.2209163,
      {}
    ],
    [
      225,
      null,
      209652396,
      null,
      [
        0.21937237318973848,
        0.02679878488183022
      ],
      142.51918530464172,
      1,
      1743867137.3000154,
      1743867279.8213224,
      {}
    ],
    [
      226,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743867279.8909485,
      1743867378.7069464,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      227,
      null,
      209652396,
      null,
      [
        0.2390281995072414,
        0.01912539288401604
      ],
      100.78201961517334,
      1,
      1743867378.7728536,
      1743867479.5569704,
      {}
    ],
    [
      228,
      null,
      209652396,
      null,
      [
        0.2102207039332788,
        0.02963671877980232
      ],
      110.27804684638977,
      1,
      1743867479.63933,
      1743867589.9197507,
      {}
    ],
    [
      229,
      null,
      209652396,
      null,
      [
        0.19188578522410857,
        0.03873208194971085
      ],
      81.36906290054321,
      1,
      1743867590.0048702,
      1743867671.3764946,
      {}
    ],
    [
      230,
      null,
      209652396,
      null,
      [
        0.23988829183439958,
        0.01475772440433502
      ],
      130.84038043022156,
      1,
      1743867671.5316157,
      1743867802.37397,
      {}
    ],
    [
      231,
      null,
      209652396,
      null,
      [
        0.22173823304062826,
        0.02807212620973587
      ],
      105.7534658908844,
      1,
      1743867805.6241355,
      1743867911.3795984,
      {}
    ],
    [
      232,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743867911.4643774,
      1743868024.2581544,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      233,
      null,
      209652396,
      null,
      [
        0.17514777192920905,
        0.050937976390123374
      ],
      131.64536929130554,
      1,
      1743868024.3227925,
      1743868155.9700632,
      {}
    ],
    [
      234,
      null,
      209652396,
      null,
      [
        0.24077881375785565,
        0.021427457332611085
      ],
      295.1005549430847,
      1,
      1743868156.0435953,
      1743868451.1480167,
      {}
    ],
    [
      235,
      null,
      209652396,
      null,
      [
        0.23979601277505475,
        0.009494965076446532
      ],
      131.61126708984375,
      1,
      1743868451.2166216,
      1743868582.8300734,
      {}
    ],
    [
      236,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743868582.8972292,
      1743868708.2686672,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      237,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743868708.354129,
      1743868713.1670208,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      238,
      null,
      209652396,
      null,
      [
        0.19385160410609512,
        0.034206124693155295
      ],
      175.7737205028534,
      1,
      1743868716.4635456,
      1743868892.2393079,
      {}
    ],
    [
      239,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013172063827514648
      ],
      183.23868894577026,
      1,
      1743868892.3078685,
      1743869075.5485554,
      {}
    ],
    [
      240,
      null,
      209652396,
      null,
      [
        0.19683049323767884,
        0.03740967303514481
      ],
      98.35312509536743,
      1,
      1743869075.6157215,
      1743869173.970873,
      {}
    ],
    [
      241,
      null,
      209652396,
      null,
      [
        0.1801846694062263,
        0.04366591095924378
      ],
      120.40509939193726,
      1,
      1743869174.038728,
      1743869294.4457529,
      {}
    ],
    [
      242,
      null,
      209652396,
      null,
      [
        0.18906029370101224,
        0.04411206752061845
      ],
      450.84782123565674,
      1,
      1743869294.5166702,
      1743869745.3666353,
      {}
    ],
    [
      243,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743869745.4357584,
      1743869750.134577,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      244,
      null,
      209652396,
      null,
      [
        0.2112037359791851,
        0.031156286895275116
      ],
      90.52030634880066,
      1,
      1743869750.2039368,
      1743869840.7262428,
      {}
    ],
    [
      245,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743869840.8170218,
      1743869841.0967069,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      246,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743869844.3534014,
      1743869847.7601516,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      247,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011833643317222597
      ],
      101.28198099136353,
      1,
      1743869847.8333042,
      1743869949.11734,
      {}
    ],
    [
      248,
      null,
      209652396,
      null,
      [
        0.22146129211997473,
        0.02541907727718353
      ],
      137.02971148490906,
      1,
      1743869949.2076757,
      1743870086.2397394,
      {}
    ],
    [
      249,
      null,
      209652396,
      null,
      [
        0.18678793895859763,
        0.04226607486605644
      ],
      89.1612753868103,
      1,
      1743870086.3087711,
      1743870175.4718697,
      {}
    ],
    [
      250,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743870175.5664828,
      1743870189.5649033,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      251,
      null,
      209652396,
      null,
      [
        0.19409754013047426,
        0.04090077310800552
      ],
      101.9608998298645,
      1,
      1743870189.6388,
      1743870291.6018417,
      {}
    ],
    [
      252,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743870291.6713798,
      1743870307.5543635,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      253,
      null,
      209652396,
      null,
      [
        0.17127828070941845,
        0.052695591896772385
      ],
      101.82552742958069,
      1,
      1743870307.6448889,
      1743870409.472962,
      {}
    ],
    [
      254,
      null,
      209652396,
      null,
      [
        0.20810159590099714,
        0.031026195138692852
      ],
      120.10705637931824,
      1,
      1743870409.6225858,
      1743870529.7316272,
      {}
    ],
    [
      255,
      null,
      209652396,
      null,
      [
        0.14901269092885858,
        0.09893425688147543
      ],
      106.23793649673462,
      1,
      1743870533.2405841,
      1743870639.4805696,
      {}
    ],
    [
      256,
      null,
      209652396,
      null,
      [
        0.18350178305268125,
        0.047375879287719726
      ],
      164.41960048675537,
      1,
      1743870639.570048,
      1743870803.9916322,
      {}
    ],
    [
      257,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743870804.0616393,
      1743870910.1169202,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      258,
      null,
      209652396,
      null,
      [
        0.19716857156976914,
        0.040275678634643555
      ],
      98.06858944892883,
      1,
      1743870910.1969392,
      1743871008.2675042,
      {}
    ],
    [
      259,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        1.9073486328124997e-08
      ],
      264.95213770866394,
      1,
      1743871008.363702,
      1743871273.3187304,
      {}
    ],
    [
      260,
      null,
      209652396,
      null,
      [
        0.22192131990036185,
        0.03294412240386009
      ],
      101.1751618385315,
      1,
      1743871273.3933434,
      1743871374.5707347,
      {}
    ],
    [
      261,
      null,
      209652396,
      null,
      [
        0.1936366163911074,
        0.03734666675329208
      ],
      130.19079780578613,
      1,
      1743871374.6663148,
      1743871504.859672,
      {}
    ],
    [
      262,
      null,
      209652396,
      null,
      [
        0.21117193415097607,
        0.026854423731565474
      ],
      165.83816647529602,
      1,
      1743871508.425148,
      1743871674.2654595,
      {}
    ],
    [
      263,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743871674.3399239,
      1743871682.4248314,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      264,
      null,
      209652396,
      null,
      [
        0.19446563308838757,
        0.04014198333024978
      ],
      91.79279899597168,
      1,
      1743871682.4996116,
      1743871774.2944477,
      {}
    ],
    [
      265,
      null,
      209652396,
      null,
      [
        0.20097678391091564,
        0.032366788238286974
      ],
      110.33508729934692,
      1,
      1743871774.390173,
      1743871884.7277536,
      {}
    ],
    [
      266,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743871884.8085754,
      1743871928.8306139,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      267,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.018197572529315947
      ],
      221.0137414932251,
      1,
      1743871928.9057996,
      1743872149.9215689,
      {}
    ],
    [
      268,
      null,
      209652396,
      null,
      [
        0.18589719068760985,
        0.04444409966468811
      ],
      114.64552140235901,
      1,
      1743872149.9968917,
      1743872264.6443782,
      {}
    ],
    [
      269,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0014426940679550173
      ],
      170.46823382377625,
      1,
      1743872264.7201083,
      1743872435.1903312,
      {}
    ],
    [
      270,
      null,
      209652396,
      null,
      [
        0.23743138840444228,
        0.021099849641323092
      ],
      132.07762789726257,
      1,
      1743872439.0234199,
      1743872571.1030376,
      {}
    ],
    [
      271,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743872571.177361,
      1743873054.8992581,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      272,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743873054.977802,
      1743873116.2260373,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      273,
      null,
      209652396,
      null,
      [
        0.16234148127860704,
        0.06856582432985306
      ],
      94.78959918022156,
      1,
      1743873116.3103285,
      1743873211.1028128,
      {}
    ],
    [
      274,
      null,
      209652396,
      null,
      [
        0.1893061637073613,
        0.0418012198805809
      ],
      94.78421974182129,
      1,
      1743873211.1923335,
      1743873305.9786513,
      {}
    ],
    [
      275,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743873306.0767837,
      1743873350.4269974,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      276,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743873350.531787,
      1743873500.6465652,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      277,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011617980301380157
      ],
      119.77355980873108,
      1,
      1743873500.7227538,
      1743873620.4983346,
      {}
    ],
    [
      278,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743873624.2030811,
      1743873639.9021437,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      279,
      null,
      209652396,
      null,
      [
        0.1843925171769483,
        0.04527761861681938
      ],
      131.1790111064911,
      1,
      1743873639.979834,
      1743873771.1608682,
      {}
    ],
    [
      280,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743873771.2392795,
      1743873789.6935947,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      281,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743873789.7711816,
      1743873794.404499,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      282,
      null,
      209652396,
      null,
      [
        0.163999854194465,
        0.06683065950870512
      ],
      376.6688492298126,
      1,
      1743873794.4817991,
      1743874171.152501,
      {}
    ],
    [
      283,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743874171.2338493,
      1743874190.9840364,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      284,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.012054293006658553
      ],
      122.38419938087463,
      1,
      1743874191.063212,
      1743874313.4495187,
      {}
    ],
    [
      285,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743874313.5509543,
      1743874321.0325599,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      286,
      null,
      209652396,
      null,
      [
        0.20171394123489933,
        0.035551517456769946
      ],
      163.33330154418945,
      1,
      1743874325.1925666,
      1743874488.5280752,
      {}
    ],
    [
      287,
      null,
      209652396,
      null,
      [
        0.1825192744354421,
        0.04927246615290642
      ],
      124.17717456817627,
      1,
      1743874488.6073425,
      1743874612.7863584,
      {}
    ],
    [
      288,
      null,
      209652396,
      null,
      [
        0.18469946800785125,
        0.04778152614831925
      ],
      142.24124717712402,
      1,
      1743874612.8692524,
      1743874755.112525,
      {}
    ],
    [
      289,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743874755.191693,
      1743874761.0077689,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      290,
      null,
      209652396,
      null,
      [
        0.20407876837517555,
        0.026799767166376116
      ],
      118.94801640510559,
      1,
      1743874761.088044,
      1743874880.0381567,
      {}
    ],
    [
      291,
      null,
      209652396,
      null,
      [
        0.22262812779279847,
        0.029132316559553145
      ],
      91.30048632621765,
      1,
      1743874880.1283898,
      1743874971.4308834,
      {}
    ],
    [
      292,
      null,
      209652396,
      null,
      [
        0.24074811065829033,
        0.013055628836154937
      ],
      158.07451581954956,
      1,
      1743874971.5346093,
      1743875129.6116788,
      {}
    ],
    [
      293,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.019927138835191725
      ],
      115.29218125343323,
      1,
      1743875129.6925015,
      1743875244.986702,
      {}
    ],
    [
      294,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743875248.7874157,
      1743875252.1062574,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      295,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01298920512199402
      ],
      106.9309344291687,
      1,
      1743875252.1882489,
      1743875359.1212204,
      {}
    ],
    [
      296,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743875359.2048163,
      1743875376.1939316,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      297,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743875376.2760348,
      1743875376.517167,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      298,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743875376.5989776,
      1743875390.9275668,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      299,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743875391.0106604,
      1743875391.3044913,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      300,
      null,
      209652396,
      null,
      [
        0.18396243800435416,
        0.04596873983740807
      ],
      101.23205614089966,
      1,
      1743875391.3846045,
      1743875492.618448,
      {}
    ],
    [
      301,
      null,
      209652396,
      null,
      [
        0.18476091664714417,
        0.046944663077592846
      ],
      83.23329734802246,
      1,
      1743875492.7033832,
      1743875575.9385383,
      {}
    ],
    [
      302,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.014130170941352844
      ],
      115.24413251876831,
      1,
      1743875576.1183097,
      1743875691.3643641,
      {}
    ],
    [
      303,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.003882312476634979
      ],
      245.16720271110535,
      1,
      1743875695.2752934,
      1743875940.444719,
      {}
    ],
    [
      304,
      null,
      209652396,
      null,
      [
        0.2119099874339395,
        0.031047702729701993
      ],
      118.81131601333618,
      1,
      1743875940.5334222,
      1743876059.3468287,
      {}
    ],
    [
      305,
      null,
      209652396,
      null,
      [
        0.18264194065092268,
        0.04524615272879601
      ],
      134.13554096221924,
      1,
      1743876059.4581792,
      1743876193.5962863,
      {}
    ],
    [
      306,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743876193.6792202,
      1743876193.89166,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      307,
      null,
      209652396,
      null,
      [
        0.1518687252220186,
        0.09562808990478515
      ],
      110.08432078361511,
      1,
      1743876193.9729648,
      1743876304.0590086,
      {}
    ],
    [
      308,
      null,
      209652396,
      null,
      [
        0.19200875795187172,
        0.04174265936017037
      ],
      113.48201847076416,
      1,
      1743876304.1706283,
      1743876417.6549942,
      {}
    ],
    [
      309,
      null,
      209652396,
      null,
      [
        0.1922237079422708,
        0.03954385027289391
      ],
      96.83735871315002,
      1,
      1743876417.7668173,
      1743876514.6067007,
      {}
    ],
    [
      310,
      null,
      209652396,
      null,
      [
        0.2132617584713393,
        0.034388382434844975
      ],
      100.39938545227051,
      1,
      1743876518.708114,
      1743876619.1095467,
      {}
    ],
    [
      311,
      null,
      209652396,
      null,
      [
        0.21363021452841807,
        0.02929447248578072
      ],
      163.92281985282898,
      1,
      1743876619.2179208,
      1743876783.1430252,
      {}
    ],
    [
      312,
      null,
      209652396,
      null,
      [
        0.2398575793036871,
        0.018166688680648805
      ],
      106.70726370811462,
      1,
      1743876783.2330973,
      1743876889.9422028,
      {}
    ],
    [
      313,
      null,
      209652396,
      null,
      [
        0.1929301008642326,
        0.03657066687941551
      ],
      101.5053961277008,
      1,
      1743876890.052319,
      1743876991.5601783,
      {}
    ],
    [
      314,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743876991.6736703,
      1743877013.4634314,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      315,
      null,
      209652396,
      null,
      [
        0.19342135045727862,
        0.03979346796870232
      ],
      98.47603702545166,
      1,
      1743877013.5519814,
      1743877112.0301688,
      {}
    ],
    [
      316,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743877112.1422517,
      1743877115.8628554,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      317,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.012483254373073578
      ],
      85.59601759910583,
      1,
      1743877115.9493287,
      1743877201.547214,
      {}
    ],
    [
      318,
      null,
      209652396,
      null,
      [
        0.23896677444581638,
        0.013215042054653167
      ],
      127.51591444015503,
      1,
      1743877201.7945418,
      1743877329.3128731,
      {}
    ],
    [
      319,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743877329.4012399,
      1743877348.5134315,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      320,
      null,
      209652396,
      null,
      [
        0.2006387574501347,
        0.03372272044420242
      ],
      135.00974011421204,
      1,
      1743877352.7399204,
      1743877487.7516627,
      {}
    ],
    [
      321,
      null,
      209652396,
      null,
      [
        0.19154821145839107,
        0.041909556388854984
      ],
      90.23020386695862,
      1,
      1743877487.8404298,
      1743877578.072681,
      {}
    ],
    [
      322,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743877578.1856456,
      1743877611.4353209,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      323,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743877611.5285017,
      1743877967.2579236,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      324,
      null,
      209652396,
      null,
      [
        0.21068136831609885,
        0.02729384869337082
      ],
      147.9848973751068,
      1,
      1743877967.3467855,
      1743878115.3337314,
      {}
    ],
    [
      325,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743878115.426073,
      1743878115.619877,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      326,
      null,
      209652396,
      null,
      [
        0.18362471805585578,
        0.045509674400091175
      ],
      105.60340642929077,
      1,
      1743878119.951184,
      1743878225.5564637,
      {}
    ],
    [
      327,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743878225.6725087,
      1743878227.6868987,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      328,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.002192674875259399
      ],
      130.98451781272888,
      1,
      1743878227.7751148,
      1743878358.761515,
      {}
    ],
    [
      329,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743878358.8553486,
      1743878359.0686183,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      330,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743878359.1603494,
      1743878369.269772,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      331,
      null,
      209652396,
      null,
      [
        0.19157892398910364,
        0.03824318557977677
      ],
      130.2793333530426,
      1,
      1743878369.3798468,
      1743878499.661425,
      {}
    ],
    [
      332,
      null,
      209652396,
      null,
      [
        0.1792940484557251,
        0.04816103920340538
      ],
      162.65762424468994,
      1,
      1743878499.751618,
      1743878662.4113054,
      {}
    ],
    [
      333,
      null,
      209652396,
      null,
      [
        0.2204783402388193,
        0.026527134478092195
      ],
      149.67779326438904,
      1,
      1743878662.4999933,
      1743878812.179794,
      {}
    ],
    [
      334,
      null,
      209652396,
      null,
      [
        0.2337460120394252,
        0.02489768758416176
      ],
      92.96068501472473,
      1,
      1743878816.6990073,
      1743878909.6617267,
      {}
    ],
    [
      335,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743878909.7778854,
      1743878910.064486,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      336,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743878910.1671126,
      1743878910.4006174,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      337,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013586541116237642
      ],
      102.11745810508728,
      1,
      1743878910.5165086,
      1743879012.636194,
      {}
    ],
    [
      338,
      null,
      209652396,
      null,
      [
        0.16627260976063377,
        0.061158827990293506
      ],
      119.86582851409912,
      1,
      1743879012.7529032,
      1743879132.621058,
      {}
    ],
    [
      339,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743879132.7119613,
      1743879132.9439633,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      340,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015468951761722565
      ],
      126.39839506149292,
      1,
      1743879133.0366137,
      1743879259.436967,
      {}
    ],
    [
      341,
      null,
      209652396,
      null,
      [
        0.21108056991290525,
        0.02885807111859322
      ],
      122.31537246704102,
      1,
      1743879259.5278912,
      1743879381.845321,
      {}
    ],
    [
      342,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743879386.3793066,
      1743879535.0213175,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      343,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743879535.1302848,
      1743879535.3408375,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      344,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743879535.431589,
      1743879535.6488297,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      345,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00634644478559494
      ],
      115.30690431594849,
      1,
      1743879535.7403014,
      1743879651.0490055,
      {}
    ],
    [
      346,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743879651.1402168,
      1743879652.5634565,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      347,
      null,
      209652396,
      null,
      [
        0.16925174410204352,
        0.07355520814657211
      ],
      191.45326805114746,
      1,
      1743879652.6570628,
      1743879844.1122048,
      {}
    ],
    [
      348,
      null,
      209652396,
      null,
      [
        0.19090332376260521,
        0.03722419813275338
      ],
      116.17286586761475,
      1,
      1743879844.2052767,
      1743879960.3802168,
      {}
    ],
    [
      349,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743879960.5045025,
      1743880111.7215893,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      350,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.023303274661302567
      ],
      99.85211133956909,
      1,
      1743880116.174548,
      1743880216.0286305,
      {}
    ],
    [
      351,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.006372410356998444
      ],
      279.7043797969818,
      1,
      1743880216.1765864,
      1743880495.883317,
      {}
    ],
    [
      352,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743880495.9756465,
      1743880496.212469,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      353,
      null,
      209652396,
      null,
      [
        0.2308280434028937,
        0.026711560636758808
      ],
      136.50305271148682,
      1,
      1743880496.3053043,
      1743880632.8101556,
      {}
    ],
    [
      354,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743880632.903537,
      1743880669.0160384,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      355,
      null,
      209652396,
      null,
      [
        0.1570896762513529,
        0.0754848463833332
      ],
      259.3436191082001,
      1,
      1743880669.1114259,
      1743880928.4571455,
      {}
    ],
    [
      356,
      null,
      209652396,
      null,
      [
        0.18654200293421852,
        0.04666496530175209
      ],
      156.7976689338684,
      1,
      1743880928.554549,
      1743881085.3541965,
      {}
    ],
    [
      357,
      null,
      209652396,
      null,
      [
        0.18924479523281917,
        0.041997877359390264
      ],
      92.11963987350464,
      1,
      1743881085.4507844,
      1743881177.5722606,
      {}
    ],
    [
      358,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743881182.1097338,
      1743881182.4744182,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      359,
      null,
      209652396,
      null,
      [
        0.22803373125229412,
        0.0211979940533638
      ],
      104.59629988670349,
      1,
      1743881182.5686617,
      1743881287.1667955,
      {}
    ],
    [
      360,
      null,
      209652396,
      null,
      [
        0.23982687620412171,
        0.017996982336044316
      ],
      99.42052674293518,
      1,
      1743881287.2980266,
      1743881386.7211523,
      {}
    ],
    [
      361,
      null,
      209652396,
      null,
      [
        0.1998710620716609,
        0.03248224750161171
      ],
      271.3139982223511,
      1,
      1743881386.8177764,
      1743881658.133799,
      {}
    ],
    [
      362,
      null,
      209652396,
      null,
      [
        0.1836550061849463,
        0.04713457256555557
      ],
      116.45417165756226,
      1,
      1743881658.2376926,
      1743881774.693799,
      {}
    ],
    [
      363,
      null,
      209652396,
      null,
      [
        0.19345223746421353,
        0.039257502704858775
      ],
      151.82340717315674,
      1,
      1743881774.8269737,
      1743881926.652835,
      {}
    ],
    [
      364,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743881926.7498505,
      1743881933.421259,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      365,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743881933.523011,
      1743881936.4072912,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      366,
      null,
      209652396,
      null,
      [
        0.18479155844425305,
        0.041440550982952115
      ],
      99.13544178009033,
      1,
      1743881936.6582315,
      1743882035.7956867,
      {}
    ],
    [
      367,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743882040.2845747,
      1743882040.4257114,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      368,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004729504883289337
      ],
      124.24002480506897,
      1,
      1743882040.5535412,
      1743882164.7954702,
      {}
    ],
    [
      369,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743882164.8930192,
      1743882165.2516382,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      370,
      null,
      209652396,
      null,
      [
        0.18215043641690348,
        0.046900441199541086
      ],
      141.7218086719513,
      1,
      1743882165.3487513,
      1743882307.0723462,
      {}
    ],
    [
      371,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743882307.1706412,
      1743882463.7329493,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      372,
      null,
      209652396,
      null,
      [
        0.1769291505818452,
        0.051801297813653946
      ],
      193.04246425628662,
      1,
      1743882463.83235,
      1743882656.8768919,
      {}
    ],
    [
      373,
      null,
      209652396,
      null,
      [
        0.18574375535453377,
        0.04301187127828597
      ],
      120.42497563362122,
      1,
      1743882656.9773612,
      1743882777.404479,
      {}
    ],
    [
      374,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743882782.5183682,
      1743882794.89857,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      375,
      null,
      209652396,
      null,
      [
        0.1868492508462568,
        0.043201699554920196
      ],
      182.18831706047058,
      1,
      1743882795.0294259,
      1743882977.2203557,
      {}
    ],
    [
      376,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.016855730414390566
      ],
      118.81511354446411,
      1,
      1743882977.3211377,
      1743883096.1382182,
      {}
    ],
    [
      377,
      null,
      209652396,
      null,
      [
        0.239581025060067,
        0.016300190687179562
      ],
      86.97955822944641,
      1,
      1743883096.2361217,
      1743883183.2175806,
      {}
    ],
    [
      378,
      null,
      209652396,
      null,
      [
        0.20622867853406773,
        0.029532321244478226
      ],
      142.14389610290527,
      1,
      1743883183.3482645,
      1743883325.4947803,
      {}
    ],
    [
      379,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743883325.5953965,
      1743883331.01286,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      380,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743883331.1170964,
      1743883368.3374543,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      381,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743883368.446206,
      1743883368.7331634,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      382,
      null,
      209652396,
      null,
      [
        0.16817670178448624,
        0.060255158990621574
      ],
      199.3743987083435,
      1,
      1743883373.9089937,
      1743883573.2853107,
      {}
    ],
    [
      383,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743883573.3887963,
      1743883661.0923157,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      384,
      null,
      209652396,
      null,
      [
        0.1930223469145625,
        0.038978006243705746
      ],
      215.34235262870789,
      1,
      1743883661.1958086,
      1743883876.5403264,
      {}
    ],
    [
      385,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743883876.643162,
      1743883881.130566,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      386,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.020046719759702684
      ],
      140.7379982471466,
      1,
      1743883881.2411315,
      1743884021.981088,
      {}
    ],
    [
      387,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743884022.1040611,
      1743884022.4524407,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      388,
      null,
      209652396,
      null,
      [
        0.18813905924684368,
        0.04563183724880218
      ],
      140.85281801223755,
      1,
      1743884022.5550494,
      1743884163.409654,
      {}
    ],
    [
      389,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743884163.5145469,
      1743884169.7584827,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      390,
      null,
      209652396,
      null,
      [
        0.22803311351215544,
        0.024578851014375687
      ],
      110.25046896934509,
      1,
      1743884175.0692515,
      1743884285.3218286,
      {}
    ],
    [
      391,
      null,
      209652396,
      null,
      [
        0.2284938014728434,
        0.02447977140545845
      ],
      190.60277032852173,
      1,
      1743884285.4581015,
      1743884476.0633323,
      {}
    ],
    [
      392,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743884476.1677454,
      1743884478.3735163,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      393,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743884478.4782066,
      1743884478.6380236,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      394,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743884478.7415326,
      1743884499.2676752,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      395,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743884499.3765159,
      1743884563.7927399,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      396,
      null,
      209652396,
      null,
      [
        0.20343376750562378,
        0.032546584606170645
      ],
      95.38067555427551,
      1,
      1743884563.9032147,
      1743884659.2859247,
      {}
    ],
    [
      397,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004718346893787384
      ],
      110.82315564155579,
      1,
      1743884659.4235375,
      1743884770.2490513,
      {}
    ],
    [
      398,
      null,
      209652396,
      null,
      [
        0.230613178292819,
        0.02228832960128784
      ],
      127.4106514453888,
      1,
      1743884775.5772967,
      1743884902.9901044,
      {}
    ],
    [
      399,
      null,
      209652396,
      null,
      [
        0.1759162265150289,
        0.049110195189714434
      ],
      118.38332414627075,
      1,
      1743884903.1265333,
      1743885021.5124185,
      {}
    ],
    [
      400,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004818533658981323
      ],
      119.32007455825806,
      1,
      1743885021.6186535,
      1743885140.9407423,
      {}
    ],
    [
      401,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743885141.0470777,
      1743885141.397226,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      402,
      null,
      209652396,
      null,
      [
        0.23961174702192664,
        0.020978389382362368
      ],
      76.50826787948608,
      1,
      1743885141.5027804,
      1743885218.0130947,
      {}
    ],
    [
      403,
      null,
      209652396,
      null,
      [
        0.22103137327688227,
        0.026782909780740737
      ],
      92.74216413497925,
      1,
      1743885218.1209524,
      1743885310.8653767,
      {}
    ],
    [
      404,
      null,
      209652396,
      null,
      [
        0.2347284452074871,
        0.025451265275478363
      ],
      97.24209141731262,
      1,
      1743885311.0061746,
      1743885408.2507453,
      {}
    ],
    [
      405,
      null,
      209652396,
      null,
      [
        0.19937969458927543,
        0.0396221923828125
      ],
      100.93757581710815,
      1,
      1743885408.3907707,
      1743885509.330808,
      {}
    ],
    [
      406,
      null,
      209652396,
      null,
      [
        0.18294870757445608,
        0.04319210812449455
      ],
      118.1689805984497,
      1,
      1743885514.4589882,
      1743885632.6301327,
      {}
    ],
    [
      407,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013776388764381406
      ],
      167.56495809555054,
      1,
      1743885632.738939,
      1743885800.30614,
      {}
    ],
    [
      408,
      null,
      209652396,
      null,
      [
        0.24007242555146746,
        0.014616858661174773
      ],
      100.50493383407593,
      1,
      1743885800.4179623,
      1743885900.9250047,
      {}
    ],
    [
      409,
      null,
      209652396,
      null,
      [
        0.1722612278750003,
        0.05498550489544869
      ],
      321.6125421524048,
      1,
      1743885901.0630121,
      1743886222.6779072,
      {}
    ],
    [
      410,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743886222.7872145,
      1743886362.0589817,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      411,
      null,
      209652396,
      null,
      [
        0.1930223610612832,
        0.03746883720159531
      ],
      172.52127885818481,
      1,
      1743886362.16838,
      1743886534.6917584,
      {}
    ],
    [
      412,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743886534.803047,
      1743886745.6761098,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      413,
      null,
      209652396,
      null,
      [
        0.16707057912147735,
        0.05879062920808793
      ],
      92.72779822349548,
      1,
      1743886745.7858627,
      1743886838.5157006,
      {}
    ],
    [
      414,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743886844.091603,
      1743886845.5588024,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      415,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743886845.6973546,
      1743886845.8886745,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      416,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743886846.0529938,
      1743886854.5307205,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      417,
      null,
      209652396,
      null,
      [
        0.2377998255992268,
        0.018469886630773542
      ],
      131.10205841064453,
      1,
      1743886854.676627,
      1743886985.781257,
      {}
    ],
    [
      418,
      null,
      209652396,
      null,
      [
        0.20051583187810734,
        0.03772163406014442
      ],
      99.73622345924377,
      1,
      1743886985.892104,
      1743887085.6302881,
      {}
    ],
    [
      419,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01144811287522316
      ],
      97.47189807891846,
      1,
      1743887085.7396553,
      1743887183.2134423,
      {}
    ],
    [
      420,
      null,
      209652396,
      null,
      [
        0.22388692186596376,
        0.026547467187047008
      ],
      117.71472358703613,
      1,
      1743887183.323837,
      1743887301.0406482,
      {}
    ],
    [
      421,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743887301.1597857,
      1743887347.30183,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      422,
      null,
      209652396,
      null,
      [
        0.23678640639718482,
        0.025157281756401063
      ],
      123.26234769821167,
      1,
      1743887347.5809522,
      1743887470.845518,
      {}
    ],
    [
      423,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743887470.9920003,
      1743887485.4269774,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      424,
      null,
      209652396,
      null,
      [
        0.18712561175136025,
        0.04573304340243339
      ],
      121.5340461730957,
      1,
      1743887485.6029253,
      1743887607.1393104,
      {}
    ],
    [
      425,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743887612.7139661,
      1743887628.4741883,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      426,
      null,
      209652396,
      null,
      [
        0.19013543976118824,
        0.04281529292464257
      ],
      116.19223666191101,
      1,
      1743887628.597483,
      1743887744.7918983,
      {}
    ],
    [
      427,
      null,
      209652396,
      null,
      [
        0.23865964913869106,
        0.0189422969520092
      ],
      109.23821806907654,
      1,
      1743887744.9047966,
      1743887854.1450028,
      {}
    ],
    [
      428,
      null,
      209652396,
      null,
      [
        0.24010313808218,
        0.014879829287528993
      ],
      172.68213844299316,
      1,
      1743887854.2877004,
      1743888026.9717982,
      {}
    ],
    [
      429,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0007757291197776795
      ],
      156.93711948394775,
      1,
      1743888027.0842426,
      1743888184.0232496,
      {}
    ],
    [
      430,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743888189.8049266,
      1743888197.9169245,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      431,
      null,
      209652396,
      null,
      [
        0.23064367862272056,
        0.026283390223979953
      ],
      120.8556399345398,
      1,
      1743888198.0332503,
      1743888318.8910818,
      {}
    ],
    [
      432,
      null,
      209652396,
      null,
      [
        0.18789360892654308,
        0.04522870674729347
      ],
      130.14495515823364,
      1,
      1743888319.0410314,
      1743888449.1886144,
      {}
    ],
    [
      433,
      null,
      209652396,
      null,
      [
        0.19406652108747918,
        0.037491444796323777
      ],
      100.80543756484985,
      1,
      1743888449.305062,
      1743888550.11251,
      {}
    ],
    [
      434,
      null,
      209652396,
      null,
      [
        0.19937973231386402,
        0.03524566575884819
      ],
      197.91518473625183,
      1,
      1743888550.2824254,
      1743888748.199937,
      {}
    ],
    [
      435,
      null,
      209652396,
      null,
      [
        0.23890534938439129,
        0.021060132682323457
      ],
      128.5189094543457,
      1,
      1743888748.3146856,
      1743888876.8354602,
      {}
    ],
    [
      436,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743888876.9512455,
      1743888899.9318085,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      437,
      null,
      209652396,
      null,
      [
        0.1910566883620776,
        0.03737328857183456
      ],
      82.7976861000061,
      1,
      1743888900.0502021,
      1743888982.8498247,
      {}
    ],
    [
      438,
      null,
      209652396,
      null,
      [
        0.23872121566732343,
        0.01359974503517151
      ],
      97.61563515663147,
      1,
      1743888988.6813023,
      1743889086.2988272,
      {}
    ],
    [
      439,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743889086.453992,
      1743889088.8856888,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      440,
      null,
      209652396,
      null,
      [
        0.2207240169066517,
        0.027305073291063308
      ],
      64.60270929336548,
      1,
      1743889089.0019996,
      1743889153.6066926,
      {}
    ],
    [
      441,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00927356481552124
      ],
      98.46926712989807,
      1,
      1743889153.720383,
      1743889252.1915042,
      {}
    ],
    [
      442,
      null,
      209652396,
      null,
      [
        0.19154817844937605,
        0.040210780203342435
      ],
      154.0356080532074,
      1,
      1743889252.3410192,
      1743889406.3791883,
      {}
    ],
    [
      443,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743889406.516536,
      1743889548.8392634,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      444,
      null,
      209652396,
      null,
      [
        0.19554078857971072,
        0.035435814410448074
      ],
      167.62872767448425,
      1,
      1743889548.975563,
      1743889716.6062849,
      {}
    ],
    [
      445,
      null,
      209652396,
      null,
      [
        0.1938516041060951,
        0.03836116850376129
      ],
      97.10495114326477,
      1,
      1743889716.746523,
      1743889813.8533735,
      {}
    ],
    [
      446,
      null,
      209652396,
      null,
      [
        0.1991646880119934,
        0.0335459677875042
      ],
      113.89448237419128,
      1,
      1743889819.94558,
      1743889933.841999,
      {}
    ],
    [
      447,
      null,
      209652396,
      null,
      [
        0.24010313808218,
        0.009124082326889039
      ],
      111.35608100891113,
      1,
      1743889934.021393,
      1743890045.3798492,
      {}
    ],
    [
      448,
      null,
      209652396,
      null,
      [
        0.2397038751829171,
        0.013013395965099336
      ],
      118.78108620643616,
      1,
      1743890045.53586,
      1743890164.3193583,
      {}
    ],
    [
      449,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743890164.437915,
      1743890242.3874967,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      450,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.020584429204463954
      ],
      169.08026123046875,
      1,
      1743890242.5385807,
      1743890411.6211832,
      {}
    ],
    [
      451,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.017931308150291442
      ],
      122.22124910354614,
      1,
      1743890411.7592683,
      1743890533.9825833,
      {}
    ],
    [
      452,
      null,
      209652396,
      null,
      [
        0.17711370398496146,
        0.047656051218509674
      ],
      234.37100315093994,
      1,
      1743890534.1366825,
      1743890768.510242,
      {}
    ],
    [
      453,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        1.6382336616516115e-05
      ],
      121.21676659584045,
      1,
      1743890768.6285963,
      1743890889.8474524,
      {}
    ],
    [
      454,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743890895.9522338,
      1743890982.691151,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      455,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743890982.824747,
      1743890987.71347,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      456,
      null,
      209652396,
      null,
      [
        0.20598280381214512,
        0.03020730048418045
      ],
      123.11686277389526,
      1,
      1743890987.8452249,
      1743891110.9643257,
      {}
    ],
    [
      457,
      null,
      209652396,
      null,
      [
        0.20994470612734087,
        0.03221082895994186
      ],
      118.4576051235199,
      1,
      1743891111.0951703,
      1743891229.5548868,
      {}
    ],
    [
      458,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.017692008912563322
      ],
      278.3030061721802,
      1,
      1743891229.6741805,
      1743891507.9791164,
      {}
    ],
    [
      459,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004035192728042603
      ],
      115.34306716918945,
      1,
      1743891508.103296,
      1743891623.4481807,
      {}
    ],
    [
      460,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743891623.6126246,
      1743891656.1061187,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      461,
      null,
      209652396,
      null,
      [
        0.1892140732709595,
        0.03646526902914047
      ],
      237.85665130615234,
      1,
      1743891656.248005,
      1743891894.1069872,
      {}
    ],
    [
      462,
      null,
      209652396,
      null,
      [
        0.1995639461956827,
        0.03130918696522712
      ],
      173.6496193408966,
      1,
      1743891900.2519176,
      1743892073.9039907,
      {}
    ],
    [
      463,
      null,
      209652396,
      null,
      [
        0.2369399454728796,
        0.02100607946515083
      ],
      390.87199211120605,
      1,
      1743892074.0269873,
      1743892464.901044,
      {}
    ],
    [
      464,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743892465.0402746,
      1743892465.1917624,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      465,
      null,
      209652396,
      null,
      [
        0.21789927987532778,
        0.019707608073949813
      ],
      151.44790863990784,
      1,
      1743892465.3345842,
      1743892616.7844377,
      {}
    ],
    [
      466,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743892616.9067168,
      1743892617.1273234,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      467,
      null,
      209652396,
      null,
      [
        0.2286167836317537,
        0.026067533046007157
      ],
      106.5887336730957,
      1,
      1743892617.2607756,
      1743892723.8514776,
      {}
    ],
    [
      468,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743892724.0106533,
      1743892724.1608553,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      469,
      null,
      209652396,
      null,
      [
        0.24037955085859278,
        0.014095325469970704
      ],
      101.100821018219,
      1,
      1743892724.2921298,
      1743892825.3947654,
      {}
    ],
    [
      470,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743892831.8535306,
      1743892836.3017647,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      471,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743892836.4263206,
      1743892860.849919,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      472,
      null,
      209652396,
      null,
      [
        0.19483443338233758,
        0.036115834116935724
      ],
      106.99645209312439,
      1,
      1743892860.974316,
      1743892967.9727077,
      {}
    ],
    [
      473,
      null,
      209652396,
      null,
      [
        0.18798632653423072,
        0.045852004289627074
      ],
      126.85159707069397,
      1,
      1743892968.132601,
      1743893094.9864817,
      {}
    ],
    [
      474,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743893095.1085873,
      1743893095.2969272,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      475,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743893095.4344144,
      1743893129.7256377,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      476,
      null,
      209652396,
      null,
      [
        0.19225460909592645,
        0.04139534875750542
      ],
      104.75409412384033,
      1,
      1743893129.8485894,
      1743893234.6045902,
      {}
    ],
    [
      477,
      null,
      209652396,
      null,
      [
        0.2112651044537272,
        0.03202486306428909
      ],
      98.23650550842285,
      1,
      1743893234.7653239,
      1743893333.0042884,
      {}
    ],
    [
      478,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743893339.4339945,
      1743893339.622754,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      479,
      null,
      209652396,
      null,
      [
        0.24010313808218,
        0.010365129709243774
      ],
      132.74062395095825,
      1,
      1743893339.7800364,
      1743893472.5225585,
      {}
    ],
    [
      480,
      null,
      209652396,
      null,
      [
        0.1978750022163196,
        0.03250048890709877
      ],
      113.23193216323853,
      1,
      1743893472.685324,
      1743893585.9198613,
      {}
    ],
    [
      481,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743893586.0471272,
      1743893593.2372055,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      482,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.006761252284049989
      ],
      150.38927268981934,
      1,
      1743893593.3647342,
      1743893743.7559147,
      {}
    ],
    [
      483,
      null,
      209652396,
      null,
      [
        0.22665104963009158,
        0.027393375188112256
      ],
      118.48813581466675,
      1,
      1743893743.8813236,
      1743893862.3716383,
      {}
    ],
    [
      484,
      null,
      209652396,
      null,
      [
        0.24031812579716774,
        0.010273575484752655
      ],
      90.92089581489563,
      1,
      1743893862.5053024,
      1743893953.4281983,
      {}
    ],
    [
      485,
      null,
      209652396,
      null,
      [
        0.23988829183439958,
        0.019410285949707028
      ],
      105.04287910461426,
      1,
      1743893953.5956051,
      1743894058.6409366,
      {}
    ],
    [
      486,
      null,
      209652396,
      null,
      [
        0.2056143666173606,
        0.030634598731994634
      ],
      97.36851072311401,
      1,
      1743894058.9683263,
      1743894156.3387651,
      {}
    ],
    [
      487,
      null,
      209652396,
      null,
      [
        0.20926865792135257,
        0.03180446535348892
      ],
      107.00193667411804,
      1,
      1743894162.6133163,
      1743894269.6173437,
      {}
    ],
    [
      488,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743894269.7842877,
      1743894535.4084098,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      489,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0025526419281959533
      ],
      189.53966784477234,
      1,
      1743894535.5370412,
      1743894725.078787,
      {}
    ],
    [
      490,
      null,
      209652396,
      null,
      [
        0.2390281995072414,
        0.024227173924446108
      ],
      96.98698854446411,
      1,
      1743894725.2053368,
      1743894822.1942728,
      {}
    ],
    [
      491,
      null,
      209652396,
      null,
      [
        0.2165781836440519,
        0.028732207268476483
      ],
      116.25661778450012,
      1,
      1743894822.3626094,
      1743894938.6215203,
      {}
    ],
    [
      492,
      null,
      209652396,
      null,
      [
        0.20561396579360655,
        0.03064981013536453
      ],
      197.77237176895142,
      1,
      1743894938.8103664,
      1743895136.5850868,
      {}
    ],
    [
      493,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743895136.7156155,
      1743895146.0587258,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      494,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743895152.4707115,
      1743895152.8115604,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      495,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743895152.9404783,
      1743895242.0113742,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      496,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015142811536788942
      ],
      131.7649862766266,
      1,
      1743895242.1789713,
      1743895373.9460418,
      {}
    ],
    [
      497,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743895374.0802305,
      1743895580.8079007,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      498,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743895580.9355106,
      1743895581.1432512,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      499,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743895581.2702084,
      1743895590.488848,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      500,
      null,
      209652396,
      null,
      [
        0.2390281995072414,
        0.021472738683223726
      ],
      114.95916056632996,
      1,
      1743895590.6197593,
      1743895705.580989,
      {}
    ],
    [
      501,
      null,
      209652396,
      null,
      [
        0.2386598094681927,
        0.02331577330827713
      ],
      227.1175491809845,
      1,
      1743895705.7116096,
      1743895932.831308,
      {}
    ],
    [
      502,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743895939.3946319,
      1743895939.5295382,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      503,
      null,
      209652396,
      null,
      [
        0.23346946251137868,
        0.02416471689939499
      ],
      289.3495440483093,
      1,
      1743895939.657855,
      1743896229.0092509,
      {}
    ],
    [
      504,
      null,
      209652396,
      null,
      [
        0.19421979609105358,
        0.032282683700323105
      ],
      116.25062608718872,
      1,
      1743896229.1402104,
      1743896345.3928823,
      {}
    ],
    [
      505,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743896345.5282443,
      1743896347.024188,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      506,
      null,
      209652396,
      null,
      [
        0.21642505010768484,
        0.02921047106385231
      ],
      109.10952281951904,
      1,
      1743896347.155121,
      1743896456.2666378,
      {}
    ],
    [
      507,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743896456.4388037,
      1743896467.8560588,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      508,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0031968715786933896
      ],
      119.27520966529846,
      1,
      1743896467.9877024,
      1743896587.2649515,
      {}
    ],
    [
      509,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743896587.3946993,
      1743896740.315239,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      510,
      null,
      209652396,
      null,
      [
        0.19078039347500425,
        0.04551447615027428
      ],
      215.40709972381592,
      1,
      1743896746.9656296,
      1743896962.3750443,
      {}
    ],
    [
      511,
      null,
      209652396,
      null,
      [
        0.2167628030651983,
        0.023952225744724272
      ],
      76.32946586608887,
      1,
      1743896962.5073783,
      1743897038.8388224,
      {}
    ],
    [
      512,
      null,
      209652396,
      null,
      [
        0.22127635675539867,
        0.027907717674970627
      ],
      117.44428253173828,
      1,
      1743897038.971872,
      1743897156.4179556,
      {}
    ],
    [
      513,
      null,
      209652396,
      null,
      [
        0.19016612871403293,
        0.047000159621238706
      ],
      88.89075303077698,
      1,
      1743897156.5632899,
      1743897245.4559612,
      {}
    ],
    [
      514,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743897245.6330054,
      1743897255.5810373,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      515,
      null,
      209652396,
      null,
      [
        0.20217460561771938,
        0.030686357021331784
      ],
      239.90708804130554,
      1,
      1743897255.7477438,
      1743897495.6569922,
      {}
    ],
    [
      516,
      null,
      209652396,
      null,
      [
        0.15573847579835604,
        0.07714997887611388
      ],
      95.58840680122375,
      1,
      1743897495.7919593,
      1743897591.3823435,
      {}
    ],
    [
      517,
      null,
      209652396,
      null,
      [
        0.2370320264781342,
        0.01955063134431839
      ],
      125.58232927322388,
      1,
      1743897591.5235023,
      1743897717.1076956,
      {}
    ],
    [
      518,
      null,
      209652396,
      null,
      [
        0.2150119813293466,
        0.028650084882974623
      ],
      201.70705008506775,
      1,
      1743897724.0175288,
      1743897925.7267427,
      {}
    ],
    [
      519,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743897925.8603706,
      1743897943.927462,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      520,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743897944.0690615,
      1743898068.8021154,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      521,
      null,
      209652396,
      null,
      [
        0.1660268387813298,
        0.059917044192552574
      ],
      156.13272380828857,
      1,
      1743898068.9380097,
      1743898225.0728161,
      {}
    ],
    [
      522,
      null,
      209652396,
      null,
      [
        0.23423704471608664,
        0.025235839784145352
      ],
      111.16893577575684,
      1,
      1743898225.2089086,
      1743898336.3797927,
      {}
    ],
    [
      523,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743898336.5525236,
      1743898336.7867398,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      524,
      null,
      209652396,
      null,
      [
        0.22072423382303624,
        0.02856118753552437
      ],
      134.62720012664795,
      1,
      1743898336.9594517,
      1743898471.5889423,
      {}
    ],
    [
      525,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.021555777341127395
      ],
      220.61400747299194,
      1,
      1743898471.7248337,
      1743898692.3409686,
      {}
    ],
    [
      526,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743898699.4090858,
      1743898699.5408547,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      527,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743898699.7092493,
      1743898763.2812755,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      528,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743898763.4179976,
      1743898763.6701016,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      529,
      null,
      209652396,
      null,
      [
        0.20877750263977807,
        0.024973064959049225
      ],
      100.63936758041382,
      1,
      1743898763.8300076,
      1743898864.471247,
      {}
    ],
    [
      530,
      null,
      209652396,
      null,
      [
        0.196554316239945,
        0.03511510550975799
      ],
      166.4370505809784,
      1,
      1743898864.6546485,
      1743899031.0941422,
      {}
    ],
    [
      531,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015914410948753354
      ],
      160.97054362297058,
      1,
      1743899031.2361636,
      1743899192.2087827,
      {}
    ],
    [
      532,
      null,
      209652396,
      null,
      [
        0.189551859237488,
        0.04157913535833359
      ],
      103.66762638092041,
      1,
      1743899192.3448958,
      1743899296.014536,
      {}
    ],
    [
      533,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743899296.2093768,
      1743899342.87911,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      534,
      null,
      209652396,
      null,
      [
        0.19179384568606125,
        0.04136841371655465
      ],
      108.03371000289917,
      1,
      1743899343.2549016,
      1743899451.290574,
      {}
    ],
    [
      535,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743899458.255284,
      1743899610.0303836,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      536,
      null,
      209652396,
      null,
      [
        0.19019685539146616,
        0.04265708044171333
      ],
      120.18855261802673,
      1,
      1743899610.1855342,
      1743899730.3761678,
      {}
    ],
    [
      537,
      null,
      209652396,
      null,
      [
        0.18795503398796815,
        0.04051016330718994
      ],
      98.26328825950623,
      1,
      1743899730.512939,
      1743899828.7780802,
      {}
    ],
    [
      538,
      null,
      209652396,
      null,
      [
        0.18678803798564275,
        0.038603271842002865
      ],
      116.8381679058075,
      1,
      1743899828.9607518,
      1743899945.8014998,
      {}
    ],
    [
      539,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743899945.941464,
      1743900096.8972719,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      540,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743900097.0432413,
      1743900160.9364798,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      541,
      null,
      209652396,
      null,
      [
        0.17551661466332127,
        0.051815648674964895
      ],
      180.12436079978943,
      1,
      1743900161.1209867,
      1743900341.2479117,
      {}
    ],
    [
      542,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013561832904815673
      ],
      467.6615951061249,
      1,
      1743900348.4342282,
      1743900816.0980446,
      {}
    ],
    [
      543,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743900816.2372608,
      1743900820.4717376,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      544,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743900820.6199906,
      1743900840.9832084,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      545,
      null,
      209652396,
      null,
      [
        0.1996559989074959,
        0.03283378303050995
      ],
      114.92758369445801,
      1,
      1743900841.1570776,
      1743900956.0867083,
      {}
    ],
    [
      546,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0009697648882865907
      ],
      265.73004269599915,
      1,
      1743900956.2278314,
      1743901221.9598007,
      {}
    ],
    [
      547,
      null,
      209652396,
      null,
      [
        0.2067201167500569,
        0.031596903651952744
      ],
      99.4101996421814,
      1,
      1743901222.0999506,
      1743901321.5122344,
      {}
    ],
    [
      548,
      null,
      209652396,
      null,
      [
        0.23979601277505475,
        0.01724120631814003
      ],
      108.69472694396973,
      1,
      1743901321.6593032,
      1743901430.3560197,
      {}
    ],
    [
      549,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743901430.4940996,
      1743901430.721214,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      550,
      null,
      209652396,
      null,
      [
        0.18906068509361923,
        0.04393765598535537
      ],
      221.19638228416443,
      1,
      1743901437.7843196,
      1743901658.982871,
      {}
    ],
    [
      551,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743901659.125597,
      1743901659.3763003,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      552,
      null,
      209652396,
      null,
      [
        0.19188605401180253,
        0.040378124713897706
      ],
      126.05313777923584,
      1,
      1743901659.5180855,
      1743901785.5730937,
      {}
    ],
    [
      553,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743901785.7129197,
      1743901871.248893,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      554,
      null,
      209652396,
      null,
      [
        0.22932303980208174,
        0.028326937258243562
      ],
      131.43953275680542,
      1,
      1743901871.3900971,
      1743902002.8314576,
      {}
    ],
    [
      555,
      null,
      209652396,
      null,
      [
        0.19455810548624922,
        0.04026530057191849
      ],
      106.96153926849365,
      1,
      1743902002.97257,
      1743902109.9359887,
      {}
    ],
    [
      556,
      null,
      209652396,
      null,
      [
        0.21596413108389162,
        0.0304458600282669
      ],
      121.17051672935486,
      1,
      1743902110.1274488,
      1743902231.300441,
      {}
    ],
    [
      557,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743902231.4421754,
      1743902231.6572974,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      558,
      null,
      209652396,
      null,
      [
        0.23936619295900732,
        0.02178618386387825
      ],
      199.38793802261353,
      1,
      1743902239.2602103,
      1743902438.6500895,
      {}
    ],
    [
      559,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.017761061787605288
      ],
      116.18965864181519,
      1,
      1743902438.79478,
      1743902554.9865663,
      {}
    ],
    [
      560,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.01658470660448074
      ],
      226.19709610939026,
      1,
      1743902555.1747394,
      1743902781.3744583,
      {}
    ],
    [
      561,
      null,
      209652396,
      null,
      [
        0.2069346612011283,
        0.03279674366116524
      ],
      102.99457955360413,
      1,
      1743902781.532634,
      1743902884.529216,
      {}
    ],
    [
      562,
      null,
      209652396,
      null,
      [
        0.21915800321488943,
        0.028098589479923247
      ],
      133.2577085494995,
      1,
      1743902884.7326298,
      1743903017.9931128,
      {}
    ],
    [
      563,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743903018.1466312,
      1743903027.9464586,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      564,
      null,
      209652396,
      null,
      [
        0.1987345145279277,
        0.03604243502020836
      ],
      93.71940326690674,
      1,
      1743903028.096196,
      1743903121.8177354,
      {}
    ],
    [
      565,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0028307482600212095
      ],
      157.8341248035431,
      1,
      1743903122.0127645,
      1743903279.8493602,
      {}
    ],
    [
      566,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00550072580575943
      ],
      125.7979941368103,
      1,
      1743903287.2951043,
      1743903413.095349,
      {}
    ],
    [
      567,
      null,
      209652396,
      null,
      [
        0.19114881652306803,
        0.03894536048173904
      ],
      226.52886199951172,
      1,
      1743903413.2531908,
      1743903639.784099,
      {}
    ],
    [
      568,
      null,
      209652396,
      null,
      [
        0.1507632061524277,
        0.09385084331035613
      ],
      141.75733375549316,
      1,
      1743903639.93021,
      1743903781.689646,
      {}
    ],
    [
      569,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743903781.8440144,
      1743903805.7193687,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      570,
      null,
      209652396,
      null,
      [
        0.17929399186884218,
        0.055224078744649886
      ],
      138.0731978416443,
      1,
      1743903805.8654492,
      1743903943.9405785,
      {}
    ],
    [
      571,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743903944.0972862,
      1743903998.3846738,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      572,
      null,
      209652396,
      null,
      [
        0.2284630889421309,
        0.026237090677022935
      ],
      100.41405534744263,
      1,
      1743903998.5472398,
      1743904098.9633267,
      {}
    ],
    [
      573,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743904099.1530492,
      1743904105.816511,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      574,
      null,
      209652396,
      null,
      [
        0.18420841175332192,
        0.04507704436779021
      ],
      149.86689853668213,
      1,
      1743904113.3488836,
      1743904263.2179837,
      {}
    ],
    [
      575,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743904263.3725884,
      1743904264.1599488,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      576,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743904264.3239405,
      1743904264.4552364,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      577,
      null,
      209652396,
      null,
      [
        0.19603240127192223,
        0.03178260982036591
      ],
      118.49687242507935,
      1,
      1743904264.6013908,
      1743904383.1001098,
      {}
    ],
    [
      578,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743904383.3014193,
      1743904383.5563312,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      579,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743904383.7497146,
      1743904475.5447516,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      580,
      null,
      209652396,
      null,
      [
        0.19078012468731032,
        0.03935888037085533
      ],
      117.19464612007141,
      1,
      1743904475.6939332,
      1743904592.8906777,
      {}
    ],
    [
      581,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0017650687694549562
      ],
      104.02761554718018,
      1,
      1743904593.08934,
      1743904697.1195815,
      {}
    ],
    [
      582,
      null,
      209652396,
      null,
      [
        0.23896685932614076,
        0.01573197394609451
      ],
      85.22010040283203,
      1,
      1743904697.659668,
      1743904782.882176,
      {}
    ],
    [
      583,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743904790.2741158,
      1743904790.455232,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      584,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743904790.6333315,
      1743904887.9667153,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      585,
      null,
      209652396,
      null,
      [
        0.1858972472744928,
        0.0428812663257122
      ],
      110.5992968082428,
      1,
      1743904888.1292996,
      1743904998.7311468,
      {}
    ],
    [
      586,
      null,
      209652396,
      null,
      [
        0.23724741973244967,
        0.01721956744790077
      ],
      157.85249423980713,
      1,
      1743904998.8848505,
      1743905156.739388,
      {}
    ],
    [
      587,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743905156.8933988,
      1743905337.9095514,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      588,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743905338.0610049,
      1743905338.2672307,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      589,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001922852098941803
      ],
      110.826242685318,
      1,
      1743905338.417985,
      1743905449.2459722,
      {}
    ],
    [
      590,
      null,
      209652396,
      null,
      [
        0.19888816206181475,
        0.039392664432525634
      ],
      131.72043991088867,
      1,
      1743905456.9788496,
      1743905588.7015243,
      {}
    ],
    [
      591,
      null,
      209652396,
      null,
      [
        0.18245730708305558,
        0.04627677798271179
      ],
      123.87739181518555,
      1,
      1743905588.855741,
      1743905712.7352016,
      {}
    ],
    [
      592,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743905712.9021635,
      1743905713.0941725,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      593,
      null,
      209652396,
      null,
      [
        0.20757959605264995,
        0.03091417223215103
      ],
      108.65669775009155,
      1,
      1743905713.2448711,
      1743905821.903394,
      {}
    ],
    [
      594,
      null,
      209652396,
      null,
      [
        0.23948888746792943,
        0.014824401587247849
      ],
      93.05494809150696,
      1,
      1743905822.0535874,
      1743905915.1104474,
      {}
    ],
    [
      595,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743905915.3146422,
      1743905915.519523,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      596,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743905915.7370162,
      1743906005.6258678,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      597,
      null,
      209652396,
      null,
      [
        0.19756774487313408,
        0.03733202144503593
      ],
      109.08513355255127,
      1,
      1743906005.8254838,
      1743906114.9130747,
      {}
    ],
    [
      598,
      null,
      209652396,
      null,
      [
        0.24065596363500558,
        0.009190783500671387
      ],
      251.7607777118683,
      1,
      1743906123.1050816,
      1743906374.8680105,
      {}
    ],
    [
      599,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.009588360786437988
      ],
      103.14801931381226,
      1,
      1743906375.028707,
      1743906478.1786516,
      {}
    ],
    [
      600,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743906478.3770826,
      1743906483.6103494,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      601,
      null,
      209652396,
      null,
      [
        0.2343602437913815,
        0.0250413404405117
      ],
      146.39068794250488,
      1,
      1743906483.7812781,
      1743906630.1740596,
      {}
    ],
    [
      602,
      null,
      209652396,
      null,
      [
        0.17935542164584078,
        0.04419148519635201
      ],
      136.9733808040619,
      1,
      1743906630.3474917,
      1743906767.3230367,
      {}
    ],
    [
      603,
      null,
      209652396,
      null,
      [
        0.22643634484951852,
        0.027913760393857956
      ],
      114.12555932998657,
      1,
      1743906767.4790943,
      1743906881.6067963,
      {}
    ],
    [
      604,
      null,
      209652396,
      null,
      [
        0.19609355754565333,
        0.03510185435414314
      ],
      131.52622246742249,
      1,
      1743906881.758944,
      1743907013.2871132,
      {}
    ],
    [
      605,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743907013.4459107,
      1743907094.4850044,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      606,
      null,
      209652396,
      null,
      [
        0.1879243214572556,
        0.042492040842771535
      ],
      195.13773608207703,
      1,
      1743907094.9347377,
      1743907290.074587,
      {}
    ],
    [
      607,
      null,
      209652396,
      null,
      [
        0.19305311131658437,
        0.038277733176946646
      ],
      127.07541108131409,
      1,
      1743907297.7699912,
      1743907424.84773,
      {}
    ],
    [
      608,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01346260517835617
      ],
      117.4996874332428,
      1,
      1743907425.0026572,
      1743907542.504389,
      {}
    ],
    [
      609,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0016472053527832032
      ],
      177.6942913532257,
      1,
      1743907542.660274,
      1743907720.3567035,
      {}
    ],
    [
      610,
      null,
      209652396,
      null,
      [
        0.17192340889945681,
        0.05471850499510765
      ],
      309.2079894542694,
      1,
      1743907720.5129168,
      1743908029.7230136,
      {}
    ],
    [
      611,
      null,
      209652396,
      null,
      [
        0.1908724084622288,
        0.04133436173200607
      ],
      110.18678975105286,
      1,
      1743908029.8801858,
      1743908140.069015,
      {}
    ],
    [
      612,
      null,
      209652396,
      null,
      [
        0.189858876086421,
        0.03552920296788216
      ],
      160.83372735977173,
      1,
      1743908140.2716603,
      1743908301.1078415,
      {}
    ],
    [
      613,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743908301.2677557,
      1743908301.4884758,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      614,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743908309.5125024,
      1743908312.4648356,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      615,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001835436522960663
      ],
      114.86121726036072,
      1,
      1743908312.638796,
      1743908427.5021381,
      {}
    ],
    [
      616,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743908427.7104285,
      1743908427.971069,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      617,
      null,
      209652396,
      null,
      [
        0.16992723587034966,
        0.055169722586870196
      ],
      253.2351040840149,
      1,
      1743908428.172256,
      1743908681.4096296,
      {}
    ],
    [
      618,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743908681.5803554,
      1743908681.7315588,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      619,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004139943718910218
      ],
      104.87472867965698,
      1,
      1743908681.8951926,
      1743908786.7717,
      {}
    ],
    [
      620,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743908786.9755003,
      1743908787.145672,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      621,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743908787.3026109,
      1743908796.898273,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      622,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743908805.0848153,
      1743908805.3224812,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      623,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743908805.4839303,
      1743908805.6778696,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      624,
      null,
      209652396,
      null,
      [
        0.20828551741725393,
        0.030887341499328612
      ],
      144.42068243026733,
      1,
      1743908805.8834882,
      1743908950.3064597,
      {}
    ],
    [
      625,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743908950.4657583,
      1743908961.4772806,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      626,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.018423300832509995
      ],
      98.16206979751587,
      1,
      1743908961.675793,
      1743909059.8399544,
      {}
    ],
    [
      627,
      null,
      209652396,
      null,
      [
        0.19243878053758293,
        0.04212011829018593
      ],
      151.85399675369263,
      1,
      1743909060.0370991,
      1743909211.893077,
      {}
    ],
    [
      628,
      null,
      209652396,
      null,
      [
        0.20171373846523544,
        0.028835002332925797
      ],
      147.29861569404602,
      1,
      1743909212.0525575,
      1743909359.3531985,
      {}
    ],
    [
      629,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015599401593208315
      ],
      146.19231796264648,
      1,
      1743909359.514473,
      1743909505.7087524,
      {}
    ],
    [
      630,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743909514.0108843,
      1743909514.2417104,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      631,
      null,
      209652396,
      null,
      [
        0.2397038751829171,
        0.02074115186929703
      ],
      120.87141108512878,
      1,
      1743909514.434076,
      1743909635.3073635,
      {}
    ],
    [
      632,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743909635.5265481,
      1743909635.8023262,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      633,
      null,
      209652396,
      null,
      [
        0.1858662659560863,
        0.04112189680337906
      ],
      85.85617470741272,
      1,
      1743909636.0312822,
      1743909721.8892984,
      {}
    ],
    [
      634,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743909722.0494378,
      1743909848.6771464,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      635,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743909848.8408105,
      1743909849.0947254,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      636,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743909849.2550452,
      1743909849.4361737,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      637,
      null,
      209652396,
      null,
      [
        0.18420783173777183,
        0.04679564520716667
      ],
      184.82746481895447,
      1,
      1743909849.5956197,
      1743910034.4249253,
      {}
    ],
    [
      638,
      null,
      209652396,
      null,
      [
        0.2406866761657181,
        0.017388525009155272
      ],
      266.74294090270996,
      1,
      1743910042.9839687,
      1743910309.7290912,
      {}
    ],
    [
      639,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743910309.8909395,
      1743910310.0852475,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      640,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00828317642211914
      ],
      139.04552459716797,
      1,
      1743910310.2486215,
      1743910449.29591,
      {}
    ],
    [
      641,
      null,
      209652396,
      null,
      [
        0.1677155988533234,
        0.06127975478768348
      ],
      104.51982712745667,
      1,
      1743910449.4567518,
      1743910553.9784808,
      {}
    ],
    [
      642,
      null,
      209652396,
      null,
      [
        0.23810707822683871,
        0.018804542869329456
      ],
      117.09842157363892,
      1,
      1743910554.1709898,
      1743910671.2713783,
      {}
    ],
    [
      643,
      null,
      209652396,
      null,
      [
        0.19990183118925636,
        0.03291846767067909
      ],
      108.32649993896484,
      1,
      1743910671.431722,
      1743910779.7600732,
      {}
    ],
    [
      644,
      null,
      209652396,
      null,
      [
        0.18807766719443364,
        0.04154263600707054
      ],
      126.15041756629944,
      1,
      1743910779.982252,
      1743910906.1352522,
      {}
    ],
    [
      645,
      null,
      209652396,
      null,
      [
        0.19520279041237126,
        0.03949640572071076
      ],
      85.62595200538635,
      1,
      1743910906.3156967,
      1743910991.94367,
      {}
    ],
    [
      646,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010636422634124754
      ],
      198.08312249183655,
      1,
      1743911000.2406437,
      1743911198.32574,
      {}
    ],
    [
      647,
      null,
      209652396,
      null,
      [
        0.1884769442404173,
        0.0405073457956314
      ],
      135.90256667137146,
      1,
      1743911198.5102859,
      1743911334.4149077,
      {}
    ],
    [
      648,
      null,
      209652396,
      null,
      [
        0.23589566284177063,
        0.02419107913970947
      ],
      113.48211669921875,
      1,
      1743911334.6067562,
      1743911448.0909407,
      {}
    ],
    [
      649,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743911448.2526357,
      1743911448.4848258,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      650,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743911448.7011244,
      1743911448.8946753,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      651,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743911449.1112936,
      1743911952.2231412,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      652,
      null,
      209652396,
      null,
      [
        0.22631335797503463,
        0.025603673458099368
      ],
      122.33891558647156,
      1,
      1743911952.4426408,
      1743912074.78418,
      {}
    ],
    [
      653,
      null,
      209652396,
      null,
      [
        0.23454417002321196,
        0.023468708246946336
      ],
      92.70487236976624,
      1,
      1743912074.9498045,
      1743912167.6566713,
      {}
    ],
    [
      654,
      null,
      209652396,
      null,
      [
        0.23826041924844316,
        0.02155043065547943
      ],
      141.2237904071808,
      1,
      1743912176.4403527,
      1743912317.666229,
      {}
    ],
    [
      655,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743912317.8486373,
      1743912318.248413,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      656,
      null,
      209652396,
      null,
      [
        0.2381375455477252,
        0.021184900552034376
      ],
      241.9036967754364,
      1,
      1743912318.4641354,
      1743912560.3696942,
      {}
    ],
    [
      657,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743912560.5361683,
      1743912560.733512,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      658,
      null,
      209652396,
      null,
      [
        0.16105142295262057,
        0.06734999626874924
      ],
      123.63685274124146,
      1,
      1743912560.8980129,
      1743912684.536729,
      {}
    ],
    [
      659,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743912684.758942,
      1743912685.7159128,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      660,
      null,
      209652396,
      null,
      [
        0.19157882496205847,
        0.042490803599357606
      ],
      97.17389941215515,
      1,
      1743912685.896321,
      1743912783.0720744,
      {}
    ],
    [
      661,
      null,
      209652396,
      null,
      [
        0.18988815036719228,
        0.03996569082140923
      ],
      312.8895971775055,
      1,
      1743912783.2935312,
      1743913096.1855693,
      {}
    ],
    [
      662,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743913104.6922803,
      1743913153.0148127,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      663,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743913153.1833074,
      1743913176.9301858,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      664,
      null,
      209652396,
      null,
      [
        0.17806570755672552,
        0.04661757573485375
      ],
      177.99998021125793,
      1,
      1743913177.146211,
      1743913355.1480627,
      {}
    ],
    [
      665,
      null,
      209652396,
      null,
      [
        0.17769727979308816,
        0.05009749084711075
      ],
      97.09350728988647,
      1,
      1743913355.3380032,
      1743913452.4335861,
      {}
    ],
    [
      666,
      null,
      209652396,
      null,
      [
        0.22689687719627843,
        0.028271681070327757
      ],
      147.27550959587097,
      1,
      1743913452.6550105,
      1743913599.9330451,
      {}
    ],
    [
      667,
      null,
      209652396,
      null,
      [
        0.18712539483497564,
        0.04009372353553772
      ],
      124.14224648475647,
      1,
      1743913600.102094,
      1743913724.2463694,
      {}
    ],
    [
      668,
      null,
      209652396,
      null,
      [
        0.22966134919727735,
        0.023325908482074737
      ],
      96.1110782623291,
      1,
      1743913724.4159625,
      1743913820.5289204,
      {}
    ],
    [
      669,
      null,
      209652396,
      null,
      [
        0.19188589368230086,
        0.037890526056289675
      ],
      149.12391757965088,
      1,
      1743913820.6959574,
      1743913969.8217647,
      {}
    ],
    [
      670,
      null,
      209652396,
      null,
      [
        0.16876003238278686,
        0.05460679173469544
      ],
      119.50259280204773,
      1,
      1743913978.7369125,
      1743914098.2416859,
      {}
    ],
    [
      671,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914098.4144382,
      1743914098.678155,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      672,
      null,
      209652396,
      null,
      [
        0.1912717373795218,
        0.0406258650124073
      ],
      101.45476460456848,
      1,
      1743914098.8459074,
      1743914200.302589,
      {}
    ],
    [
      673,
      null,
      209652396,
      null,
      [
        0.22259771705879494,
        0.027350295186042782
      ],
      120.70152997970581,
      1,
      1743914200.5218651,
      1743914321.2257638,
      {}
    ],
    [
      674,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914321.4550648,
      1743914326.1097229,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      675,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914326.2809246,
      1743914335.8141139,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      676,
      null,
      209652396,
      null,
      [
        0.2195878701866726,
        0.026055898219347
      ],
      114.80250215530396,
      1,
      1743914335.994543,
      1743914450.7992065,
      {}
    ],
    [
      677,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914450.972915,
      1743914455.2216218,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      678,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914464.0289726,
      1743914639.6871593,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      679,
      null,
      209652396,
      null,
      [
        0.2361719341509761,
        0.018217484205961226
      ],
      206.7766695022583,
      1,
      1743914639.8665717,
      1743914846.6454062,
      {}
    ],
    [
      680,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914846.8177722,
      1743914853.7266436,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      681,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914853.9058704,
      1743914860.2618976,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      682,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914860.452977,
      1743914860.6854527,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      683,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914860.8794844,
      1743914861.0160813,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      684,
      null,
      209652396,
      null,
      [
        0.18239591503064556,
        0.04552520096302033
      ],
      104.48563122749329,
      1,
      1743914861.187206,
      1743914965.674618,
      {}
    ],
    [
      685,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743914965.9010918,
      1743914995.608988,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      686,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743915004.8196683,
      1743915005.026846,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      687,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.008837932944297789
      ],
      126.08625864982605,
      1,
      1743915005.2451992,
      1743915131.3333232,
      {}
    ],
    [
      688,
      null,
      209652396,
      null,
      [
        0.18786290582697768,
        0.04797503173351288
      ],
      91.20869541168213,
      1,
      1743915131.5337994,
      1743915222.7444932,
      {}
    ],
    [
      689,
      null,
      209652396,
      null,
      [
        0.2021128127415553,
        0.03356370255351067
      ],
      122.7568142414093,
      1,
      1743915222.970964,
      1743915345.7301142,
      {}
    ],
    [
      690,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743915345.9031582,
      1743915346.1080396,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      691,
      null,
      209652396,
      null,
      [
        0.1984582998056052,
        0.0399373236298561
      ],
      80.50981616973877,
      1,
      1743915346.2800272,
      1743915426.7917967,
      {}
    ],
    [
      692,
      null,
      209652396,
      null,
      [
        0.20613645606160577,
        0.032893331497907644
      ],
      88.9355890750885,
      1,
      1743915426.968298,
      1743915515.9060233,
      {}
    ],
    [
      693,
      null,
      209652396,
      null,
      [
        0.16918999838161514,
        0.059950214624404904
      ],
      249.95077776908875,
      1,
      1743915516.1337688,
      1743915766.086962,
      {}
    ],
    [
      694,
      null,
      209652396,
      null,
      [
        0.24056382604286797,
        0.017635706961154938
      ],
      131.22273755073547,
      1,
      1743915775.1350346,
      1743915906.3599608,
      {}
    ],
    [
      695,
      null,
      209652396,
      null,
      [
        0.23085885496065134,
        0.025337596386671064
      ],
      102.28871154785156,
      1,
      1743915906.5397592,
      1743916008.8304415,
      {}
    ],
    [
      696,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743916009.0149877,
      1743916360.163533,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      697,
      null,
      209652396,
      null,
      [
        0.22023304081687317,
        0.02649150103330612
      ],
      110.95324397087097,
      1,
      1743916360.358904,
      1743916471.3141732,
      {}
    ],
    [
      698,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743916471.5316992,
      1743916500.7811642,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      699,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743916500.9569767,
      1743916505.029421,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      700,
      null,
      209652396,
      null,
      [
        0.18519122688284367,
        0.046918153464794166
      ],
      196.551744222641,
      1,
      1743916505.2190979,
      1743916701.7728322,
      {}
    ],
    [
      701,
      null,
      209652396,
      null,
      [
        0.18098312918672202,
        0.04928653061389924
      ],
      682.1252093315125,
      1,
      1743916701.9669166,
      1743917384.0942955,
      {}
    ],
    [
      702,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.016355229467153547
      ],
      97.15303373336792,
      1,
      1743917384.6326606,
      1743917481.7877147,
      {}
    ],
    [
      703,
      null,
      209652396,
      null,
      [
        0.23939679231595398,
        0.02518399655818939
      ],
      292.9279296398163,
      1,
      1743917481.9742446,
      1743917774.904214,
      {}
    ],
    [
      704,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743917783.6928134,
      1743917783.893219,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      705,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001961371898651123
      ],
      82.85282349586487,
      1,
      1743917784.1021452,
      1743917866.956793,
      {}
    ],
    [
      706,
      null,
      209652396,
      null,
      [
        0.18761713484767378,
        0.04250911042094231
      ],
      120.6739501953125,
      1,
      1743917867.1353993,
      1743917987.8114007,
      {}
    ],
    [
      707,
      null,
      209652396,
      null,
      [
        0.1939751238403933,
        0.040179158598184585
      ],
      112.32290196418762,
      1,
      1743917987.9901068,
      1743918100.315139,
      {}
    ],
    [
      708,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743918100.4930305,
      1743918100.619223,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      709,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        3.3887922763824454e-05
      ],
      177.4248857498169,
      1,
      1743918100.7965462,
      1743918278.223186,
      {}
    ],
    [
      710,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743918287.9527638,
      1743918340.5594113,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      711,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743918340.7409794,
      1743918421.724526,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      712,
      null,
      209652396,
      null,
      [
        0.16734742573065925,
        0.05730802237987519
      ],
      183.26997208595276,
      1,
      1743918421.9221258,
      1743918605.194282,
      {}
    ],
    [
      713,
      null,
      209652396,
      null,
      [
        0.19658477884525788,
        0.03707634404301643
      ],
      104.97390532493591,
      1,
      1743918605.3797233,
      1743918710.3555665,
      {}
    ],
    [
      714,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743918710.5416858,
      1743918710.7572975,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      715,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743918710.936114,
      1743918822.07488,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      716,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743918822.2566922,
      1743918822.3837705,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      717,
      null,
      209652396,
      null,
      [
        0.23964245012149207,
        0.015305720269680023
      ],
      106.90138339996338,
      1,
      1743918822.562701,
      1743918929.465903,
      {}
    ],
    [
      718,
      null,
      209652396,
      null,
      [
        0.23564996731164395,
        0.01775087296962738
      ],
      127.87337303161621,
      1,
      1743918938.9228597,
      1743919066.798313,
      {}
    ],
    [
      719,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743919067.0127652,
      1743919067.2250812,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      720,
      null,
      209652396,
      null,
      [
        0.16387680601752458,
        0.06969221949577331
      ],
      122.57873392105103,
      1,
      1743919067.4609864,
      1743919190.0420532,
      {}
    ],
    [
      721,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.022468665987253188
      ],
      118.3094310760498,
      1,
      1743919190.2866037,
      1743919308.5986667,
      {}
    ],
    [
      722,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743919308.8393872,
      1743919309.215095,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      723,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743919309.4501443,
      1743919311.2358627,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      724,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743919311.4162571,
      1743919445.9870512,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      725,
      null,
      209652396,
      null,
      [
        0.24010313808218,
        0.018005584031343457
      ],
      111.8777391910553,
      1,
      1743919446.1738572,
      1743919558.0538783,
      {}
    ],
    [
      726,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010558255314826966
      ],
      136.507395029068,
      1,
      1743919567.8591666,
      1743919704.3687398,
      {}
    ],
    [
      727,
      null,
      209652396,
      null,
      [
        0.1718314882237038,
        0.058656116425991056
      ],
      199.38547158241272,
      1,
      1743919704.5538912,
      1743919903.941723,
      {}
    ],
    [
      728,
      null,
      209652396,
      null,
      [
        0.1693129946872462,
        0.06016994401812553
      ],
      297.1699299812317,
      1,
      1743919904.132303,
      1743920201.3048322,
      {}
    ],
    [
      729,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.010970598757266997
      ],
      111.94827651977539,
      1,
      1743920201.4858327,
      1743920313.4360945,
      {}
    ],
    [
      730,
      null,
      209652396,
      null,
      [
        0.18254984078337372,
        0.04526009306311607
      ],
      131.22682666778564,
      1,
      1743920313.6828184,
      1743920444.9123418,
      {}
    ],
    [
      731,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743920445.097343,
      1743920445.2976422,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      732,
      null,
      209652396,
      null,
      [
        0.15377290212619554,
        0.08986132442951203
      ],
      121.59522747993469,
      1,
      1743920445.4804854,
      1743920567.0775585,
      {}
    ],
    [
      733,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743920567.2720551,
      1743920577.439227,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      734,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001324421465396881
      ],
      130.23615074157715,
      1,
      1743920587.097608,
      1743920717.335915,
      {}
    ],
    [
      735,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743920717.52127,
      1743920726.7149801,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      736,
      null,
      209652396,
      null,
      [
        0.22864736884197961,
        0.02728220373392105
      ],
      169.36824941635132,
      1,
      1743920726.92307,
      1743920896.2933128,
      {}
    ],
    [
      737,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743920896.4867563,
      1743920896.6244624,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      738,
      null,
      209652396,
      null,
      [
        0.16989662236668227,
        0.05276103079319
      ],
      139.18722224235535,
      1,
      1743920896.8293424,
      1743921036.0183804,
      {}
    ],
    [
      739,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0027345559000968933
      ],
      140.04706740379333,
      1,
      1743921036.2066844,
      1743921176.2558396,
      {}
    ],
    [
      740,
      null,
      209652396,
      null,
      [
        0.1619422230949177,
        0.06722810596227646
      ],
      131.9198546409607,
      1,
      1743921176.4626245,
      1743921308.3845716,
      {}
    ],
    [
      741,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0036329674720764157
      ],
      105.63131165504456,
      1,
      1743921308.5721228,
      1743921414.2054067,
      {}
    ],
    [
      742,
      null,
      209652396,
      null,
      [
        0.22898655061828715,
        0.02320591971278191
      ],
      102.50526523590088,
      1,
      1743921423.813844,
      1743921526.321193,
      {}
    ],
    [
      743,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921526.5653481,
      1743921539.4384105,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      744,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.02096175536513329
      ],
      95.87545490264893,
      1,
      1743921539.6333218,
      1743921635.5109427,
      {}
    ],
    [
      745,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921635.7221847,
      1743921635.9304912,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      746,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921636.1739504,
      1743921636.3691094,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      747,
      null,
      209652396,
      null,
      [
        0.1874020528212145,
        0.043573372066020966
      ],
      101.87816190719604,
      1,
      1743921636.5822291,
      1743921738.4621916,
      {}
    ],
    [
      748,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921738.7393732,
      1743921739.148392,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      749,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921739.3843653,
      1743921739.573095,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      750,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921749.269167,
      1743921767.4693925,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      751,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921767.661132,
      1743921775.9164824,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      752,
      null,
      209652396,
      null,
      [
        0.18254962858256268,
        0.0453057873249054
      ],
      129.87461256980896,
      1,
      1743921776.1068373,
      1743921905.9835773,
      {}
    ],
    [
      753,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921906.294867,
      1743921927.629419,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      754,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921927.8921905,
      1743921938.0563178,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      755,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921938.3059037,
      1743921945.229064,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      756,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743921945.4271288,
      1743922106.6249444,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      757,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743922106.848132,
      1743922107.0389557,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      758,
      null,
      209652396,
      null,
      [
        0.15426433562661107,
        0.07950972154736519
      ],
      293.42608976364136,
      1,
      1743922116.8983495,
      1743922410.3266966,
      {}
    ],
    [
      759,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011012294739484788
      ],
      123.66430830955505,
      1,
      1743922410.519535,
      1743922534.185886,
      {}
    ],
    [
      760,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743922534.4009945,
      1743922550.053673,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      761,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743922550.2472496,
      1743922574.4410913,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      762,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743922574.6677294,
      1743922583.60818,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      763,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.021446999907493592
      ],
      168.46802878379822,
      1,
      1743922583.8213007,
      1743922752.2913537,
      {}
    ],
    [
      764,
      null,
      209652396,
      null,
      [
        0.22296603164866635,
        0.02600012913346291
      ],
      80.0100691318512,
      1,
      1743922752.514006,
      1743922832.5263252,
      {}
    ],
    [
      765,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        9.179115295410158e-08
      ],
      226.9386715888977,
      1,
      1743922832.7193477,
      1743923059.6602368,
      {}
    ],
    [
      766,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743923069.9158804,
      1743923370.013605,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      767,
      null,
      209652396,
      null,
      [
        0.17671413928898957,
        0.05200265914201737
      ],
      97.23313474655151,
      1,
      1743923370.2103918,
      1743923467.4457486,
      {}
    ],
    [
      768,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743923467.6399353,
      1743923481.7680414,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      769,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0007977423071861267
      ],
      114.86729431152344,
      1,
      1743923481.9595807,
      1743923596.8288875,
      {}
    ],
    [
      770,
      null,
      209652396,
      null,
      [
        0.19861162196491539,
        0.03532881259918213
      ],
      105.0213553905487,
      1,
      1743923597.0205307,
      1743923702.0437534,
      {}
    ],
    [
      771,
      null,
      209652396,
      null,
      [
        0.24019527567431762,
        0.01685437768697739
      ],
      108.74094605445862,
      1,
      1743923702.3240502,
      1743923811.0674603,
      {}
    ],
    [
      772,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0013322052359580991
      ],
      103.39958310127258,
      1,
      1743923811.3200853,
      1743923914.7222111,
      {}
    ],
    [
      773,
      null,
      209652396,
      null,
      [
        0.19738331879050441,
        0.03520703569054604
      ],
      123.85102415084839,
      1,
      1743923914.938814,
      1743924038.7919655,
      {}
    ],
    [
      774,
      null,
      209652396,
      null,
      [
        0.18601988519653187,
        0.04397699519991875
      ],
      120.46782088279724,
      1,
      1743924049.2935889,
      1743924169.7636044,
      {}
    ],
    [
      775,
      null,
      209652396,
      null,
      [
        0.19222387770291963,
        0.039811018854379654
      ],
      249.44353461265564,
      1,
      1743924170.0364168,
      1743924419.4825315,
      {}
    ],
    [
      776,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743924419.6793735,
      1743924478.202027,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      777,
      null,
      209652396,
      null,
      [
        0.23343875469623976,
        0.02091157525777817
      ],
      83.31056308746338,
      1,
      1743924478.3989003,
      1743924561.7114751,
      {}
    ],
    [
      778,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743924561.906906,
      1743924568.3939967,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      779,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743924568.5932298,
      1743924569.5140224,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      780,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743924569.7085922,
      1743924577.1376874,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      781,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743924577.3436072,
      1743924577.50686,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      782,
      null,
      209652396,
      null,
      [
        0.23921249826938454,
        0.024198468029499053
      ],
      130.19808983802795,
      1,
      1743924587.6915476,
      1743924717.8918703,
      {}
    ],
    [
      783,
      null,
      209652396,
      null,
      [
        0.23770756068660265,
        0.02089021481573582
      ],
      120.91880798339844,
      1,
      1743924718.098689,
      1743924839.0197475,
      {}
    ],
    [
      784,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743924839.2760797,
      1743924924.8740196,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      785,
      null,
      209652396,
      null,
      [
        0.17269131647874164,
        0.05179315447807311
      ],
      235.90886068344116,
      1,
      1743924925.0834477,
      1743925160.9945934,
      {}
    ],
    [
      786,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743925161.194694,
      1743925161.4293914,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      787,
      null,
      209652396,
      null,
      [
        0.1893372912085487,
        0.0434527511894703
      ],
      161.4341266155243,
      1,
      1743925161.6258519,
      1743925323.061892,
      {}
    ],
    [
      788,
      null,
      209652396,
      null,
      [
        0.21442840552121986,
        0.03128343477845192
      ],
      110.66673231124878,
      1,
      1743925323.2631774,
      1743925433.9319978,
      {}
    ],
    [
      789,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01952616810798645
      ],
      130.65906620025635,
      1,
      1743925434.1923776,
      1743925564.8539784,
      {}
    ],
    [
      790,
      null,
      209652396,
      null,
      [
        0.19151756494570865,
        0.041735140532255174
      ],
      114.25765466690063,
      1,
      1743925565.4924479,
      1743925679.7520964,
      {}
    ],
    [
      791,
      null,
      209652396,
      null,
      [
        0.17643812262075736,
        0.05076354175806045
      ],
      108.98995995521545,
      1,
      1743925679.9510837,
      1743925788.9431014,
      {}
    ],
    [
      792,
      null,
      209652396,
      null,
      [
        0.19446588301378717,
        0.03528545916080475
      ],
      123.36768555641174,
      1,
      1743925798.833982,
      1743925922.2037952,
      {}
    ],
    [
      793,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0008133143186569214
      ],
      102.26007914543152,
      1,
      1743925922.4326875,
      1743926024.6948543,
      {}
    ],
    [
      794,
      null,
      209652396,
      null,
      [
        0.19793624337037508,
        0.03318899676203728
      ],
      156.4183988571167,
      1,
      1743926024.9592988,
      1743926181.3803117,
      {}
    ],
    [
      795,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743926181.580852,
      1743926181.8500834,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      796,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743926182.0498283,
      1743926330.7971883,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      797,
      null,
      209652396,
      null,
      [
        0.2046930944386034,
        0.034156151860952375
      ],
      236.56792950630188,
      1,
      1743926330.9988916,
      1743926567.56897,
      {}
    ],
    [
      798,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743926578.3677094,
      1743926587.7274745,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      799,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743926587.9292989,
      1743926674.8090076,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      800,
      null,
      209652396,
      null,
      [
        0.21593317805892656,
        0.027085851579904556
      ],
      87.9701337814331,
      1,
      1743926675.0239434,
      1743926762.9961276,
      {}
    ],
    [
      801,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743926763.2755258,
      1743926763.4496071,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      802,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743926763.6585093,
      1743926859.6190712,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      803,
      null,
      209652396,
      null,
      [
        0.1520531560202219,
        0.08654351115226747
      ],
      109.34868288040161,
      1,
      1743926859.853922,
      1743926969.2046134,
      {}
    ],
    [
      804,
      null,
      209652396,
      null,
      [
        0.20444697450685476,
        0.03382367983460427
      ],
      134.60317373275757,
      1,
      1743926969.4668746,
      1743927104.072514,
      {}
    ],
    [
      805,
      null,
      209652396,
      null,
      [
        0.19133300682701881,
        0.03811539515852928
      ],
      62.46481394767761,
      1,
      1743927104.2784517,
      1743927166.745291,
      {}
    ],
    [
      806,
      null,
      209652396,
      null,
      [
        0.2289852019642439,
        0.02693421386182308
      ],
      105.50497555732727,
      1,
      1743927167.4000187,
      1743927272.9068882,
      {}
    ],
    [
      807,
      null,
      209652396,
      null,
      [
        0.19071903443160926,
        0.04251754358410835
      ],
      115.10626935958862,
      1,
      1743927283.0713682,
      1743927398.1797037,
      {}
    ],
    [
      808,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.005703084468841552
      ],
      94.5601236820221,
      1,
      1743927398.3860834,
      1743927492.9481368,
      {}
    ],
    [
      809,
      null,
      209652396,
      null,
      [
        0.24025670073574265,
        0.02182303696870804
      ],
      126.75518751144409,
      1,
      1743927493.2129161,
      1743927619.970572,
      {}
    ],
    [
      810,
      null,
      209652396,
      null,
      [
        0.20407843828502514,
        0.03254513442516327
      ],
      100.38263964653015,
      1,
      1743927620.1712108,
      1743927720.5558064,
      {}
    ],
    [
      811,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743927720.8226979,
      1743927868.4342782,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      812,
      null,
      209652396,
      null,
      [
        0.19455780368954023,
        0.03548408806324005
      ],
      143.51158094406128,
      1,
      1743927868.640296,
      1743928012.1540115,
      {}
    ],
    [
      813,
      null,
      209652396,
      null,
      [
        0.2171608870710667,
        0.029204811751842502
      ],
      120.37929487228394,
      1,
      1743928012.3593001,
      1743928132.7407975,
      {}
    ],
    [
      814,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743928143.5915172,
      1743928150.4025612,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      815,
      null,
      209652396,
      null,
      [
        0.22708116652727428,
        0.02621151551604271
      ],
      164.19773030281067,
      1,
      1743928150.623861,
      1743928314.8234818,
      {}
    ],
    [
      816,
      null,
      209652396,
      null,
      [
        0.18761706411407014,
        0.043811611533164985
      ],
      116.40182089805603,
      1,
      1743928315.060335,
      1743928431.4641888,
      {}
    ],
    [
      817,
      null,
      209652396,
      null,
      [
        0.23804552112935343,
        0.019955561161041257
      ],
      134.80588912963867,
      1,
      1743928431.7305481,
      1743928566.5389743,
      {}
    ],
    [
      818,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743928566.766811,
      1743928602.8339787,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      819,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743928603.0793571,
      1743928703.4271579,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      820,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743928703.634778,
      1743928706.8200693,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      821,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743928707.0250251,
      1743928720.8263304,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      822,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743928721.520924,
      1743928743.447057,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      823,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743928753.9870877,
      1743928887.4492462,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      824,
      null,
      209652396,
      null,
      [
        0.23988829183439958,
        0.005810430198907852
      ],
      118.78865218162537,
      1,
      1743928887.6626394,
      1743929006.4536376,
      {}
    ],
    [
      825,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743929006.6620312,
      1743929009.3538098,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      826,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743929009.556962,
      1743929010.155704,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      827,
      null,
      209652396,
      null,
      [
        0.1982743688582012,
        0.03322946771979332
      ],
      184.0005431175232,
      1,
      1743929010.3616693,
      1743929194.364059,
      {}
    ],
    [
      828,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743929194.57211,
      1743929194.7735646,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      829,
      null,
      209652396,
      null,
      [
        0.18138264201138452,
        0.04790665596723556
      ],
      115.16344332695007,
      1,
      1743929194.9792876,
      1743929310.1444647,
      {}
    ],
    [
      830,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011020267307758331
      ],
      308.64390420913696,
      1,
      1743929321.1436238,
      1743929629.7896695,
      {}
    ],
    [
      831,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743929629.9987767,
      1743929660.9695835,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      832,
      null,
      209652396,
      null,
      [
        0.2030038533781049,
        0.03195716425776482
      ],
      102.27616620063782,
      1,
      1743929661.1803274,
      1743929763.45878,
      {}
    ],
    [
      833,
      null,
      209652396,
      null,
      [
        0.18264174731240598,
        0.046959899514913556
      ],
      114.66473770141602,
      1,
      1743929763.6855323,
      1743929878.3524785,
      {}
    ],
    [
      834,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743929878.5966997,
      1743929878.8088531,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      835,
      null,
      209652396,
      null,
      [
        0.23838335896719132,
        0.01944064140319824
      ],
      91.5450291633606,
      1,
      1743929879.015298,
      1743929970.5621104,
      {}
    ],
    [
      836,
      null,
      209652396,
      null,
      [
        0.2184202894532236,
        0.029158311039209368
      ],
      97.85768008232117,
      1,
      1743929970.779288,
      1743930068.6388564,
      {}
    ],
    [
      837,
      null,
      209652396,
      null,
      [
        0.19870412265621845,
        0.035033599883317945
      ],
      111.51353216171265,
      1,
      1743930068.8983476,
      1743930180.4138682,
      {}
    ],
    [
      838,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743930191.6808865,
      1743930213.0319042,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      839,
      null,
      209652396,
      null,
      [
        0.18267250699885432,
        0.0467076475918293
      ],
      193.0035982131958,
      1,
      1743930213.3040314,
      1743930406.3100438,
      {}
    ],
    [
      840,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743930406.5456743,
      1743930406.7608352,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      841,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        1.9073486328124997e-08
      ],
      136.40509867668152,
      1,
      1743930407.0657828,
      1743930543.4730256,
      {}
    ],
    [
      842,
      null,
      209652396,
      null,
      [
        0.20386300730612109,
        0.029083285480737693
      ],
      288.70675468444824,
      1,
      1743930543.6837323,
      1743930832.3926065,
      {}
    ],
    [
      843,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743930832.6046274,
      1743930832.8380058,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      844,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743930833.0477018,
      1743930835.163714,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      845,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743930835.3807607,
      1743930835.504989,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      846,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743930846.51479,
      1743930846.7260895,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      847,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01427556812763214
      ],
      97.4287703037262,
      1,
      1743930846.9466789,
      1743930944.3772318,
      {}
    ],
    [
      848,
      null,
      209652396,
      null,
      [
        0.20334140356595448,
        0.03198159590363502
      ],
      120.31259536743164,
      1,
      1743930944.5885844,
      1743931064.9030519,
      {}
    ],
    [
      849,
      null,
      209652396,
      null,
      [
        0.1919167335335,
        0.04171347007155418
      ],
      127.58014464378357,
      1,
      1743931065.1148906,
      1743931192.6970081,
      {}
    ],
    [
      850,
      null,
      209652396,
      null,
      [
        0.19575572913896266,
        0.03882542669773102
      ],
      91.96061539649963,
      1,
      1743931192.9123836,
      1743931284.8750381,
      {}
    ],
    [
      851,
      null,
      209652396,
      null,
      [
        0.19385153337249145,
        0.04117981866002083
      ],
      128.143061876297,
      1,
      1743931285.1547801,
      1743931413.3004625,
      {}
    ],
    [
      852,
      null,
      209652396,
      null,
      [
        0.17428833035120458,
        0.05186526000499726
      ],
      106.13794922828674,
      1,
      1743931413.5464242,
      1743931519.6864588,
      {}
    ],
    [
      853,
      null,
      209652396,
      null,
      [
        0.17914065556281125,
        0.04886679232120514
      ],
      125.42055630683899,
      1,
      1743931519.900975,
      1743931645.323532,
      {}
    ],
    [
      854,
      null,
      209652396,
      null,
      [
        0.18193549585765154,
        0.05001352712512016
      ],
      142.66255807876587,
      1,
      1743931656.7983017,
      1743931799.4630482,
      {}
    ],
    [
      855,
      null,
      209652396,
      null,
      [
        0.18912187909193895,
        0.04334077194333076
      ],
      90.18653440475464,
      1,
      1743931799.6756365,
      1743931889.8641777,
      {}
    ],
    [
      856,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743931890.147058,
      1743932044.1498332,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      857,
      null,
      209652396,
      null,
      [
        0.19038123431836004,
        0.039126394391059874
      ],
      97.26120209693909,
      1,
      1743932044.3656125,
      1743932141.6288302,
      {}
    ],
    [
      858,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743932141.9331145,
      1743932143.823586,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      859,
      null,
      209652396,
      null,
      [
        0.18426935582624204,
        0.0425535923242569
      ],
      168.07051539421082,
      1,
      1743932144.0836968,
      1743932312.1563225,
      {}
    ],
    [
      860,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743932312.391176,
      1743932312.5829778,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      861,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743932312.796103,
      1743932329.5365493,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      862,
      null,
      209652396,
      null,
      [
        0.2398881503671923,
        0.016153019070625305
      ],
      126.38318967819214,
      1,
      1743932330.2681088,
      1743932456.653446,
      {}
    ],
    [
      863,
      null,
      209652396,
      null,
      [
        0.2401646621706502,
        0.028986240923404693
      ],
      122.39950489997864,
      1,
      1743932467.7534645,
      1743932590.1548924,
      {}
    ],
    [
      864,
      null,
      209652396,
      null,
      [
        0.19993277949864777,
        0.033438984006643295
      ],
      154.83238315582275,
      1,
      1743932590.4335296,
      1743932745.2683442,
      {}
    ],
    [
      865,
      null,
      209652396,
      null,
      [
        0.22809498183749682,
        0.026419545710086822
      ],
      112.67199397087097,
      1,
      1743932745.483441,
      1743932858.157417,
      {}
    ],
    [
      866,
      null,
      209652396,
      null,
      [
        0.1701728465201519,
        0.0566151063144207
      ],
      203.23419547080994,
      1,
      1743932858.3706524,
      1743933061.6067612,
      {}
    ],
    [
      867,
      null,
      209652396,
      null,
      [
        0.22133778181682376,
        0.02247507527470589
      ],
      245.64621138572693,
      1,
      1743933061.8259223,
      1743933307.4742477,
      {}
    ],
    [
      868,
      null,
      209652396,
      null,
      [
        0.20533778879587264,
        0.03589735135436058
      ],
      93.05960059165955,
      1,
      1743933307.6899061,
      1743933400.7515457,
      {}
    ],
    [
      869,
      null,
      209652396,
      null,
      [
        0.20119181406606557,
        0.02992658197879791
      ],
      110.18635535240173,
      1,
      1743933400.9651098,
      1743933511.153426,
      {}
    ],
    [
      870,
      null,
      209652396,
      null,
      [
        0.1952643616565772,
        0.03786518394947053
      ],
      128.77226996421814,
      1,
      1743933522.9791083,
      1743933651.753493,
      {}
    ],
    [
      871,
      null,
      209652396,
      null,
      [
        0.2377996982787402,
        0.019980267286300656
      ],
      130.45628595352173,
      1,
      1743933651.9711072,
      1743933782.4295616,
      {}
    ],
    [
      872,
      null,
      209652396,
      null,
      [
        0.15699750565020026,
        0.07520261481404304
      ],
      103.13949394226074,
      1,
      1743933782.6517832,
      1743933885.7935858,
      {}
    ],
    [
      873,
      null,
      209652396,
      null,
      [
        0.17054140631984943,
        0.05521486386656761
      ],
      190.29062604904175,
      1,
      1743933886.0191422,
      1743934076.3120654,
      {}
    ],
    [
      874,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011018839776515962
      ],
      113.25895738601685,
      1,
      1743934076.5334933,
      1743934189.7945042,
      {}
    ],
    [
      875,
      null,
      209652396,
      null,
      [
        0.23773841468452245,
        0.023759358972311018
      ],
      98.61098551750183,
      1,
      1743934190.0810215,
      1743934288.6943939,
      {}
    ],
    [
      876,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743934288.9780731,
      1743934479.8803535,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      877,
      null,
      209652396,
      null,
      [
        0.19268454208573968,
        0.040569283068180084
      ],
      135.90130615234375,
      1,
      1743934480.1012185,
      1743934616.0045083,
      {}
    ],
    [
      878,
      null,
      209652396,
      null,
      [
        0.18015438127713576,
        0.047760265618562704
      ],
      117.85703873634338,
      1,
      1743934628.031642,
      1743934745.8907647,
      {}
    ],
    [
      879,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743934746.145851,
      1743934746.2979715,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      880,
      null,
      209652396,
      null,
      [
        0.189582600061642,
        0.04168458342552185
      ],
      119.31337141990662,
      1,
      1743934746.5510585,
      1743934865.8662434,
      {}
    ],
    [
      881,
      null,
      209652396,
      null,
      [
        0.20217417650052383,
        0.03178954213857651
      ],
      135.0120131969452,
      1,
      1743934866.1570117,
      1743935001.1715937,
      {}
    ],
    [
      882,
      null,
      209652396,
      null,
      [
        0.19434291971717121,
        0.035201014727354055
      ],
      170.2299027442932,
      1,
      1743935001.4614997,
      1743935171.6938996,
      {}
    ],
    [
      883,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743935171.9148326,
      1743935172.068135,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      884,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0067887714505195625
      ],
      158.81477665901184,
      1,
      1743935172.2854347,
      1743935331.1020713,
      {}
    ],
    [
      885,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743935331.3219059,
      1743935334.9242067,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      886,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0120207878947258
      ],
      179.00745940208435,
      1,
      1743935347.9883308,
      1743935526.9980695,
      {}
    ],
    [
      887,
      null,
      209652396,
      null,
      [
        0.23915104963009157,
        0.02013909548521042
      ],
      107.04655694961548,
      1,
      1743935527.2188456,
      1743935634.2673779,
      {}
    ],
    [
      888,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743935634.5560756,
      1743935634.7691743,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      889,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743935635.0419798,
      1743935665.3132737,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      890,
      null,
      209652396,
      null,
      [
        0.17542463268511171,
        0.04785152688622475
      ],
      168.9431517124176,
      1,
      1743935665.5349543,
      1743935834.480334,
      {}
    ],
    [
      891,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743935834.7138796,
      1743935834.96636,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      892,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743935835.1944256,
      1743935953.412088,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      893,
      null,
      209652396,
      null,
      [
        0.24065596363500558,
        0.014661660641431809
      ],
      110.85111045837402,
      1,
      1743935953.6435924,
      1743936064.497401,
      {}
    ],
    [
      894,
      null,
      209652396,
      null,
      [
        0.19934898677413648,
        0.03389774143695831
      ],
      122.7177164554596,
      1,
      1743936065.263982,
      1743936187.9836535,
      {}
    ],
    [
      895,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.016690579056739808
      ],
      166.8139591217041,
      1,
      1743936199.5990622,
      1743936366.4152708,
      {}
    ],
    [
      896,
      null,
      209652396,
      null,
      [
        0.23918176216080406,
        0.020219473242759706
      ],
      120.74997162818909,
      1,
      1743936366.6390269,
      1743936487.3910167,
      {}
    ],
    [
      897,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743936487.6121392,
      1743936579.8083572,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      898,
      null,
      209652396,
      null,
      [
        0.14950399239321394,
        0.10246398806571962
      ],
      198.15659165382385,
      1,
      1743936580.109682,
      1743936778.2689564,
      {}
    ],
    [
      899,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743936778.4956594,
      1743936814.8568456,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      900,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.010109694600105286
      ],
      213.03240704536438,
      1,
      1743936815.0998726,
      1743937028.1344287,
      {}
    ],
    [
      901,
      null,
      209652396,
      null,
      [
        0.18915262934724011,
        0.041666609793901445
      ],
      150.97163224220276,
      1,
      1743937028.363863,
      1743937179.3375933,
      {}
    ],
    [
      902,
      null,
      209652396,
      null,
      [
        0.19148680525926035,
        0.03496482878923416
      ],
      501.63490772247314,
      1,
      1743937191.4919693,
      1743937693.1289535,
      {}
    ],
    [
      903,
      null,
      209652396,
      null,
      [
        0.19114914189764487,
        0.03543715447187423
      ],
      144.85570406913757,
      1,
      1743937693.3568118,
      1743937838.2145607,
      {}
    ],
    [
      904,
      null,
      209652396,
      null,
      [
        0.23881335325946101,
        0.020835179984569553
      ],
      132.34883642196655,
      1,
      1743937838.4942336,
      1743937970.8452077,
      {}
    ],
    [
      905,
      null,
      209652396,
      null,
      [
        0.19222392014308182,
        0.04072477385401725
      ],
      92.868567943573,
      1,
      1743937971.097564,
      1743938063.9681408,
      {}
    ],
    [
      906,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743938064.2614734,
      1743938165.5100482,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      907,
      null,
      209652396,
      null,
      [
        0.17987786004253067,
        0.048245195150375356
      ],
      123.77897667884827,
      1,
      1743938165.7391744,
      1743938289.5202096,
      {}
    ],
    [
      908,
      null,
      209652396,
      null,
      [
        0.23872107420011615,
        0.022989281117916108
      ],
      100.51075553894043,
      1,
      1743938289.7473378,
      1743938390.2601213,
      {}
    ],
    [
      909,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743938390.5660014,
      1743938390.807216,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      910,
      null,
      209652396,
      null,
      [
        0.19160952334605028,
        0.039724034965038305
      ],
      114.72496819496155,
      1,
      1743938402.6761918,
      1743938517.4033327,
      {}
    ],
    [
      911,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743938517.637104,
      1743938524.236838,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      912,
      null,
      209652396,
      null,
      [
        0.1975676364149418,
        0.036950727105140684
      ],
      108.5831937789917,
      1,
      1743938524.4653652,
      1743938633.0505712,
      {}
    ],
    [
      913,
      null,
      209652396,
      null,
      [
        0.22738859363110864,
        0.022986890077590943
      ],
      119.43936276435852,
      1,
      1743938633.340914,
      1743938752.7822804,
      {}
    ],
    [
      914,
      null,
      209652396,
      null,
      [
        0.19977878772788954,
        0.03241955026984215
      ],
      128.419575214386,
      1,
      1743938753.0096977,
      1743938881.4312198,
      {}
    ],
    [
      915,
      null,
      209652396,
      null,
      [
        0.2059828368211602,
        0.030986939966678617
      ],
      132.17117428779602,
      1,
      1743938881.6604016,
      1743939013.83344,
      {}
    ],
    [
      916,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.006886964291334152
      ],
      113.52731728553772,
      1,
      1743939014.0616653,
      1743939127.5911,
      {}
    ],
    [
      917,
      null,
      209652396,
      null,
      [
        0.240625251104293,
        0.026283328533172605
      ],
      129.46802735328674,
      1,
      1743939127.8607414,
      1743939257.3307333,
      {}
    ],
    [
      918,
      null,
      209652396,
      null,
      [
        0.19250032348834742,
        0.04091964945197105
      ],
      110.09131574630737,
      1,
      1743939269.4250536,
      1743939379.5184662,
      {}
    ],
    [
      919,
      null,
      209652396,
      null,
      [
        0.1954792503445198,
        0.034899473339319226
      ],
      124.53805160522461,
      1,
      1743939379.7471855,
      1743939504.2871509,
      {}
    ],
    [
      920,
      null,
      209652396,
      null,
      [
        0.18334814494994137,
        0.04692852631211281
      ],
      98.33004570007324,
      1,
      1743939504.5190604,
      1743939602.851118,
      {}
    ],
    [
      921,
      null,
      209652396,
      null,
      [
        0.23801493591912753,
        0.022710599452257153
      ],
      126.73966717720032,
      1,
      1743939603.078485,
      1743939729.8200498,
      {}
    ],
    [
      922,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743939730.0993648,
      1743939730.2867286,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      923,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743939730.5472398,
      1743939879.7893105,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      924,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743939880.0414739,
      1743939880.1814861,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      925,
      null,
      209652396,
      null,
      [
        0.1806763434008943,
        0.047103074938058855
      ],
      161.95627212524414,
      1,
      1743939880.415144,
      1743940042.373388,
      {}
    ],
    [
      926,
      null,
      209652396,
      null,
      [
        0.18887638633147613,
        0.04612878575921058
      ],
      137.8499116897583,
      1,
      1743940055.0344307,
      1743940192.8865113,
      {}
    ],
    [
      927,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743940193.1211483,
      1743940308.7677817,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      928,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743940308.999214,
      1743940346.085209,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      929,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743940346.3170145,
      1743940375.4029572,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      930,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743940375.6476257,
      1743940386.7687328,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      931,
      null,
      209652396,
      null,
      [
        0.201283852631158,
        0.032427590042352676
      ],
      133.28332448005676,
      1,
      1743940387.0000236,
      1743940520.2852652,
      {}
    ],
    [
      932,
      null,
      209652396,
      null,
      [
        0.19747567801460017,
        0.03048271551728248
      ],
      122.26001310348511,
      1,
      1743940520.5158386,
      1743940642.7776926,
      {}
    ],
    [
      933,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010836408734321595
      ],
      100.56072664260864,
      1,
      1743940643.0126405,
      1743940743.5752892,
      {}
    ],
    [
      934,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743940755.8641145,
      1743940908.7932436,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      935,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743940909.0260477,
      1743940909.3068438,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      936,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743940909.538722,
      1743940909.6938045,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      937,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743940909.92622,
      1743940910.0993402,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      938,
      null,
      209652396,
      null,
      [
        0.19293014801996838,
        0.03987398684024811
      ],
      153.16641211509705,
      1,
      1743940910.334959,
      1743941063.5032916,
      {}
    ],
    [
      939,
      null,
      209652396,
      null,
      [
        0.1912410531422507,
        0.040942553281784054
      ],
      394.4446187019348,
      1,
      1743941063.7380917,
      1743941458.1847723,
      {}
    ],
    [
      940,
      null,
      209652396,
      null,
      [
        0.16212649356361933,
        0.07044994816184044
      ],
      118.30510115623474,
      1,
      1743941458.4167643,
      1743941576.7238688,
      {}
    ],
    [
      941,
      null,
      209652396,
      null,
      [
        0.1687600512450812,
        0.055704131722450256
      ],
      96.02199411392212,
      1,
      1743941576.958444,
      1743941672.982263,
      {}
    ],
    [
      942,
      null,
      209652396,
      null,
      [
        0.19824338753979473,
        0.03438672304153442
      ],
      133.1540231704712,
      1,
      1743941685.9104576,
      1743941819.0665398,
      {}
    ],
    [
      943,
      null,
      209652396,
      null,
      [
        0.19474222977216987,
        0.0373744547367096
      ],
      87.525315284729,
      1,
      1743941819.3215415,
      1743941906.848666,
      {}
    ],
    [
      944,
      null,
      209652396,
      null,
      [
        0.23988829183439958,
        0.014386392235755921
      ],
      104.60233068466187,
      1,
      1743941907.0872884,
      1743942011.6916504,
      {}
    ],
    [
      945,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.017304759472608563
      ],
      134.8973047733307,
      1,
      1743942011.997652,
      1743942146.8971236,
      {}
    ],
    [
      946,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00020270615816116332
      ],
      142.4365952014923,
      1,
      1743942147.1333442,
      1743942289.5719893,
      {}
    ],
    [
      947,
      null,
      209652396,
      null,
      [
        0.23614126406042574,
        0.020109676122665406
      ],
      117.56473088264465,
      1,
      1743942289.823693,
      1743942407.3904514,
      {}
    ],
    [
      948,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743942407.6362512,
      1743942527.4808881,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      949,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743942527.7242014,
      1743942607.002892,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      950,
      null,
      209652396,
      null,
      [
        0.20275782775782777,
        0.03215361222624778
      ],
      170.3612458705902,
      1,
      1743942619.5482864,
      1743942789.9117484,
      {}
    ],
    [
      951,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743942790.149235,
      1743942790.2812176,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      952,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743942790.5140245,
      1743942817.9846537,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      953,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010717608630657193
      ],
      112.63834190368652,
      1,
      1743942818.2194006,
      1743942930.859756,
      {}
    ],
    [
      954,
      null,
      209652396,
      null,
      [
        0.15386500199374448,
        0.08926366716623306
      ],
      138.51033520698547,
      1,
      1743942931.0963855,
      1743943069.6087837,
      {}
    ],
    [
      955,
      null,
      209652396,
      null,
      [
        0.23930461228365418,
        0.014057293832302096
      ],
      97.84723091125488,
      1,
      1743943069.844269,
      1743943167.6934028,
      {}
    ],
    [
      956,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743943167.9302893,
      1743943199.5923934,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      957,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743943199.8467314,
      1743943323.4466345,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      958,
      null,
      209652396,
      null,
      [
        0.20027033440207093,
        0.03260756090283394
      ],
      104.90015912055969,
      1,
      1743943324.3176892,
      1743943429.2199411,
      {}
    ],
    [
      959,
      null,
      209652396,
      null,
      [
        0.19468054535419804,
        0.03508998557925224
      ],
      341.0764060020447,
      1,
      1743943441.217236,
      1743943782.2958276,
      {}
    ],
    [
      960,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.002091333270072937
      ],
      237.84930062294006,
      1,
      1743943782.5377893,
      1743944020.3892782,
      {}
    ],
    [
      961,
      null,
      209652396,
      null,
      [
        0.23869068704398044,
        0.021430971622467043
      ],
      106.44007301330566,
      1,
      1743944020.6281054,
      1743944127.0702453,
      {}
    ],
    [
      962,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743944127.309078,
      1743944127.5687797,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      963,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743944127.8092966,
      1743944128.0287504,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      964,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0027181583642959598
      ],
      137.7701916694641,
      1,
      1743944128.2630394,
      1743944266.0350745,
      {}
    ],
    [
      965,
      null,
      209652396,
      null,
      [
        0.2259141610938018,
        0.027948630601167684
      ],
      91.8375129699707,
      1,
      1743944266.2736018,
      1743944358.1131408,
      {}
    ],
    [
      966,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010527597963809966
      ],
      209.0610966682434,
      1,
      1743944370.9721437,
      1743944580.035402,
      {}
    ],
    [
      967,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743944580.2743638,
      1743944738.2605603,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      968,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.009674636423587799
      ],
      107.31314182281494,
      1,
      1743944738.5011256,
      1743944845.8163197,
      {}
    ],
    [
      969,
      null,
      209652396,
      null,
      [
        0.19446582642690427,
        0.0384284420311451
      ],
      95.97733759880066,
      1,
      1743944846.0684574,
      1743944942.047756,
      {}
    ],
    [
      970,
      null,
      209652396,
      null,
      [
        0.1898280928221048,
        0.0437724943459034
      ],
      93.19139862060547,
      1,
      1743944942.288709,
      1743945035.4819555,
      {}
    ],
    [
      971,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743945035.7997487,
      1743945036.0461452,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      972,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015361677706241608
      ],
      103.80393385887146,
      1,
      1743945036.35287,
      1743945140.1586313,
      {}
    ],
    [
      973,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.014052570164203642
      ],
      96.55517339706421,
      1,
      1743945140.4644613,
      1743945237.0215244,
      {}
    ],
    [
      974,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743945238.0131547,
      1743945238.2231953,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      975,
      null,
      209652396,
      null,
      [
        0.19434302345978993,
        0.03948833212256432
      ],
      103.76551628112793,
      1,
      1743945250.389434,
      1743945354.1569512,
      {}
    ],
    [
      976,
      null,
      209652396,
      null,
      [
        0.15923958641024508,
        0.07209957718849182
      ],
      154.99911904335022,
      1,
      1743945354.4722178,
      1743945509.4736986,
      {}
    ],
    [
      977,
      null,
      209652396,
      null,
      [
        0.23740043537947733,
        0.017991901189088822
      ],
      101.45724081993103,
      1,
      1743945509.7247815,
      1743945611.1840045,
      {}
    ],
    [
      978,
      null,
      209652396,
      null,
      [
        0.1559840298612754,
        0.08140210837125779
      ],
      108.1103401184082,
      1,
      1743945611.5027325,
      1743945719.615459,
      {}
    ],
    [
      979,
      null,
      209652396,
      null,
      [
        0.19987109979624948,
        0.03177151292562484
      ],
      121.01690483093262,
      1,
      1743945719.9307213,
      1743945840.9500566,
      {}
    ],
    [
      980,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743945841.1961985,
      1743945841.3331816,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      981,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743945841.5731113,
      1743945842.6917048,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      982,
      null,
      209652396,
      null,
      [
        0.1898898479736803,
        0.041982165575027465
      ],
      100.49009656906128,
      1,
      1743945855.9404314,
      1743945956.432449,
      {}
    ],
    [
      983,
      null,
      209652396,
      null,
      [
        0.23933544270370616,
        0.02265028923749924
      ],
      118.39179468154907,
      1,
      1743945956.7499588,
      1743946075.1442893,
      {}
    ],
    [
      984,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743946075.3898215,
      1743946142.300276,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      985,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015955660343170162
      ],
      157.70611763000488,
      1,
      1743946142.5464227,
      1743946300.254595,
      {}
    ],
    [
      986,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743946300.498967,
      1743946300.6353998,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      987,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743946300.875565,
      1743946335.1126184,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      988,
      null,
      209652396,
      null,
      [
        0.19213183913782714,
        0.037173317670822145
      ],
      234.98542523384094,
      1,
      1743946335.370636,
      1743946570.3584595,
      {}
    ],
    [
      989,
      null,
      209652396,
      null,
      [
        0.22422526427017445,
        0.021590204089879994
      ],
      125.0885443687439,
      1,
      1743946570.6039236,
      1743946695.6946301,
      {}
    ],
    [
      990,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743946709.0528936,
      1743946709.300649,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      991,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.007633228302001953
      ],
      86.67815089225769,
      1,
      1743946709.5923047,
      1743946796.272254,
      {}
    ],
    [
      992,
      null,
      209652396,
      null,
      [
        0.20711895524769774,
        0.030541915148496624
      ],
      241.88078570365906,
      1,
      1743946796.5929523,
      1743947038.4758978,
      {}
    ],
    [
      993,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743947038.7219641,
      1743947043.8936772,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      994,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743947044.1489263,
      1743947060.3035343,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      995,
      null,
      209652396,
      null,
      [
        0.22843306960073426,
        0.02466455325484276
      ],
      135.42022109031677,
      1,
      1743947060.551213,
      1743947195.9735794,
      {}
    ],
    [
      996,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004344057738780975
      ],
      97.06470513343811,
      1,
      1743947196.2213202,
      1743947293.2880497,
      {}
    ],
    [
      997,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743947293.5318675,
      1743947293.742589,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      998,
      null,
      209652396,
      null,
      [
        0.19124105785782433,
        0.037712710350751875
      ],
      195.07247710227966,
      1,
      1743947306.7117445,
      1743947501.7863653,
      {}
    ],
    [
      999,
      null,
      209652396,
      null,
      [
        0.1925927911706355,
        0.039427232891321176
      ],
      111.66766262054443,
      1,
      1743947502.0329032,
      1743947613.7026625,
      {}
    ],
    [
      1000,
      null,
      209652396,
      null,
      [
        0.16353926997639573,
        0.07761028781533241
      ],
      133.1916048526764,
      1,
      1743947613.9510818,
      1743947747.1447551,
      {}
    ],
    [
      1001,
      null,
      209652396,
      null,
      [
        0.2277262051214147,
        0.025110729336738587
      ],
      107.5751519203186,
      1,
      1743947747.3917308,
      1743947854.9688714,
      {}
    ],
    [
      1002,
      null,
      209652396,
      null,
      [
        0.23221001768905963,
        0.014511749148368835
      ],
      173.38507962226868,
      1,
      1743947855.2479959,
      1743948028.6350067,
      {}
    ],
    [
      1003,
      null,
      209652396,
      null,
      [
        0.1971687177525501,
        0.03886700883507729
      ],
      139.21590209007263,
      1,
      1743948028.9039161,
      1743948168.1219049,
      {}
    ],
    [
      1004,
      null,
      209652396,
      null,
      [
        0.18436210644294476,
        0.04043985411524772
      ],
      201.3804681301117,
      1,
      1743948168.3725648,
      1743948369.755245,
      {}
    ],
    [
      1005,
      null,
      209652396,
      null,
      [
        0.21667034009848382,
        0.027485493570566177
      ],
      95.78953099250793,
      1,
      1743948370.0055418,
      1743948465.797281,
      {}
    ],
    [
      1006,
      null,
      209652396,
      null,
      [
        0.20318789278370114,
        0.034166676253080376
      ],
      324.9678170681,
      1,
      1743948478.8711205,
      1743948803.8410978,
      {}
    ],
    [
      1007,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010033386051654814
      ],
      137.88075733184814,
      1,
      1743948804.0916233,
      1743948941.9744565,
      {}
    ],
    [
      1008,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743948942.2234724,
      1743949073.6695619,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1009,
      null,
      209652396,
      null,
      [
        0.18727918383607006,
        0.042693406194448474
      ],
      170.32237362861633,
      1,
      1743949073.9242713,
      1743949244.2487276,
      {}
    ],
    [
      1010,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743949244.5014818,
      1743949244.7325182,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1011,
      null,
      209652396,
      null,
      [
        0.2399803068216242,
        0.012957098484039305
      ],
      131.1470811367035,
      1,
      1743949244.9800708,
      1743949376.1290188,
      {}
    ],
    [
      1012,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743949376.3802352,
      1743949399.6284363,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      1013,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743949399.8845735,
      1743949400.0958803,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1014,
      null,
      209652396,
      null,
      [
        0.19980924090205526,
        0.03176852956414223
      ],
      164.26598453521729,
      1,
      1743949414.2746682,
      1743949578.543355,
      {}
    ],
    [
      1015,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743949578.8038032,
      1743949679.3746912,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1016,
      null,
      209652396,
      null,
      [
        0.19038109756672633,
        0.0432188569009304
      ],
      111.1601812839508,
      1,
      1743949679.6466901,
      1743949790.8088374,
      {}
    ],
    [
      1017,
      null,
      209652396,
      null,
      [
        0.19787454480568256,
        0.034458065032958986
      ],
      89.08471250534058,
      1,
      1743949791.1552033,
      1743949880.242388,
      {}
    ],
    [
      1018,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.008221525400876999
      ],
      155.13992595672607,
      1,
      1743949880.5781355,
      1743950035.720557,
      {}
    ],
    [
      1019,
      null,
      209652396,
      null,
      [
        0.20137597607657484,
        0.03267944693565369
      ],
      111.98935508728027,
      1,
      1743950035.9770796,
      1743950147.9685235,
      {}
    ],
    [
      1020,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.012643625736236572
      ],
      112.25004482269287,
      1,
      1743950148.316085,
      1743950260.5684848,
      {}
    ],
    [
      1021,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743950260.82122,
      1743950261.0058467,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1022,
      null,
      209652396,
      null,
      [
        0.24010313808218,
        0.018004528284072875
      ],
      242.96169209480286,
      1,
      1743950274.9778886,
      1743950517.9415274,
      {}
    ],
    [
      1023,
      null,
      209652396,
      null,
      [
        0.20979078037461268,
        0.02941334798932076
      ],
      159.23977136611938,
      1,
      1743950518.197001,
      1743950677.4388769,
      {}
    ],
    [
      1024,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743950677.68936,
      1743950681.0078313,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1025,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743950681.2612092,
      1743950681.4963477,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1026,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743950681.746222,
      1743950682.1207461,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1027,
      null,
      209652396,
      null,
      [
        0.19741408319252626,
        0.03645677536725998
      ],
      112.15683937072754,
      1,
      1743950682.3708918,
      1743950794.5295825,
      {}
    ],
    [
      1028,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743950794.786582,
      1743950802.8839726,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1029,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743950803.155297,
      1743950811.711132,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1030,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743950825.636481,
      1743950925.788185,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1031,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743950926.0485234,
      1743950936.9355552,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1032,
      null,
      209652396,
      null,
      [
        0.2365406495646017,
        0.009850342571735383
      ],
      109.78549814224243,
      1,
      1743950937.1932886,
      1743951046.9808662,
      {}
    ],
    [
      1033,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743951047.2357793,
      1743951047.4801714,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1034,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743951047.7732081,
      1743951053.0387151,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1035,
      null,
      209652396,
      null,
      [
        0.2148579942741619,
        0.030416426956653593
      ],
      103.65727019309998,
      1,
      1743951053.37686,
      1743951157.0366118,
      {}
    ],
    [
      1036,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743951157.3765683,
      1743951159.5890408,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1037,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743951159.8720403,
      1743951160.0802925,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1038,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743951173.396543,
      1743951173.593481,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1039,
      null,
      209652396,
      null,
      [
        0.19999347836174183,
        0.0349458034336567
      ],
      117.23952603340149,
      1,
      1743951173.8775337,
      1743951291.1189046,
      {}
    ],
    [
      1040,
      null,
      209652396,
      null,
      [
        0.22241394172531898,
        0.028173014074563973
      ],
      112.70010447502136,
      1,
      1743951291.3976524,
      1743951404.099824,
      {}
    ],
    [
      1041,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743951404.4522803,
      1743951404.6298597,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1042,
      null,
      209652396,
      null,
      [
        0.17253785285222414,
        0.05665241226553917
      ],
      116.64982748031616,
      1,
      1743951404.8877318,
      1743951521.5394669,
      {}
    ],
    [
      1043,
      null,
      209652396,
      null,
      [
        0.1941585690837188,
        0.03834662213921547
      ],
      122.90225315093994,
      1,
      1743951521.8945365,
      1743951644.7993717,
      {}
    ],
    [
      1044,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.003538828492164612
      ],
      112.54137587547302,
      1,
      1743951645.0745285,
      1743951757.6178572,
      {}
    ],
    [
      1045,
      null,
      209652396,
      null,
      [
        0.2022970454856682,
        0.034401478618383406
      ],
      111.30567622184753,
      1,
      1743951757.970078,
      1743951869.2784104,
      {}
    ],
    [
      1046,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004245966970920563
      ],
      98.48778438568115,
      1,
      1743951870.3742187,
      1743951968.8639903,
      {}
    ],
    [
      1047,
      null,
      209652396,
      null,
      [
        0.19007408543336685,
        0.042973668128252034
      ],
      125.4876217842102,
      1,
      1743951981.8770342,
      1743952107.3667808,
      {}
    ],
    [
      1048,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.002137364149093628
      ],
      146.83220219612122,
      1,
      1743952107.6338067,
      1743952254.4680183,
      {}
    ],
    [
      1049,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743952254.7237878,
      1743952260.2317944,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1050,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010941971838474274
      ],
      97.11950969696045,
      1,
      1743952260.4919634,
      1743952357.6134577,
      {}
    ],
    [
      1051,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743952357.958396,
      1743952367.6478825,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1052,
      null,
      209652396,
      null,
      [
        0.17923286388855253,
        0.049680241793394087
      ],
      145.15130972862244,
      1,
      1743952367.91882,
      1743952513.0721278,
      {}
    ],
    [
      1053,
      null,
      209652396,
      null,
      [
        0.17567025748163473,
        0.04747103616595268
      ],
      314.895703792572,
      1,
      1743952513.3379045,
      1743952828.2354586,
      {}
    ],
    [
      1054,
      null,
      209652396,
      null,
      [
        0.20177516352666053,
        0.031063337028026584
      ],
      117.27387738227844,
      1,
      1743952841.9430947,
      1743952959.2190819,
      {}
    ],
    [
      1055,
      null,
      209652396,
      null,
      [
        0.18595849785969548,
        0.043122869133949276
      ],
      111.94824719429016,
      1,
      1743952959.504222,
      1743953071.4545157,
      {}
    ],
    [
      1056,
      null,
      209652396,
      null,
      [
        0.16507470317350553,
        0.05570627734065057
      ],
      153.51506733894348,
      1,
      1743953071.7262533,
      1743953225.243507,
      {}
    ],
    [
      1057,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743953225.5192473,
      1743953493.36989,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1058,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743953493.633991,
      1743953512.6936762,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1059,
      null,
      209652396,
      null,
      [
        0.18942890065644558,
        0.03975899755954742
      ],
      164.16605138778687,
      1,
      1743953512.9580297,
      1743953677.1261456,
      {}
    ],
    [
      1060,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743953677.4059317,
      1743953716.3121884,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1061,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743953716.5738468,
      1743953716.787121,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1062,
      null,
      209652396,
      null,
      [
        0.23058264495390243,
        0.02579677373170853
      ],
      121.50919270515442,
      1,
      1743953730.9456754,
      1743953852.4566817,
      {}
    ],
    [
      1063,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.006200883090496063
      ],
      295.641348361969,
      1,
      1743953852.7205346,
      1743954148.3637872,
      {}
    ],
    [
      1064,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743954148.6742392,
      1743954279.9400897,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1065,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743954280.2056017,
      1743954406.3762903,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1066,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743954406.6453345,
      1743954406.8450887,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1067,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00598581850528717
      ],
      103.75156855583191,
      1,
      1743954407.116502,
      1743954510.8700042,
      {}
    ],
    [
      1068,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0010659238696098326
      ],
      123.56219029426575,
      1,
      1743954511.1668055,
      1743954634.7309384,
      {}
    ],
    [
      1069,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.006537470817565919
      ],
      99.84349226951599,
      1,
      1743954634.9933252,
      1743954734.838688,
      {}
    ],
    [
      1070,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743954748.7288053,
      1743954750.94359,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1071,
      null,
      209652396,
      null,
      [
        0.1918244921987437,
        0.04408874586224556
      ],
      88.28724884986877,
      1,
      1743954751.2053566,
      1743954839.4944365,
      {}
    ],
    [
      1072,
      null,
      209652396,
      null,
      [
        0.17763586416281027,
        0.05194380149245261
      ],
      124.97654819488525,
      1,
      1743954839.8485076,
      1743954964.8275418,
      {}
    ],
    [
      1073,
      null,
      209652396,
      null,
      [
        0.1926536928033934,
        0.03808807402849197
      ],
      134.21653079986572,
      1,
      1743954965.0958443,
      1743955099.3143895,
      {}
    ],
    [
      1074,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743955099.5977933,
      1743955100.3479471,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1075,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0005946633219718934
      ],
      103.74033737182617,
      1,
      1743955100.6127622,
      1743955204.3550189,
      {}
    ],
    [
      1076,
      null,
      209652396,
      null,
      [
        0.19474224391889064,
        0.03592160373926163
      ],
      93.67859029769897,
      1,
      1743955204.7056732,
      1743955298.3873098,
      {}
    ],
    [
      1077,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743955298.7609272,
      1743955408.3684027,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1078,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011659059673547743
      ],
      119.94003510475159,
      1,
      1743955422.4579732,
      1743955542.3999743,
      {}
    ],
    [
      1079,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.026110858470201493
      ],
      138.67213702201843,
      1,
      1743955542.7520077,
      1743955681.4265256,
      {}
    ],
    [
      1080,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743955681.7028568,
      1743955739.1010282,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1081,
      null,
      209652396,
      null,
      [
        0.21559484980143662,
        0.02920318976044655
      ],
      115.38432931900024,
      1,
      1743955739.3821461,
      1743955854.7684877,
      {}
    ],
    [
      1082,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001886978447437286
      ],
      157.21675515174866,
      1,
      1743955855.053684,
      1743956012.2725024,
      {}
    ],
    [
      1083,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743956012.5447943,
      1743956014.3906608,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1084,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.01832567274570465
      ],
      88.28548312187195,
      1,
      1743956014.664527,
      1743956102.9520366,
      {}
    ],
    [
      1085,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743956103.3050535,
      1743956103.4974916,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1086,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00018615156412124634
      ],
      119.60132122039795,
      1,
      1743956117.6847963,
      1743956237.2880511,
      {}
    ],
    [
      1087,
      null,
      209652396,
      null,
      [
        0.20675042374144176,
        0.028670973181724548
      ],
      72.49515342712402,
      1,
      1743956237.5581408,
      1743956310.0552888,
      {}
    ],
    [
      1088,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743956310.325086,
      1743956310.579408,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1089,
      null,
      209652396,
      null,
      [
        0.2767124746915166,
        0.0004459095001220703
      ],
      90.60628461837769,
      1,
      1743956310.8713,
      1743956401.479485,
      {}
    ],
    [
      1090,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743956401.84873,
      1743956402.0633397,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1091,
      null,
      209652396,
      null,
      [
        0.1904426640953587,
        0.044590372890234
      ],
      127.88653779029846,
      1,
      1743956402.3979712,
      1743956530.2863898,
      {}
    ],
    [
      1092,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00918293297290802
      ],
      114.69164633750916,
      1,
      1743956530.5576968,
      1743956645.2513719,
      {}
    ],
    [
      1093,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743956645.6173425,
      1743956652.8444037,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1094,
      null,
      209652396,
      null,
      [
        0.23878250869268838,
        0.01696150422096253
      ],
      112.43422746658325,
      1,
      1743956667.852398,
      1743956780.2887807,
      {}
    ],
    [
      1095,
      null,
      209652396,
      null,
      [
        0.1991952732222193,
        0.03490889921784401
      ],
      130.57987093925476,
      1,
      1743956780.6575198,
      1743956911.2399666,
      {}
    ],
    [
      1096,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743956911.5159168,
      1743956992.7298517,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1097,
      null,
      209652396,
      null,
      [
        0.22259785852600222,
        0.028720341175794604
      ],
      107.78252720832825,
      1,
      1743956993.1011527,
      1743957100.8860593,
      {}
    ],
    [
      1098,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743957101.230209,
      1743957104.4493718,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1099,
      null,
      209652396,
      null,
      [
        0.1870334883059434,
        0.04365232467651368
      ],
      126.17862057685852,
      1,
      1743957104.720296,
      1743957230.9009666,
      {}
    ],
    [
      1100,
      null,
      209652396,
      null,
      [
        0.19446576040887417,
        0.033540231287479405
      ],
      134.81109261512756,
      1,
      1743957231.1726668,
      1743957365.9856627,
      {}
    ],
    [
      1101,
      null,
      209652396,
      null,
      [
        0.24004171302075497,
        0.01720483511686325
      ],
      96.24782299995422,
      1,
      1743957366.275629,
      1743957462.525364,
      {}
    ],
    [
      1102,
      null,
      209652396,
      null,
      [
        0.23988829183439958,
        0.020640091001987458
      ],
      282.34217953681946,
      1,
      1743957463.6478655,
      1743957745.991931,
      {}
    ],
    [
      1103,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743957760.213382,
      1743957779.5774283,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1104,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743957779.8503878,
      1743958040.6857505,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1105,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743958040.959949,
      1743958041.1665256,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1106,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013968299925327301
      ],
      99.81405234336853,
      1,
      1743958041.593516,
      1743958141.4093907,
      {}
    ],
    [
      1107,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743958141.7765067,
      1743958163.4993458,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      1108,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743958163.8573258,
      1743958262.9854748,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1109,
      null,
      209652396,
      null,
      [
        0.19517209202837943,
        0.03800939366221428
      ],
      104.54052233695984,
      1,
      1743958263.2594724,
      1743958367.8020198,
      {}
    ],
    [
      1110,
      null,
      209652396,
      null,
      [
        0.19348271893182073,
        0.04127999350428581
      ],
      71.2046308517456,
      1,
      1743958382.581504,
      1743958453.7882807,
      {}
    ],
    [
      1111,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743958454.0606787,
      1743958470.282228,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1112,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743958470.5583005,
      1743958470.7534807,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1113,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743958471.0249329,
      1743958483.5755205,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1114,
      null,
      209652396,
      null,
      [
        0.1631399646369706,
        0.06603546693921089
      ],
      255.1339180469513,
      1,
      1743958483.8585305,
      1743958738.9943697,
      {}
    ],
    [
      1115,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01676366597414017
      ],
      110.12388348579407,
      1,
      1743958739.2696204,
      1743958849.3954904,
      {}
    ],
    [
      1116,
      null,
      209652396,
      null,
      [
        0.18902984995799368,
        0.04392311647534371
      ],
      116.46779298782349,
      1,
      1743958849.7313666,
      1743958966.2011526,
      {}
    ],
    [
      1117,
      null,
      209652396,
      null,
      [
        0.22843251787862565,
        0.02640740886330604
      ],
      112.19153618812561,
      1,
      1743958966.5709264,
      1743959078.7643123,
      {}
    ],
    [
      1118,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743959093.8819997,
      1743959094.088396,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1119,
      null,
      209652396,
      null,
      [
        0.19944102533922894,
        0.03395306572318077
      ],
      109.86130928993225,
      1,
      1743959094.4049957,
      1743959204.2681098,
      {}
    ],
    [
      1120,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743959204.6901877,
      1743959210.8522818,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1121,
      null,
      209652396,
      null,
      [
        0.1921931840345014,
        0.04401689067482948
      ],
      161.7258598804474,
      1,
      1743959211.1585717,
      1743959372.8868089,
      {}
    ],
    [
      1122,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743959373.163575,
      1743959373.3018696,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1123,
      null,
      209652396,
      null,
      [
        0.1633856177269351,
        0.06749807968735695
      ],
      101.81908202171326,
      1,
      1743959373.5750146,
      1743959475.3959074,
      {}
    ],
    [
      1124,
      null,
      209652396,
      null,
      [
        0.19339086898967137,
        0.037852543741464614
      ],
      122.85877180099487,
      1,
      1743959475.7224007,
      1743959598.5830595,
      {}
    ],
    [
      1125,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743959598.8932736,
      1743959605.8240829,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1126,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743959620.4937165,
      1743959810.1557424,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1127,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743959810.4543169,
      1743959812.161758,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1128,
      null,
      209652396,
      null,
      [
        0.2019904813317987,
        0.0339823368191719
      ],
      189.63237500190735,
      1,
      1743959812.4551537,
      1743960002.089451,
      {}
    ],
    [
      1129,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743960002.3708706,
      1743960035.436442,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1130,
      null,
      209652396,
      null,
      [
        0.23690918107085773,
        0.02427192836999893
      ],
      129.0603106021881,
      1,
      1743960035.7223063,
      1743960164.7847412,
      {}
    ],
    [
      1131,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743960165.0657535,
      1743960165.3444877,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1132,
      null,
      209652396,
      null,
      [
        0.17143204141707136,
        0.05348470360040665
      ],
      110.35947513580322,
      1,
      1743960165.621077,
      1743960275.9823391,
      {}
    ],
    [
      1133,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00644452452659607
      ],
      152.79756212234497,
      1,
      1743960276.346347,
      1743960429.146208,
      {}
    ],
    [
      1134,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.007536160945892334
      ],
      178.01724004745483,
      1,
      1743960430.2498877,
      1743960608.2692163,
      {}
    ],
    [
      1135,
      null,
      209652396,
      null,
      [
        0.2213078049155893,
        0.026698113083839414
      ],
      89.57977628707886,
      1,
      1743960623.1777024,
      1743960712.7594168,
      {}
    ],
    [
      1136,
      null,
      209652396,
      null,
      [
        0.1925003329194946,
        0.035942883044481275
      ],
      217.13256669044495,
      1,
      1743960713.0876806,
      1743960930.2221467,
      {}
    ],
    [
      1137,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.005409917533397675
      ],
      409.1883432865143,
      1,
      1743960930.5027382,
      1743961339.693113,
      {}
    ],
    [
      1138,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.006820134222507478
      ],
      118.7318058013916,
      1,
      1743961339.972713,
      1743961458.70653,
      {}
    ],
    [
      1139,
      null,
      209652396,
      null,
      [
        0.19372882471684866,
        0.030960822105407716
      ],
      225.8570704460144,
      1,
      1743961458.991725,
      1743961684.8508983,
      {}
    ],
    [
      1140,
      null,
      209652396,
      null,
      [
        0.1556156964091096,
        0.07507789343595504
      ],
      229.25475478172302,
      1,
      1743961685.15348,
      1743961914.4105535,
      {}
    ],
    [
      1141,
      null,
      209652396,
      null,
      [
        0.20604424773586452,
        0.0290979340672493
      ],
      137.27169370651245,
      1,
      1743961914.7017143,
      1743962051.9761531,
      {}
    ],
    [
      1142,
      null,
      209652396,
      null,
      [
        0.18709512556817948,
        0.041708550453186034
      ],
      282.8393313884735,
      1,
      1743962067.387355,
      1743962350.228809,
      {}
    ],
    [
      1143,
      null,
      209652396,
      null,
      [
        0.1790485132551001,
        0.04916875496506691
      ],
      244.48142552375793,
      1,
      1743962350.5138712,
      1743962594.9973931,
      {}
    ],
    [
      1144,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743962595.2845771,
      1743962655.7112544,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1145,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743962656.0001078,
      1743962656.217085,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1146,
      null,
      209652396,
      null,
      [
        0.18884549460896766,
        0.04379477426409721
      ],
      96.205730676651,
      1,
      1743962656.4989586,
      1743962752.706497,
      {}
    ],
    [
      1147,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.008649737238883971
      ],
      116.84593462944031,
      1,
      1743962753.082208,
      1743962869.930784,
      {}
    ],
    [
      1148,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743962870.3098722,
      1743962870.5960286,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1149,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01578723341226578
      ],
      133.14791059494019,
      1,
      1743962870.9285512,
      1743963004.07849,
      {}
    ],
    [
      1150,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743963005.2230098,
      1743963005.4560196,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1151,
      null,
      209652396,
      null,
      [
        0.21556429288465218,
        0.03158105179667473
      ],
      101.83210229873657,
      1,
      1743963019.8138504,
      1743963121.6481082,
      {}
    ],
    [
      1152,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743963121.9309833,
      1743963230.80022,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1153,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743963231.084227,
      1743963488.632881,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1154,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743963488.9213974,
      1743963491.3334405,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1155,
      null,
      209652396,
      null,
      [
        0.23773841468452245,
        0.019418776631355286
      ],
      123.4682822227478,
      1,
      1743963491.6293721,
      1743963615.0998535,
      {}
    ],
    [
      1156,
      null,
      209652396,
      null,
      [
        0.19790542709704384,
        0.03436394467949867
      ],
      108.83662843704224,
      1,
      1743963615.5089386,
      1743963724.3480563,
      {}
    ],
    [
      1157,
      null,
      209652396,
      null,
      [
        0.1937593910647803,
        0.03867400914430618
      ],
      116.52463841438293,
      1,
      1743963724.634926,
      1743963841.1614752,
      {}
    ],
    [
      1158,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013955211341381075
      ],
      113.37791132926941,
      1,
      1743963856.7675388,
      1743963970.1475132,
      {}
    ],
    [
      1159,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.007646993100643158
      ],
      105.69644474983215,
      1,
      1743963970.4349809,
      1743964076.133338,
      {}
    ],
    [
      1160,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743964076.5007255,
      1743964081.6798496,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1161,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743964081.9666896,
      1743964098.4737976,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1162,
      null,
      209652396,
      null,
      [
        0.19446570382199124,
        0.033676031678915024
      ],
      237.39290928840637,
      1,
      1743964098.8464253,
      1743964336.2446868,
      {}
    ],
    [
      1163,
      null,
      209652396,
      null,
      [
        0.20180585247950517,
        0.03260069116950035
      ],
      199.9285671710968,
      1,
      1743964336.5320935,
      1743964536.4626675,
      {}
    ],
    [
      1164,
      null,
      209652396,
      null,
      [
        0.19010475080834363,
        0.03912440121173859
      ],
      156.2782392501831,
      1,
      1743964536.7530286,
      1743964693.033344,
      {}
    ],
    [
      1165,
      null,
      209652396,
      null,
      [
        0.22984616667251395,
        0.030871519446372987
      ],
      101.7209861278534,
      1,
      1743964693.3246257,
      1743964795.047735,
      {}
    ],
    [
      1166,
      null,
      209652396,
      null,
      [
        0.20681172619795377,
        0.03248078390955925
      ],
      112.62645554542542,
      1,
      1743964811.0073812,
      1743964923.6359656,
      {}
    ],
    [
      1167,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743964924.0156155,
      1743964924.226565,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1168,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743964924.5625634,
      1743964978.8610213,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1169,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00439264863729477
      ],
      99.45999455451965,
      1,
      1743964979.1485784,
      1743965078.6106184,
      {}
    ],
    [
      1170,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.007665656358003615
      ],
      118.10913753509521,
      1,
      1743965078.990104,
      1743965197.10171,
      {}
    ],
    [
      1171,
      null,
      209652396,
      null,
      [
        0.19621648311768075,
        0.033294329047203065
      ],
      145.8895707130432,
      1,
      1743965197.4543767,
      1743965343.34601,
      {}
    ],
    [
      1172,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743965343.6374545,
      1743965343.7738864,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1173,
      null,
      209652396,
      null,
      [
        0.1653511300966391,
        0.061762046068906784
      ],
      129.02993893623352,
      1,
      1743965344.0609097,
      1743965473.0927737,
      {}
    ],
    [
      1174,
      null,
      209652396,
      null,
      [
        0.23598765896670088,
        0.020755270868539812
      ],
      191.21812057495117,
      1,
      1743965489.1246324,
      1743965680.3449414,
      {}
    ],
    [
      1175,
      null,
      209652396,
      null,
      [
        0.1589939946227371,
        0.07536429107189178
      ],
      190.04703283309937,
      1,
      1743965680.6323678,
      1743965870.6814854,
      {}
    ],
    [
      1176,
      null,
      209652396,
      null,
      [
        0.23306996854901046,
        0.025812378674745555
      ],
      108.98283100128174,
      1,
      1743965870.9947162,
      1743965979.9796104,
      {}
    ],
    [
      1177,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743965980.3587298,
      1743966087.2259195,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nAttributeError: 'int' object has no attribute 'to'\n",
        "error": "AttributeError(\"'int' object has no attribute 'to'\")"
      }
    ],
    [
      1178,
      null,
      209652396,
      null,
      [
        0.2202942914020758,
        0.025562665611505508
      ],
      138.08890008926392,
      1,
      1743966087.5206187,
      1743966225.6115727,
      {}
    ],
    [
      1179,
      null,
      209652396,
      null,
      [
        0.19587858869295996,
        0.04023526430130005
      ],
      131.28392910957336,
      1,
      1743966225.8999746,
      1743966357.1857808,
      {}
    ],
    [
      1180,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743966357.544953,
      1743966490.9865637,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1181,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743966491.280832,
      1743966611.1757843,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1182,
      null,
      209652396,
      null,
      [
        0.18921418172915178,
        0.043500313013792036
      ],
      74.16442584991455,
      1,
      1743966626.888973,
      1743966701.0553238,
      {}
    ],
    [
      1183,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743966701.3555827,
      1743966715.3724134,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1184,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743966715.6660235,
      1743966715.9674606,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1185,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00037272304296493526
      ],
      129.2815968990326,
      1,
      1743966716.2597978,
      1743966845.5432448,
      {}
    ],
    [
      1186,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743966845.8339355,
      1743967043.0023255,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1187,
      null,
      209652396,
      null,
      [
        0.2329165473626551,
        0.02329727187752724
      ],
      104.25220990180969,
      1,
      1743967043.296103,
      1743967147.550302,
      {}
    ],
    [
      1188,
      null,
      209652396,
      null,
      [
        0.2195871675662095,
        0.02452386200428009
      ],
      267.41550183296204,
      1,
      1743967147.936247,
      1743967415.3541336,
      {}
    ],
    [
      1189,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743967415.650572,
      1743967466.1119769,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1190,
      null,
      209652396,
      null,
      [
        0.19210099457105445,
        0.04190992787480354
      ],
      106.93329954147339,
      1,
      1743967467.3495557,
      1743967574.284918,
      {}
    ],
    [
      1191,
      null,
      209652396,
      null,
      [
        0.15656784144808097,
        0.07725309103727342
      ],
      128.05529141426086,
      1,
      1743967589.6155446,
      1743967717.6729178,
      {}
    ],
    [
      1192,
      null,
      209652396,
      null,
      [
        0.2407788137578557,
        0.007689466774463652
      ],
      107.60505104064941,
      1,
      1743967717.977958,
      1743967825.5852437,
      {}
    ],
    [
      1193,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010016757249832154
      ],
      448.26833939552307,
      1,
      1743967825.8820367,
      1743968274.152321,
      {}
    ],
    [
      1194,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743968274.4957726,
      1743968274.6970146,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1195,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743968274.9872842,
      1743968311.4623547,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1196,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01048934131860733
      ],
      102.6775894165039,
      1,
      1743968311.76344,
      1743968414.443344,
      {}
    ],
    [
      1197,
      null,
      209652396,
      null,
      [
        0.18875330042994712,
        0.04301218345761299
      ],
      115.53719544410706,
      1,
      1743968414.7947652,
      1743968530.3337982,
      {}
    ],
    [
      1198,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743968546.067884,
      1743968546.198231,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1199,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743968546.4908733,
      1743968546.7038617,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1200,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743968547.024633,
      1743968547.2397547,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1201,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743968547.6004264,
      1743968627.8585408,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1202,
      null,
      209652396,
      null,
      [
        0.19265365036323118,
        0.03816560074687004
      ],
      145.45342421531677,
      1,
      1743968628.1600084,
      1743968773.6155465,
      {}
    ],
    [
      1203,
      null,
      209652396,
      null,
      [
        0.21028247323157503,
        0.030561715513467792
      ],
      96.12902903556824,
      1,
      1743968773.9101634,
      1743968870.0412865,
      {}
    ],
    [
      1204,
      null,
      209652396,
      null,
      [
        0.1843615217118211,
        0.044398110657930374
      ],
      101.1690354347229,
      1,
      1743968870.4087555,
      1743968971.5797775,
      {}
    ],
    [
      1205,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743968971.8748825,
      1743968973.8353612,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1206,
      null,
      209652396,
      null,
      [
        0.21565596363500555,
        0.02255848079919815
      ],
      313.69227719306946,
      1,
      1743968990.0663517,
      1743969303.7608888,
      {}
    ],
    [
      1207,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.018145612329244616
      ],
      130.7353856563568,
      1,
      1743969304.0619547,
      1743969434.7994401,
      {}
    ],
    [
      1208,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.01666798025369644
      ],
      144.28769946098328,
      1,
      1743969435.0966783,
      1743969579.386397,
      {}
    ],
    [
      1209,
      null,
      209652396,
      null,
      [
        0.21845157728391262,
        0.026636783331632614
      ],
      99.6314332485199,
      1,
      1743969579.6832297,
      1743969679.3166707,
      {}
    ],
    [
      1210,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743969679.709279,
      1743969687.269648,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1211,
      null,
      209652396,
      null,
      [
        0.1975984856972881,
        0.03766307458281517
      ],
      96.02627182006836,
      1,
      1743969687.5665536,
      1743969783.5948434,
      {}
    ],
    [
      1212,
      null,
      209652396,
      null,
      [
        0.23592623390527584,
        0.016624138802289964
      ],
      101.82096576690674,
      1,
      1743969783.9765117,
      1743969885.7994244,
      {}
    ],
    [
      1213,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743969886.1687467,
      1743969886.378194,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1214,
      null,
      209652396,
      null,
      [
        0.16599602722357215,
        0.060033407211303715
      ],
      269.4671595096588,
      1,
      1743969887.6728446,
      1743970157.1420472,
      {}
    ],
    [
      1215,
      null,
      209652396,
      null,
      [
        0.18236533925156678,
        0.04919569626450539
      ],
      88.90964221954346,
      1,
      1743970173.0749812,
      1743970261.986849,
      {}
    ],
    [
      1216,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743970262.3807042,
      1743970262.6297185,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1217,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743970263.0153344,
      1743970263.214155,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1218,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.007860713601112365
      ],
      166.32331609725952,
      1,
      1743970263.5615704,
      1743970429.8867395,
      {}
    ],
    [
      1219,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743970430.1852376,
      1743970443.3979173,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1220,
      null,
      209652396,
      null,
      [
        0.17327457634343862,
        0.05556521102786064
      ],
      209.54866337776184,
      1,
      1743970443.793335,
      1743970653.3440857,
      {}
    ],
    [
      1221,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743970653.6480768,
      1743970653.8487184,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1222,
      null,
      209652396,
      null,
      [
        0.21722353346604847,
        0.033098116964101795
      ],
      100.3794219493866,
      1,
      1743970655.1141727,
      1743970755.4956472,
      {}
    ],
    [
      1223,
      null,
      209652396,
      null,
      [
        0.1908418845544594,
        0.04031799793243408
      ],
      117.19944858551025,
      1,
      1743970755.8489425,
      1743970873.0502293,
      {}
    ],
    [
      1224,
      null,
      209652396,
      null,
      [
        0.1599460359190898,
        0.07213196516036986
      ],
      188.10922622680664,
      1,
      1743970888.7875664,
      1743971076.898894,
      {}
    ],
    [
      1225,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010850142538547516
      ],
      105.86870765686035,
      1,
      1743971077.202756,
      1743971183.073542,
      {}
    ],
    [
      1226,
      null,
      209652396,
      null,
      [
        0.1888761882773859,
        0.04148634597659111
      ],
      111.16057801246643,
      1,
      1743971183.4744246,
      1743971294.6375852,
      {}
    ],
    [
      1227,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743971294.9542553,
      1743971295.1595805,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1228,
      null,
      209652396,
      null,
      [
        0.21015898179071835,
        0.02979925453662872
      ],
      281.3200922012329,
      1,
      1743971295.4568844,
      1743971576.7788987,
      {}
    ],
    [
      1229,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743971577.1321688,
      1743971606.5207717,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1230,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0018892717361450192
      ],
      134.83214044570923,
      1,
      1743971623.1978538,
      1743971758.0322285,
      {}
    ],
    [
      1231,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743971758.3300533,
      1743971804.8391104,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1232,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743971805.1988668,
      1743971805.4148543,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1233,
      null,
      209652396,
      null,
      [
        0.1953560937093871,
        0.037759645879268645
      ],
      183.0879077911377,
      1,
      1743971805.7681453,
      1743971988.8579566,
      {}
    ],
    [
      1234,
      null,
      209652396,
      null,
      [
        0.19127168079263884,
        0.037636356502771376
      ],
      123.51808857917786,
      1,
      1743971989.160964,
      1743972112.6811368,
      {}
    ],
    [
      1235,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743972112.9831133,
      1743972120.6107223,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1236,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743972120.9160748,
      1743972154.8535948,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1237,
      null,
      209652396,
      null,
      [
        0.22075439463164015,
        0.02866602301597595
      ],
      130.40908694267273,
      1,
      1743972155.3224456,
      1743972285.7334528,
      {}
    ],
    [
      1238,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743972287.0043557,
      1743972287.2281268,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1239,
      null,
      209652396,
      null,
      [
        0.19167108987468268,
        0.038487245738506315
      ],
      129.8255000114441,
      1,
      1743972303.1600866,
      1743972432.9877186,
      {}
    ],
    [
      1240,
      null,
      209652396,
      null,
      [
        0.22238308772739912,
        0.025026097148656844
      ],
      106.19574213027954,
      1,
      1743972433.291296,
      1743972539.4888709,
      {}
    ],
    [
      1241,
      null,
      209652396,
      null,
      [
        0.188937646347826,
        0.03976664528250694
      ],
      128.3221709728241,
      1,
      1743972539.8855515,
      1743972668.2097569,
      {}
    ],
    [
      1242,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.008872151374816895
      ],
      131.8399212360382,
      1,
      1743972668.5238876,
      1743972800.3658383,
      {}
    ],
    [
      1243,
      null,
      209652396,
      null,
      [
        0.2033105024122988,
        0.03235408216714859
      ],
      118.73860216140747,
      1,
      1743972800.6853828,
      1743972919.4261894,
      {}
    ],
    [
      1244,
      null,
      209652396,
      null,
      [
        0.18138290136793134,
        0.048180119693279275
      ],
      249.58717823028564,
      1,
      1743972919.7373,
      1743973169.326553,
      {}
    ],
    [
      1245,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.003351664841175079
      ],
      106.82569360733032,
      1,
      1743973169.6332157,
      1743973276.4609659,
      {}
    ],
    [
      1246,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743973293.52851,
      1743973419.0014987,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1247,
      null,
      209652396,
      null,
      [
        0.18463800993741114,
        0.04508336260914803
      ],
      226.48819255828857,
      1,
      1743973419.3191946,
      1743973645.8094292,
      {}
    ],
    [
      1248,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.017005652785301213
      ],
      93.84183621406555,
      1,
      1743973646.1159902,
      1743973739.9598708,
      {}
    ],
    [
      1249,
      null,
      209652396,
      null,
      [
        0.20613639004357567,
        0.029175788462162018
      ],
      114.45989537239075,
      1,
      1743973740.267599,
      1743973854.7295911,
      {}
    ],
    [
      1250,
      null,
      209652396,
      null,
      [
        0.23518934536898609,
        0.02160135477781296
      ],
      99.26049780845642,
      1,
      1743973855.032495,
      1743973954.2949486,
      {}
    ],
    [
      1251,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743973954.705992,
      1743974040.1850977,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1252,
      null,
      209652396,
      null,
      [
        0.24062525110429306,
        0.011101762652397157
      ],
      118.8816909790039,
      1,
      1743974040.4951704,
      1743974159.378936,
      {}
    ],
    [
      1253,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.018996483981609344
      ],
      95.51871418952942,
      1,
      1743974159.6819973,
      1743974255.2025821,
      {}
    ],
    [
      1254,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013762413561344144
      ],
      106.80675005912781,
      1,
      1743974273.3667545,
      1743974380.1754057,
      {}
    ],
    [
      1255,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743974380.525009,
      1743974380.8842223,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1256,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.016109558790922164
      ],
      132.89100551605225,
      1,
      1743974381.2600195,
      1743974514.1528018,
      {}
    ],
    [
      1257,
      null,
      209652396,
      null,
      [
        0.19121040662956829,
        0.04054256707429886
      ],
      109.58621096611023,
      1,
      1743974514.474511,
      1743974624.0626557,
      {}
    ],
    [
      1258,
      null,
      209652396,
      null,
      [
        0.1968921163531942,
        0.033976752907037736
      ],
      110.80128788948059,
      1,
      1743974624.370507,
      1743974735.1738513,
      {}
    ],
    [
      1259,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743974735.5513763,
      1743974735.6994812,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1260,
      null,
      209652396,
      null,
      [
        0.17302912130756443,
        0.047800914496183386
      ],
      150.31153464317322,
      1,
      1743974736.004863,
      1743974886.3182101,
      {}
    ],
    [
      1261,
      null,
      209652396,
      null,
      [
        0.1940051856219521,
        0.03950068384408951
      ],
      94.02079272270203,
      1,
      1743974886.6284409,
      1743974980.6512012,
      {}
    ],
    [
      1262,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743974997.8221781,
      1743975100.8647356,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1263,
      null,
      209652396,
      null,
      [
        0.1907804877864758,
        0.04279206335544587
      ],
      103.31675624847412,
      1,
      1743975101.199484,
      1743975204.5183914,
      {}
    ],
    [
      1264,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743975204.9124727,
      1743975205.1129048,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1265,
      null,
      209652396,
      null,
      [
        0.15985380401548066,
        0.07280179291963576
      ],
      417.93621826171875,
      1,
      1743975205.479467,
      1743975623.4175699,
      {}
    ],
    [
      1266,
      null,
      209652396,
      null,
      [
        0.20859344437188745,
        0.02980594113469124
      ],
      116.42820429801941,
      1,
      1743975623.7328491,
      1743975740.163162,
      {}
    ],
    [
      1267,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743975740.4918334,
      1743975747.213645,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1268,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743975747.5288787,
      1743975809.857981,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1269,
      null,
      209652396,
      null,
      [
        0.22096928331958274,
        0.02874617919325829
      ],
      95.63014817237854,
      1,
      1743975810.2205517,
      1743975905.8527522,
      {}
    ],
    [
      1270,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743975923.6906898,
      1743975927.652601,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1271,
      null,
      209652396,
      null,
      [
        0.23881332968159316,
        0.01340833216905594
      ],
      102.7641191482544,
      1,
      1743975927.9887555,
      1743976030.7556367,
      {}
    ],
    [
      1272,
      null,
      209652396,
      null,
      [
        0.23865964913869106,
        0.020166947543621066
      ],
      171.43215608596802,
      1,
      1743976031.1306279,
      1743976202.5648174,
      {}
    ],
    [
      1273,
      null,
      209652396,
      null,
      [
        0.23899748697652887,
        0.018578519374132154
      ],
      126.76191782951355,
      1,
      1743976202.8807518,
      1743976329.6447933,
      {}
    ],
    [
      1274,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743976329.956746,
      1743976330.1408381,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1275,
      null,
      209652396,
      null,
      [
        0.19182461008808313,
        0.03613198921084405
      ],
      112.75250148773193,
      1,
      1743976330.4482582,
      1743976443.2026608,
      {}
    ],
    [
      1276,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743976443.5178404,
      1743976443.6530266,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1277,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743976443.9946687,
      1743976444.2324507,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1278,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743976462.1384592,
      1743976470.233074,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1279,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743976470.6044035,
      1743976470.8381472,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1280,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01392054945230484
      ],
      155.20239114761353,
      1,
      1743976471.2535772,
      1743976626.4579632,
      {}
    ],
    [
      1281,
      null,
      209652396,
      null,
      [
        0.24044097592001784,
        0.011941504776477815
      ],
      113.5373888015747,
      1,
      1743976626.8040268,
      1743976740.3434806,
      {}
    ],
    [
      1282,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743976740.656657,
      1743976740.9019954,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1283,
      null,
      209652396,
      null,
      [
        0.23970387518291708,
        0.020810020714998247
      ],
      63.27755904197693,
      1,
      1743976741.2133904,
      1743976804.492806,
      {}
    ],
    [
      1284,
      null,
      209652396,
      null,
      [
        0.23829113177915576,
        0.021323456764221187
      ],
      92.89756035804749,
      1,
      1743976804.8090491,
      1743976897.7087166,
      {}
    ],
    [
      1285,
      null,
      209652396,
      null,
      [
        0.23549625847530037,
        0.024745400995016098
      ],
      94.72604775428772,
      1,
      1743976898.0542722,
      1743976992.7823622,
      {}
    ],
    [
      1286,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015344230234622957
      ],
      106.392986536026,
      1,
      1743977010.6290092,
      1743977117.0240998,
      {}
    ],
    [
      1287,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015162357985973356
      ],
      91.36689972877502,
      1,
      1743977117.342505,
      1743977208.7115335,
      {}
    ],
    [
      1288,
      null,
      209652396,
      null,
      [
        0.2249320863093318,
        0.027413944900035857
      ],
      99.41210341453552,
      1,
      1743977209.127977,
      1743977308.5424182,
      {}
    ],
    [
      1289,
      null,
      209652396,
      null,
      [
        0.2331011243436393,
        0.02333790734410286
      ],
      162.86048865318298,
      1,
      1743977308.9526706,
      1743977471.815043,
      {}
    ],
    [
      1290,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743977472.133537,
      1743977553.0958037,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1291,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743977553.441444,
      1743977555.3735752,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1292,
      null,
      209652396,
      null,
      [
        0.22490174630893192,
        0.02508818447589874
      ],
      115.65988755226135,
      1,
      1743977555.6989655,
      1743977671.3612854,
      {}
    ],
    [
      1293,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743977671.781819,
      1743977677.9552283,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1294,
      null,
      209652396,
      null,
      [
        0.1923465863585624,
        0.038923587054014205
      ],
      89.56900525093079,
      1,
      1743977679.406224,
      1743977768.9773753,
      {}
    ],
    [
      1295,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0034243911504745483
      ],
      90.54092288017273,
      1,
      1743977785.2508805,
      1743977875.793718,
      {}
    ],
    [
      1296,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743977876.224416,
      1743977876.3635595,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1297,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743977876.680699,
      1743978040.436344,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1298,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743978040.7557435,
      1743978040.9433243,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1299,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743978041.2583556,
      1743978065.1382055,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1300,
      null,
      209652396,
      null,
      [
        0.2397038751829171,
        0.012320226430892945
      ],
      119.69901084899902,
      1,
      1743978065.4789762,
      1743978185.180845,
      {}
    ],
    [
      1301,
      null,
      209652396,
      null,
      [
        0.2208777304585688,
        0.02605970680713654
      ],
      86.089763879776,
      1,
      1743978185.567048,
      1743978271.6589458,
      {}
    ],
    [
      1302,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743978289.3106103,
      1743978289.5424285,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1303,
      null,
      209652396,
      null,
      [
        0.1929608558351073,
        0.035374616682529454
      ],
      160.2193410396576,
      1,
      1743978289.860091,
      1743978450.0812848,
      {}
    ],
    [
      1304,
      null,
      209652396,
      null,
      [
        0.20122246057874799,
        0.02985266834497452
      ],
      85.3016607761383,
      1,
      1743978450.404844,
      1743978535.7087626,
      {}
    ],
    [
      1305,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743978536.0365238,
      1743978538.6798425,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1306,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.008235399723052978
      ],
      224.52177119255066,
      1,
      1743978538.999375,
      1743978763.5230873,
      {}
    ],
    [
      1307,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743978763.8465204,
      1743978783.1953886,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1308,
      null,
      209652396,
      null,
      [
        0.20407889569566215,
        0.033937003016471866
      ],
      155.7058711051941,
      1,
      1743978783.7391076,
      1743978939.447666,
      {}
    ],
    [
      1309,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.017508342266082767
      ],
      129.644189119339,
      1,
      1743978939.7834356,
      1743979069.4300683,
      {}
    ],
    [
      1310,
      null,
      209652396,
      null,
      [
        0.24074810122714316,
        0.007332689166069032
      ],
      115.06702613830566,
      1,
      1743979087.150974,
      1743979202.2200289,
      {}
    ],
    [
      1311,
      null,
      209652396,
      null,
      [
        0.24074810122714316,
        0.00992208480834961
      ],
      108.15275955200195,
      1,
      1743979202.6285288,
      1743979310.7832398,
      {}
    ],
    [
      1312,
      null,
      209652396,
      null,
      [
        0.2397038751829171,
        0.01719675034284592
      ],
      238.63601279258728,
      1,
      1743979311.1025195,
      1743979549.7406142,
      {}
    ],
    [
      1313,
      null,
      209652396,
      null,
      [
        0.23896691591302366,
        0.01824305921792984
      ],
      100.52845859527588,
      1,
      1743979550.06615,
      1743979650.5966742,
      {}
    ],
    [
      1314,
      null,
      209652396,
      null,
      [
        0.1832868660712972,
        0.04516515910625458
      ],
      153.83323550224304,
      1,
      1743979651.0170507,
      1743979804.852362,
      {}
    ],
    [
      1315,
      null,
      209652396,
      null,
      [
        0.22336496445777881,
        0.024963559210300447
      ],
      123.63175392150879,
      1,
      1743979805.2005222,
      1743979928.8343737,
      {}
    ],
    [
      1316,
      null,
      209652396,
      null,
      [
        0.2119407329736671,
        0.026176170557737355
      ],
      111.1690125465393,
      1,
      1743979929.155496,
      1743980040.3265939,
      {}
    ],
    [
      1317,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743980040.6502962,
      1743980208.1105611,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1318,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0024866008758544925
      ],
      89.84120225906372,
      1,
      1743980225.9700747,
      1743980315.8133247,
      {}
    ],
    [
      1319,
      null,
      209652396,
      null,
      [
        0.17818859540416426,
        0.0501524792611599
      ],
      204.3274540901184,
      1,
      1743980316.2368307,
      1743980520.566323,
      {}
    ],
    [
      1320,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743980520.8891945,
      1743980521.0858662,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1321,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743980521.4145467,
      1743980521.6251512,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1322,
      null,
      209652396,
      null,
      [
        0.199871161098706,
        0.03216654732823372
      ],
      118.35963654518127,
      1,
      1743980521.9475951,
      1743980640.3091042,
      {}
    ],
    [
      1323,
      null,
      209652396,
      null,
      [
        0.1975369003063614,
        0.037033817172050475
      ],
      98.80586767196655,
      1,
      1743980640.6348357,
      1743980739.4425728,
      {}
    ],
    [
      1324,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743980739.8763225,
      1743980753.2824893,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1325,
      null,
      209652396,
      null,
      [
        0.2024198908929448,
        0.03330504208803177
      ],
      176.63514161109924,
      1,
      1743980753.6651676,
      1743980930.3103538,
      {}
    ],
    [
      1326,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743980948.188468,
      1743980948.431448,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1327,
      null,
      209652396,
      null,
      [
        0.18098352529490253,
        0.04858195289969445
      ],
      92.28345727920532,
      1,
      1743980948.756591,
      1743981041.0418668,
      {}
    ],
    [
      1328,
      null,
      209652396,
      null,
      [
        0.1929917286953215,
        0.04143807843327522
      ],
      104.4822142124176,
      1,
      1743981041.3654013,
      1743981145.8495183,
      {}
    ],
    [
      1329,
      null,
      209652396,
      null,
      [
        0.1976290331829254,
        0.03597793951630592
      ],
      120.24397468566895,
      1,
      1743981146.2680817,
      1743981266.514118,
      {}
    ],
    [
      1330,
      null,
      209652396,
      null,
      [
        0.1888454002974961,
        0.04483092308044433
      ],
      94.53377628326416,
      1,
      1743981266.907465,
      1743981361.4432092,
      {}
    ],
    [
      1331,
      null,
      209652396,
      null,
      [
        0.1912716242057559,
        0.0393232735991478
      ],
      161.7233989238739,
      1,
      1743981361.8282566,
      1743981523.5534515,
      {}
    ],
    [
      1332,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743981523.9599674,
      1743981528.6085262,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1333,
      null,
      209652396,
      null,
      [
        0.2011919602488465,
        0.03172037437558174
      ],
      373.9923663139343,
      1,
      1743981528.9594421,
      1743981902.9539704,
      {}
    ],
    [
      1334,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.012627096623182297
      ],
      221.98434567451477,
      1,
      1743981904.442749,
      1743982126.4293435,
      {}
    ],
    [
      1335,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743982143.7679563,
      1743982154.5956635,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1336,
      null,
      209652396,
      null,
      [
        0.1985197201514567,
        0.03557462096214294
      ],
      138.29650282859802,
      1,
      1743982154.9775782,
      1743982293.276159,
      {}
    ],
    [
      1337,
      null,
      209652396,
      null,
      [
        0.22892466814622506,
        0.026108821034431455
      ],
      92.08151412010193,
      1,
      1743982293.6054916,
      1743982385.6889234,
      {}
    ],
    [
      1338,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743982386.0835505,
      1743982394.374682,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1339,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743982394.7038312,
      1743982394.9027045,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1340,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0020014816522598267
      ],
      158.27843928337097,
      1,
      1743982395.2288163,
      1743982553.5090537,
      {}
    ],
    [
      1341,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743982553.8386872,
      1743982946.090764,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1342,
      null,
      209652396,
      null,
      [
        0.20837794737495335,
        0.033391872346401216
      ],
      98.34175324440002,
      1,
      1743982964.542324,
      1743983062.8862123,
      {}
    ],
    [
      1343,
      null,
      209652396,
      null,
      [
        0.1935754789796706,
        0.03612402871251106
      ],
      137.7585973739624,
      1,
      1743983063.3244662,
      1743983201.0859034,
      {}
    ],
    [
      1344,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743983201.4145954,
      1743983221.4712653,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1345,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.007573410570621492
      ],
      96.58114075660706,
      1,
      1743983221.819961,
      1743983318.4031599,
      {}
    ],
    [
      1346,
      null,
      209652396,
      null,
      [
        0.1945273080752123,
        0.03094714611768723
      ],
      137.03103733062744,
      1,
      1743983318.8317947,
      1743983455.8648915,
      {}
    ],
    [
      1347,
      null,
      209652396,
      null,
      [
        0.23414504859115634,
        0.02356116324663162
      ],
      531.6353447437286,
      1,
      1743983456.1986434,
      1743983987.8363695,
      {}
    ],
    [
      1348,
      null,
      209652396,
      null,
      [
        0.19729117648279323,
        0.03164514169096947
      ],
      116.78989386558533,
      1,
      1743983988.1748486,
      1743984104.9674962,
      {}
    ],
    [
      1349,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011510967910289764
      ],
      109.4600019454956,
      1,
      1743984105.2986302,
      1743984214.7607474,
      {}
    ],
    [
      1350,
      null,
      209652396,
      null,
      [
        0.1789563285072267,
        0.048326541185379025
      ],
      127.5805299282074,
      1,
      1743984233.4573529,
      1743984361.0399773,
      {}
    ],
    [
      1351,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015897832810878754
      ],
      152.38025283813477,
      1,
      1743984361.3737214,
      1743984513.7560496,
      {}
    ],
    [
      1352,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.006575761735439301
      ],
      117.56713056564331,
      1,
      1743984514.0873752,
      1743984631.656518,
      {}
    ],
    [
      1353,
      null,
      209652396,
      null,
      [
        0.2103131574688461,
        0.02926655575633049
      ],
      97.62240552902222,
      1,
      1743984632.1537952,
      1743984729.7782104,
      {}
    ],
    [
      1354,
      null,
      209652396,
      null,
      [
        0.20592144005317659,
        0.030260877013206476
      ],
      157.7299885749817,
      1,
      1743984730.212754,
      1743984887.9454625,
      {}
    ],
    [
      1355,
      null,
      209652396,
      null,
      [
        0.2116948629673181,
        0.02840846821665764
      ],
      109.28161787986755,
      1,
      1743984888.2775342,
      1743984997.5612295,
      {}
    ],
    [
      1356,
      null,
      209652396,
      null,
      [
        0.1941587199820733,
        0.03786680698394775
      ],
      470.6041350364685,
      1,
      1743984997.8916864,
      1743985468.4979548,
      {}
    ],
    [
      1357,
      null,
      209652396,
      null,
      [
        0.1682992831196424,
        0.05637218594551087
      ],
      119.75589513778687,
      1,
      1743985468.829784,
      1743985588.5877886,
      {}
    ],
    [
      1358,
      null,
      209652396,
      null,
      [
        0.2073954481888614,
        0.03317124992609024
      ],
      106.70956754684448,
      1,
      1743985607.0918367,
      1743985713.803463,
      {}
    ],
    [
      1359,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        1.9669532775878904e-08
      ],
      143.4659309387207,
      1,
      1743985714.232769,
      1743985857.7006989,
      {}
    ],
    [
      1360,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.005474911630153656
      ],
      120.0276312828064,
      1,
      1743985858.0357969,
      1743985978.0655408,
      {}
    ],
    [
      1361,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.015826500356197357
      ],
      97.50593161582947,
      1,
      1743985978.480536,
      1743986075.9884398,
      {}
    ],
    [
      1362,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743986076.3593097,
      1743986089.0393364,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1363,
      null,
      209652396,
      null,
      [
        0.19422016390579264,
        0.03761291861534118
      ],
      107.01124286651611,
      1,
      1743986089.4827356,
      1743986196.4966373,
      {}
    ],
    [
      1364,
      null,
      209652396,
      null,
      [
        0.19713772228742285,
        0.03507033795118332
      ],
      140.38447046279907,
      1,
      1743986196.9271615,
      1743986337.3135092,
      {}
    ],
    [
      1365,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743986337.6510527,
      1743986339.767085,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1366,
      null,
      209652396,
      null,
      [
        0.21369171503902037,
        0.027550624161958692
      ],
      105.79413342475891,
      1,
      1743986358.2698731,
      1743986464.066095,
      {}
    ],
    [
      1367,
      null,
      209652396,
      null,
      [
        0.21203279040105388,
        0.03003635510802269
      ],
      157.23550176620483,
      1,
      1743986464.466556,
      1743986621.703954,
      {}
    ],
    [
      1368,
      null,
      209652396,
      null,
      [
        0.1965236744428361,
        0.03549976497888564
      ],
      204.7116436958313,
      1,
      1743986622.0420976,
      1743986826.755849,
      {}
    ],
    [
      1369,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743986827.0903354,
      1743986939.7812767,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1370,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743986940.1406066,
      1743986942.2022042,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1371,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743986942.5493376,
      1743986942.7526226,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1372,
      null,
      209652396,
      null,
      [
        0.18500668762644812,
        0.04290765315294266
      ],
      132.15232491493225,
      1,
      1743986943.090442,
      1743987075.2447224,
      {}
    ],
    [
      1373,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.009019656479358675
      ],
      268.57921051979065,
      1,
      1743987075.5804899,
      1743987344.1615996,
      {}
    ],
    [
      1374,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743987362.8693802,
      1743987434.6999836,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1375,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743987435.0498996,
      1743987455.0887175,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1376,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743987455.4294012,
      1743987476.3637516,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1377,
      null,
      209652396,
      null,
      [
        0.19342146363104445,
        0.036106845438480376
      ],
      133.60259819030762,
      1,
      1743987476.7233832,
      1743987610.32797,
      {}
    ],
    [
      1378,
      null,
      209652396,
      null,
      [
        0.18009273929932612,
        0.044890539050102235
      ],
      97.87166810035706,
      1,
      1743987610.6818542,
      1743987708.55559,
      {}
    ],
    [
      1379,
      null,
      209652396,
      null,
      [
        0.19219317931892782,
        0.0377449756860733
      ],
      222.91758561134338,
      1,
      1743987708.8970895,
      1743987931.8167853,
      {}
    ],
    [
      1380,
      null,
      209652396,
      null,
      [
        0.18918337960254125,
        0.04080903112888336
      ],
      93.73979306221008,
      1,
      1743987932.2156363,
      1743988025.9575775,
      {}
    ],
    [
      1381,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743988026.380239,
      1743988026.511651,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1382,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743988027.9863553,
      1743988028.1998525,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1383,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743988045.4802663,
      1743988056.9838114,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1384,
      null,
      209652396,
      null,
      [
        0.23454473589204125,
        0.02382080987095833
      ],
      160.19895815849304,
      1,
      1743988057.4191492,
      1743988217.6200092,
      {}
    ],
    [
      1385,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.014898632168769837
      ],
      143.78348755836487,
      1,
      1743988218.0123303,
      1743988361.7977686,
      {}
    ],
    [
      1386,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743988362.1339068,
      1743988370.2849061,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1387,
      null,
      209652396,
      null,
      [
        0.24037955085859278,
        0.009756153225898744
      ],
      140.8328697681427,
      1,
      1743988370.6362133,
      1743988511.4713655,
      {}
    ],
    [
      1388,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743988511.8161373,
      1743988547.8501847,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1389,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743988548.3099904,
      1743988548.6028364,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1390,
      null,
      209652396,
      null,
      [
        0.18697208682238622,
        0.04408580347895623
      ],
      119.6019184589386,
      1,
      1743988567.847727,
      1743988687.4517207,
      {}
    ],
    [
      1391,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743988687.7962012,
      1743988688.0289195,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1392,
      null,
      209652396,
      null,
      [
        0.22784883832788028,
        0.02925700068473816
      ],
      120.29681038856506,
      1,
      1743988688.4292498,
      1743988808.728095,
      {}
    ],
    [
      1393,
      null,
      209652396,
      null,
      [
        0.18896826928264052,
        0.04073259428143501
      ],
      76.39195275306702,
      1,
      1743988809.161923,
      1743988885.5560272,
      {}
    ],
    [
      1394,
      null,
      209652396,
      null,
      [
        0.2399495754286174,
        0.010525692999362946
      ],
      90.28755497932434,
      1,
      1743988885.8997295,
      1743988976.1892295,
      {}
    ],
    [
      1395,
      null,
      209652396,
      null,
      [
        0.18488370075196423,
        0.04517893254756927
      ],
      136.90959978103638,
      1,
      1743988976.6087694,
      1743989113.5202546,
      {}
    ],
    [
      1396,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011924637109041214
      ],
      90.02645921707153,
      1,
      1743989113.8633814,
      1743989203.8918731,
      {}
    ],
    [
      1397,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743989204.3007507,
      1743989204.5056725,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1398,
      null,
      209652396,
      null,
      [
        0.18912185079849747,
        0.043855956047773356
      ],
      121.86470460891724,
      1,
      1743989223.3170166,
      1743989345.183513,
      {}
    ],
    [
      1399,
      null,
      209652396,
      null,
      [
        0.18571303339267412,
        0.043663313537836076
      ],
      324.612425327301,
      1,
      1743989345.524823,
      1743989670.139145,
      {}
    ],
    [
      1400,
      null,
      209652396,
      null,
      [
        0.21580952628856825,
        0.027078666985034944
      ],
      91.44152665138245,
      1,
      1743989670.4811587,
      1743989761.9247918,
      {}
    ],
    [
      1401,
      null,
      209652396,
      null,
      [
        0.19087252635156832,
        0.04200878396630287
      ],
      85.56023335456848,
      1,
      1743989762.2673366,
      1743989847.829826,
      {}
    ],
    [
      1402,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743989848.1765857,
      1743990092.444623,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1403,
      null,
      209652396,
      null,
      [
        0.24084023881928074,
        0.02662948429584503
      ],
      147.90524458885193,
      1,
      1743990092.7987666,
      1743990240.706781,
      {}
    ],
    [
      1404,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0065898367762565625
      ],
      191.34821486473083,
      1,
      1743990241.0484333,
      1743990432.398724,
      {}
    ],
    [
      1405,
      null,
      209652396,
      null,
      [
        0.2118796568646868,
        0.026819291263818747
      ],
      204.56094193458557,
      1,
      1743990432.7403955,
      1743990637.3034706,
      {}
    ],
    [
      1406,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.014042959511280062
      ],
      194.39726209640503,
      1,
      1743990656.104243,
      1743990850.5036383,
      {}
    ],
    [
      1407,
      null,
      209652396,
      null,
      [
        0.19425083399634296,
        0.03756728306412697
      ],
      99.11946988105774,
      1,
      1743990850.8469346,
      1743990949.9684248,
      {}
    ],
    [
      1408,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.003598087728023529
      ],
      104.59176206588745,
      1,
      1743990950.308515,
      1743991054.902165,
      {}
    ],
    [
      1409,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0054135373234748835
      ],
      126.96301102638245,
      1,
      1743991055.3373425,
      1743991182.3022966,
      {}
    ],
    [
      1410,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743991182.6502578,
      1743991182.8338933,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1411,
      null,
      209652396,
      null,
      [
        0.19449650123302817,
        0.040825172066688536
      ],
      98.49305701255798,
      1,
      1743991183.180524,
      1743991281.675614,
      {}
    ],
    [
      1412,
      null,
      209652396,
      null,
      [
        0.2399495754286174,
        0.014262729585170747
      ],
      109.4739670753479,
      1,
      1743991282.1290104,
      1743991391.6048865,
      {}
    ],
    [
      1413,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.008560087084770202
      ],
      403.0036163330078,
      1,
      1743991391.9461246,
      1743991794.9516647,
      {}
    ],
    [
      1414,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011930667757987977
      ],
      111.37633228302002,
      1,
      1743991814.022381,
      1743991925.4008217,
      {}
    ],
    [
      1415,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743991925.8183582,
      1743992110.623058,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1416,
      null,
      209652396,
      null,
      [
        0.21501176441296202,
        0.028836326152086256
      ],
      219.7382378578186,
      1,
      1743992110.9698043,
      1743992330.7101455,
      {}
    ],
    [
      1417,
      null,
      209652396,
      null,
      [
        0.20601350691171053,
        0.034068050682544704
      ],
      128.45516300201416,
      1,
      1743992331.054178,
      1743992459.5114412,
      {}
    ],
    [
      1418,
      null,
      209652396,
      null,
      [
        0.18973620043979325,
        0.03904930487275123
      ],
      112.85353112220764,
      1,
      1743992459.8583841,
      1743992572.713953,
      {}
    ],
    [
      1419,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.011852081716060638
      ],
      169.52155447006226,
      1,
      1743992573.0771759,
      1743992742.6007483,
      {}
    ],
    [
      1420,
      null,
      209652396,
      null,
      [
        0.18046112933837485,
        0.04716577261686325
      ],
      98.94517397880554,
      1,
      1743992742.941754,
      1743992841.8887322,
      {}
    ],
    [
      1421,
      null,
      209652396,
      null,
      [
        0.18184308004667288,
        0.047487452626228326
      ],
      113.31708121299744,
      1,
      1743992842.2374375,
      1743992955.5563824,
      {}
    ],
    [
      1422,
      null,
      209652396,
      null,
      [
        0.2397038751829171,
        0.020169412940740587
      ],
      110.29025602340698,
      1,
      1743992975.6132,
      1743993085.905546,
      {}
    ],
    [
      1423,
      null,
      209652396,
      null,
      [
        0.19179382210819335,
        0.04215255692601204
      ],
      149.92685389518738,
      1,
      1743993086.3798604,
      1743993236.3091493,
      {}
    ],
    [
      1424,
      null,
      209652396,
      null,
      [
        0.1895828075468794,
        0.04199699953198433
      ],
      110.77932214736938,
      1,
      1743993236.6610138,
      1743993347.4423661,
      {}
    ],
    [
      1425,
      null,
      209652396,
      null,
      [
        0.19090329546916374,
        0.043685772418975824
      ],
      101.75665020942688,
      1,
      1743993347.794528,
      1743993449.5532374,
      {}
    ],
    [
      1426,
      null,
      209652396,
      null,
      [
        0.17539369380686748,
        0.049553559422492975
      ],
      131.74103999137878,
      1,
      1743993449.901082,
      1743993581.6441674,
      {}
    ],
    [
      1427,
      null,
      209652396,
      null,
      [
        0.19207010756411952,
        0.03821266978979111
      ],
      392.7600712776184,
      1,
      1743993582.0020356,
      1743993974.7643108,
      {}
    ],
    [
      1428,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.01501684695482254
      ],
      184.54130744934082,
      1,
      1743993975.1126888,
      1743994159.6560314,
      {}
    ],
    [
      1429,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743994160.008526,
      1743994191.4780393,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1430,
      null,
      209652396,
      null,
      [
        0.2055527812264339,
        0.03407778277993202
      ],
      190.85326480865479,
      1,
      1743994210.6359906,
      1743994401.4913907,
      {}
    ],
    [
      1431,
      null,
      209652396,
      null,
      [
        0.2316269181538643,
        0.013490500450134276
      ],
      98.98668432235718,
      1,
      1743994401.8393898,
      1743994500.8280923,
      {}
    ],
    [
      1432,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743994501.1934226,
      1743994661.5813618,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1433,
      null,
      209652396,
      null,
      [
        0.2002396643115206,
        0.03422957345843315
      ],
      112.82726073265076,
      1,
      1743994661.937322,
      1743994774.7666686,
      {}
    ],
    [
      1434,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001530725657939911
      ],
      195.8769211769104,
      1,
      1743994775.119503,
      1743994970.9985085,
      {}
    ],
    [
      1435,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01079790472984314
      ],
      158.88327646255493,
      1,
      1743994971.3664773,
      1743995130.2518475,
      {}
    ],
    [
      1436,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743995130.6012042,
      1743995139.5595317,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1437,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004871556162834167
      ],
      71.25404477119446,
      1,
      1743995139.921825,
      1743995211.178229,
      {}
    ],
    [
      1438,
      null,
      209652396,
      null,
      [
        0.22219773267677462,
        0.02476793214678764
      ],
      153.22863149642944,
      1,
      1743995232.2576234,
      1743995385.4886737,
      {}
    ],
    [
      1439,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743995385.8391628,
      1743995386.0369692,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1440,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743995386.3866746,
      1743995451.020401,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1441,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0019126260280609131
      ],
      237.58906173706055,
      1,
      1743995451.3710864,
      1743995688.9622362,
      {}
    ],
    [
      1442,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743995689.3226361,
      1743995822.6602342,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1443,
      null,
      209652396,
      null,
      [
        0.23902819950724147,
        0.02008619695901871
      ],
      128.55810499191284,
      1,
      1743995823.0261014,
      1743995951.586352,
      {}
    ],
    [
      1444,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743995951.938972,
      1743995957.4788432,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1445,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743995957.8941145,
      1743995974.1438034,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1446,
      null,
      209652396,
      null,
      [
        0.22711187905798685,
        0.027919112741947177
      ],
      122.05692338943481,
      1,
      1743995994.5987573,
      1743996116.6578426,
      {}
    ],
    [
      1447,
      null,
      209652396,
      null,
      [
        0.23872107420011615,
        0.019789327979087827
      ],
      215.36152482032776,
      1,
      1743996117.0833876,
      1743996332.4469793,
      {}
    ],
    [
      1448,
      null,
      209652396,
      null,
      [
        0.23389939550119188,
        0.02264861673116684
      ],
      155.6571352481842,
      1,
      1743996332.8010936,
      1743996488.4603171,
      {}
    ],
    [
      1449,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743996488.827757,
      1743996501.8652043,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1450,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743996502.2198067,
      1743996519.107879,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1451,
      null,
      209652396,
      null,
      [
        0.1920702678936212,
        0.041376159787178034
      ],
      93.42271113395691,
      1,
      1743996519.4665003,
      1743996612.891191,
      {}
    ],
    [
      1452,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743996613.2689362,
      1743996973.3849785,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1453,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004818068742752076
      ],
      116.41483688354492,
      1,
      1743996973.7420928,
      1743997090.1590078,
      {}
    ],
    [
      1454,
      null,
      209652396,
      null,
      [
        0.20340326246014867,
        0.027790229320526123
      ],
      182.94273209571838,
      1,
      1743997110.1953022,
      1743997293.140265,
      {}
    ],
    [
      1455,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0037724022567272183
      ],
      180.05797338485718,
      1,
      1743997293.4964356,
      1743997473.556497,
      {}
    ],
    [
      1456,
      null,
      209652396,
      null,
      [
        0.20343362603841647,
        0.03074885755777359
      ],
      88.76886701583862,
      1,
      1743997473.9141605,
      1743997562.685241,
      {}
    ],
    [
      1457,
      null,
      209652396,
      null,
      [
        0.20054660099570282,
        0.03417649954557419
      ],
      124.99443030357361,
      1,
      1743997563.1354823,
      1743997688.1317537,
      {}
    ],
    [
      1458,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743997688.490643,
      1743997747.3590655,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1459,
      null,
      209652396,
      null,
      [
        0.1863579022261657,
        0.043686771988868715
      ],
      153.43942189216614,
      1,
      1743997747.721636,
      1743997901.1632638,
      {}
    ],
    [
      1460,
      null,
      209652396,
      null,
      [
        0.1888148292339909,
        0.043115496486425396
      ],
      98.54751825332642,
      1,
      1743997901.5209901,
      1743998000.0704906,
      {}
    ],
    [
      1461,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743998000.4363875,
      1743998024.1155503,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1462,
      null,
      209652396,
      null,
      [
        0.21706972560265975,
        0.02661172643303871
      ],
      136.45779752731323,
      1,
      1743998044.4961417,
      1743998180.9563985,
      {}
    ],
    [
      1463,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0030969449877738956
      ],
      132.3746440410614,
      1,
      1743998181.3383527,
      1743998313.7150998,
      {}
    ],
    [
      1464,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743998314.080708,
      1743998359.0126917,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1465,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743998359.3748415,
      1743998362.9975214,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1466,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743998363.351384,
      1743998363.5581386,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1467,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743998363.9125092,
      1743998364.1008,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1468,
      null,
      209652396,
      null,
      [
        0.19071889296440192,
        0.04008011043071747
      ],
      109.89989519119263,
      1,
      1743998364.45405,
      1743998474.3557656,
      {}
    ],
    [
      1469,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743998474.8221753,
      1743998474.998888,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1470,
      null,
      209652396,
      null,
      [
        0.1776662937591081,
        0.045381735861301425
      ],
      201.47629737854004,
      1,
      1743998495.3631303,
      1743998696.8415177,
      {}
    ],
    [
      1471,
      null,
      209652396,
      null,
      [
        0.23620274570873373,
        0.017665601074695586
      ],
      111.65081977844238,
      1,
      1743998697.2042935,
      1743998808.8571064,
      {}
    ],
    [
      1472,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743998809.2708025,
      1743998809.3980455,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1473,
      null,
      209652396,
      null,
      [
        0.23045940343844534,
        0.024749520123004916
      ],
      107.60402703285217,
      1,
      1743998809.7530124,
      1743998917.3588102,
      {}
    ],
    [
      1474,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743998917.7187076,
      1743998917.9154632,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1475,
      null,
      209652396,
      null,
      [
        0.23270189445339146,
        0.023729566931724545
      ],
      189.09229159355164,
      1,
      1743998918.2737346,
      1743999107.3678815,
      {}
    ],
    [
      1476,
      null,
      209652396,
      null,
      [
        0.22554678490307234,
        0.02368076100945473
      ],
      179.39076113700867,
      1,
      1743999107.7333379,
      1743999287.1261048,
      {}
    ],
    [
      1477,
      null,
      209652396,
      null,
      [
        0.18448446143056924,
        0.044141404479742054
      ],
      96.82588028907776,
      1,
      1743999287.4886935,
      1743999384.3166523,
      {}
    ],
    [
      1478,
      null,
      209652396,
      null,
      [
        0.23534269582173778,
        0.014689929634332655
      ],
      110.75350427627563,
      1,
      1743999404.322017,
      1743999515.0778341,
      {}
    ],
    [
      1479,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743999515.4364648,
      1743999543.221657,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1480,
      null,
      209652396,
      null,
      [
        0.20797894383223725,
        0.029519736766815186
      ],
      64.04977536201477,
      1,
      1743999543.5826714,
      1743999607.6343427,
      {}
    ],
    [
      1481,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743999607.9920776,
      1743999608.2089255,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1482,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.017387929409742355
      ],
      124.48400497436523,
      1,
      1743999608.565343,
      1743999733.0511906,
      {}
    ],
    [
      1483,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1743999733.411799,
      1743999738.859142,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1484,
      null,
      209652396,
      null,
      [
        0.24001100049004243,
        0.017494349181652068
      ],
      315.3581545352936,
      1,
      1743999739.2200468,
      1744000054.5800865,
      {}
    ],
    [
      1485,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0022668090462684633
      ],
      97.99168825149536,
      1,
      1744000054.9439793,
      1744000152.9377987,
      {}
    ],
    [
      1486,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0035232621431350703
      ],
      127.6997766494751,
      1,
      1744000154.9220204,
      1744000282.62386,
      {}
    ],
    [
      1487,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744000301.8917367,
      1744000302.3429847,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1488,
      null,
      209652396,
      null,
      [
        0.18503737657929273,
        0.043580339699983595
      ],
      106.16884589195251,
      1,
      1744000302.7707002,
      1744000408.941386,
      {}
    ],
    [
      1489,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744000409.4298465,
      1744000409.6529331,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1490,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.00851199746131897
      ],
      257.22589659690857,
      1,
      1744000410.0675607,
      1744000667.2953312,
      {}
    ],
    [
      1491,
      null,
      209652396,
      null,
      [
        0.23607992859489862,
        0.02198980048298836
      ],
      190.95906257629395,
      1,
      1744000667.6633453,
      1744000858.6245139,
      {}
    ],
    [
      1492,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744000858.9887395,
      1744000951.733015,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1493,
      null,
      209652396,
      null,
      [
        0.1934522799043757,
        0.03752055540680886
      ],
      143.03874135017395,
      1,
      1744000952.0998728,
      1744001095.1406224,
      {}
    ],
    [
      1494,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744001115.8053985,
      1744001126.9859927,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1495,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744001127.3522067,
      1744001127.5641122,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1496,
      null,
      209652396,
      null,
      [
        0.23368437477718915,
        0.02320871338248253
      ],
      138.5861849784851,
      1,
      1744001127.9235585,
      1744001266.5115995,
      {}
    ],
    [
      1497,
      null,
      209652396,
      null,
      [
        0.18942896667447567,
        0.041409819871187206
      ],
      99.54003095626831,
      1,
      1744001266.8789582,
      1744001366.4210315,
      {}
    ],
    [
      1498,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744001366.9166048,
      1744001390.9308884,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1499,
      null,
      209652396,
      null,
      [
        0.198796406431137,
        0.03095845073461533
      ],
      133.5733687877655,
      1,
      1744001391.3007681,
      1744001524.8763454,
      {}
    ],
    [
      1500,
      null,
      209652396,
      null,
      [
        0.20552193665966123,
        0.029497981518507004
      ],
      102.41828513145447,
      1,
      1744001525.2450674,
      1744001627.665366,
      {}
    ],
    [
      1501,
      null,
      209652396,
      null,
      [
        0.2171923682402724,
        0.028149753510951996
      ],
      191.3131844997406,
      1,
      1744001628.0294714,
      1744001819.3444846,
      {}
    ],
    [
      1502,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744001821.046656,
      1744001821.2645688,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1503,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744001821.6671107,
      1744001821.8816264,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1504,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.006786717474460602
      ],
      172.6179437637329,
      1,
      1744001822.2748568,
      1744001994.8946185,
      {}
    ],
    [
      1505,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002013.699078,
      1744002038.937439,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1506,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002039.3351882,
      1744002039.562091,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1507,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.006203640103340149
      ],
      96.92421698570251,
      1,
      1744002039.9328828,
      1744002136.8592136,
      {}
    ],
    [
      1508,
      null,
      209652396,
      null,
      [
        0.21237110451182312,
        0.029458402842283248
      ],
      222.10212898254395,
      1,
      1744002137.227487,
      1744002359.3315291,
      {}
    ],
    [
      1509,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002359.6984706,
      1744002359.8934531,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1510,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.019751434922218324
      ],
      126.59303045272827,
      1,
      1744002379.6568644,
      1744002506.251927,
      {}
    ],
    [
      1511,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002506.6219416,
      1744002506.815685,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1512,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002507.1892786,
      1744002524.6570358,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1513,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002525.0327885,
      1744002528.3635566,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1514,
      null,
      209652396,
      null,
      [
        0.21537995168234686,
        0.030588475167751317
      ],
      99.02474856376648,
      1,
      1744002528.751945,
      1744002627.778925,
      {}
    ],
    [
      1515,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002628.252452,
      1744002651.3125603,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1516,
      null,
      209652396,
      null,
      [
        0.18617351858369827,
        0.047284454703330994
      ],
      115.30642771720886,
      1,
      1744002651.687982,
      1744002766.996207,
      {}
    ],
    [
      1517,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002767.4197996,
      1744002767.6563118,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1518,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002788.0875432,
      1744002788.5481799,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1519,
      null,
      209652396,
      null,
      [
        0.21964859262763453,
        0.02916665703058243
      ],
      114.02664804458618,
      1,
      1744002788.96846,
      1744002902.9970038,
      {}
    ],
    [
      1520,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002903.4841144,
      1744002923.1237917,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1521,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744002923.5587702,
      1744002923.6843011,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1522,
      null,
      209652396,
      null,
      [
        0.1930224129325926,
        0.040348297208547594
      ],
      90.64502620697021,
      1,
      1744002924.0528011,
      1744003014.6996477,
      {}
    ],
    [
      1523,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.014642695039510729
      ],
      90.6031904220581,
      1,
      1744003015.193436,
      1744003105.7988498,
      {}
    ],
    [
      1524,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744003106.2869046,
      1744003106.4221666,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1525,
      null,
      209652396,
      null,
      [
        0.2377998869016833,
        0.024530918449163438
      ],
      112.3036777973175,
      1,
      1744003106.7933927,
      1744003219.099017,
      {}
    ],
    [
      1526,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744003240.1153355,
      1744003240.5328953,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1527,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.002937788665294647
      ],
      175.1195888519287,
      1,
      1744003240.9552221,
      1744003416.07669,
      {}
    ],
    [
      1528,
      null,
      209652396,
      null,
      [
        0.19971751828039255,
        0.028342005908489225
      ],
      227.11849164962769,
      1,
      1744003416.464582,
      1744003643.5857582,
      {}
    ],
    [
      1529,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744003644.0278287,
      1744003644.2415802,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1530,
      null,
      209652396,
      null,
      [
        0.19332954767086505,
        0.04125749439001083
      ],
      180.99347972869873,
      1,
      1744003644.6130764,
      1744003825.6084878,
      {}
    ],
    [
      1531,
      null,
      209652396,
      null,
      [
        0.19299162023712924,
        0.038854049742221834
      ],
      110.6828362941742,
      1,
      1744003825.9819908,
      1744003936.667046,
      {}
    ],
    [
      1532,
      null,
      209652396,
      null,
      [
        0.2071806821058318,
        0.0318644803762436
      ],
      92.77197933197021,
      1,
      1744003937.1332204,
      1744004029.9072652,
      {}
    ],
    [
      1533,
      null,
      209652396,
      null,
      [
        0.19277646747706628,
        0.03893240287899972
      ],
      233.59145879745483,
      1,
      1744004030.3530056,
      1744004263.9463577,
      {}
    ],
    [
      1534,
      null,
      209652396,
      null,
      [
        0.23525074685254327,
        0.025203394889831542
      ],
      124.15573978424072,
      1,
      1744004285.769117,
      1744004409.9270947,
      {}
    ],
    [
      1535,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744004410.3008366,
      1744004457.7717552,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1536,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013336039483547214
      ],
      104.70793628692627,
      1,
      1744004458.1500232,
      1744004562.8599463,
      {}
    ],
    [
      1537,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.005522870421409607
      ],
      101.22748374938965,
      1,
      1744004563.2360656,
      1744004664.4656584,
      {}
    ],
    [
      1538,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.015102571547031401
      ],
      122.90302228927612,
      1,
      1744004664.9549031,
      1744004787.860045,
      {}
    ],
    [
      1539,
      null,
      209652396,
      null,
      [
        0.19686121519953853,
        0.03670269042253495
      ],
      90.73946905136108,
      1,
      1744004788.346557,
      1744004879.0880806,
      {}
    ],
    [
      1540,
      null,
      209652396,
      null,
      [
        0.19130240747007216,
        0.04010966911911964
      ],
      234.0832085609436,
      1,
      1744004879.5887687,
      1744005113.6746213,
      {}
    ],
    [
      1541,
      null,
      209652396,
      null,
      [
        0.18144403877936813,
        0.04912030309438706
      ],
      152.2382354736328,
      1,
      1744005114.0522032,
      1744005266.2925436,
      {}
    ],
    [
      1542,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744005287.3299193,
      1744005336.6345253,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1543,
      null,
      209652396,
      null,
      [
        0.20106875174240443,
        0.0334149219095707
      ],
      103.21340489387512,
      1,
      1744005337.017452,
      1744005440.232939,
      {}
    ],
    [
      1544,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744005440.683092,
      1744005468.8667123,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1545,
      null,
      209652396,
      null,
      [
        0.23881335325946101,
        0.021365314722061157
      ],
      126.57022714614868,
      1,
      1744005469.250694,
      1744005595.8230796,
      {}
    ],
    [
      1546,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.019084147065877917
      ],
      274.3816661834717,
      1,
      1744005596.2619612,
      1744005870.645749,
      {}
    ],
    [
      1547,
      null,
      209652396,
      null,
      [
        0.1908724131778024,
        0.03867977738380432
      ],
      129.33774280548096,
      1,
      1744005871.027534,
      1744006000.3673646,
      {}
    ],
    [
      1548,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744006000.8023252,
      1744006000.9968188,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1549,
      null,
      209652396,
      null,
      [
        0.2387826407287485,
        0.020755474567413328
      ],
      101.79708242416382,
      1,
      1744006001.3762326,
      1744006103.1752737,
      {}
    ],
    [
      1550,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744006125.0939498,
      1744006170.765739,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1551,
      null,
      209652396,
      null,
      [
        0.2003010799417985,
        0.03430607751011848
      ],
      152.26310181617737,
      1,
      1744006171.1617427,
      1744006323.426963,
      {}
    ],
    [
      1552,
      null,
      209652396,
      null,
      [
        0.24056382604286802,
        0.018312680572271346
      ],
      66.81801104545593,
      1,
      1744006323.807115,
      1744006390.6273391,
      {}
    ],
    [
      1553,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.009270032346248628
      ],
      107.17442846298218,
      1,
      1744006391.0082254,
      1744006498.184575,
      {}
    ],
    [
      1554,
      null,
      209652396,
      null,
      [
        0.21498173564041828,
        0.028336285501718517
      ],
      135.4150140285492,
      1,
      1744006498.6113586,
      1744006634.028256,
      {}
    ],
    [
      1555,
      null,
      209652396,
      null,
      [
        0.19022761507791447,
        0.04160958573222161
      ],
      212.94999408721924,
      1,
      1744006634.4073675,
      1744006847.3595636,
      {}
    ],
    [
      1556,
      null,
      209652396,
      null,
      [
        0.24071738869643067,
        0.02017836466431618
      ],
      95.08265805244446,
      1,
      1744006847.7428746,
      1744006942.8276145,
      {}
    ],
    [
      1557,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744006943.326389,
      1744007113.6728435,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1558,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744007135.9676037,
      1744007170.5244844,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1559,
      null,
      209652396,
      null,
      [
        0.2045392299883318,
        0.028665786385536195
      ],
      126.53661179542542,
      1,
      1744007170.9231596,
      1744007297.4621382,
      {}
    ],
    [
      1560,
      null,
      209652396,
      null,
      [
        0.19074969037543885,
        0.04079951032996178
      ],
      88.0652244091034,
      1,
      1744007297.9254367,
      1744007385.9927006,
      {}
    ],
    [
      1561,
      null,
      209652396,
      null,
      [
        0.23746200190810968,
        0.021823254376649857
      ],
      129.4359052181244,
      1,
      1744007386.3972046,
      1744007515.8349593,
      {}
    ],
    [
      1562,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744007516.251397,
      1744007516.4626071,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1563,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.003674137890338898
      ],
      207.56767416000366,
      1,
      1744007516.8396497,
      1744007724.4091172,
      {}
    ],
    [
      1564,
      null,
      209652396,
      null,
      [
        0.15945455054736493,
        0.06869075194001198
      ],
      207.41730308532715,
      1,
      1744007724.7925775,
      1744007932.2120402,
      {}
    ],
    [
      1565,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744007932.6162581,
      1744008008.0880606,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1566,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0007648509740829468
      ],
      71.95628690719604,
      1,
      1744008029.9438403,
      1744008101.9024315,
      {}
    ],
    [
      1567,
      null,
      209652396,
      null,
      [
        0.23644848839459617,
        0.027202391624450685
      ],
      136.20139408111572,
      1,
      1744008102.2874713,
      1744008238.4907587,
      {}
    ],
    [
      1568,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744008238.8878558,
      1744008242.370447,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1569,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0033933842182159424
      ],
      154.59445881843567,
      1,
      1744008242.753876,
      1744008397.3505502,
      {}
    ],
    [
      1570,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744008397.7357087,
      1744008397.950059,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1571,
      null,
      209652396,
      null,
      [
        0.18798546829983956,
        0.04303852930665016
      ],
      123.6489589214325,
      1,
      1744008398.3292463,
      1744008521.9800684,
      {}
    ],
    [
      1572,
      null,
      209652396,
      null,
      [
        0.2355272256469861,
        0.02200922504067421
      ],
      173.8793342113495,
      1,
      1744008522.3680418,
      1744008696.2495072,
      {}
    ],
    [
      1573,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00868881732225418
      ],
      221.22803854942322,
      1,
      1744008696.6369016,
      1744008917.8670976,
      {}
    ],
    [
      1574,
      null,
      209652396,
      null,
      [
        0.16995767018222108,
        0.057561122626066205
      ],
      123.38297390937805,
      1,
      1744008939.490582,
      1744009062.875732,
      {}
    ],
    [
      1575,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744009063.4198296,
      1744009070.7847676,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1576,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744009071.2939413,
      1744009071.4922223,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1577,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744009071.8721638,
      1744009074.4689355,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1578,
      null,
      209652396,
      null,
      [
        0.1873712271167361,
        0.043225174695253374
      ],
      117.50122570991516,
      1,
      1744009074.850874,
      1744009192.3540213,
      {}
    ],
    [
      1579,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.007301068902015687
      ],
      141.4521267414093,
      1,
      1744009192.843484,
      1744009334.2977078,
      {}
    ],
    [
      1580,
      null,
      209652396,
      null,
      [
        0.22953816898427676,
        0.025905699878931043
      ],
      129.97484731674194,
      1,
      1744009334.6841297,
      1744009464.66101,
      {}
    ],
    [
      1581,
      null,
      209652396,
      null,
      [
        0.19240805857572324,
        0.03980029612779617
      ],
      101.32359147071838,
      1,
      1744009465.0454414,
      1744009566.3710477,
      {}
    ],
    [
      1582,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744009588.330093,
      1744009599.354742,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1583,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744009599.7466357,
      1744009605.748368,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1584,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744009606.151192,
      1744009615.837079,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1585,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.013988127708435058
      ],
      113.197585105896,
      1,
      1744009616.2269316,
      1744009729.4265485,
      {}
    ],
    [
      1586,
      null,
      209652396,
      null,
      [
        0.184699515163587,
        0.044481326043605794
      ],
      116.61803412437439,
      1,
      1744009729.8149643,
      1744009846.4350975,
      {}
    ],
    [
      1587,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744009846.81969,
      1744009846.9536707,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1588,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744009847.3384738,
      1744009847.5447524,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1589,
      null,
      209652396,
      null,
      [
        0.1729056911691642,
        0.05625159621238709
      ],
      213.7899992465973,
      1,
      1744009847.929024,
      1744010061.7209144,
      {}
    ],
    [
      1590,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744010084.0828662,
      1744010084.273517,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1591,
      null,
      209652396,
      null,
      [
        0.18663439988290284,
        0.04933353334665298
      ],
      84.15603041648865,
      1,
      1744010084.6640193,
      1744010168.821891,
      {}
    ],
    [
      1592,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744010169.2082555,
      1744010266.587801,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1593,
      null,
      209652396,
      null,
      [
        0.1863885487388481,
        0.04259916931390763
      ],
      91.06222748756409,
      1,
      1744010267.134009,
      1744010358.1981747,
      {}
    ],
    [
      1594,
      null,
      209652396,
      null,
      [
        0.17797357939573505,
        0.04845921933650971
      ],
      93.09047389030457,
      1,
      1744010358.7889254,
      1744010451.8811994,
      {}
    ],
    [
      1595,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.012718842923641204
      ],
      148.20417642593384,
      1,
      1744010452.3762007,
      1744010600.5822651,
      {}
    ],
    [
      1596,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744010600.981097,
      1744010601.1857126,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1597,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.005462466776371002
      ],
      128.10229659080505,
      1,
      1744010601.5739582,
      1744010729.6783216,
      {}
    ],
    [
      1598,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744010751.6652858,
      1744010758.510918,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1599,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001949768662452698
      ],
      98.11511874198914,
      1,
      1744010758.9028044,
      1744010857.0199559,
      {}
    ],
    [
      1600,
      null,
      209652396,
      null,
      [
        0.23623335921240116,
        0.02412815734744072
      ],
      111.37481045722961,
      1,
      1744010857.5104065,
      1744010968.8871462,
      {}
    ],
    [
      1601,
      null,
      209652396,
      null,
      [
        0.20303436313915357,
        0.033928800523281094
      ],
      108.09399461746216,
      1,
      1744010969.2827516,
      1744011077.3787725,
      {}
    ],
    [
      1602,
      null,
      209652396,
      null,
      [
        0.19581704574219544,
        0.036554878056049345
      ],
      141.8567771911621,
      1,
      1744011077.7674694,
      1744011219.626201,
      {}
    ],
    [
      1603,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744011220.03395,
      1744011418.6093898,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1604,
      null,
      209652396,
      null,
      [
        0.2397038751829171,
        0.012104853093624114
      ],
      95.80254793167114,
      1,
      1744011419.0000508,
      1744011514.8046172,
      {}
    ],
    [
      1605,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744011515.3057506,
      1744011515.576788,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1606,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.010576290786266327
      ],
      128.5443217754364,
      1,
      1744011537.8800964,
      1744011666.426589,
      {}
    ],
    [
      1607,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744011666.8320796,
      1744011717.1137416,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1608,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744011717.525015,
      1744011721.4828093,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1609,
      null,
      209652396,
      null,
      [
        0.19108733015918644,
        0.043291642963886254
      ],
      109.07568979263306,
      1,
      1744011721.8786101,
      1744011830.9562657,
      {}
    ],
    [
      1610,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744011831.3531375,
      1744011831.5976114,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1611,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.01953109994530678
      ],
      284.3026020526886,
      1,
      1744011832.0082185,
      1744012116.312649,
      {}
    ],
    [
      1612,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744012116.7083805,
      1744012310.0174131,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1613,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744012310.4160872,
      1744012310.6254795,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1614,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744012333.5147715,
      1744012352.5789053,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1615,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744012352.9956765,
      1744012360.9196224,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1616,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0030138200521469117
      ],
      101.61738443374634,
      1,
      1744012361.329185,
      1744012462.9495418,
      {}
    ],
    [
      1617,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744012463.4484823,
      1744012463.5877812,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1618,
      null,
      209652396,
      null,
      [
        0.20567439115343306,
        0.03399873837828636
      ],
      93.68094778060913,
      1,
      1744012463.9818606,
      1744012557.6646175,
      {}
    ],
    [
      1619,
      null,
      209652396,
      null,
      [
        0.19087246504911176,
        0.04310264974832535
      ],
      111.70669102668762,
      1,
      1744012558.2801344,
      1744012669.989419,
      {}
    ],
    [
      1620,
      null,
      209652396,
      null,
      [
        0.2263746368536788,
        0.02539625465869903
      ],
      126.3030731678009,
      1,
      1744012670.4502566,
      1744012796.7553666,
      {}
    ],
    [
      1621,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0033009684085845955
      ],
      113.05393505096436,
      1,
      1744012797.1495702,
      1744012910.2057574,
      {}
    ],
    [
      1622,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744012932.9886215,
      1744012933.1315851,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1623,
      null,
      209652396,
      null,
      [
        0.16378455053604754,
        0.06607153162360192
      ],
      127.41707348823547,
      1,
      1744012933.5253022,
      1744013060.944213,
      {}
    ],
    [
      1624,
      null,
      209652396,
      null,
      [
        0.19311452223128872,
        0.03983953550457954
      ],
      87.96334147453308,
      1,
      1744013061.3464627,
      1744013149.3118887,
      {}
    ],
    [
      1625,
      null,
      209652396,
      null,
      [
        0.23651000305191924,
        0.020969082117080685
      ],
      92.56978964805603,
      1,
      1744013149.7067149,
      1744013242.278405,
      {}
    ],
    [
      1626,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.004873265922069549
      ],
      83.31185936927795,
      1,
      1744013242.671704,
      1744013325.9854853,
      {}
    ],
    [
      1627,
      null,
      209652396,
      null,
      [
        0.22935498781307168,
        0.027289087921380996
      ],
      110.24194526672363,
      1,
      1744013326.4517615,
      1744013436.6957076,
      {}
    ],
    [
      1628,
      null,
      209652396,
      null,
      [
        0.20223571473571472,
        0.03293695226311684
      ],
      125.6365237236023,
      1,
      1744013437.1901906,
      1744013562.828626,
      {}
    ],
    [
      1629,
      null,
      209652396,
      null,
      [
        0.1541413911922894,
        0.08504582658410073
      ],
      184.27591586112976,
      1,
      1744013563.238592,
      1744013747.5166204,
      {}
    ],
    [
      1630,
      null,
      209652396,
      null,
      [
        0.2289548855417119,
        0.024147409498691562
      ],
      103.36567950248718,
      1,
      1744013769.4541435,
      1744013872.8218594,
      {}
    ],
    [
      1631,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744013873.2182202,
      1744013893.5960467,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1632,
      null,
      209652396,
      null,
      [
        0.237554332838764,
        0.024689569920301434
      ],
      90.03274393081665,
      1,
      1744013894.0007193,
      1744013984.0355203,
      {}
    ],
    [
      1633,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744013984.4387124,
      1744013990.4557643,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1634,
      null,
      209652396,
      null,
      [
        0.22505429039860175,
        0.025459449738264084
      ],
      193.8329176902771,
      1,
      1744013990.8764691,
      1744014184.7114787,
      {}
    ],
    [
      1635,
      null,
      209652396,
      null,
      [
        0.18119836211153578,
        0.05064803004264832
      ],
      75.96033000946045,
      1,
      1744014185.1102035,
      1744014261.072618,
      {}
    ],
    [
      1636,
      null,
      209652396,
      null,
      [
        0.18282608379913767,
        0.050013491958379744
      ],
      240.87611293792725,
      1,
      1744014261.4687119,
      1744014502.34754,
      {}
    ],
    [
      1637,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744014502.7522552,
      1744014504.277795,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1638,
      null,
      209652396,
      null,
      [
        0.21848256803346625,
        0.02899507939815521
      ],
      107.94253754615784,
      1,
      1744014506.2632527,
      1744014614.2078924,
      {}
    ],
    [
      1639,
      null,
      209652396,
      null,
      [
        0.204508498595325,
        0.03624417662620545
      ],
      107.03140449523926,
      1,
      1744014614.6058738,
      1744014721.6393795,
      {}
    ],
    [
      1640,
      null,
      209652396,
      null,
      [
        0.1893983295929404,
        0.038318199664354326
      ],
      148.37603855133057,
      1,
      1744014742.3724496,
      1744014890.7505598,
      {}
    ],
    [
      1641,
      null,
      209652396,
      null,
      [
        0.2129539635527659,
        0.028627092540264132
      ],
      112.31459712982178,
      1,
      1744014891.1543841,
      1744015003.4710457,
      {}
    ],
    [
      1642,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744015003.9693475,
      1744015004.167448,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1643,
      null,
      209652396,
      null,
      [
        0.19332928831431823,
        0.04252921640872955
      ],
      91.51911163330078,
      1,
      1744015004.629105,
      1744015096.1500566,
      {}
    ],
    [
      1644,
      null,
      209652396,
      null,
      [
        0.19013548691692403,
        0.0401168529689312
      ],
      85.45397472381592,
      1,
      1744015096.6518106,
      1744015182.1076336,
      {}
    ],
    [
      1645,
      null,
      209652396,
      null,
      [
        0.1790790135850016,
        0.043282844722270966
      ],
      181.4835376739502,
      1,
      1744015182.5103848,
      1744015363.995877,
      {}
    ],
    [
      1646,
      null,
      209652396,
      null,
      [
        0.23942746240650434,
        0.025765299052000045
      ],
      159.1575791835785,
      1,
      1744015366.0066197,
      1744015525.166308,
      {}
    ],
    [
      1647,
      null,
      209652396,
      null,
      [
        0.2014677647162677,
        0.03312122240662575
      ],
      126.3872127532959,
      1,
      1744015547.0036912,
      1744015673.393096,
      {}
    ],
    [
      1648,
      null,
      209652396,
      null,
      [
        0.18528298722909503,
        0.043384718149900435
      ],
      102.05917167663574,
      1,
      1744015673.798249,
      1744015775.8595278,
      {}
    ],
    [
      1649,
      null,
      209652396,
      null,
      [
        0.189858998691334,
        0.04184181362390518
      ],
      111.13288760185242,
      1,
      1744015776.2603164,
      1744015887.3952925,
      {}
    ],
    [
      1650,
      null,
      209652396,
      null,
      [
        0.19815120279192136,
        0.03530383348464966
      ],
      112.38147306442261,
      1,
      1744015887.880907,
      1744016000.2644358,
      {}
    ],
    [
      1651,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744016000.6659033,
      1744016165.5267684,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1652,
      null,
      209652396,
      null,
      [
        0.1928994684982709,
        0.04354569032788276
      ],
      151.6268162727356,
      1,
      1744016165.9370422,
      1744016317.566132,
      {}
    ],
    [
      1653,
      null,
      209652396,
      null,
      [
        0.1850984385415523,
        0.043982105255126955
      ],
      99.5363781452179,
      1,
      1744016317.9802487,
      1744016417.5186396,
      {}
    ],
    [
      1654,
      null,
      209652396,
      null,
      [
        0.2047233354119582,
        0.03099827691912651
      ],
      127.0870258808136,
      1,
      1744016440.3353934,
      1744016567.4245613,
      {}
    ],
    [
      1655,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744016567.8322704,
      1744016568.0292451,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1656,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.017953712493181225
      ],
      109.36071920394897,
      1,
      1744016568.434642,
      1744016677.7972193,
      {}
    ],
    [
      1657,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744016678.2624366,
      1744016678.8141093,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      1658,
      null,
      209652396,
      null,
      [
        0.22173728049476554,
        0.02456196278333664
      ],
      136.3226933479309,
      1,
      1744016679.2151196,
      1744016815.539658,
      {}
    ],
    [
      1659,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744016816.0129352,
      1744016840.627085,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 58, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1660,
      null,
      209652396,
      null,
      [
        0.2335615105076183,
        0.024052173495292664
      ],
      89.6624083518982,
      1,
      1744016841.0716457,
      1744016930.7361965,
      {}
    ],
    [
      1661,
      null,
      209652396,
      null,
      [
        0.23838333067374987,
        0.01981750011444092
      ],
      148.4325225353241,
      1,
      1744016931.2855296,
      1744017079.720062,
      {}
    ],
    [
      1662,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1744017103.0456803,
      1744017175.4991813,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 108, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in train_and_predict_prr_classifier\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 69, in <listcomp>\n    usual_loss = sum([loss_function(group_output, group_y_batch) for group_output, group_y_batch in zip(groups_output, groups_y_batch) if group_output.shape[0] > 0]).to(device)\nIndexError: tuple index out of range\n",
        "error": "IndexError('tuple index out of range')"
      }
    ],
    [
      1663,
      null,
      209652396,
      null,
      [
        0.2327016492435654,
        0.019783739447593686
      ],
      129.14003896713257,
      1,
      1744017175.9101737,
      1744017305.0524352,
      {}
    ],
    [
      1664,
      null,
      209652396,
      null,
      [
        0.23810682358586552,
        0.023083608448505398
      ],
      187.79581594467163,
      1,
      1744017305.4556575,
      1744017493.2535403,
      {}
    ]
  ],
  "configs": {
    "1": {
      "batch_size": 297,
      "lambda_value": 0.6205646954477,
      "learning_rate": 0.000210147218,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 697
    },
    "2": {
      "batch_size": 979,
      "lambda_value": 0.3596079321578,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "3": {
      "batch_size": 652,
      "lambda_value": 0.7642785040662,
      "learning_rate": 0.0014379647071,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 136
    },
    "4": {
      "batch_size": 94,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 339
    },
    "5": {
      "batch_size": 241,
      "lambda_value": 0.9708397453651,
      "learning_rate": 0.0329667406801,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 407
    },
    "6": {
      "batch_size": 107,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0301390578778,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 338
    },
    "7": {
      "batch_size": 322,
      "lambda_value": 0.412513526121,
      "learning_rate": 0.0006441000446,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "8": {
      "batch_size": 815,
      "lambda_value": 0.8617159873378,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 752
    },
    "9": {
      "batch_size": 925,
      "lambda_value": 0.3837167412653,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "10": {
      "batch_size": 150,
      "lambda_value": 0.1709107359706,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "11": {
      "batch_size": 1024,
      "lambda_value": 0.9367846473174,
      "learning_rate": 0.0044448572887,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "12": {
      "batch_size": 102,
      "lambda_value": 0.6765698196157,
      "learning_rate": 0.0001975638963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 697
    },
    "13": {
      "batch_size": 659,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0117063616816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "14": {
      "batch_size": 59,
      "lambda_value": 0.0030815114132,
      "learning_rate": 0.0057836649805,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 153
    },
    "15": {
      "batch_size": 659,
      "lambda_value": 0.4262363360775,
      "learning_rate": 0.0063782393736,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "16": {
      "batch_size": 176,
      "lambda_value": 0.5650710721095,
      "learning_rate": 0.0001467921737,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 463
    },
    "17": {
      "batch_size": 78,
      "lambda_value": 0.9864346619144,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "18": {
      "batch_size": 752,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0255903600372,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 709
    },
    "19": {
      "batch_size": 85,
      "lambda_value": 0.6624668076433,
      "learning_rate": 0.0001461455212,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 455
    },
    "20": {
      "batch_size": 277,
      "lambda_value": 0.0788153739624,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 788
    },
    "21": {
      "batch_size": 895,
      "lambda_value": 0.7897473442105,
      "learning_rate": 0.011623077444,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 411
    },
    "22": {
      "batch_size": 597,
      "lambda_value": 0.4199483890762,
      "learning_rate": 0.0062957704128,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1002
    },
    "23": {
      "batch_size": 498,
      "lambda_value": 0.4997052812651,
      "learning_rate": 0.0008260624616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 201
    },
    "24": {
      "batch_size": 81,
      "lambda_value": 0.801774956151,
      "learning_rate": 0.0054916470096,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "25": {
      "batch_size": 69,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0027189688569,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "26": {
      "batch_size": 544,
      "lambda_value": 0.3566148090088,
      "learning_rate": 0.0077072238861,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "27": {
      "batch_size": 635,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0144818936694,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "28": {
      "batch_size": 184,
      "lambda_value": 0.5249395800268,
      "learning_rate": 0.0002461496774,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 328
    },
    "29": {
      "batch_size": 40,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0216101868293,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "30": {
      "batch_size": 497,
      "lambda_value": 0.4323787825414,
      "learning_rate": 0.0004186695981,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 866
    },
    "31": {
      "batch_size": 47,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0584663913961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 229
    },
    "32": {
      "batch_size": 242,
      "lambda_value": 0.5897873412338,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 140
    },
    "33": {
      "batch_size": 59,
      "lambda_value": 0.9315102941087,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "34": {
      "batch_size": 53,
      "lambda_value": 0.7431359447524,
      "learning_rate": 0.0001324462442,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 383
    },
    "35": {
      "batch_size": 55,
      "lambda_value": 0.5959451110671,
      "learning_rate": 0.0279512903626,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "36": {
      "batch_size": 62,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0042972583038,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 456
    },
    "37": {
      "batch_size": 40,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0591287940477,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 557
    },
    "38": {
      "batch_size": 143,
      "lambda_value": 0.4893136075805,
      "learning_rate": 0.0143524519362,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 124
    },
    "39": {
      "batch_size": 111,
      "lambda_value": 0.6237206127861,
      "learning_rate": 0.0011527170707,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "40": {
      "batch_size": 203,
      "lambda_value": 0.836270266563,
      "learning_rate": 0.0026409543209,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 612
    },
    "41": {
      "batch_size": 68,
      "lambda_value": 0.1473946081284,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 788
    },
    "42": {
      "batch_size": 682,
      "lambda_value": 0.8411544066865,
      "learning_rate": 0.0006865924239,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 174
    },
    "43": {
      "batch_size": 61,
      "lambda_value": 0.9525627850943,
      "learning_rate": 0.0886799955763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 133
    },
    "44": {
      "batch_size": 766,
      "lambda_value": 0.8645144427745,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 276
    },
    "45": {
      "batch_size": 680,
      "lambda_value": 0.2601044820299,
      "learning_rate": 0.0155794633931,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 532
    },
    "46": {
      "batch_size": 61,
      "lambda_value": 0.737447287188,
      "learning_rate": 0.0001600052257,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 408
    },
    "47": {
      "batch_size": 563,
      "lambda_value": 0.5684020796476,
      "learning_rate": 0.0360030852203,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 276
    },
    "48": {
      "batch_size": 342,
      "lambda_value": 0.3794140715116,
      "learning_rate": 0.0094428768473,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "49": {
      "batch_size": 539,
      "lambda_value": 0.4096195582972,
      "learning_rate": 0.0014614146338,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 269
    },
    "50": {
      "batch_size": 540,
      "lambda_value": 0.6011431890687,
      "learning_rate": 0.0002228815534,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "51": {
      "batch_size": 65,
      "lambda_value": 0.2425091147505,
      "learning_rate": 0.0001738203182,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "52": {
      "batch_size": 313,
      "lambda_value": 0.4545499988336,
      "learning_rate": 0.0003879558517,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 696
    },
    "53": {
      "batch_size": 582,
      "lambda_value": 0.0387496336331,
      "learning_rate": 0.0003356147463,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 83
    },
    "54": {
      "batch_size": 841,
      "lambda_value": 0.3293608465041,
      "learning_rate": 0.0018412961777,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "55": {
      "batch_size": 507,
      "lambda_value": 0.5071325061685,
      "learning_rate": 0.0001639990325,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 291
    },
    "56": {
      "batch_size": 523,
      "lambda_value": 0.5220340899809,
      "learning_rate": 0.0261351106367,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 332
    },
    "57": {
      "batch_size": 63,
      "lambda_value": 0.1525805406835,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "58": {
      "batch_size": 51,
      "lambda_value": 0.6743427482514,
      "learning_rate": 0.0203488979235,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 182
    },
    "59": {
      "batch_size": 526,
      "lambda_value": 0.1558490208903,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 71
    },
    "60": {
      "batch_size": 571,
      "lambda_value": 0.1632290921883,
      "learning_rate": 0.0403526510329,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 155
    },
    "61": {
      "batch_size": 900,
      "lambda_value": 0.4300912433377,
      "learning_rate": 0.0152683361273,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 574
    },
    "62": {
      "batch_size": 946,
      "lambda_value": 0.240475409915,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "63": {
      "batch_size": 45,
      "lambda_value": 0.025892842149,
      "learning_rate": 0.0064701372435,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 138
    },
    "64": {
      "batch_size": 578,
      "lambda_value": 0.466940713799,
      "learning_rate": 0.0069166965864,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 247
    },
    "65": {
      "batch_size": 71,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0043214032666,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 297
    },
    "66": {
      "batch_size": 921,
      "lambda_value": 0.0402320288874,
      "learning_rate": 0.0695202977577,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 410
    },
    "67": {
      "batch_size": 217,
      "lambda_value": 0.6966025769503,
      "learning_rate": 0.0609459009151,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 409
    },
    "68": {
      "batch_size": 506,
      "lambda_value": 0.2774871972287,
      "learning_rate": 0.000458934893,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 239
    },
    "69": {
      "batch_size": 435,
      "lambda_value": 0.6182493089424,
      "learning_rate": 0.0313142741224,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "70": {
      "batch_size": 193,
      "lambda_value": 0.4888227212062,
      "learning_rate": 0.0678987026873,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 198
    },
    "71": {
      "batch_size": 799,
      "lambda_value": 0.0490666417774,
      "learning_rate": 0.000188798116,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 231
    },
    "72": {
      "batch_size": 83,
      "lambda_value": 0.9431689307954,
      "learning_rate": 0.0005462678091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 381
    },
    "73": {
      "batch_size": 962,
      "lambda_value": 0.1658029844256,
      "learning_rate": 0.0009078367561,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 387
    },
    "74": {
      "batch_size": 633,
      "lambda_value": 0.4527774250837,
      "learning_rate": 0.0005033519202,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 444
    },
    "75": {
      "batch_size": 632,
      "lambda_value": 0.2859097380484,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 145
    },
    "76": {
      "batch_size": 681,
      "lambda_value": 0.9252130831835,
      "learning_rate": 0.000225824127,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 160
    },
    "77": {
      "batch_size": 442,
      "lambda_value": 0.5011312487499,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 162
    },
    "78": {
      "batch_size": 363,
      "lambda_value": 0.5999613374055,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 119
    },
    "79": {
      "batch_size": 500,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0227301664178,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 487
    },
    "80": {
      "batch_size": 387,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0407226893036,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 860
    },
    "81": {
      "batch_size": 917,
      "lambda_value": 0.2528729324812,
      "learning_rate": 0.0002112474838,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 84
    },
    "82": {
      "batch_size": 683,
      "lambda_value": 0.4302554532778,
      "learning_rate": 0.0069425824515,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 336
    },
    "83": {
      "batch_size": 869,
      "lambda_value": 0.3577941791914,
      "learning_rate": 0.0001144897283,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 85
    },
    "84": {
      "batch_size": 219,
      "lambda_value": 0.1326945416802,
      "learning_rate": 0.0055501982149,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 497
    },
    "85": {
      "batch_size": 603,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.050363997522,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 431
    },
    "86": {
      "batch_size": 33,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0043216314201,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 925
    },
    "87": {
      "batch_size": 39,
      "lambda_value": 0.568414398817,
      "learning_rate": 0.0066942051347,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "88": {
      "batch_size": 959,
      "lambda_value": 0.0099039525899,
      "learning_rate": 0.0001330037572,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 856
    },
    "89": {
      "batch_size": 156,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0053294934748,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "90": {
      "batch_size": 844,
      "lambda_value": 0.2250047838217,
      "learning_rate": 0.0777989782816,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "91": {
      "batch_size": 84,
      "lambda_value": 0.0464184110839,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "92": {
      "batch_size": 65,
      "lambda_value": 0.4572054964111,
      "learning_rate": 0.0269030355547,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 150
    },
    "93": {
      "batch_size": 501,
      "lambda_value": 0.4344636044526,
      "learning_rate": 0.0343406853747,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 551
    },
    "94": {
      "batch_size": 193,
      "lambda_value": 0.6825317392541,
      "learning_rate": 0.0012800826778,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 78
    },
    "95": {
      "batch_size": 59,
      "lambda_value": 0.0982368328669,
      "learning_rate": 0.0062053850896,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "96": {
      "batch_size": 44,
      "lambda_value": 0.0105993407731,
      "learning_rate": 0.0059496031762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 116
    },
    "97": {
      "batch_size": 61,
      "lambda_value": 0.4695952651957,
      "learning_rate": 0.0024192530494,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 136
    },
    "98": {
      "batch_size": 355,
      "lambda_value": 0.9137569290511,
      "learning_rate": 0.034912055568,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 196
    },
    "99": {
      "batch_size": 431,
      "lambda_value": 0.0822383740424,
      "learning_rate": 0.0075073454367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 156
    },
    "100": {
      "batch_size": 259,
      "lambda_value": 0.6182439422905,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 90
    },
    "101": {
      "batch_size": 103,
      "lambda_value": 0.2833626254686,
      "learning_rate": 0.0005003261748,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 490
    },
    "102": {
      "batch_size": 37,
      "lambda_value": 0.5840919399451,
      "learning_rate": 0.0001459429644,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 355
    },
    "103": {
      "batch_size": 441,
      "lambda_value": 0.1020683828299,
      "learning_rate": 0.0037946946911,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 771
    },
    "104": {
      "batch_size": 298,
      "lambda_value": 0.6523313109885,
      "learning_rate": 0.0418434218437,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 217
    },
    "105": {
      "batch_size": 105,
      "lambda_value": 0.5175676044407,
      "learning_rate": 0.0804624104669,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 720
    },
    "106": {
      "batch_size": 132,
      "lambda_value": 0.8645510243583,
      "learning_rate": 0.0065231774625,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "107": {
      "batch_size": 222,
      "lambda_value": 0.3163643900406,
      "learning_rate": 0.0077402548612,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "108": {
      "batch_size": 274,
      "lambda_value": 0.8391282420355,
      "learning_rate": 0.0007788324639,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 627
    },
    "109": {
      "batch_size": 202,
      "lambda_value": 0.9814558991599,
      "learning_rate": 0.0305959268152,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 681
    },
    "110": {
      "batch_size": 118,
      "lambda_value": 0.0095926156531,
      "learning_rate": 0.0001209499004,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 489
    },
    "111": {
      "batch_size": 725,
      "lambda_value": 0.4495361860686,
      "learning_rate": 0.0001828620707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "112": {
      "batch_size": 142,
      "lambda_value": 0.3018269311536,
      "learning_rate": 0.0013615516581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 156
    },
    "113": {
      "batch_size": 39,
      "lambda_value": 0.6366104708849,
      "learning_rate": 0.0911637803703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 197
    },
    "114": {
      "batch_size": 48,
      "lambda_value": 0.8393505362879,
      "learning_rate": 0.000335227891,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 278
    },
    "115": {
      "batch_size": 456,
      "lambda_value": 0.2025097518032,
      "learning_rate": 0.000165906658,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "116": {
      "batch_size": 52,
      "lambda_value": 0.1777602005584,
      "learning_rate": 0.0071062444482,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 245
    },
    "117": {
      "batch_size": 387,
      "lambda_value": 0.8469855847131,
      "learning_rate": 0.0159663538365,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 871
    },
    "118": {
      "batch_size": 544,
      "lambda_value": 0.7637452690801,
      "learning_rate": 0.0189128877645,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "119": {
      "batch_size": 78,
      "lambda_value": 0.1333517870819,
      "learning_rate": 0.0379151435743,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 376
    },
    "120": {
      "batch_size": 858,
      "lambda_value": 0.5295439381285,
      "learning_rate": 0.0008570201388,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 874
    },
    "121": {
      "batch_size": 514,
      "lambda_value": 0.9751001598295,
      "learning_rate": 0.0023139794505,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 290
    },
    "122": {
      "batch_size": 181,
      "lambda_value": 0.1042301237216,
      "learning_rate": 0.0056294156898,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 184
    },
    "123": {
      "batch_size": 852,
      "lambda_value": 0.1477343378818,
      "learning_rate": 0.0001720754894,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 578
    },
    "124": {
      "batch_size": 287,
      "lambda_value": 0.0042305286159,
      "learning_rate": 0.0003825520686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 280
    },
    "125": {
      "batch_size": 38,
      "lambda_value": 0.4950446899782,
      "learning_rate": 0.0006069868363,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "126": {
      "batch_size": 713,
      "lambda_value": 0.4736068584881,
      "learning_rate": 0.0484101532431,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "127": {
      "batch_size": 46,
      "lambda_value": 0.2266582964608,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 481
    },
    "128": {
      "batch_size": 876,
      "lambda_value": 0.3843229233274,
      "learning_rate": 0.0312081445008,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "129": {
      "batch_size": 102,
      "lambda_value": 0.0243599966944,
      "learning_rate": 0.0034664159679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 142
    },
    "130": {
      "batch_size": 145,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0036689786017,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 86
    },
    "131": {
      "batch_size": 884,
      "lambda_value": 0.0240476070589,
      "learning_rate": 0.0001244318996,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 523
    },
    "132": {
      "batch_size": 725,
      "lambda_value": 0.5275737085407,
      "learning_rate": 0.0962149393336,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 78
    },
    "133": {
      "batch_size": 267,
      "lambda_value": 0.2227488758416,
      "learning_rate": 0.0133378701537,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "134": {
      "batch_size": 276,
      "lambda_value": 0.1850431063149,
      "learning_rate": 0.0050170483991,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 101
    },
    "135": {
      "batch_size": 852,
      "lambda_value": 0.2554158173882,
      "learning_rate": 0.0001859212949,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "136": {
      "batch_size": 66,
      "lambda_value": 0.0453077602809,
      "learning_rate": 0.0038705299809,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 173
    },
    "137": {
      "batch_size": 33,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 375
    },
    "138": {
      "batch_size": 313,
      "lambda_value": 0.4943773457039,
      "learning_rate": 0.0025848473367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 885
    },
    "139": {
      "batch_size": 74,
      "lambda_value": 0.0927269727559,
      "learning_rate": 0.0011079056334,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 465
    },
    "140": {
      "batch_size": 460,
      "lambda_value": 0.2886737918534,
      "learning_rate": 0.011874222675,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 145
    },
    "141": {
      "batch_size": 139,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0457859391684,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "142": {
      "batch_size": 776,
      "lambda_value": 0.1506642600813,
      "learning_rate": 0.00253628593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 529
    },
    "143": {
      "batch_size": 330,
      "lambda_value": 0.9821690174032,
      "learning_rate": 0.0229054208914,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "144": {
      "batch_size": 542,
      "lambda_value": 0.3884680740375,
      "learning_rate": 0.0047964066063,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 599
    },
    "145": {
      "batch_size": 46,
      "lambda_value": 0.7914718216174,
      "learning_rate": 0.0567631885834,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 276
    },
    "146": {
      "batch_size": 814,
      "lambda_value": 0.4706617753678,
      "learning_rate": 0.0280124201071,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 405
    },
    "147": {
      "batch_size": 671,
      "lambda_value": 0.477805553039,
      "learning_rate": 0.0001000439302,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 742
    },
    "148": {
      "batch_size": 307,
      "lambda_value": 0.3966296496465,
      "learning_rate": 0.0065078037431,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 550
    },
    "149": {
      "batch_size": 67,
      "lambda_value": 0.1238591984675,
      "learning_rate": 0.0008622153901,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 450
    },
    "150": {
      "batch_size": 538,
      "lambda_value": 0.1472817942137,
      "learning_rate": 0.0073574994525,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 635
    },
    "151": {
      "batch_size": 49,
      "lambda_value": 0.0688601702784,
      "learning_rate": 0.0003239179582,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 237
    },
    "152": {
      "batch_size": 793,
      "lambda_value": 0.2500518198771,
      "learning_rate": 0.0072989042556,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 564
    },
    "153": {
      "batch_size": 776,
      "lambda_value": 0.3086653060848,
      "learning_rate": 0.0004287369379,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "154": {
      "batch_size": 39,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0037841646219,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 544
    },
    "155": {
      "batch_size": 962,
      "lambda_value": 0.7517036849034,
      "learning_rate": 0.0123398549816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 611
    },
    "156": {
      "batch_size": 915,
      "lambda_value": 0.2951589262888,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 325
    },
    "157": {
      "batch_size": 831,
      "lambda_value": 0.9121447002385,
      "learning_rate": 0.0258958220048,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 86
    },
    "158": {
      "batch_size": 976,
      "lambda_value": 0.3603359633198,
      "learning_rate": 0.0163222644592,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 278
    },
    "159": {
      "batch_size": 493,
      "lambda_value": 0.6414907887986,
      "learning_rate": 0.0751665791976,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 235
    },
    "160": {
      "batch_size": 454,
      "lambda_value": 0.1246000775699,
      "learning_rate": 0.0038598459083,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "161": {
      "batch_size": 137,
      "lambda_value": 0.6329745326815,
      "learning_rate": 0.0016575807729,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 351
    },
    "162": {
      "batch_size": 50,
      "lambda_value": 0.740179719234,
      "learning_rate": 0.0059510273029,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 165
    },
    "163": {
      "batch_size": 41,
      "lambda_value": 0.2084059817426,
      "learning_rate": 0.0013291369141,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "164": {
      "batch_size": 64,
      "lambda_value": 0.5561857015528,
      "learning_rate": 0.0035434237772,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "165": {
      "batch_size": 498,
      "lambda_value": 0.6579712863223,
      "learning_rate": 0.00944846031,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 146
    },
    "166": {
      "batch_size": 60,
      "lambda_value": 0.9268347430002,
      "learning_rate": 0.0039761620925,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "167": {
      "batch_size": 317,
      "lambda_value": 0.5774632610946,
      "learning_rate": 0.0004289380476,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 90
    },
    "168": {
      "batch_size": 33,
      "lambda_value": 0.844330408685,
      "learning_rate": 0.0036197636688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 852
    },
    "169": {
      "batch_size": 451,
      "lambda_value": 0.1924494999061,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 88
    },
    "170": {
      "batch_size": 537,
      "lambda_value": 0.2461028946703,
      "learning_rate": 0.0320480978609,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 482
    },
    "171": {
      "batch_size": 160,
      "lambda_value": 0.4670716943235,
      "learning_rate": 0.0028172952438,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 556
    },
    "172": {
      "batch_size": 188,
      "lambda_value": 0.2461939552216,
      "learning_rate": 0.0409216311654,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 474
    },
    "173": {
      "batch_size": 546,
      "lambda_value": 0.328880259391,
      "learning_rate": 0.0012850548044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "174": {
      "batch_size": 205,
      "lambda_value": 0.5479223007212,
      "learning_rate": 0.0362149473803,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 552
    },
    "175": {
      "batch_size": 805,
      "lambda_value": 0.3334198233134,
      "learning_rate": 0.0012575315579,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 213
    },
    "176": {
      "batch_size": 404,
      "lambda_value": 0.9522543525878,
      "learning_rate": 0.0620108034853,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "177": {
      "batch_size": 364,
      "lambda_value": 0.2034449398154,
      "learning_rate": 0.0042526599584,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 495
    },
    "178": {
      "batch_size": 733,
      "lambda_value": 0.1597686694848,
      "learning_rate": 0.031534156064,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 249
    },
    "179": {
      "batch_size": 296,
      "lambda_value": 0.3073615378608,
      "learning_rate": 0.0006343167147,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 541
    },
    "180": {
      "batch_size": 846,
      "lambda_value": 0.3837065982754,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "181": {
      "batch_size": 68,
      "lambda_value": 0.4765783643147,
      "learning_rate": 0.0022563929374,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "182": {
      "batch_size": 103,
      "lambda_value": 0.2461385129023,
      "learning_rate": 0.0001337143277,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 315
    },
    "183": {
      "batch_size": 390,
      "lambda_value": 0.9070245463357,
      "learning_rate": 0.0627349351707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 287
    },
    "184": {
      "batch_size": 473,
      "lambda_value": 0.9899025879147,
      "learning_rate": 0.0001115728064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 248
    },
    "185": {
      "batch_size": 621,
      "lambda_value": 0.2078800181557,
      "learning_rate": 0.0984325826781,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 277
    },
    "186": {
      "batch_size": 803,
      "lambda_value": 0.6304196192746,
      "learning_rate": 0.0013917449989,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 500
    },
    "187": {
      "batch_size": 64,
      "lambda_value": 0.0584250613346,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 229
    },
    "188": {
      "batch_size": 948,
      "lambda_value": 0.5201064105195,
      "learning_rate": 0.0644814831068,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 76
    },
    "189": {
      "batch_size": 52,
      "lambda_value": 0.1224029330303,
      "learning_rate": 0.008250906644,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 135
    },
    "190": {
      "batch_size": 791,
      "lambda_value": 0.8335977075286,
      "learning_rate": 0.0032926830009,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 494
    },
    "191": {
      "batch_size": 52,
      "lambda_value": 0.6956110933781,
      "learning_rate": 0.019084000727,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 305
    },
    "192": {
      "batch_size": 65,
      "lambda_value": 0.0858165163043,
      "learning_rate": 0.0001396075788,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 217
    },
    "193": {
      "batch_size": 38,
      "lambda_value": 0.5819568111468,
      "learning_rate": 0.0002132918471,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 249
    },
    "194": {
      "batch_size": 754,
      "lambda_value": 0.2698123628689,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 173
    },
    "195": {
      "batch_size": 668,
      "lambda_value": 0.8470592534302,
      "learning_rate": 0.0006430637512,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 141
    },
    "196": {
      "batch_size": 386,
      "lambda_value": 0.6863903558802,
      "learning_rate": 0.0008170013725,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "197": {
      "batch_size": 266,
      "lambda_value": 0.4414773952143,
      "learning_rate": 0.0268449154553,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 432
    },
    "198": {
      "batch_size": 222,
      "lambda_value": 0.3646827688118,
      "learning_rate": 0.0162151725013,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 81
    },
    "199": {
      "batch_size": 828,
      "lambda_value": 0.6994291661053,
      "learning_rate": 0.0048399368793,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 417
    },
    "200": {
      "batch_size": 845,
      "lambda_value": 0.5639110820217,
      "learning_rate": 0.0014623104992,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 463
    },
    "201": {
      "batch_size": 542,
      "lambda_value": 0.4027838092624,
      "learning_rate": 0.001307904062,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 561
    },
    "202": {
      "batch_size": 47,
      "lambda_value": 0.3342370768098,
      "learning_rate": 0.0066597022586,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 540
    },
    "203": {
      "batch_size": 234,
      "lambda_value": 0.4344920974789,
      "learning_rate": 0.032527985566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 278
    },
    "204": {
      "batch_size": 1022,
      "lambda_value": 0.2594121754683,
      "learning_rate": 0.0925450324862,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1007
    },
    "205": {
      "batch_size": 212,
      "lambda_value": 0.5286350730685,
      "learning_rate": 0.0071310853992,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 161
    },
    "206": {
      "batch_size": 190,
      "lambda_value": 0.5933051286032,
      "learning_rate": 0.0003288523716,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "207": {
      "batch_size": 93,
      "lambda_value": 0.5720078172236,
      "learning_rate": 0.000164626935,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "208": {
      "batch_size": 48,
      "lambda_value": 0.4541612209449,
      "learning_rate": 0.0019654478707,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "209": {
      "batch_size": 912,
      "lambda_value": 0.6501855402958,
      "learning_rate": 0.0001602316999,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 182
    },
    "210": {
      "batch_size": 642,
      "lambda_value": 0.3218750954514,
      "learning_rate": 0.0083602316064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "211": {
      "batch_size": 221,
      "lambda_value": 0.5098011891873,
      "learning_rate": 0.018540436892,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 105
    },
    "212": {
      "batch_size": 457,
      "lambda_value": 0.4042878294431,
      "learning_rate": 0.0008100329996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 108
    },
    "213": {
      "batch_size": 378,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.0637641872301,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 330
    },
    "214": {
      "batch_size": 460,
      "lambda_value": 0.2902332847431,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "215": {
      "batch_size": 686,
      "lambda_value": 0.3967036195568,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "216": {
      "batch_size": 150,
      "lambda_value": 0.6873889937377,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 97
    },
    "217": {
      "batch_size": 46,
      "lambda_value": 0.5442420143571,
      "learning_rate": 0.0041065218421,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 626
    },
    "218": {
      "batch_size": 69,
      "lambda_value": 0.0571109552735,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 64
    },
    "219": {
      "batch_size": 534,
      "lambda_value": 0.278817431718,
      "learning_rate": 0.054738169918,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 93
    },
    "220": {
      "batch_size": 637,
      "lambda_value": 0.6218435051405,
      "learning_rate": 0.0392186381003,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 555
    },
    "221": {
      "batch_size": 85,
      "lambda_value": 0.5498388846059,
      "learning_rate": 0.0279389198285,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "222": {
      "batch_size": 65,
      "lambda_value": 0.8734633914291,
      "learning_rate": 0.0026232078723,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 377
    },
    "223": {
      "batch_size": 416,
      "lambda_value": 0.4083321161572,
      "learning_rate": 0.0032544993566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 113
    },
    "224": {
      "batch_size": 51,
      "lambda_value": 0.1388957563608,
      "learning_rate": 0.000366593903,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "225": {
      "batch_size": 438,
      "lambda_value": 0.561111631904,
      "learning_rate": 0.0006101854537,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 288
    },
    "226": {
      "batch_size": 53,
      "lambda_value": 0.0741220638225,
      "learning_rate": 0.0304844386375,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "227": {
      "batch_size": 703,
      "lambda_value": 0.6124061564869,
      "learning_rate": 0.0035069436309,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 329
    },
    "228": {
      "batch_size": 710,
      "lambda_value": 0.3471934695898,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "229": {
      "batch_size": 131,
      "lambda_value": 0.3877559393645,
      "learning_rate": 0.0004915697162,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 112
    },
    "230": {
      "batch_size": 437,
      "lambda_value": 0.7574403115985,
      "learning_rate": 0.0087990083065,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 97
    },
    "231": {
      "batch_size": 769,
      "lambda_value": 0.5363343601572,
      "learning_rate": 0.0050951608204,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "232": {
      "batch_size": 435,
      "lambda_value": 0.2176978224086,
      "learning_rate": 0.0263258332272,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 245
    },
    "233": {
      "batch_size": 63,
      "lambda_value": 0.2336341509155,
      "learning_rate": 0.0004226593644,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "234": {
      "batch_size": 49,
      "lambda_value": 0.6806976718747,
      "learning_rate": 0.0069988860332,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 128
    },
    "235": {
      "batch_size": 455,
      "lambda_value": 0.8495232198256,
      "learning_rate": 0.0095403809884,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 110
    },
    "236": {
      "batch_size": 50,
      "lambda_value": 0.1519592189992,
      "learning_rate": 0.0155866756906,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 330
    },
    "237": {
      "batch_size": 32,
      "lambda_value": 0.6276940584115,
      "learning_rate": 0.0001745200849,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "238": {
      "batch_size": 51,
      "lambda_value": 0.4978130092022,
      "learning_rate": 0.0006479136368,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 168
    },
    "239": {
      "batch_size": 344,
      "lambda_value": 0.8248795737402,
      "learning_rate": 0.0002610219568,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 407
    },
    "240": {
      "batch_size": 641,
      "lambda_value": 0.280073581512,
      "learning_rate": 0.0016486629264,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 530
    },
    "241": {
      "batch_size": 71,
      "lambda_value": 0.2886039406427,
      "learning_rate": 0.0043323441692,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 192
    },
    "242": {
      "batch_size": 111,
      "lambda_value": 0.3255187079453,
      "learning_rate": 0.002088036926,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 492
    },
    "243": {
      "batch_size": 70,
      "lambda_value": 0.1630554128522,
      "learning_rate": 0.0003439187365,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 176
    },
    "244": {
      "batch_size": 961,
      "lambda_value": 0.417971716796,
      "learning_rate": 0.0002595916085,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 334
    },
    "245": {
      "batch_size": 294,
      "lambda_value": 0.729133400265,
      "learning_rate": 0.0666283501018,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 590
    },
    "246": {
      "batch_size": 40,
      "lambda_value": 0.7967112548555,
      "learning_rate": 0.0353565829307,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 238
    },
    "247": {
      "batch_size": 780,
      "lambda_value": 0.7083343086535,
      "learning_rate": 0.0326606169,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 105
    },
    "248": {
      "batch_size": 442,
      "lambda_value": 0.5201046118183,
      "learning_rate": 0.0001811518715,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 102
    },
    "249": {
      "batch_size": 816,
      "lambda_value": 0.1006982395772,
      "learning_rate": 0.0001623275114,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 419
    },
    "250": {
      "batch_size": 60,
      "lambda_value": 0.1914094420551,
      "learning_rate": 0.0004606071383,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "251": {
      "batch_size": 753,
      "lambda_value": 0.2435795480092,
      "learning_rate": 0.0004095912949,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 722
    },
    "252": {
      "batch_size": 704,
      "lambda_value": 0.144880579601,
      "learning_rate": 0.0002366997783,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 328
    },
    "253": {
      "batch_size": 102,
      "lambda_value": 0.1894695080254,
      "learning_rate": 0.0026068828701,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "254": {
      "batch_size": 547,
      "lambda_value": 0.4239860884209,
      "learning_rate": 0.0001356935227,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 149
    },
    "255": {
      "batch_size": 86,
      "lambda_value": 0.0045154409777,
      "learning_rate": 0.0030138194765,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 199
    },
    "256": {
      "batch_size": 376,
      "lambda_value": 0.1582188227815,
      "learning_rate": 0.0045780134808,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 524
    },
    "257": {
      "batch_size": 51,
      "lambda_value": 0.9108112310834,
      "learning_rate": 0.0001277308521,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 341
    },
    "258": {
      "batch_size": 765,
      "lambda_value": 0.1783089366069,
      "learning_rate": 0.0005607461675,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 336
    },
    "259": {
      "batch_size": 54,
      "lambda_value": 0.7760907682766,
      "learning_rate": 0.019084000727,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 262
    },
    "260": {
      "batch_size": 782,
      "lambda_value": 0.4208203917144,
      "learning_rate": 0.0344213993223,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 98
    },
    "261": {
      "batch_size": 363,
      "lambda_value": 0.2913048958122,
      "learning_rate": 0.0115743270024,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "262": {
      "batch_size": 387,
      "lambda_value": 0.4808552083858,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 205
    },
    "263": {
      "batch_size": 465,
      "lambda_value": 0.6264949327585,
      "learning_rate": 0.0081532443273,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 208
    },
    "264": {
      "batch_size": 843,
      "lambda_value": 0.2755907586144,
      "learning_rate": 0.0014261932923,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 310
    },
    "265": {
      "batch_size": 534,
      "lambda_value": 0.3886122845379,
      "learning_rate": 0.0011270176996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 644
    },
    "266": {
      "batch_size": 32,
      "lambda_value": 0.0555308977991,
      "learning_rate": 0.0009211259258,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 260
    },
    "267": {
      "batch_size": 178,
      "lambda_value": 0.7361547279816,
      "learning_rate": 0.0002666736091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "268": {
      "batch_size": 540,
      "lambda_value": 0.1126117643449,
      "learning_rate": 0.0042339443161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 461
    },
    "269": {
      "batch_size": 237,
      "lambda_value": 0.9976105432415,
      "learning_rate": 0.0001410508481,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 216
    },
    "270": {
      "batch_size": 334,
      "lambda_value": 0.6608835092183,
      "learning_rate": 0.0007244468698,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 86
    },
    "271": {
      "batch_size": 50,
      "lambda_value": 0.3539514749546,
      "learning_rate": 0.0001473504196,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 737
    },
    "272": {
      "batch_size": 39,
      "lambda_value": 0.0434074217682,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "273": {
      "batch_size": 63,
      "lambda_value": 0.1011284741403,
      "learning_rate": 0.0057869377883,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "274": {
      "batch_size": 758,
      "lambda_value": 0.1773664279903,
      "learning_rate": 0.0002236086227,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "275": {
      "batch_size": 176,
      "lambda_value": 0.8080018143185,
      "learning_rate": 0.0016972267439,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 87
    },
    "276": {
      "batch_size": 55,
      "lambda_value": 0.0245481552275,
      "learning_rate": 0.0038124057677,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "277": {
      "batch_size": 384,
      "lambda_value": 0.8210957953613,
      "learning_rate": 0.0003022091502,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "278": {
      "batch_size": 58,
      "lambda_value": 0.486513851508,
      "learning_rate": 0.000972353582,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 114
    },
    "279": {
      "batch_size": 463,
      "lambda_value": 0.0886199292692,
      "learning_rate": 0.0028951068882,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 374
    },
    "280": {
      "batch_size": 42,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0419915713539,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "281": {
      "batch_size": 34,
      "lambda_value": 0.0110450647425,
      "learning_rate": 0.0037398300895,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 132
    },
    "282": {
      "batch_size": 125,
      "lambda_value": 0.073563589368,
      "learning_rate": 0.0007287942283,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 662
    },
    "283": {
      "batch_size": 105,
      "lambda_value": 0.0244539059088,
      "learning_rate": 0.00837156209,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 270
    },
    "284": {
      "batch_size": 521,
      "lambda_value": 0.8089856629774,
      "learning_rate": 0.0076508599827,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "285": {
      "batch_size": 35,
      "lambda_value": 0.7719643918195,
      "learning_rate": 0.0017623959647,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "286": {
      "batch_size": 381,
      "lambda_value": 0.3834047145119,
      "learning_rate": 0.0038237497074,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 234
    },
    "287": {
      "batch_size": 413,
      "lambda_value": 0.0535191435259,
      "learning_rate": 0.0377148256786,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 100
    },
    "288": {
      "batch_size": 290,
      "lambda_value": 0.1320726262101,
      "learning_rate": 0.0023254224427,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "289": {
      "batch_size": 217,
      "lambda_value": 0.9365282264493,
      "learning_rate": 0.0050431783915,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 123
    },
    "290": {
      "batch_size": 544,
      "lambda_value": 0.4355872915023,
      "learning_rate": 0.0103945201972,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 237
    },
    "291": {
      "batch_size": 1011,
      "lambda_value": 0.4804118476289,
      "learning_rate": 0.0005972414841,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 587
    },
    "292": {
      "batch_size": 262,
      "lambda_value": 0.8036567934905,
      "learning_rate": 0.0001911999794,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "293": {
      "batch_size": 522,
      "lambda_value": 0.6810171385066,
      "learning_rate": 0.0363285889677,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 226
    },
    "294": {
      "batch_size": 68,
      "lambda_value": 0.1122108482366,
      "learning_rate": 0.0004946291044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 66
    },
    "295": {
      "batch_size": 697,
      "lambda_value": 0.7873240093307,
      "learning_rate": 0.0001594353537,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "296": {
      "batch_size": 33,
      "lambda_value": 0.1052317687943,
      "learning_rate": 0.0003359396443,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 148
    },
    "297": {
      "batch_size": 79,
      "lambda_value": 0.4196490252802,
      "learning_rate": 0.0100423699896,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 642
    },
    "298": {
      "batch_size": 148,
      "lambda_value": 0.4101648178047,
      "learning_rate": 0.0170134585068,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "299": {
      "batch_size": 801,
      "lambda_value": 0.833097150633,
      "learning_rate": 0.0862965434581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 217
    },
    "300": {
      "batch_size": 722,
      "lambda_value": 0.0686970530845,
      "learning_rate": 0.000118835971,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 426
    },
    "301": {
      "batch_size": 151,
      "lambda_value": 0.1765449594378,
      "learning_rate": 0.0005750675549,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "302": {
      "batch_size": 90,
      "lambda_value": 0.80285407825,
      "learning_rate": 0.0079014107354,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 97
    },
    "303": {
      "batch_size": 162,
      "lambda_value": 0.8985286621682,
      "learning_rate": 0.0174342739555,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 113
    },
    "304": {
      "batch_size": 621,
      "lambda_value": 0.3360339953694,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "305": {
      "batch_size": 377,
      "lambda_value": 0.0764293009661,
      "learning_rate": 0.0019926714499,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 617
    },
    "306": {
      "batch_size": 571,
      "lambda_value": 0.353016718935,
      "learning_rate": 0.0440802633021,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 155
    },
    "307": {
      "batch_size": 640,
      "lambda_value": 0.0011522622186,
      "learning_rate": 0.0001056551388,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 362
    },
    "308": {
      "batch_size": 661,
      "lambda_value": 0.2229809643412,
      "learning_rate": 0.0018678134703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 379
    },
    "309": {
      "batch_size": 831,
      "lambda_value": 0.2298700683603,
      "learning_rate": 0.0004065521248,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 216
    },
    "310": {
      "batch_size": 861,
      "lambda_value": 0.4043921180506,
      "learning_rate": 0.0053265918237,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 209
    },
    "311": {
      "batch_size": 390,
      "lambda_value": 0.5314194809525,
      "learning_rate": 0.0013443259838,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 242
    },
    "312": {
      "batch_size": 741,
      "lambda_value": 0.7148476112948,
      "learning_rate": 0.0021213467033,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 82
    },
    "313": {
      "batch_size": 849,
      "lambda_value": 0.3099768475404,
      "learning_rate": 0.0006553087978,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 124
    },
    "314": {
      "batch_size": 41,
      "lambda_value": 0.0660568722404,
      "learning_rate": 0.0040521423813,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "315": {
      "batch_size": 780,
      "lambda_value": 0.2064525755689,
      "learning_rate": 0.0002593296815,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 548
    },
    "316": {
      "batch_size": 277,
      "lambda_value": 0.0994308555944,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 397
    },
    "317": {
      "batch_size": 905,
      "lambda_value": 0.8059902862067,
      "learning_rate": 0.0018633581119,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 416
    },
    "318": {
      "batch_size": 437,
      "lambda_value": 0.7358982056678,
      "learning_rate": 0.0067680718763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 82
    },
    "319": {
      "batch_size": 659,
      "lambda_value": 0.6213471081522,
      "learning_rate": 0.0060203559486,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 718
    },
    "320": {
      "batch_size": 498,
      "lambda_value": 0.3797333205204,
      "learning_rate": 0.0026146954891,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 235
    },
    "321": {
      "batch_size": 843,
      "lambda_value": 0.1865370858349,
      "learning_rate": 0.0020195892834,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 235
    },
    "322": {
      "batch_size": 47,
      "lambda_value": 0.5182538469109,
      "learning_rate": 0.0089358135385,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 103
    },
    "323": {
      "batch_size": 121,
      "lambda_value": 0.541339152825,
      "learning_rate": 0.0002017361907,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 438
    },
    "324": {
      "batch_size": 418,
      "lambda_value": 0.4806562688073,
      "learning_rate": 0.0001280087689,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 151
    },
    "325": {
      "batch_size": 505,
      "lambda_value": 0.1804699936187,
      "learning_rate": 0.0515528982345,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 512
    },
    "326": {
      "batch_size": 756,
      "lambda_value": 0.0563130399479,
      "learning_rate": 0.0022234197184,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 129
    },
    "327": {
      "batch_size": 58,
      "lambda_value": 0.4944094677612,
      "learning_rate": 0.0002060823911,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 247
    },
    "328": {
      "batch_size": 156,
      "lambda_value": 0.8337801698394,
      "learning_rate": 0.0499835912667,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "329": {
      "batch_size": 443,
      "lambda_value": 0.2533722448979,
      "learning_rate": 0.020662701703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 439
    },
    "330": {
      "batch_size": 60,
      "lambda_value": 0.1306990600206,
      "learning_rate": 0.0065000343887,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 106
    },
    "331": {
      "batch_size": 307,
      "lambda_value": 0.2683873329488,
      "learning_rate": 0.0002594694874,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 107
    },
    "332": {
      "batch_size": 272,
      "lambda_value": 0.0894764468418,
      "learning_rate": 0.0003411331376,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 114
    },
    "333": {
      "batch_size": 257,
      "lambda_value": 0.5553544255642,
      "learning_rate": 0.0002451181655,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 77
    },
    "334": {
      "batch_size": 839,
      "lambda_value": 0.6434392806542,
      "learning_rate": 0.0004632122203,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 847
    },
    "335": {
      "batch_size": 743,
      "lambda_value": 0.215031883639,
      "learning_rate": 0.01152356152,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "336": {
      "batch_size": 435,
      "lambda_value": 0.6808719321627,
      "learning_rate": 0.0679194637572,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 90
    },
    "337": {
      "batch_size": 717,
      "lambda_value": 0.7887801615769,
      "learning_rate": 0.0005094724236,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 356
    },
    "338": {
      "batch_size": 581,
      "lambda_value": 0.0178358357788,
      "learning_rate": 0.0003477267856,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 103
    },
    "339": {
      "batch_size": 218,
      "lambda_value": 0.1696888094239,
      "learning_rate": 0.052309575188,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 810
    },
    "340": {
      "batch_size": 401,
      "lambda_value": 0.7568355160604,
      "learning_rate": 0.0005585359023,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 520
    },
    "341": {
      "batch_size": 473,
      "lambda_value": 0.4546944937188,
      "learning_rate": 0.0027846284343,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 236
    },
    "342": {
      "batch_size": 350,
      "lambda_value": 0.5559936772425,
      "learning_rate": 0.0100529394688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 231
    },
    "343": {
      "batch_size": 530,
      "lambda_value": 0.8712284711014,
      "learning_rate": 0.0299782918803,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 218
    },
    "344": {
      "batch_size": 635,
      "lambda_value": 0.6639737340676,
      "learning_rate": 0.0558536530177,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 602
    },
    "345": {
      "batch_size": 395,
      "lambda_value": 0.6229592140736,
      "learning_rate": 0.089214428506,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 76
    },
    "346": {
      "batch_size": 766,
      "lambda_value": 0.2242789140878,
      "learning_rate": 0.0201515256305,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 162
    },
    "347": {
      "batch_size": 50,
      "lambda_value": 0.0852627285054,
      "learning_rate": 0.0308602695679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 125
    },
    "348": {
      "batch_size": 663,
      "lambda_value": 0.2197957309267,
      "learning_rate": 0.0006061254588,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 69
    },
    "349": {
      "batch_size": 52,
      "lambda_value": 0.9515193689156,
      "learning_rate": 0.0002946615193,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "350": {
      "batch_size": 785,
      "lambda_value": 0.6064813774206,
      "learning_rate": 0.0044035167819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 382
    },
    "351": {
      "batch_size": 254,
      "lambda_value": 0.9054709401563,
      "learning_rate": 0.0002642115192,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 665
    },
    "352": {
      "batch_size": 549,
      "lambda_value": 0.674096520909,
      "learning_rate": 0.0188256591059,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "353": {
      "batch_size": 288,
      "lambda_value": 0.5248121876714,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 103
    },
    "354": {
      "batch_size": 51,
      "lambda_value": 0.4900602108518,
      "learning_rate": 0.0033119573752,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "355": {
      "batch_size": 51,
      "lambda_value": 0.0864264480572,
      "learning_rate": 0.0036006553919,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 339
    },
    "356": {
      "batch_size": 254,
      "lambda_value": 0.1335888882005,
      "learning_rate": 0.0293502269983,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "357": {
      "batch_size": 948,
      "lambda_value": 0.1227161072199,
      "learning_rate": 0.0003706377685,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 814
    },
    "358": {
      "batch_size": 32,
      "lambda_value": 0.5590620740748,
      "learning_rate": 0.0001887486611,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "359": {
      "batch_size": 736,
      "lambda_value": 0.5877962768707,
      "learning_rate": 0.000173328844,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 86
    },
    "360": {
      "batch_size": 96,
      "lambda_value": 0.6820598906435,
      "learning_rate": 0.0137231840115,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "361": {
      "batch_size": 152,
      "lambda_value": 0.4622814816124,
      "learning_rate": 0.0001798692692,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 350
    },
    "362": {
      "batch_size": 584,
      "lambda_value": 0.0554709545819,
      "learning_rate": 0.002867925593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "363": {
      "batch_size": 381,
      "lambda_value": 0.2759440299071,
      "learning_rate": 0.005834854811,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 315
    },
    "364": {
      "batch_size": 155,
      "lambda_value": 0.0126718534249,
      "learning_rate": 0.068001605758,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 179
    },
    "365": {
      "batch_size": 47,
      "lambda_value": 0.5370564885229,
      "learning_rate": 0.0139226790705,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 86
    },
    "366": {
      "batch_size": 143,
      "lambda_value": 0.3048283869862,
      "learning_rate": 0.0001422244224,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 95
    },
    "367": {
      "batch_size": 47,
      "lambda_value": 0.6556781774429,
      "learning_rate": 0.0165539675071,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 702
    },
    "368": {
      "batch_size": 514,
      "lambda_value": 0.9325032292789,
      "learning_rate": 0.0028561687279,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 196
    },
    "369": {
      "batch_size": 482,
      "lambda_value": 0.3176803263535,
      "learning_rate": 0.0398799204606,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 370
    },
    "370": {
      "batch_size": 361,
      "lambda_value": 0.1317226997102,
      "learning_rate": 0.0079847689986,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 131
    },
    "371": {
      "batch_size": 54,
      "lambda_value": 0.5065217763128,
      "learning_rate": 0.0005039206588,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "372": {
      "batch_size": 195,
      "lambda_value": 0.1182898929868,
      "learning_rate": 0.0006307295736,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 88
    },
    "373": {
      "batch_size": 615,
      "lambda_value": 0.1713031609062,
      "learning_rate": 0.000327779834,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "374": {
      "batch_size": 210,
      "lambda_value": 0.5999363245098,
      "learning_rate": 0.0001227598618,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 109
    },
    "375": {
      "batch_size": 228,
      "lambda_value": 0.2097534663918,
      "learning_rate": 0.0044908007691,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 98
    },
    "376": {
      "batch_size": 588,
      "lambda_value": 0.6921191491618,
      "learning_rate": 0.0002698674969,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 117
    },
    "377": {
      "batch_size": 827,
      "lambda_value": 0.7449112412928,
      "learning_rate": 0.0088357537548,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 265
    },
    "378": {
      "batch_size": 306,
      "lambda_value": 0.4408812080456,
      "learning_rate": 0.0149767955939,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 136
    },
    "379": {
      "batch_size": 32,
      "lambda_value": 0.2036762467285,
      "learning_rate": 0.0007120181963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 298
    },
    "380": {
      "batch_size": 44,
      "lambda_value": 0.363548252842,
      "learning_rate": 0.0146518248161,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "381": {
      "batch_size": 392,
      "lambda_value": 0.8530809109696,
      "learning_rate": 0.0068378774336,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 936
    },
    "382": {
      "batch_size": 285,
      "lambda_value": 0.0405681071044,
      "learning_rate": 0.0004518383496,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 354
    },
    "383": {
      "batch_size": 85,
      "lambda_value": 0.4744191316373,
      "learning_rate": 0.0427057286624,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "384": {
      "batch_size": 306,
      "lambda_value": 0.2010288654859,
      "learning_rate": 0.0002725464319,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "385": {
      "batch_size": 651,
      "lambda_value": 0.8976907571079,
      "learning_rate": 0.0051642740405,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 317
    },
    "386": {
      "batch_size": 315,
      "lambda_value": 0.4797039031948,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "387": {
      "batch_size": 472,
      "lambda_value": 0.4614628028735,
      "learning_rate": 0.0291505470366,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 392
    },
    "388": {
      "batch_size": 458,
      "lambda_value": 0.0995730051319,
      "learning_rate": 0.0039095602593,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 299
    },
    "389": {
      "batch_size": 56,
      "lambda_value": 0.6254740258478,
      "learning_rate": 0.0002301867794,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "390": {
      "batch_size": 693,
      "lambda_value": 0.5463370696629,
      "learning_rate": 0.080973575191,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "391": {
      "batch_size": 209,
      "lambda_value": 0.5536684799516,
      "learning_rate": 0.0129454765127,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 208
    },
    "392": {
      "batch_size": 58,
      "lambda_value": 0.2603218459407,
      "learning_rate": 0.0001532968651,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "393": {
      "batch_size": 58,
      "lambda_value": 0.1620409311437,
      "learning_rate": 0.0735796471111,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 627
    },
    "394": {
      "batch_size": 36,
      "lambda_value": 0.7723035029214,
      "learning_rate": 0.0009204157787,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "395": {
      "batch_size": 205,
      "lambda_value": 0.7727489068701,
      "learning_rate": 0.0140877870417,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 92
    },
    "396": {
      "batch_size": 657,
      "lambda_value": 0.4360791272104,
      "learning_rate": 0.0003511187487,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 326
    },
    "397": {
      "batch_size": 785,
      "lambda_value": 0.4730155072588,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "398": {
      "batch_size": 540,
      "lambda_value": 0.5582406622968,
      "learning_rate": 0.0001278093202,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "399": {
      "batch_size": 366,
      "lambda_value": 0.0727961021739,
      "learning_rate": 0.0402294898411,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "400": {
      "batch_size": 538,
      "lambda_value": 0.9368961678792,
      "learning_rate": 0.0004181432648,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 271
    },
    "401": {
      "batch_size": 757,
      "lambda_value": 0.9354630310557,
      "learning_rate": 0.0888041723761,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "402": {
      "batch_size": 90,
      "lambda_value": 0.7273220355144,
      "learning_rate": 0.0069453207755,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "403": {
      "batch_size": 844,
      "lambda_value": 0.4824731983172,
      "learning_rate": 0.0003002825268,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 244
    },
    "404": {
      "batch_size": 935,
      "lambda_value": 0.5230953842041,
      "learning_rate": 0.0189973487557,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "405": {
      "batch_size": 995,
      "lambda_value": 0.2168455217586,
      "learning_rate": 0.0027721601592,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 821
    },
    "406": {
      "batch_size": 89,
      "lambda_value": 0.3156048390222,
      "learning_rate": 0.0022198634559,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 194
    },
    "407": {
      "batch_size": 262,
      "lambda_value": 0.8093492297006,
      "learning_rate": 0.0006733972521,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "408": {
      "batch_size": 730,
      "lambda_value": 0.7664908687939,
      "learning_rate": 0.001002848265,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 630
    },
    "409": {
      "batch_size": 154,
      "lambda_value": 0.0952613435301,
      "learning_rate": 0.0006647907154,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 798
    },
    "410": {
      "batch_size": 452,
      "lambda_value": 0.4100844074923,
      "learning_rate": 0.0009856662478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 251
    },
    "411": {
      "batch_size": 231,
      "lambda_value": 0.3275671178479,
      "learning_rate": 0.0002000204542,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 89
    },
    "412": {
      "batch_size": 57,
      "lambda_value": 0.0463424973171,
      "learning_rate": 0.0195673926561,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 200
    },
    "413": {
      "batch_size": 122,
      "lambda_value": 0.110140993716,
      "learning_rate": 0.0026667648338,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 78
    },
    "414": {
      "batch_size": 327,
      "lambda_value": 0.9688895059356,
      "learning_rate": 0.0166234825902,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 359
    },
    "415": {
      "batch_size": 111,
      "lambda_value": 0.1290040542266,
      "learning_rate": 0.0383601008507,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 872
    },
    "416": {
      "batch_size": 554,
      "lambda_value": 0.875718867045,
      "learning_rate": 0.0001409537536,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 913
    },
    "417": {
      "batch_size": 411,
      "lambda_value": 0.6791133254209,
      "learning_rate": 0.003080698466,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 99
    },
    "418": {
      "batch_size": 751,
      "lambda_value": 0.2964694426296,
      "learning_rate": 0.0006311637991,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 964
    },
    "419": {
      "batch_size": 638,
      "lambda_value": 0.809871371246,
      "learning_rate": 0.0012990282325,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 318
    },
    "420": {
      "batch_size": 577,
      "lambda_value": 0.4342900910398,
      "learning_rate": 0.0481822694665,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "421": {
      "batch_size": 45,
      "lambda_value": 0.8518940421392,
      "learning_rate": 0.0079236122108,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 102
    },
    "422": {
      "batch_size": 623,
      "lambda_value": 0.5327950896181,
      "learning_rate": 0.0001028681582,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "423": {
      "batch_size": 1024,
      "lambda_value": 0.8973291223541,
      "learning_rate": 0.0150597220624,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 217
    },
    "424": {
      "batch_size": 629,
      "lambda_value": 0.0960157047896,
      "learning_rate": 0.0109639694441,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "425": {
      "batch_size": 36,
      "lambda_value": 0.2024840795611,
      "learning_rate": 0.0001960291943,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "426": {
      "batch_size": 607,
      "lambda_value": 0.1383618143966,
      "learning_rate": 0.0026266122149,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 180
    },
    "427": {
      "batch_size": 649,
      "lambda_value": 0.6641101531537,
      "learning_rate": 0.0009131406471,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 121
    },
    "428": {
      "batch_size": 359,
      "lambda_value": 0.777661779255,
      "learning_rate": 0.0012177002287,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 242
    },
    "429": {
      "batch_size": 251,
      "lambda_value": 0.9902859186046,
      "learning_rate": 0.0079500805258,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 104
    },
    "430": {
      "batch_size": 120,
      "lambda_value": 0.6401709483762,
      "learning_rate": 0.0511947218235,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 143
    },
    "431": {
      "batch_size": 625,
      "lambda_value": 0.547026907589,
      "learning_rate": 0.0348766379912,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "432": {
      "batch_size": 318,
      "lambda_value": 0.1976681376706,
      "learning_rate": 0.0078438662891,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 69
    },
    "433": {
      "batch_size": 786,
      "lambda_value": 0.3304246919642,
      "learning_rate": 0.0010188720378,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 200
    },
    "434": {
      "batch_size": 240,
      "lambda_value": 0.3250953520818,
      "learning_rate": 0.0158235846031,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 178
    },
    "435": {
      "batch_size": 519,
      "lambda_value": 0.576923925179,
      "learning_rate": 0.016810576472,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "436": {
      "batch_size": 46,
      "lambda_value": 0.0448820923995,
      "learning_rate": 0.0001231661583,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 180
    },
    "437": {
      "batch_size": 119,
      "lambda_value": 0.4059533800196,
      "learning_rate": 0.0003517171686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "438": {
      "batch_size": 791,
      "lambda_value": 0.8071511713332,
      "learning_rate": 0.0044489428443,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 230
    },
    "439": {
      "batch_size": 68,
      "lambda_value": 0.0779707639047,
      "learning_rate": 0.0461783232972,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 111
    },
    "440": {
      "batch_size": 130,
      "lambda_value": 0.5248121876714,
      "learning_rate": 0.0138796755616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "441": {
      "batch_size": 816,
      "lambda_value": 0.8717455164644,
      "learning_rate": 0.0001786287251,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 565
    },
    "442": {
      "batch_size": 357,
      "lambda_value": 0.2177427493109,
      "learning_rate": 0.0002357764524,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 477
    },
    "443": {
      "batch_size": 43,
      "lambda_value": 0.8920943096487,
      "learning_rate": 0.0001742152858,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "444": {
      "batch_size": 375,
      "lambda_value": 0.3164903259613,
      "learning_rate": 0.0026873277912,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 259
    },
    "445": {
      "batch_size": 776,
      "lambda_value": 0.2497535308347,
      "learning_rate": 0.0066559651906,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 190
    },
    "446": {
      "batch_size": 716,
      "lambda_value": 0.3506635014426,
      "learning_rate": 0.0006431334297,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 66
    },
    "447": {
      "batch_size": 742,
      "lambda_value": 0.6142547760672,
      "learning_rate": 0.0520499710913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "448": {
      "batch_size": 569,
      "lambda_value": 0.7592947955,
      "learning_rate": 0.0023713833184,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 293
    },
    "449": {
      "batch_size": 880,
      "lambda_value": 0.1861251225005,
      "learning_rate": 0.0156666338249,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "450": {
      "batch_size": 273,
      "lambda_value": 0.6672254078551,
      "learning_rate": 0.0004944291762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "451": {
      "batch_size": 593,
      "lambda_value": 0.7127453109276,
      "learning_rate": 0.0014902672058,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "452": {
      "batch_size": 201,
      "lambda_value": 0.1226827152264,
      "learning_rate": 0.001252697061,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 274
    },
    "453": {
      "batch_size": 591,
      "lambda_value": 0.9997697342144,
      "learning_rate": 0.0055276967725,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 76
    },
    "454": {
      "batch_size": 99,
      "lambda_value": 0.4459274560053,
      "learning_rate": 0.0009666060551,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 735
    },
    "455": {
      "batch_size": 105,
      "lambda_value": 0.8333531176676,
      "learning_rate": 0.0019146177708,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "456": {
      "batch_size": 387,
      "lambda_value": 0.5128221535186,
      "learning_rate": 0.0005640287916,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 76
    },
    "457": {
      "batch_size": 615,
      "lambda_value": 0.3993193127766,
      "learning_rate": 0.0376217765146,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 67
    },
    "458": {
      "batch_size": 255,
      "lambda_value": 0.7094066976144,
      "learning_rate": 0.0002327913586,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 544
    },
    "459": {
      "batch_size": 681,
      "lambda_value": 0.9246676613873,
      "learning_rate": 0.0039294321189,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 68
    },
    "460": {
      "batch_size": 33,
      "lambda_value": 0.8937828362628,
      "learning_rate": 0.0216101868293,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 225
    },
    "461": {
      "batch_size": 49,
      "lambda_value": 0.4876675329261,
      "learning_rate": 0.0002844103914,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 315
    },
    "462": {
      "batch_size": 284,
      "lambda_value": 0.4491058389733,
      "learning_rate": 0.0024031864803,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 217
    },
    "463": {
      "batch_size": 135,
      "lambda_value": 0.6408264521199,
      "learning_rate": 0.0063257124081,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 283
    },
    "464": {
      "batch_size": 62,
      "lambda_value": 0.8428736516667,
      "learning_rate": 0.042039485552,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 196
    },
    "465": {
      "batch_size": 67,
      "lambda_value": 0.6231828124433,
      "learning_rate": 0.0146142958703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 92
    },
    "466": {
      "batch_size": 752,
      "lambda_value": 0.3069827864306,
      "learning_rate": 0.0284171458994,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 436
    },
    "467": {
      "batch_size": 780,
      "lambda_value": 0.5299790087701,
      "learning_rate": 0.0046493160938,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 76
    },
    "468": {
      "batch_size": 38,
      "lambda_value": 0.1431065102332,
      "learning_rate": 0.0581046114744,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 379
    },
    "469": {
      "batch_size": 786,
      "lambda_value": 0.8132945800527,
      "learning_rate": 0.0014645453026,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 885
    },
    "470": {
      "batch_size": 105,
      "lambda_value": 0.8333531176676,
      "learning_rate": 0.0046987969504,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "471": {
      "batch_size": 248,
      "lambda_value": 0.1211002383812,
      "learning_rate": 0.0002548874535,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 493
    },
    "472": {
      "batch_size": 747,
      "lambda_value": 0.2895420787823,
      "learning_rate": 0.003406725168,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "473": {
      "batch_size": 366,
      "lambda_value": 0.0231602598096,
      "learning_rate": 0.0565293919412,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "474": {
      "batch_size": 270,
      "lambda_value": 0.6163972430054,
      "learning_rate": 0.0893466898303,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 90
    },
    "475": {
      "batch_size": 627,
      "lambda_value": 0.2660401017344,
      "learning_rate": 0.01005651579,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 519
    },
    "476": {
      "batch_size": 754,
      "lambda_value": 0.1722003959012,
      "learning_rate": 0.0088476982204,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "477": {
      "batch_size": 821,
      "lambda_value": 0.3005225087541,
      "learning_rate": 0.0124905205425,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 285
    },
    "478": {
      "batch_size": 187,
      "lambda_value": 0.7683191819873,
      "learning_rate": 0.0725416351251,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 210
    },
    "479": {
      "batch_size": 517,
      "lambda_value": 0.8220084638887,
      "learning_rate": 0.011291352857,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "480": {
      "batch_size": 48,
      "lambda_value": 0.528443960705,
      "learning_rate": 0.002291534357,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 69
    },
    "481": {
      "batch_size": 41,
      "lambda_value": 0.7926407552659,
      "learning_rate": 0.0284915711954,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "482": {
      "batch_size": 382,
      "lambda_value": 0.9211659506392,
      "learning_rate": 0.0003454820205,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 207
    },
    "483": {
      "batch_size": 601,
      "lambda_value": 0.4144072760939,
      "learning_rate": 0.0058613517741,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 550
    },
    "484": {
      "batch_size": 749,
      "lambda_value": 0.8617159873378,
      "learning_rate": 0.0001836760493,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 388
    },
    "485": {
      "batch_size": 646,
      "lambda_value": 0.6813282339738,
      "learning_rate": 0.0037409291542,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 717
    },
    "486": {
      "batch_size": 660,
      "lambda_value": 0.3948238859662,
      "learning_rate": 0.0105476488257,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 211
    },
    "487": {
      "batch_size": 763,
      "lambda_value": 0.2618861711778,
      "learning_rate": 0.0001097035558,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "488": {
      "batch_size": 150,
      "lambda_value": 0.8173536924154,
      "learning_rate": 0.00237009611,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 301
    },
    "489": {
      "batch_size": 320,
      "lambda_value": 0.9585151788592,
      "learning_rate": 0.0033380807183,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 290
    },
    "490": {
      "batch_size": 808,
      "lambda_value": 0.5863496171544,
      "learning_rate": 0.0043235298889,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 215
    },
    "491": {
      "batch_size": 636,
      "lambda_value": 0.4897793674156,
      "learning_rate": 0.0002278717314,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 127
    },
    "492": {
      "batch_size": 201,
      "lambda_value": 0.4870672671662,
      "learning_rate": 0.0002157903437,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 124
    },
    "493": {
      "batch_size": 46,
      "lambda_value": 0.7206015572169,
      "learning_rate": 0.0057590107986,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 200
    },
    "494": {
      "batch_size": 34,
      "lambda_value": 0.3960054885911,
      "learning_rate": 0.0005350837422,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 469
    },
    "495": {
      "batch_size": 794,
      "lambda_value": 0.8243294603364,
      "learning_rate": 0.0006436728419,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 407
    },
    "496": {
      "batch_size": 336,
      "lambda_value": 0.8060632521795,
      "learning_rate": 0.0003273879467,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "497": {
      "batch_size": 288,
      "lambda_value": 0.0714829915638,
      "learning_rate": 0.0016135141591,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 446
    },
    "498": {
      "batch_size": 516,
      "lambda_value": 0.6693324959229,
      "learning_rate": 0.0356662603433,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 211
    },
    "499": {
      "batch_size": 554,
      "lambda_value": 0.2285299370789,
      "learning_rate": 0.004677318249,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 660
    },
    "500": {
      "batch_size": 605,
      "lambda_value": 0.6508257156304,
      "learning_rate": 0.0001031788835,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "501": {
      "batch_size": 53,
      "lambda_value": 0.6823513948608,
      "learning_rate": 0.0001572545687,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 303
    },
    "502": {
      "batch_size": 71,
      "lambda_value": 0.5573084349525,
      "learning_rate": 0.0505152106799,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 163
    },
    "503": {
      "batch_size": 149,
      "lambda_value": 0.6279608283276,
      "learning_rate": 0.0004457136545,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "504": {
      "batch_size": 411,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0105826134632,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 71
    },
    "505": {
      "batch_size": 35,
      "lambda_value": 0.6560284497133,
      "learning_rate": 0.0129861552471,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 67
    },
    "506": {
      "batch_size": 780,
      "lambda_value": 0.4725842164371,
      "learning_rate": 0.0055288337335,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 66
    },
    "507": {
      "batch_size": 32,
      "lambda_value": 0.51600824763,
      "learning_rate": 0.0001906758121,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 73
    },
    "508": {
      "batch_size": 351,
      "lambda_value": 0.9533456854678,
      "learning_rate": 0.0045660379397,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 75
    },
    "509": {
      "batch_size": 55,
      "lambda_value": 0.6229731445495,
      "learning_rate": 0.0038847150378,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 474
    },
    "510": {
      "batch_size": 213,
      "lambda_value": 0.1689956184691,
      "learning_rate": 0.0047092230045,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 411
    },
    "511": {
      "batch_size": 130,
      "lambda_value": 0.5279324707843,
      "learning_rate": 0.0138796755616,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 67
    },
    "512": {
      "batch_size": 421,
      "lambda_value": 0.3758516095051,
      "learning_rate": 0.0362929038997,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "513": {
      "batch_size": 978,
      "lambda_value": 0.0744104096509,
      "learning_rate": 0.0260585675862,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 150
    },
    "514": {
      "batch_size": 127,
      "lambda_value": 0.633238947746,
      "learning_rate": 0.0018035530187,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 215
    },
    "515": {
      "batch_size": 167,
      "lambda_value": 0.3906399533428,
      "learning_rate": 0.0070318592816,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 425
    },
    "516": {
      "batch_size": 849,
      "lambda_value": 0.0041035960818,
      "learning_rate": 0.0050620300633,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 286
    },
    "517": {
      "batch_size": 423,
      "lambda_value": 0.6921300115593,
      "learning_rate": 0.0002602116217,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "518": {
      "batch_size": 53,
      "lambda_value": 0.5964385451403,
      "learning_rate": 0.0001029394984,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 137
    },
    "519": {
      "batch_size": 56,
      "lambda_value": 0.5470413172319,
      "learning_rate": 0.0007782224297,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 96
    },
    "520": {
      "batch_size": 190,
      "lambda_value": 0.6009572485473,
      "learning_rate": 0.0005319832345,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "521": {
      "batch_size": 250,
      "lambda_value": 0.0427621731005,
      "learning_rate": 0.0003348878331,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 68
    },
    "522": {
      "batch_size": 582,
      "lambda_value": 0.5521956202541,
      "learning_rate": 0.0002917173747,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "523": {
      "batch_size": 534,
      "lambda_value": 0.8609185401172,
      "learning_rate": 0.0875999392673,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 412
    },
    "524": {
      "batch_size": 344,
      "lambda_value": 0.5250529069188,
      "learning_rate": 0.0058940740331,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 127
    },
    "525": {
      "batch_size": 324,
      "lambda_value": 0.5930429174166,
      "learning_rate": 0.0083833898211,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 479
    },
    "526": {
      "batch_size": 38,
      "lambda_value": 0.6107790697176,
      "learning_rate": 0.0911637803703,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 180
    },
    "527": {
      "batch_size": 351,
      "lambda_value": 0.6808719321627,
      "learning_rate": 0.0750706909129,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "528": {
      "batch_size": 808,
      "lambda_value": 0.707144460687,
      "learning_rate": 0.0258381834066,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 241
    },
    "529": {
      "batch_size": 865,
      "lambda_value": 0.2229286798622,
      "learning_rate": 0.0232998074386,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 150
    },
    "530": {
      "batch_size": 261,
      "lambda_value": 0.4159376482463,
      "learning_rate": 0.0006375142568,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 170
    },
    "531": {
      "batch_size": 246,
      "lambda_value": 0.7487399085362,
      "learning_rate": 0.0006982706335,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "532": {
      "batch_size": 819,
      "lambda_value": 0.1715721745315,
      "learning_rate": 0.0027521521809,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "533": {
      "batch_size": 43,
      "lambda_value": 0.8504601430568,
      "learning_rate": 0.0079236122108,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 102
    },
    "534": {
      "batch_size": 703,
      "lambda_value": 0.2938889825625,
      "learning_rate": 0.0473577942329,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 109
    },
    "535": {
      "batch_size": 43,
      "lambda_value": 0.7450500773386,
      "learning_rate": 0.0137231840115,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "536": {
      "batch_size": 553,
      "lambda_value": 0.1839127426189,
      "learning_rate": 0.0004573244322,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 496
    },
    "537": {
      "batch_size": 864,
      "lambda_value": 0.1355567992583,
      "learning_rate": 0.0002557704953,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 137
    },
    "538": {
      "batch_size": 67,
      "lambda_value": 0.4009078748603,
      "learning_rate": 0.0002421082016,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "539": {
      "batch_size": 66,
      "lambda_value": 0.5588370986384,
      "learning_rate": 0.0001524174094,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 252
    },
    "540": {
      "batch_size": 910,
      "lambda_value": 0.2157809687138,
      "learning_rate": 0.0362462794097,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 131
    },
    "541": {
      "batch_size": 335,
      "lambda_value": 0.0713637891236,
      "learning_rate": 0.0001242626529,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 323
    },
    "542": {
      "batch_size": 106,
      "lambda_value": 0.8351784921736,
      "learning_rate": 0.0028009439295,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 585
    },
    "543": {
      "batch_size": 383,
      "lambda_value": 0.7315931494257,
      "learning_rate": 0.0056857393049,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 118
    },
    "544": {
      "batch_size": 39,
      "lambda_value": 0.9842518610153,
      "learning_rate": 0.0078260849563,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 183
    },
    "545": {
      "batch_size": 545,
      "lambda_value": 0.4027028162047,
      "learning_rate": 0.0016708502536,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 184
    },
    "546": {
      "batch_size": 151,
      "lambda_value": 0.9868537159485,
      "learning_rate": 0.0009464379409,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 503
    },
    "547": {
      "batch_size": 634,
      "lambda_value": 0.4017456094133,
      "learning_rate": 0.0029535991258,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 421
    },
    "548": {
      "batch_size": 515,
      "lambda_value": 0.7551166032471,
      "learning_rate": 0.0060032651755,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 475
    },
    "549": {
      "batch_size": 722,
      "lambda_value": 0.8463995112482,
      "learning_rate": 0.0519367988348,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 642
    },
    "550": {
      "batch_size": 183,
      "lambda_value": 0.2010235605655,
      "learning_rate": 0.0060236499344,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 348
    },
    "551": {
      "batch_size": 1010,
      "lambda_value": 0.5323793352116,
      "learning_rate": 0.0136617144728,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 878
    },
    "552": {
      "batch_size": 493,
      "lambda_value": 0.1784524747634,
      "learning_rate": 0.000458088078,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 265
    },
    "553": {
      "batch_size": 626,
      "lambda_value": 0.6775234188135,
      "learning_rate": 0.0023992424321,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 224
    },
    "554": {
      "batch_size": 514,
      "lambda_value": 0.6127213312821,
      "learning_rate": 0.0053670246264,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 324
    },
    "555": {
      "batch_size": 646,
      "lambda_value": 0.0952707865123,
      "learning_rate": 0.0001140611149,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "556": {
      "batch_size": 382,
      "lambda_value": 0.4292983157616,
      "learning_rate": 0.0207580568195,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "557": {
      "batch_size": 1019,
      "lambda_value": 0.5181932269457,
      "learning_rate": 0.0827024986497,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 233
    },
    "558": {
      "batch_size": 202,
      "lambda_value": 0.6258346776881,
      "learning_rate": 0.0071600724112,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "559": {
      "batch_size": 591,
      "lambda_value": 0.6928195943897,
      "learning_rate": 0.0038775370445,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "560": {
      "batch_size": 262,
      "lambda_value": 0.7514538147241,
      "learning_rate": 0.0057105989154,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 348
    },
    "561": {
      "batch_size": 591,
      "lambda_value": 0.4663507906931,
      "learning_rate": 0.0010208140141,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 103
    },
    "562": {
      "batch_size": 459,
      "lambda_value": 0.5065284633963,
      "learning_rate": 0.0001309105975,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 116
    },
    "563": {
      "batch_size": 58,
      "lambda_value": 0.6124199042013,
      "learning_rate": 0.0001332015913,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 405
    },
    "564": {
      "batch_size": 915,
      "lambda_value": 0.2951589262888,
      "learning_rate": 0.0063898385009,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 202
    },
    "565": {
      "batch_size": 382,
      "lambda_value": 0.9559982082686,
      "learning_rate": 0.0116638076106,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 195
    },
    "566": {
      "batch_size": 519,
      "lambda_value": 0.9192806086684,
      "learning_rate": 0.0014492529953,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "567": {
      "batch_size": 213,
      "lambda_value": 0.3077314564176,
      "learning_rate": 0.00026303672,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 458
    },
    "568": {
      "batch_size": 49,
      "lambda_value": 0.0198185276211,
      "learning_rate": 0.0098074043409,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 101
    },
    "569": {
      "batch_size": 64,
      "lambda_value": 0.7273220355144,
      "learning_rate": 0.0076542300478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 73
    },
    "570": {
      "batch_size": 317,
      "lambda_value": 0.0713910004827,
      "learning_rate": 0.0349222638618,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "571": {
      "batch_size": 53,
      "lambda_value": 0.1067038176195,
      "learning_rate": 0.0111918408176,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 138
    },
    "572": {
      "batch_size": 882,
      "lambda_value": 0.3966846670944,
      "learning_rate": 0.0455676229708,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 75
    },
    "573": {
      "batch_size": 38,
      "lambda_value": 0.93987003705,
      "learning_rate": 0.0136903551507,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "574": {
      "batch_size": 291,
      "lambda_value": 0.1364949636771,
      "learning_rate": 0.0407867870963,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "575": {
      "batch_size": 366,
      "lambda_value": 0.9050934851493,
      "learning_rate": 0.0520880493928,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 206
    },
    "576": {
      "batch_size": 122,
      "lambda_value": 0.8252295483668,
      "learning_rate": 0.066100331554,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 122
    },
    "577": {
      "batch_size": 602,
      "lambda_value": 0.2976810297754,
      "learning_rate": 0.0759563643287,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "578": {
      "batch_size": 285,
      "lambda_value": 0.1394542476688,
      "learning_rate": 0.071252528928,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 834
    },
    "579": {
      "batch_size": 57,
      "lambda_value": 0.9340619361723,
      "learning_rate": 0.0010335548559,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 67
    },
    "580": {
      "batch_size": 663,
      "lambda_value": 0.1975412227261,
      "learning_rate": 0.0005495859735,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "581": {
      "batch_size": 786,
      "lambda_value": 0.9722149595521,
      "learning_rate": 0.0336075344769,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "582": {
      "batch_size": 892,
      "lambda_value": 0.7512961906375,
      "learning_rate": 0.0005511465198,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 320
    },
    "583": {
      "batch_size": 111,
      "lambda_value": 0.1835129686986,
      "learning_rate": 0.0393040798424,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 535
    },
    "584": {
      "batch_size": 73,
      "lambda_value": 0.1766041807861,
      "learning_rate": 0.0010935442683,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 377
    },
    "585": {
      "batch_size": 557,
      "lambda_value": 0.1012348045489,
      "learning_rate": 0.000402564444,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 137
    },
    "586": {
      "batch_size": 290,
      "lambda_value": 0.7480890180051,
      "learning_rate": 0.0183968736202,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 218
    },
    "587": {
      "batch_size": 185,
      "lambda_value": 0.4622883416581,
      "learning_rate": 0.0026867043175,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 375
    },
    "588": {
      "batch_size": 240,
      "lambda_value": 0.729133400265,
      "learning_rate": 0.0685480668032,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 428
    },
    "589": {
      "batch_size": 753,
      "lambda_value": 0.9675732057788,
      "learning_rate": 0.0001863465964,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 77
    },
    "590": {
      "batch_size": 460,
      "lambda_value": 0.2519924860831,
      "learning_rate": 0.0143034363919,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 105
    },
    "591": {
      "batch_size": 49,
      "lambda_value": 0.2972077500713,
      "learning_rate": 0.0241679865324,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 70
    },
    "592": {
      "batch_size": 58,
      "lambda_value": 0.6542186168601,
      "learning_rate": 0.008503359008,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 963
    },
    "593": {
      "batch_size": 639,
      "lambda_value": 0.4243411681477,
      "learning_rate": 0.000652620617,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 204
    },
    "594": {
      "batch_size": 845,
      "lambda_value": 0.7129552076351,
      "learning_rate": 0.0331152353859,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 212
    },
    "595": {
      "batch_size": 104,
      "lambda_value": 0.9541903980346,
      "learning_rate": 0.0515505592913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 520
    },
    "596": {
      "batch_size": 740,
      "lambda_value": 0.0836379112516,
      "learning_rate": 0.0019468886144,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 126
    },
    "597": {
      "batch_size": 647,
      "lambda_value": 0.320124945835,
      "learning_rate": 0.0092679210172,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 384
    },
    "598": {
      "batch_size": 266,
      "lambda_value": 0.8650823766705,
      "learning_rate": 0.0059221015506,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 735
    },
    "599": {
      "batch_size": 855,
      "lambda_value": 0.8509205817819,
      "learning_rate": 0.0007910970692,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "600": {
      "batch_size": 68,
      "lambda_value": 0.1895907174494,
      "learning_rate": 0.0049274789056,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 464
    },
    "601": {
      "batch_size": 276,
      "lambda_value": 0.5824603455951,
      "learning_rate": 0.0301048087959,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 142
    },
    "602": {
      "batch_size": 59,
      "lambda_value": 0.3450738954337,
      "learning_rate": 0.0007146675871,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 168
    },
    "603": {
      "batch_size": 542,
      "lambda_value": 0.472775527792,
      "learning_rate": 0.0019627530561,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 434
    },
    "604": {
      "batch_size": 369,
      "lambda_value": 0.3454924582211,
      "learning_rate": 0.0035454173984,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 108
    },
    "605": {
      "batch_size": 72,
      "lambda_value": 0.4800990502176,
      "learning_rate": 0.000203321345,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "606": {
      "batch_size": 335,
      "lambda_value": 0.1959318472423,
      "learning_rate": 0.0001565276098,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 345
    },
    "607": {
      "batch_size": 356,
      "lambda_value": 0.3030382732656,
      "learning_rate": 0.0096189942399,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "608": {
      "batch_size": 540,
      "lambda_value": 0.7654646982086,
      "learning_rate": 0.0011513696149,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 112
    },
    "609": {
      "batch_size": 247,
      "lambda_value": 0.972883763497,
      "learning_rate": 0.0069015643178,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 182
    },
    "610": {
      "batch_size": 179,
      "lambda_value": 0.0985055459863,
      "learning_rate": 0.000530470953,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 560
    },
    "611": {
      "batch_size": 701,
      "lambda_value": 0.130938355233,
      "learning_rate": 0.0047236813508,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "612": {
      "batch_size": 54,
      "lambda_value": 0.4522632190449,
      "learning_rate": 0.0062971673124,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 222
    },
    "613": {
      "batch_size": 174,
      "lambda_value": 0.1696888094239,
      "learning_rate": 0.0418778065088,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 623
    },
    "614": {
      "batch_size": 42,
      "lambda_value": 0.0347211695278,
      "learning_rate": 0.0006941260505,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 237
    },
    "615": {
      "batch_size": 730,
      "lambda_value": 0.9770952291832,
      "learning_rate": 0.0001315068271,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "616": {
      "batch_size": 612,
      "lambda_value": 0.4680569656988,
      "learning_rate": 0.0517909049795,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 193
    },
    "617": {
      "batch_size": 196,
      "lambda_value": 0.0797450362584,
      "learning_rate": 0.0018094742292,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 500
    },
    "618": {
      "batch_size": 78,
      "lambda_value": 0.2724218602519,
      "learning_rate": 0.0478137783426,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 137
    },
    "619": {
      "batch_size": 756,
      "lambda_value": 0.9420858840928,
      "learning_rate": 0.0006023331186,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 402
    },
    "620": {
      "batch_size": 88,
      "lambda_value": 0.937643472628,
      "learning_rate": 0.0612301491406,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 215
    },
    "621": {
      "batch_size": 51,
      "lambda_value": 0.4706311807226,
      "learning_rate": 0.0007184177837,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 87
    },
    "622": {
      "batch_size": 74,
      "lambda_value": 0.7113663845488,
      "learning_rate": 0.0120857975585,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 550
    },
    "623": {
      "batch_size": 277,
      "lambda_value": 0.838696582428,
      "learning_rate": 0.058607253832,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 203
    },
    "624": {
      "batch_size": 413,
      "lambda_value": 0.4774159874337,
      "learning_rate": 0.0004966853478,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 301
    },
    "625": {
      "batch_size": 248,
      "lambda_value": 0.2051367903944,
      "learning_rate": 0.008597137403,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 157
    },
    "626": {
      "batch_size": 959,
      "lambda_value": 0.6755743933782,
      "learning_rate": 0.0024711589148,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 445
    },
    "627": {
      "batch_size": 275,
      "lambda_value": 0.2869652838949,
      "learning_rate": 0.0053744653207,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "628": {
      "batch_size": 419,
      "lambda_value": 0.468935895119,
      "learning_rate": 0.000535917298,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 174
    },
    "629": {
      "batch_size": 276,
      "lambda_value": 0.787561736109,
      "learning_rate": 0.009868449491,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "630": {
      "batch_size": 747,
      "lambda_value": 0.1128036239417,
      "learning_rate": 0.0707874243596,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 156
    },
    "631": {
      "batch_size": 722,
      "lambda_value": 0.6381573184394,
      "learning_rate": 0.0003578055478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 117
    },
    "632": {
      "batch_size": 552,
      "lambda_value": 0.7576951377322,
      "learning_rate": 0.0975940182231,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 553
    },
    "633": {
      "batch_size": 143,
      "lambda_value": 0.3252262614562,
      "learning_rate": 0.0002601871373,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 81
    },
    "634": {
      "batch_size": 55,
      "lambda_value": 0.0979980576943,
      "learning_rate": 0.0002676983581,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 196
    },
    "635": {
      "batch_size": 799,
      "lambda_value": 0.0914512617954,
      "learning_rate": 0.0067604574612,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 869
    },
    "636": {
      "batch_size": 110,
      "lambda_value": 0.9494296894906,
      "learning_rate": 0.0933788153474,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 342
    },
    "637": {
      "batch_size": 242,
      "lambda_value": 0.1645240374282,
      "learning_rate": 0.0001743494646,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 183
    },
    "638": {
      "batch_size": 135,
      "lambda_value": 0.7785097535491,
      "learning_rate": 0.0015335239742,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 203
    },
    "639": {
      "batch_size": 581,
      "lambda_value": 0.3424489730732,
      "learning_rate": 0.0628392937014,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 591
    },
    "640": {
      "batch_size": 450,
      "lambda_value": 0.8686301968519,
      "learning_rate": 0.0002490210408,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 165
    },
    "641": {
      "batch_size": 480,
      "lambda_value": 0.0249229856679,
      "learning_rate": 0.0080150139811,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 832
    },
    "642": {
      "batch_size": 418,
      "lambda_value": 0.7096578575302,
      "learning_rate": 0.0118689383411,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "643": {
      "batch_size": 603,
      "lambda_value": 0.3848042200289,
      "learning_rate": 0.0119798941429,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 118
    },
    "644": {
      "batch_size": 499,
      "lambda_value": 0.1558490208903,
      "learning_rate": 0.0005926823678,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "645": {
      "batch_size": 995,
      "lambda_value": 0.256703725783,
      "learning_rate": 0.0023740627403,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 625
    },
    "646": {
      "batch_size": 246,
      "lambda_value": 0.8576480829962,
      "learning_rate": 0.0002610219568,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 270
    },
    "647": {
      "batch_size": 331,
      "lambda_value": 0.2529248176737,
      "learning_rate": 0.0046653863913,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "648": {
      "batch_size": 598,
      "lambda_value": 0.6090657845907,
      "learning_rate": 0.0010543409122,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "649": {
      "batch_size": 862,
      "lambda_value": 0.0380175296012,
      "learning_rate": 0.041557335749,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 313
    },
    "650": {
      "batch_size": 172,
      "lambda_value": 0.2461939552216,
      "learning_rate": 0.052017125424,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 302
    },
    "651": {
      "batch_size": 73,
      "lambda_value": 0.7470946574587,
      "learning_rate": 0.0002429181124,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 621
    },
    "652": {
      "batch_size": 530,
      "lambda_value": 0.4818459073778,
      "learning_rate": 0.0061287523169,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 118
    },
    "653": {
      "batch_size": 761,
      "lambda_value": 0.5714394919992,
      "learning_rate": 0.0111656909616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 306
    },
    "654": {
      "batch_size": 379,
      "lambda_value": 0.675283456528,
      "learning_rate": 0.0010197010328,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 143
    },
    "655": {
      "batch_size": 920,
      "lambda_value": 0.8798775134851,
      "learning_rate": 0.0079752983744,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 323
    },
    "656": {
      "batch_size": 149,
      "lambda_value": 0.7111103424448,
      "learning_rate": 0.0004604338038,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 180
    },
    "657": {
      "batch_size": 266,
      "lambda_value": 0.2021631301137,
      "learning_rate": 0.049459953253,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 138
    },
    "658": {
      "batch_size": 491,
      "lambda_value": 0.0178358357788,
      "learning_rate": 0.000688299046,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "659": {
      "batch_size": 849,
      "lambda_value": 0.9333043667865,
      "learning_rate": 0.004602992178,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 673
    },
    "660": {
      "batch_size": 824,
      "lambda_value": 0.1426025314378,
      "learning_rate": 0.0024798644553,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 448
    },
    "661": {
      "batch_size": 51,
      "lambda_value": 0.2853731288485,
      "learning_rate": 0.0150933643819,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 302
    },
    "662": {
      "batch_size": 36,
      "lambda_value": 0.7186132579807,
      "learning_rate": 0.0149887638244,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "663": {
      "batch_size": 471,
      "lambda_value": 0.0434289189987,
      "learning_rate": 0.0220228045306,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 210
    },
    "664": {
      "batch_size": 231,
      "lambda_value": 0.1333294873512,
      "learning_rate": 0.0003116520664,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 105
    },
    "665": {
      "batch_size": 885,
      "lambda_value": 0.0287526203974,
      "learning_rate": 0.000646149194,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 311
    },
    "666": {
      "batch_size": 289,
      "lambda_value": 0.5098365217722,
      "learning_rate": 0.0173959693985,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 161
    },
    "667": {
      "batch_size": 545,
      "lambda_value": 0.1790465673948,
      "learning_rate": 0.01152356152,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 348
    },
    "668": {
      "batch_size": 598,
      "lambda_value": 0.5962372605178,
      "learning_rate": 0.0003361725475,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 611
    },
    "669": {
      "batch_size": 359,
      "lambda_value": 0.2597217108998,
      "learning_rate": 0.0003133878261,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 158
    },
    "670": {
      "batch_size": 78,
      "lambda_value": 0.1933304620614,
      "learning_rate": 0.0016145014932,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 239
    },
    "671": {
      "batch_size": 680,
      "lambda_value": 0.5393072453416,
      "learning_rate": 0.0582498957569,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 99
    },
    "672": {
      "batch_size": 843,
      "lambda_value": 0.1865370858349,
      "learning_rate": 0.0018258624516,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 135
    },
    "673": {
      "batch_size": 643,
      "lambda_value": 0.5315968413064,
      "learning_rate": 0.0037188641341,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 83
    },
    "674": {
      "batch_size": 40,
      "lambda_value": 0.5632911300415,
      "learning_rate": 0.0015122606034,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 570
    },
    "675": {
      "batch_size": 60,
      "lambda_value": 0.5251155220329,
      "learning_rate": 0.000688562193,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 83
    },
    "676": {
      "batch_size": 432,
      "lambda_value": 0.5335032753074,
      "learning_rate": 0.0002187393567,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "677": {
      "batch_size": 33,
      "lambda_value": 0.8969473837759,
      "learning_rate": 0.0002270540924,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 289
    },
    "678": {
      "batch_size": 55,
      "lambda_value": 0.4712334805465,
      "learning_rate": 0.0028116145161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 217
    },
    "679": {
      "batch_size": 290,
      "lambda_value": 0.7578449357539,
      "learning_rate": 0.001747683087,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 625
    },
    "680": {
      "batch_size": 277,
      "lambda_value": 0.8341862704396,
      "learning_rate": 0.0044854410519,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 665
    },
    "681": {
      "batch_size": 383,
      "lambda_value": 0.2795991865869,
      "learning_rate": 0.0003051949076,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 302
    },
    "682": {
      "batch_size": 700,
      "lambda_value": 0.4458432171074,
      "learning_rate": 0.0475875046668,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 620
    },
    "683": {
      "batch_size": 57,
      "lambda_value": 0.9923115725844,
      "learning_rate": 0.0412396742542,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 319
    },
    "684": {
      "batch_size": 582,
      "lambda_value": 0.0882312426492,
      "learning_rate": 0.0006257629424,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 91
    },
    "685": {
      "batch_size": 482,
      "lambda_value": 0.3738430101925,
      "learning_rate": 0.0097649928648,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 530
    },
    "686": {
      "batch_size": 386,
      "lambda_value": 0.9370814240227,
      "learning_rate": 0.0721080020906,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 256
    },
    "687": {
      "batch_size": 504,
      "lambda_value": 0.8642676295756,
      "learning_rate": 0.0004480591119,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 123
    },
    "688": {
      "batch_size": 971,
      "lambda_value": 0.053336558594,
      "learning_rate": 0.0146424832105,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "689": {
      "batch_size": 353,
      "lambda_value": 0.4713850033628,
      "learning_rate": 0.0103566918153,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "690": {
      "batch_size": 647,
      "lambda_value": 0.1353366297365,
      "learning_rate": 0.0632788950233,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 138
    },
    "691": {
      "batch_size": 96,
      "lambda_value": 0.3646827688118,
      "learning_rate": 0.014687132835,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "692": {
      "batch_size": 940,
      "lambda_value": 0.3854924768875,
      "learning_rate": 0.0004367657386,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 257
    },
    "693": {
      "batch_size": 133,
      "lambda_value": 0.0899519065497,
      "learning_rate": 0.0021051415194,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 182
    },
    "694": {
      "batch_size": 346,
      "lambda_value": 0.6981127794005,
      "learning_rate": 0.0011047440656,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "695": {
      "batch_size": 703,
      "lambda_value": 0.554813140065,
      "learning_rate": 0.0001226958649,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 549
    },
    "696": {
      "batch_size": 113,
      "lambda_value": 0.739237688008,
      "learning_rate": 0.0041487062879,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 726
    },
    "697": {
      "batch_size": 599,
      "lambda_value": 0.5191855109882,
      "learning_rate": 0.0001499445936,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 147
    },
    "698": {
      "batch_size": 338,
      "lambda_value": 0.4438493610531,
      "learning_rate": 0.0027872253733,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 177
    },
    "699": {
      "batch_size": 68,
      "lambda_value": 0.1473946081284,
      "learning_rate": 0.0006243714092,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 375
    },
    "700": {
      "batch_size": 204,
      "lambda_value": 0.2078968143643,
      "learning_rate": 0.0081190583679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 146
    },
    "701": {
      "batch_size": 77,
      "lambda_value": 0.2456245736743,
      "learning_rate": 0.0028369801276,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 890
    },
    "702": {
      "batch_size": 750,
      "lambda_value": 0.662500151442,
      "learning_rate": 0.0052131932898,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 466
    },
    "703": {
      "batch_size": 227,
      "lambda_value": 0.6147778112373,
      "learning_rate": 0.0005688211075,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 506
    },
    "704": {
      "batch_size": 189,
      "lambda_value": 0.404846374353,
      "learning_rate": 0.044302151,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 505
    },
    "705": {
      "batch_size": 86,
      "lambda_value": 0.8077667139698,
      "learning_rate": 0.058607253832,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 106
    },
    "706": {
      "batch_size": 541,
      "lambda_value": 0.1192207997063,
      "learning_rate": 0.000266174872,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 186
    },
    "707": {
      "batch_size": 97,
      "lambda_value": 0.043774452953,
      "learning_rate": 0.0329189063269,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 91
    },
    "708": {
      "batch_size": 69,
      "lambda_value": 0.5912669832802,
      "learning_rate": 0.0760680116102,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 308
    },
    "709": {
      "batch_size": 250,
      "lambda_value": 0.9992595000691,
      "learning_rate": 0.0039991080728,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 89
    },
    "710": {
      "batch_size": 54,
      "lambda_value": 0.0574950683369,
      "learning_rate": 0.0123747046447,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 225
    },
    "711": {
      "batch_size": 45,
      "lambda_value": 0.5335333365546,
      "learning_rate": 0.0001175388961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 929
    },
    "712": {
      "batch_size": 291,
      "lambda_value": 0.0432434563493,
      "learning_rate": 0.0001198982341,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 309
    },
    "713": {
      "batch_size": 416,
      "lambda_value": 0.2927437762592,
      "learning_rate": 0.0004165106581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 864
    },
    "714": {
      "batch_size": 171,
      "lambda_value": 0.7017369627446,
      "learning_rate": 0.0262479399797,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 735
    },
    "715": {
      "batch_size": 327,
      "lambda_value": 0.773639327066,
      "learning_rate": 0.0486446136112,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 137
    },
    "716": {
      "batch_size": 32,
      "lambda_value": 0.519490717935,
      "learning_rate": 0.0664075672294,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 152
    },
    "717": {
      "batch_size": 594,
      "lambda_value": 0.7676942789801,
      "learning_rate": 0.0002070408086,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 749
    },
    "718": {
      "batch_size": 501,
      "lambda_value": 0.7124630665623,
      "learning_rate": 0.0001839069405,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 101
    },
    "719": {
      "batch_size": 804,
      "lambda_value": 0.0900642859186,
      "learning_rate": 0.0576220055426,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 624
    },
    "720": {
      "batch_size": 630,
      "lambda_value": 0.0070373936517,
      "learning_rate": 0.0001801942713,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "721": {
      "batch_size": 738,
      "lambda_value": 0.6294477689627,
      "learning_rate": 0.0014144820323,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 66
    },
    "722": {
      "batch_size": 410,
      "lambda_value": 0.9962139099619,
      "learning_rate": 0.0224712593796,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 199
    },
    "723": {
      "batch_size": 61,
      "lambda_value": 0.3259198240339,
      "learning_rate": 0.0005350837422,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 325
    },
    "724": {
      "batch_size": 75,
      "lambda_value": 0.6624668076433,
      "learning_rate": 0.0002205744543,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 281
    },
    "725": {
      "batch_size": 707,
      "lambda_value": 0.7362812362773,
      "learning_rate": 0.0048651223548,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 175
    },
    "726": {
      "batch_size": 45,
      "lambda_value": 0.6401594394208,
      "learning_rate": 0.0397372858533,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 68
    },
    "727": {
      "batch_size": 43,
      "lambda_value": 0.2010235605655,
      "learning_rate": 0.0090989475121,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 257
    },
    "728": {
      "batch_size": 239,
      "lambda_value": 0.0519355181158,
      "learning_rate": 0.0017014566808,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 613
    },
    "729": {
      "batch_size": 657,
      "lambda_value": 0.7903425788755,
      "learning_rate": 0.0168454081159,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 66
    },
    "730": {
      "batch_size": 455,
      "lambda_value": 0.0905484627769,
      "learning_rate": 0.0006288743992,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 67
    },
    "731": {
      "batch_size": 320,
      "lambda_value": 0.4594254672559,
      "learning_rate": 0.0638503575764,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 257
    },
    "732": {
      "batch_size": 81,
      "lambda_value": 0.0075065460018,
      "learning_rate": 0.0007986256546,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 307
    },
    "733": {
      "batch_size": 41,
      "lambda_value": 0.2752216311776,
      "learning_rate": 0.0002412265754,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "734": {
      "batch_size": 533,
      "lambda_value": 0.9766595333667,
      "learning_rate": 0.0024229210966,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "735": {
      "batch_size": 56,
      "lambda_value": 0.3259198240339,
      "learning_rate": 0.0005256218687,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 288
    },
    "736": {
      "batch_size": 307,
      "lambda_value": 0.5420132858805,
      "learning_rate": 0.0030442729783,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 240
    },
    "737": {
      "batch_size": 95,
      "lambda_value": 0.3777812449113,
      "learning_rate": 0.0324606584167,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 225
    },
    "738": {
      "batch_size": 49,
      "lambda_value": 0.238550029918,
      "learning_rate": 0.0001030540462,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 369
    },
    "739": {
      "batch_size": 441,
      "lambda_value": 0.957077534628,
      "learning_rate": 0.0019086022176,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 122
    },
    "740": {
      "batch_size": 511,
      "lambda_value": 0.0134710781272,
      "learning_rate": 0.0002034418803,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "741": {
      "batch_size": 749,
      "lambda_value": 0.9600020506604,
      "learning_rate": 0.0001517254312,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 230
    },
    "742": {
      "batch_size": 866,
      "lambda_value": 0.2660077884752,
      "learning_rate": 0.065288525576,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 73
    },
    "743": {
      "batch_size": 35,
      "lambda_value": 0.5887164604719,
      "learning_rate": 0.0001085075279,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 438
    },
    "744": {
      "batch_size": 1006,
      "lambda_value": 0.6548621749241,
      "learning_rate": 0.0004851750436,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 615
    },
    "745": {
      "batch_size": 478,
      "lambda_value": 0.9359967997182,
      "learning_rate": 0.0797566893098,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 208
    },
    "746": {
      "batch_size": 181,
      "lambda_value": 0.0788884902226,
      "learning_rate": 0.0356093297887,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 244
    },
    "747": {
      "batch_size": 792,
      "lambda_value": 0.0846128278305,
      "learning_rate": 0.0010692560968,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 261
    },
    "748": {
      "batch_size": 182,
      "lambda_value": 0.8387040787334,
      "learning_rate": 0.0237193227301,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 976
    },
    "749": {
      "batch_size": 349,
      "lambda_value": 0.9283152318161,
      "learning_rate": 0.0608974147776,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 156
    },
    "750": {
      "batch_size": 45,
      "lambda_value": 0.0764939439186,
      "learning_rate": 0.0161756051982,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 302
    },
    "751": {
      "batch_size": 61,
      "lambda_value": 0.5064612203765,
      "learning_rate": 0.0025751529376,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 987
    },
    "752": {
      "batch_size": 482,
      "lambda_value": 0.0955146112821,
      "learning_rate": 0.0002725275691,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "753": {
      "batch_size": 592,
      "lambda_value": 0.4036268062948,
      "learning_rate": 0.0992177195258,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 84
    },
    "754": {
      "batch_size": 898,
      "lambda_value": 0.3005544267723,
      "learning_rate": 0.0010809426098,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 187
    },
    "755": {
      "batch_size": 40,
      "lambda_value": 0.731018292064,
      "learning_rate": 0.0069410453299,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "756": {
      "batch_size": 269,
      "lambda_value": 0.1347333366607,
      "learning_rate": 0.0003075024,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "757": {
      "batch_size": 244,
      "lambda_value": 0.4124326809633,
      "learning_rate": 0.0364061830506,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 233
    },
    "758": {
      "batch_size": 45,
      "lambda_value": 0.0614658505319,
      "learning_rate": 0.0007727818206,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 665
    },
    "759": {
      "batch_size": 356,
      "lambda_value": 0.7817121774942,
      "learning_rate": 0.0604511602161,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "760": {
      "batch_size": 434,
      "lambda_value": 0.188771792012,
      "learning_rate": 0.0591237961506,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 93
    },
    "761": {
      "batch_size": 38,
      "lambda_value": 0.6046924405509,
      "learning_rate": 0.0705605284383,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "762": {
      "batch_size": 32,
      "lambda_value": 0.733674657486,
      "learning_rate": 0.0029855210439,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "763": {
      "batch_size": 229,
      "lambda_value": 0.6653808187797,
      "learning_rate": 0.0048386511835,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 116
    },
    "764": {
      "batch_size": 83,
      "lambda_value": 0.6162627556656,
      "learning_rate": 0.0001740183882,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 96
    },
    "765": {
      "batch_size": 243,
      "lambda_value": 0.9238471962863,
      "learning_rate": 0.025566851215,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 136
    },
    "766": {
      "batch_size": 45,
      "lambda_value": 0.0595094713465,
      "learning_rate": 0.0109875328631,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 233
    },
    "767": {
      "batch_size": 114,
      "lambda_value": 0.1580185386064,
      "learning_rate": 0.0028008284542,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 100
    },
    "768": {
      "batch_size": 34,
      "lambda_value": 0.5203870878914,
      "learning_rate": 0.0066722291256,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 149
    },
    "769": {
      "batch_size": 627,
      "lambda_value": 0.9889162365371,
      "learning_rate": 0.0001303634444,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 251
    },
    "770": {
      "batch_size": 758,
      "lambda_value": 0.2717527880428,
      "learning_rate": 0.0171813586196,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "771": {
      "batch_size": 712,
      "lambda_value": 0.7426811270571,
      "learning_rate": 0.002274841247,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "772": {
      "batch_size": 59,
      "lambda_value": 0.6554628939413,
      "learning_rate": 0.0779537018236,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "773": {
      "batch_size": 501,
      "lambda_value": 0.3540897532194,
      "learning_rate": 0.004684812456,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "774": {
      "batch_size": 601,
      "lambda_value": 0.1261139374009,
      "learning_rate": 0.0014821316592,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 78
    },
    "775": {
      "batch_size": 177,
      "lambda_value": 0.2985203369822,
      "learning_rate": 0.0003721692269,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 330
    },
    "776": {
      "batch_size": 39,
      "lambda_value": 0.8193332005299,
      "learning_rate": 0.0002357500492,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 714
    },
    "777": {
      "batch_size": 681,
      "lambda_value": 0.6719515540501,
      "learning_rate": 0.0001891974099,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 576
    },
    "778": {
      "batch_size": 155,
      "lambda_value": 0.8001259345119,
      "learning_rate": 0.0008217272679,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 65
    },
    "779": {
      "batch_size": 909,
      "lambda_value": 0.5942387206669,
      "learning_rate": 0.0093310627964,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 985
    },
    "780": {
      "batch_size": 70,
      "lambda_value": 0.1041490760141,
      "learning_rate": 0.0079847689986,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 116
    },
    "781": {
      "batch_size": 37,
      "lambda_value": 0.5795747237148,
      "learning_rate": 0.034477491717,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "782": {
      "batch_size": 53,
      "lambda_value": 0.6726064023568,
      "learning_rate": 0.0014866940031,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 264
    },
    "783": {
      "batch_size": 622,
      "lambda_value": 0.5580374956601,
      "learning_rate": 0.0183947306774,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 107
    },
    "784": {
      "batch_size": 55,
      "lambda_value": 0.1420907879148,
      "learning_rate": 0.0005023242656,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "785": {
      "batch_size": 66,
      "lambda_value": 0.2353584173771,
      "learning_rate": 0.0001568480226,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 487
    },
    "786": {
      "batch_size": 281,
      "lambda_value": 0.3164310006969,
      "learning_rate": 0.019844871819,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 571
    },
    "787": {
      "batch_size": 48,
      "lambda_value": 0.3304960822444,
      "learning_rate": 0.0146518248161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "788": {
      "batch_size": 773,
      "lambda_value": 0.3708169142748,
      "learning_rate": 0.0001815211482,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "789": {
      "batch_size": 96,
      "lambda_value": 0.7382195902741,
      "learning_rate": 0.0002503660621,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 277
    },
    "790": {
      "batch_size": 452,
      "lambda_value": 0.1775327963751,
      "learning_rate": 0.0005431873665,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 1005
    },
    "791": {
      "batch_size": 594,
      "lambda_value": 0.0464967507918,
      "learning_rate": 0.0010838202755,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 779
    },
    "792": {
      "batch_size": 601,
      "lambda_value": 0.3720022649347,
      "learning_rate": 0.0077029441749,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 76
    },
    "793": {
      "batch_size": 756,
      "lambda_value": 0.9960547775379,
      "learning_rate": 0.0112208775279,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 179
    },
    "794": {
      "batch_size": 303,
      "lambda_value": 0.450982199933,
      "learning_rate": 0.0005012374979,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "795": {
      "batch_size": 953,
      "lambda_value": 0.9645746140483,
      "learning_rate": 0.0147384733544,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 695
    },
    "796": {
      "batch_size": 50,
      "lambda_value": 0.4213986141764,
      "learning_rate": 0.0009397133765,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 503
    },
    "797": {
      "batch_size": 159,
      "lambda_value": 0.3495717980859,
      "learning_rate": 0.0187631887146,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 151
    },
    "798": {
      "batch_size": 47,
      "lambda_value": 0.6692619633472,
      "learning_rate": 0.011170113952,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "799": {
      "batch_size": 283,
      "lambda_value": 0.2121933179459,
      "learning_rate": 0.0311376749648,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 67
    },
    "800": {
      "batch_size": 875,
      "lambda_value": 0.4964053407048,
      "learning_rate": 0.000233893915,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 385
    },
    "801": {
      "batch_size": 66,
      "lambda_value": 0.4747623360116,
      "learning_rate": 0.0367607449195,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 192
    },
    "802": {
      "batch_size": 55,
      "lambda_value": 0.1773838620933,
      "learning_rate": 0.0005247790343,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "803": {
      "batch_size": 694,
      "lambda_value": 0.0024972332736,
      "learning_rate": 0.0124934216342,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 108
    },
    "804": {
      "batch_size": 315,
      "lambda_value": 0.3486223356758,
      "learning_rate": 0.0001046386648,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 129
    },
    "805": {
      "batch_size": 142,
      "lambda_value": 0.3717453140462,
      "learning_rate": 0.0009339912832,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 71
    },
    "806": {
      "batch_size": 747,
      "lambda_value": 0.487908290671,
      "learning_rate": 0.0445635706735,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 144
    },
    "807": {
      "batch_size": 544,
      "lambda_value": 0.1457385575358,
      "learning_rate": 0.0017966323514,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 242
    },
    "808": {
      "batch_size": 711,
      "lambda_value": 0.9394178354264,
      "learning_rate": 0.0009146044621,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 407
    },
    "809": {
      "batch_size": 429,
      "lambda_value": 0.6746885001993,
      "learning_rate": 0.0003434118541,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 440
    },
    "810": {
      "batch_size": 768,
      "lambda_value": 0.4326820145284,
      "learning_rate": 0.001970264983,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 209
    },
    "811": {
      "batch_size": 48,
      "lambda_value": 0.9547300785872,
      "learning_rate": 0.0228904807089,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 97
    },
    "812": {
      "batch_size": 436,
      "lambda_value": 0.372084913002,
      "learning_rate": 0.0014581884067,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 157
    },
    "813": {
      "batch_size": 509,
      "lambda_value": 0.5035036108687,
      "learning_rate": 0.0026943021997,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 218
    },
    "814": {
      "batch_size": 420,
      "lambda_value": 0.5821782460442,
      "learning_rate": 0.0001455596377,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 417
    },
    "815": {
      "batch_size": 317,
      "lambda_value": 0.5474633844823,
      "learning_rate": 0.0015534194913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 197
    },
    "816": {
      "batch_size": 673,
      "lambda_value": 0.1066059282631,
      "learning_rate": 0.0008710879723,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "817": {
      "batch_size": 63,
      "lambda_value": 0.7368898787714,
      "learning_rate": 0.0001287558542,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 243
    },
    "818": {
      "batch_size": 217,
      "lambda_value": 0.4318198835859,
      "learning_rate": 0.0268565507901,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 129
    },
    "819": {
      "batch_size": 446,
      "lambda_value": 0.5487591412663,
      "learning_rate": 0.0155537296446,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "820": {
      "batch_size": 35,
      "lambda_value": 0.1272232163978,
      "learning_rate": 0.000798174472,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 708
    },
    "821": {
      "batch_size": 42,
      "lambda_value": 0.7692129676901,
      "learning_rate": 0.000294008565,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 193
    },
    "822": {
      "batch_size": 401,
      "lambda_value": 0.3408468811228,
      "learning_rate": 0.0471076860744,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 400
    },
    "823": {
      "batch_size": 67,
      "lambda_value": 0.2984404563597,
      "learning_rate": 0.0298996049283,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 81
    },
    "824": {
      "batch_size": 580,
      "lambda_value": 0.8985707855197,
      "learning_rate": 0.007097376244,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 162
    },
    "825": {
      "batch_size": 34,
      "lambda_value": 0.6245113502644,
      "learning_rate": 0.0006479136368,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 131
    },
    "826": {
      "batch_size": 649,
      "lambda_value": 0.876056080956,
      "learning_rate": 0.0247423131016,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 391
    },
    "827": {
      "batch_size": 328,
      "lambda_value": 0.4422225387084,
      "learning_rate": 0.0005342471317,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 252
    },
    "828": {
      "batch_size": 286,
      "lambda_value": 0.5972663859522,
      "learning_rate": 0.0950770439815,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "829": {
      "batch_size": 568,
      "lambda_value": 0.06984546795,
      "learning_rate": 0.0064326042354,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 757
    },
    "830": {
      "batch_size": 181,
      "lambda_value": 0.8546996861515,
      "learning_rate": 0.003884414875,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 196
    },
    "831": {
      "batch_size": 46,
      "lambda_value": 0.7147531891872,
      "learning_rate": 0.0101916980141,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 158
    },
    "832": {
      "batch_size": 86,
      "lambda_value": 0.4670596381143,
      "learning_rate": 0.0145022867515,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 92
    },
    "833": {
      "batch_size": 553,
      "lambda_value": 0.0760059398096,
      "learning_rate": 0.0019040246749,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 154
    },
    "834": {
      "batch_size": 365,
      "lambda_value": 0.45893177935,
      "learning_rate": 0.0934713079823,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 222
    },
    "835": {
      "batch_size": 924,
      "lambda_value": 0.7206978230855,
      "learning_rate": 0.0012373734352,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 841
    },
    "836": {
      "batch_size": 969,
      "lambda_value": 0.428401135847,
      "learning_rate": 0.0008334194262,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 418
    },
    "837": {
      "batch_size": 750,
      "lambda_value": 0.3219208286941,
      "learning_rate": 0.0030707951835,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 231
    },
    "838": {
      "batch_size": 840,
      "lambda_value": 0.5543002829439,
      "learning_rate": 0.0063954933819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 199
    },
    "839": {
      "batch_size": 69,
      "lambda_value": 0.3268557069186,
      "learning_rate": 0.000518426571,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 181
    },
    "840": {
      "batch_size": 307,
      "lambda_value": 0.1147156522977,
      "learning_rate": 0.0376238583264,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 254
    },
    "841": {
      "batch_size": 39,
      "lambda_value": 0.9315939665366,
      "learning_rate": 0.0720331565773,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 76
    },
    "842": {
      "batch_size": 144,
      "lambda_value": 0.4964140385327,
      "learning_rate": 0.000504632314,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 331
    },
    "843": {
      "batch_size": 238,
      "lambda_value": 0.7916083975465,
      "learning_rate": 0.0431968495609,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 741
    },
    "844": {
      "batch_size": 36,
      "lambda_value": 0.0922755146442,
      "learning_rate": 0.015488858488,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 333
    },
    "845": {
      "batch_size": 62,
      "lambda_value": 0.1235767932958,
      "learning_rate": 0.0573474607136,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 221
    },
    "846": {
      "batch_size": 115,
      "lambda_value": 0.1048307134026,
      "learning_rate": 0.086845268262,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 379
    },
    "847": {
      "batch_size": 918,
      "lambda_value": 0.7753920649686,
      "learning_rate": 0.0033415948456,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 915
    },
    "848": {
      "batch_size": 394,
      "lambda_value": 0.4114805869974,
      "learning_rate": 0.0246606083822,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "849": {
      "batch_size": 480,
      "lambda_value": 0.2527823091835,
      "learning_rate": 0.0023290548355,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 121
    },
    "850": {
      "batch_size": 813,
      "lambda_value": 0.2375395052378,
      "learning_rate": 0.000200496163,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 373
    },
    "851": {
      "batch_size": 565,
      "lambda_value": 0.3125792668112,
      "learning_rate": 0.0428114646491,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "852": {
      "batch_size": 65,
      "lambda_value": 0.2253981348432,
      "learning_rate": 0.0224414413065,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 139
    },
    "853": {
      "batch_size": 546,
      "lambda_value": 0.0519471402765,
      "learning_rate": 0.0004601751306,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 166
    },
    "854": {
      "batch_size": 394,
      "lambda_value": 0.0653187882234,
      "learning_rate": 0.0088925801928,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 121
    },
    "855": {
      "batch_size": 828,
      "lambda_value": 0.1142106433492,
      "learning_rate": 0.0051761028604,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 348
    },
    "856": {
      "batch_size": 220,
      "lambda_value": 0.2667676704071,
      "learning_rate": 0.0001384460995,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 80
    },
    "857": {
      "batch_size": 884,
      "lambda_value": 0.256703725783,
      "learning_rate": 0.002675383363,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 178
    },
    "858": {
      "batch_size": 620,
      "lambda_value": 0.1843408613267,
      "learning_rate": 0.0189808718634,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 159
    },
    "859": {
      "batch_size": 66,
      "lambda_value": 0.3746932698949,
      "learning_rate": 0.0009397133765,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 324
    },
    "860": {
      "batch_size": 347,
      "lambda_value": 0.0062841385275,
      "learning_rate": 0.0592202254669,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 724
    },
    "861": {
      "batch_size": 32,
      "lambda_value": 0.843904063371,
      "learning_rate": 0.0145471628832,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "862": {
      "batch_size": 512,
      "lambda_value": 0.6864116127537,
      "learning_rate": 0.03634404751,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "863": {
      "batch_size": 558,
      "lambda_value": 0.547816731618,
      "learning_rate": 0.0425180720701,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "864": {
      "batch_size": 415,
      "lambda_value": 0.4133175941219,
      "learning_rate": 0.000380172427,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 352
    },
    "865": {
      "batch_size": 600,
      "lambda_value": 0.5754413284617,
      "learning_rate": 0.0002539380586,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 185
    },
    "866": {
      "batch_size": 226,
      "lambda_value": 0.071662405483,
      "learning_rate": 0.0029603751373,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 304
    },
    "867": {
      "batch_size": 167,
      "lambda_value": 0.552823694988,
      "learning_rate": 0.0186863950035,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 154
    },
    "868": {
      "batch_size": 697,
      "lambda_value": 0.1316787393133,
      "learning_rate": 0.0749527971149,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 163
    },
    "869": {
      "batch_size": 693,
      "lambda_value": 0.4419936560983,
      "learning_rate": 0.0069141362097,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "870": {
      "batch_size": 49,
      "lambda_value": 0.4221123655622,
      "learning_rate": 0.0138787719249,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "871": {
      "batch_size": 412,
      "lambda_value": 0.6898265122125,
      "learning_rate": 0.001804720202,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 91
    },
    "872": {
      "batch_size": 101,
      "lambda_value": 0.0446215165864,
      "learning_rate": 0.0028881260475,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 146
    },
    "873": {
      "batch_size": 302,
      "lambda_value": 0.0634242276013,
      "learning_rate": 0.0001928920376,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 316
    },
    "874": {
      "batch_size": 761,
      "lambda_value": 0.4440764459472,
      "learning_rate": 0.0794097816022,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "875": {
      "batch_size": 933,
      "lambda_value": 0.5999377421281,
      "learning_rate": 0.0006445146717,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 144
    },
    "876": {
      "batch_size": 55,
      "lambda_value": 0.238550029918,
      "learning_rate": 0.0001049481509,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 291
    },
    "877": {
      "batch_size": 577,
      "lambda_value": 0.2056557390908,
      "learning_rate": 0.0003915268753,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 945
    },
    "878": {
      "batch_size": 163,
      "lambda_value": 0.167239280953,
      "learning_rate": 0.0004681909946,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "879": {
      "batch_size": 53,
      "lambda_value": 0.6387826393548,
      "learning_rate": 0.0243304353679,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 456
    },
    "880": {
      "batch_size": 650,
      "lambda_value": 0.1614852659784,
      "learning_rate": 0.0075796500753,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 70
    },
    "881": {
      "batch_size": 506,
      "lambda_value": 0.3753041698627,
      "learning_rate": 0.0163865784673,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "882": {
      "batch_size": 340,
      "lambda_value": 0.3643883697683,
      "learning_rate": 0.0006740568048,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 256
    },
    "883": {
      "batch_size": 33,
      "lambda_value": 0.1875184980927,
      "learning_rate": 0.0843460243282,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 749
    },
    "884": {
      "batch_size": 389,
      "lambda_value": 0.9219372234064,
      "learning_rate": 0.0008238993902,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 238
    },
    "885": {
      "batch_size": 58,
      "lambda_value": 0.7390799893981,
      "learning_rate": 0.0886799955763,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 94
    },
    "886": {
      "batch_size": 230,
      "lambda_value": 0.8290386601668,
      "learning_rate": 0.0082958882239,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 97
    },
    "887": {
      "batch_size": 729,
      "lambda_value": 0.6561598698686,
      "learning_rate": 0.0200242469415,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 83
    },
    "888": {
      "batch_size": 365,
      "lambda_value": 0.3361992196662,
      "learning_rate": 0.079998799585,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 200
    },
    "889": {
      "batch_size": 57,
      "lambda_value": 0.6844051624874,
      "learning_rate": 0.0354968826355,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 534
    },
    "890": {
      "batch_size": 49,
      "lambda_value": 0.3507544796617,
      "learning_rate": 0.0003035474614,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 316
    },
    "891": {
      "batch_size": 832,
      "lambda_value": 0.1559151475291,
      "learning_rate": 0.0588613075688,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 150
    },
    "892": {
      "batch_size": 104,
      "lambda_value": 0.4259903925482,
      "learning_rate": 0.024197175793,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "893": {
      "batch_size": 609,
      "lambda_value": 0.7921589658006,
      "learning_rate": 0.0078022777825,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "894": {
      "batch_size": 432,
      "lambda_value": 0.342530200838,
      "learning_rate": 0.0023157640153,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "895": {
      "batch_size": 307,
      "lambda_value": 0.7255893135138,
      "learning_rate": 0.0022899433426,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 188
    },
    "896": {
      "batch_size": 429,
      "lambda_value": 0.6857681112319,
      "learning_rate": 0.0011833277287,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 449
    },
    "897": {
      "batch_size": 740,
      "lambda_value": 0.6150053751439,
      "learning_rate": 0.0211502006423,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 73
    },
    "898": {
      "batch_size": 251,
      "lambda_value": 0.0015968440481,
      "learning_rate": 0.0014089945053,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 274
    },
    "899": {
      "batch_size": 41,
      "lambda_value": 0.3588119411049,
      "learning_rate": 0.0194142362086,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 177
    },
    "900": {
      "batch_size": 254,
      "lambda_value": 0.8726615114865,
      "learning_rate": 0.0001722746333,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 431
    },
    "901": {
      "batch_size": 303,
      "lambda_value": 0.1381935470232,
      "learning_rate": 0.0028801068378,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 123
    },
    "902": {
      "batch_size": 111,
      "lambda_value": 0.4482297010366,
      "learning_rate": 0.001419663145,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 348
    },
    "903": {
      "batch_size": 298,
      "lambda_value": 0.3390676674274,
      "learning_rate": 0.0227587978931,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "904": {
      "batch_size": 489,
      "lambda_value": 0.6410773181511,
      "learning_rate": 0.0006330867153,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "905": {
      "batch_size": 962,
      "lambda_value": 0.1272255343596,
      "learning_rate": 0.0010648882536,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 252
    },
    "906": {
      "batch_size": 525,
      "lambda_value": 0.5683327918539,
      "learning_rate": 0.0005445030847,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 162
    },
    "907": {
      "batch_size": 537,
      "lambda_value": 0.0709703179888,
      "learning_rate": 0.0004329924399,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 80
    },
    "908": {
      "batch_size": 859,
      "lambda_value": 0.6599022226383,
      "learning_rate": 0.0006294564585,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 612
    },
    "909": {
      "batch_size": 265,
      "lambda_value": 0.5160569609208,
      "learning_rate": 0.0865148615222,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 122
    },
    "910": {
      "batch_size": 535,
      "lambda_value": 0.2128071671198,
      "learning_rate": 0.0008886182822,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 121
    },
    "911": {
      "batch_size": 32,
      "lambda_value": 0.8939450080598,
      "learning_rate": 0.0003050846447,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 179
    },
    "912": {
      "batch_size": 755,
      "lambda_value": 0.2983177699812,
      "learning_rate": 0.0043300321463,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 82
    },
    "913": {
      "batch_size": 400,
      "lambda_value": 0.5797136972999,
      "learning_rate": 0.0001601439692,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 67
    },
    "914": {
      "batch_size": 479,
      "lambda_value": 0.4177813572394,
      "learning_rate": 0.0002541297708,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 363
    },
    "915": {
      "batch_size": 475,
      "lambda_value": 0.3614739032996,
      "learning_rate": 0.0040927356236,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 184
    },
    "916": {
      "batch_size": 676,
      "lambda_value": 0.8729600212192,
      "learning_rate": 0.00109263889,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 349
    },
    "917": {
      "batch_size": 316,
      "lambda_value": 0.5530103694374,
      "learning_rate": 0.0310886080457,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "918": {
      "batch_size": 447,
      "lambda_value": 0.2394974448085,
      "learning_rate": 0.0006860336662,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 458
    },
    "919": {
      "batch_size": 527,
      "lambda_value": 0.3395665856392,
      "learning_rate": 0.0021441267137,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 159
    },
    "920": {
      "batch_size": 636,
      "lambda_value": 0.0708632872733,
      "learning_rate": 0.0015902159765,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 473
    },
    "921": {
      "batch_size": 527,
      "lambda_value": 0.5526716720699,
      "learning_rate": 0.0162072859801,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "922": {
      "batch_size": 185,
      "lambda_value": 0.1435148227746,
      "learning_rate": 0.032766704256,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 301
    },
    "923": {
      "batch_size": 39,
      "lambda_value": 0.7900567988827,
      "learning_rate": 0.0030425418623,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 452
    },
    "924": {
      "batch_size": 57,
      "lambda_value": 0.7046766642737,
      "learning_rate": 0.0770940554474,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 194
    },
    "925": {
      "batch_size": 302,
      "lambda_value": 0.098569993888,
      "learning_rate": 0.0001579182877,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 196
    },
    "926": {
      "batch_size": 298,
      "lambda_value": 0.1200700726986,
      "learning_rate": 0.0121857707176,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 143
    },
    "927": {
      "batch_size": 452,
      "lambda_value": 0.5171197540921,
      "learning_rate": 0.0013004477143,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 140
    },
    "928": {
      "batch_size": 41,
      "lambda_value": 0.6296356425263,
      "learning_rate": 0.0123222581549,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "929": {
      "batch_size": 40,
      "lambda_value": 0.7180535500534,
      "learning_rate": 0.0020317120707,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 177
    },
    "930": {
      "batch_size": 283,
      "lambda_value": 0.5487591412663,
      "learning_rate": 0.0149266082593,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "931": {
      "batch_size": 358,
      "lambda_value": 0.4266985305875,
      "learning_rate": 0.0001806237603,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 128
    },
    "932": {
      "batch_size": 479,
      "lambda_value": 0.4802245090807,
      "learning_rate": 0.0047919706819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "933": {
      "batch_size": 825,
      "lambda_value": 0.7843157148061,
      "learning_rate": 0.0066976571924,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 352
    },
    "934": {
      "batch_size": 50,
      "lambda_value": 0.5931147725298,
      "learning_rate": 0.0002429181124,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 453
    },
    "935": {
      "batch_size": 935,
      "lambda_value": 0.1042431965836,
      "learning_rate": 0.0860508301995,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 1007
    },
    "936": {
      "batch_size": 51,
      "lambda_value": 0.6111303644039,
      "learning_rate": 0.0930282850873,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 768
    },
    "937": {
      "batch_size": 195,
      "lambda_value": 0.401267304123,
      "learning_rate": 0.0301147399686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 255
    },
    "938": {
      "batch_size": 375,
      "lambda_value": 0.207280030057,
      "learning_rate": 0.0009177628162,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 187
    },
    "939": {
      "batch_size": 200,
      "lambda_value": 0.2983810181249,
      "learning_rate": 0.0001836146639,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 790
    },
    "940": {
      "batch_size": 422,
      "lambda_value": 0.0158208424749,
      "learning_rate": 0.0009490944438,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "941": {
      "batch_size": 762,
      "lambda_value": 0.020724417578,
      "learning_rate": 0.0003355580233,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 177
    },
    "942": {
      "batch_size": 497,
      "lambda_value": 0.3703394225824,
      "learning_rate": 0.0010809426098,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 171
    },
    "943": {
      "batch_size": 654,
      "lambda_value": 0.2815189758395,
      "learning_rate": 0.000142054368,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 547
    },
    "944": {
      "batch_size": 811,
      "lambda_value": 0.7360326119571,
      "learning_rate": 0.00010291166,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 85
    },
    "945": {
      "batch_size": 344,
      "lambda_value": 0.7086044755179,
      "learning_rate": 0.0012724902524,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 105
    },
    "946": {
      "batch_size": 433,
      "lambda_value": 0.9986754294793,
      "learning_rate": 0.0001092588107,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 126
    },
    "947": {
      "batch_size": 501,
      "lambda_value": 0.6985335247515,
      "learning_rate": 0.000436179448,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 278
    },
    "948": {
      "batch_size": 54,
      "lambda_value": 0.6996023323351,
      "learning_rate": 0.0018925506808,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 772
    },
    "949": {
      "batch_size": 50,
      "lambda_value": 0.493875570031,
      "learning_rate": 0.0049287562853,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 177
    },
    "950": {
      "batch_size": 249,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0042426744501,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "951": {
      "batch_size": 62,
      "lambda_value": 0.6529575109489,
      "learning_rate": 0.0866229397567,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "952": {
      "batch_size": 64,
      "lambda_value": 0.8996088275144,
      "learning_rate": 0.0381644700336,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 141
    },
    "953": {
      "batch_size": 71,
      "lambda_value": 0.8526437487769,
      "learning_rate": 0.0019043468288,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 79
    },
    "954": {
      "batch_size": 429,
      "lambda_value": 0.0054792037583,
      "learning_rate": 0.0013808246905,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 187
    },
    "955": {
      "batch_size": 717,
      "lambda_value": 0.7913626437791,
      "learning_rate": 0.0001036948064,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 174
    },
    "956": {
      "batch_size": 876,
      "lambda_value": 0.5620922051651,
      "learning_rate": 0.0161148976779,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 772
    },
    "957": {
      "batch_size": 50,
      "lambda_value": 0.7444304647954,
      "learning_rate": 0.0129067763488,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "958": {
      "batch_size": 625,
      "lambda_value": 0.335428589203,
      "learning_rate": 0.0001753046785,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 184
    },
    "959": {
      "batch_size": 157,
      "lambda_value": 0.4136544936724,
      "learning_rate": 0.0001328354583,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 239
    },
    "960": {
      "batch_size": 256,
      "lambda_value": 0.9677064937434,
      "learning_rate": 0.0002257394796,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 377
    },
    "961": {
      "batch_size": 601,
      "lambda_value": 0.6285300752365,
      "learning_rate": 0.0072125566688,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 228
    },
    "962": {
      "batch_size": 774,
      "lambda_value": 0.2223054853185,
      "learning_rate": 0.0705254572169,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 79
    },
    "963": {
      "batch_size": 803,
      "lambda_value": 0.049798848006,
      "learning_rate": 0.0424426548634,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 206
    },
    "964": {
      "batch_size": 304,
      "lambda_value": 0.9690636930872,
      "learning_rate": 0.0045660379397,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "965": {
      "batch_size": 752,
      "lambda_value": 0.408719176652,
      "learning_rate": 0.0138790245968,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 612
    },
    "966": {
      "batch_size": 336,
      "lambda_value": 0.8578308892932,
      "learning_rate": 0.0001334276161,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 468
    },
    "967": {
      "batch_size": 223,
      "lambda_value": 0.7630674651234,
      "learning_rate": 0.009484787052,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 253
    },
    "968": {
      "batch_size": 647,
      "lambda_value": 0.8558923079054,
      "learning_rate": 0.000100770499,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 474
    },
    "969": {
      "batch_size": 674,
      "lambda_value": 0.3005225087541,
      "learning_rate": 0.0078789744012,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 184
    },
    "970": {
      "batch_size": 807,
      "lambda_value": 0.0955384173876,
      "learning_rate": 0.0016495696331,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 611
    },
    "971": {
      "batch_size": 816,
      "lambda_value": 0.0918404708527,
      "learning_rate": 0.0461460080832,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 398
    },
    "972": {
      "batch_size": 717,
      "lambda_value": 0.7477949029271,
      "learning_rate": 0.0004255874846,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 317
    },
    "973": {
      "batch_size": 895,
      "lambda_value": 0.7053743865426,
      "learning_rate": 0.0238921121654,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 96
    },
    "974": {
      "batch_size": 163,
      "lambda_value": 0.2235117059918,
      "learning_rate": 0.0729448598997,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 936
    },
    "975": {
      "batch_size": 793,
      "lambda_value": 0.2322595743628,
      "learning_rate": 0.0003657956393,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 139
    },
    "976": {
      "batch_size": 66,
      "lambda_value": 0.0678261538574,
      "learning_rate": 0.0014458516503,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 465
    },
    "977": {
      "batch_size": 795,
      "lambda_value": 0.7222259735945,
      "learning_rate": 0.0195124142069,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 99
    },
    "978": {
      "batch_size": 729,
      "lambda_value": 0.0038709559603,
      "learning_rate": 0.0001572853057,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "979": {
      "batch_size": 515,
      "lambda_value": 0.4296273890618,
      "learning_rate": 0.0010137008356,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 252
    },
    "980": {
      "batch_size": 58,
      "lambda_value": 0.9714563252509,
      "learning_rate": 0.060532322243,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 413
    },
    "981": {
      "batch_size": 898,
      "lambda_value": 0.5070773145336,
      "learning_rate": 0.0012818866806,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 442
    },
    "982": {
      "batch_size": 797,
      "lambda_value": 0.1294848078928,
      "learning_rate": 0.0019240954168,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 489
    },
    "983": {
      "batch_size": 567,
      "lambda_value": 0.6283292517261,
      "learning_rate": 0.001831572471,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 159
    },
    "984": {
      "batch_size": 115,
      "lambda_value": 0.9553027758703,
      "learning_rate": 0.0279497233743,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 307
    },
    "985": {
      "batch_size": 401,
      "lambda_value": 0.7568355160604,
      "learning_rate": 0.0002561308625,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 213
    },
    "986": {
      "batch_size": 71,
      "lambda_value": 0.5558034403617,
      "learning_rate": 0.0663084302419,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 223
    },
    "987": {
      "batch_size": 39,
      "lambda_value": 0.1298649169164,
      "learning_rate": 0.000149354621,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "988": {
      "batch_size": 184,
      "lambda_value": 0.3459102676964,
      "learning_rate": 0.0001516345855,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 218
    },
    "989": {
      "batch_size": 137,
      "lambda_value": 0.6019469380671,
      "learning_rate": 0.0094246293367,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 116
    },
    "990": {
      "batch_size": 235,
      "lambda_value": 0.1465242968266,
      "learning_rate": 0.0554551497326,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 522
    },
    "991": {
      "batch_size": 889,
      "lambda_value": 0.888994891454,
      "learning_rate": 0.0025607465503,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 270
    },
    "992": {
      "batch_size": 256,
      "lambda_value": 0.4784700748301,
      "learning_rate": 0.0008176148375,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 497
    },
    "993": {
      "batch_size": 60,
      "lambda_value": 0.8749267773274,
      "learning_rate": 0.0137231840115,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "994": {
      "batch_size": 35,
      "lambda_value": 0.4702202708515,
      "learning_rate": 0.0014024723366,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 171
    },
    "995": {
      "batch_size": 464,
      "lambda_value": 0.5480800064441,
      "learning_rate": 0.0004271231934,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 166
    },
    "996": {
      "batch_size": 581,
      "lambda_value": 0.9464659345366,
      "learning_rate": 0.002485757866,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 432
    },
    "997": {
      "batch_size": 452,
      "lambda_value": 0.6517285741927,
      "learning_rate": 0.0630622335396,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 192
    },
    "998": {
      "batch_size": 234,
      "lambda_value": 0.3366791240902,
      "learning_rate": 0.0003307981526,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 222
    },
    "999": {
      "batch_size": 577,
      "lambda_value": 0.3142304077947,
      "learning_rate": 0.0002916673591,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 585
    },
    "1000": {
      "batch_size": 430,
      "lambda_value": 0.0038709559603,
      "learning_rate": 0.0001118219029,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 140
    },
    "1001": {
      "batch_size": 715,
      "lambda_value": 0.5415347029624,
      "learning_rate": 0.0010979609655,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 91
    },
    "1002": {
      "batch_size": 51,
      "lambda_value": 0.5811222777561,
      "learning_rate": 0.026878024665,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 140
    },
    "1003": {
      "batch_size": 398,
      "lambda_value": 0.2473869133726,
      "learning_rate": 0.0180579105916,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 130
    },
    "1004": {
      "batch_size": 237,
      "lambda_value": 0.1764916915717,
      "learning_rate": 0.0119641750339,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 219
    },
    "1005": {
      "batch_size": 71,
      "lambda_value": 0.585419389612,
      "learning_rate": 0.0001649701299,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "1006": {
      "batch_size": 207,
      "lambda_value": 0.4523281085769,
      "learning_rate": 0.0007697691658,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 782
    },
    "1007": {
      "batch_size": 315,
      "lambda_value": 0.841282801187,
      "learning_rate": 0.0004863204501,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "1008": {
      "batch_size": 43,
      "lambda_value": 0.0621940937783,
      "learning_rate": 0.0553957483889,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 162
    },
    "1009": {
      "batch_size": 235,
      "lambda_value": 0.2445717770815,
      "learning_rate": 0.0043761097507,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "1010": {
      "batch_size": 300,
      "lambda_value": 0.6068330033851,
      "learning_rate": 0.0354958985061,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 331
    },
    "1011": {
      "batch_size": 303,
      "lambda_value": 0.796743880744,
      "learning_rate": 0.0001849416271,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 70
    },
    "1012": {
      "batch_size": 64,
      "lambda_value": 0.2081812119378,
      "learning_rate": 0.0002412265754,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 68
    },
    "1013": {
      "batch_size": 720,
      "lambda_value": 0.7251202339722,
      "learning_rate": 0.0273483363433,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 387
    },
    "1014": {
      "batch_size": 259,
      "lambda_value": 0.4749464135711,
      "learning_rate": 0.0021718843667,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 93
    },
    "1015": {
      "batch_size": 397,
      "lambda_value": 0.2146993037093,
      "learning_rate": 0.0060692783079,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "1016": {
      "batch_size": 700,
      "lambda_value": 0.0863796130516,
      "learning_rate": 0.0232207605845,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "1017": {
      "batch_size": 823,
      "lambda_value": 0.1776871540571,
      "learning_rate": 0.0469980276522,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 322
    },
    "1018": {
      "batch_size": 45,
      "lambda_value": 0.8884197321547,
      "learning_rate": 0.0144025357921,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 279
    },
    "1019": {
      "batch_size": 660,
      "lambda_value": 0.4033554288992,
      "learning_rate": 0.0001922099144,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 238
    },
    "1020": {
      "batch_size": 694,
      "lambda_value": 0.7859730695844,
      "learning_rate": 0.0003042605971,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 646
    },
    "1021": {
      "batch_size": 291,
      "lambda_value": 0.4304617538312,
      "learning_rate": 0.079998799585,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 137
    },
    "1022": {
      "batch_size": 281,
      "lambda_value": 0.7025433819716,
      "learning_rate": 0.0003663744227,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 529
    },
    "1023": {
      "batch_size": 268,
      "lambda_value": 0.5089997408714,
      "learning_rate": 0.0001999012894,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 105
    },
    "1024": {
      "batch_size": 168,
      "lambda_value": 0.1545284392462,
      "learning_rate": 0.0018712170973,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "1025": {
      "batch_size": 849,
      "lambda_value": 0.1065123328154,
      "learning_rate": 0.0306963693579,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 887
    },
    "1026": {
      "batch_size": 828,
      "lambda_value": 0.8809412016205,
      "learning_rate": 0.0761659724834,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 177
    },
    "1027": {
      "batch_size": 552,
      "lambda_value": 0.3656227095917,
      "learning_rate": 0.0005274043282,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 224
    },
    "1028": {
      "batch_size": 566,
      "lambda_value": 0.7904920249975,
      "learning_rate": 0.0001036948064,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 83
    },
    "1029": {
      "batch_size": 41,
      "lambda_value": 0.0116948699719,
      "learning_rate": 0.0010415628033,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "1030": {
      "batch_size": 46,
      "lambda_value": 0.5601750269025,
      "learning_rate": 0.0038847150378,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 276
    },
    "1031": {
      "batch_size": 33,
      "lambda_value": 0.7481926046926,
      "learning_rate": 0.0001669577897,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 336
    },
    "1032": {
      "batch_size": 710,
      "lambda_value": 0.6745351627178,
      "learning_rate": 0.0305610411309,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 164
    },
    "1033": {
      "batch_size": 385,
      "lambda_value": 0.4194848737253,
      "learning_rate": 0.0327942142023,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 313
    },
    "1034": {
      "batch_size": 277,
      "lambda_value": 0.1413416952964,
      "learning_rate": 0.0003333426007,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 78
    },
    "1035": {
      "batch_size": 760,
      "lambda_value": 0.5003093412183,
      "learning_rate": 0.0009634382001,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 147
    },
    "1036": {
      "batch_size": 465,
      "lambda_value": 0.9334217245903,
      "learning_rate": 0.0293301549328,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 276
    },
    "1037": {
      "batch_size": 78,
      "lambda_value": 0.4709283341778,
      "learning_rate": 0.0241334270547,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 697
    },
    "1038": {
      "batch_size": 383,
      "lambda_value": 0.672904860073,
      "learning_rate": 0.0307939098582,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 501
    },
    "1039": {
      "batch_size": 534,
      "lambda_value": 0.3523981702141,
      "learning_rate": 0.0033491774595,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "1040": {
      "batch_size": 728,
      "lambda_value": 0.4382956603144,
      "learning_rate": 0.0264764390938,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "1041": {
      "batch_size": 44,
      "lambda_value": 0.4281044174468,
      "learning_rate": 0.0192253022095,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 697
    },
    "1042": {
      "batch_size": 663,
      "lambda_value": 0.0267892106291,
      "learning_rate": 0.0041382049574,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 417
    },
    "1043": {
      "batch_size": 460,
      "lambda_value": 0.3008975997164,
      "learning_rate": 0.0056789044518,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 112
    },
    "1044": {
      "batch_size": 763,
      "lambda_value": 0.8703555076489,
      "learning_rate": 0.0228885783755,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 79
    },
    "1045": {
      "batch_size": 735,
      "lambda_value": 0.3259905477883,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 68
    },
    "1046": {
      "batch_size": 957,
      "lambda_value": 0.8844585197557,
      "learning_rate": 0.0056814553564,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 659
    },
    "1047": {
      "batch_size": 531,
      "lambda_value": 0.0459702899373,
      "learning_rate": 0.0155239413453,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 210
    },
    "1048": {
      "batch_size": 293,
      "lambda_value": 0.9483290048272,
      "learning_rate": 0.0215929326323,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 109
    },
    "1049": {
      "batch_size": 60,
      "lambda_value": 0.0911403949698,
      "learning_rate": 0.00721237367,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 114
    },
    "1050": {
      "batch_size": 876,
      "lambda_value": 0.6898943955834,
      "learning_rate": 0.047945651651,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 130
    },
    "1051": {
      "batch_size": 38,
      "lambda_value": 0.5964385451403,
      "learning_rate": 0.0001170794951,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 81
    },
    "1052": {
      "batch_size": 401,
      "lambda_value": 0.0692991253788,
      "learning_rate": 0.0001639020385,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 132
    },
    "1053": {
      "batch_size": 141,
      "lambda_value": 0.1652815444027,
      "learning_rate": 0.0007334774241,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 456
    },
    "1054": {
      "batch_size": 432,
      "lambda_value": 0.4249519159196,
      "learning_rate": 0.003073435089,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 71
    },
    "1055": {
      "batch_size": 430,
      "lambda_value": 0.1564865096177,
      "learning_rate": 0.0010605660461,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 67
    },
    "1056": {
      "batch_size": 51,
      "lambda_value": 0.2163031226538,
      "learning_rate": 0.0027681794418,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 94
    },
    "1057": {
      "batch_size": 150,
      "lambda_value": 0.7671334478659,
      "learning_rate": 0.0002628242222,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 632
    },
    "1058": {
      "batch_size": 338,
      "lambda_value": 0.5826256589362,
      "learning_rate": 0.0008566395299,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 109
    },
    "1059": {
      "batch_size": 376,
      "lambda_value": 0.2729356990019,
      "learning_rate": 0.0055349673668,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 432
    },
    "1060": {
      "batch_size": 64,
      "lambda_value": 0.0714829915638,
      "learning_rate": 0.002672297849,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 269
    },
    "1061": {
      "batch_size": 339,
      "lambda_value": 0.1875302529073,
      "learning_rate": 0.0244376233981,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 383
    },
    "1062": {
      "batch_size": 515,
      "lambda_value": 0.5779487839769,
      "learning_rate": 0.0002786871133,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 481
    },
    "1063": {
      "batch_size": 135,
      "lambda_value": 0.9086065470794,
      "learning_rate": 0.0011320559761,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 186
    },
    "1064": {
      "batch_size": 72,
      "lambda_value": 0.9332885137074,
      "learning_rate": 0.0204308281604,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 242
    },
    "1065": {
      "batch_size": 50,
      "lambda_value": 0.0665870179946,
      "learning_rate": 0.0166866319,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 247
    },
    "1066": {
      "batch_size": 439,
      "lambda_value": 0.4584725674652,
      "learning_rate": 0.0253254779077,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 352
    },
    "1067": {
      "batch_size": 770,
      "lambda_value": 0.928139690984,
      "learning_rate": 0.000164600745,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 196
    },
    "1068": {
      "batch_size": 842,
      "lambda_value": 0.9840913554067,
      "learning_rate": 0.0003548782987,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 971
    },
    "1069": {
      "batch_size": 696,
      "lambda_value": 0.840735263221,
      "learning_rate": 0.0054882963674,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 324
    },
    "1070": {
      "batch_size": 36,
      "lambda_value": 0.5658015831172,
      "learning_rate": 0.0102732439668,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 235
    },
    "1071": {
      "batch_size": 893,
      "lambda_value": 0.1492063350299,
      "learning_rate": 0.0046232904451,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 509
    },
    "1072": {
      "batch_size": 428,
      "lambda_value": 0.0690256644254,
      "learning_rate": 0.0105860956419,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "1073": {
      "batch_size": 487,
      "lambda_value": 0.2482218834213,
      "learning_rate": 0.003531644456,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 354
    },
    "1074": {
      "batch_size": 410,
      "lambda_value": 0.9485796555084,
      "learning_rate": 0.0261144205678,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 137
    },
    "1075": {
      "batch_size": 870,
      "lambda_value": 0.9890797803671,
      "learning_rate": 0.0005524057185,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "1076": {
      "batch_size": 950,
      "lambda_value": 0.243147660953,
      "learning_rate": 0.0086593504144,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 173
    },
    "1077": {
      "batch_size": 53,
      "lambda_value": 0.3118167441636,
      "learning_rate": 0.0031943572454,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "1078": {
      "batch_size": 672,
      "lambda_value": 0.5104727115614,
      "learning_rate": 0.0754704904202,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "1079": {
      "batch_size": 390,
      "lambda_value": 0.5478926718565,
      "learning_rate": 0.0074949967528,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 414
    },
    "1080": {
      "batch_size": 566,
      "lambda_value": 0.2058657720071,
      "learning_rate": 0.0024350514789,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 348
    },
    "1081": {
      "batch_size": 557,
      "lambda_value": 0.4574049155758,
      "learning_rate": 0.0026201802954,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 81
    },
    "1082": {
      "batch_size": 197,
      "lambda_value": 0.9785810958241,
      "learning_rate": 0.0014319044201,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "1083": {
      "batch_size": 61,
      "lambda_value": 0.7823165182081,
      "learning_rate": 0.0004692075451,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 304
    },
    "1084": {
      "batch_size": 1014,
      "lambda_value": 0.7383908092144,
      "learning_rate": 0.0001756456584,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 656
    },
    "1085": {
      "batch_size": 616,
      "lambda_value": 0.7710493811809,
      "learning_rate": 0.0460761311638,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 308
    },
    "1086": {
      "batch_size": 567,
      "lambda_value": 0.9961574198764,
      "learning_rate": 0.0046933703126,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 317
    },
    "1087": {
      "batch_size": 132,
      "lambda_value": 0.4896826035654,
      "learning_rate": 0.0001253613422,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 64
    },
    "1088": {
      "batch_size": 981,
      "lambda_value": 0.6437295154416,
      "learning_rate": 0.0621500383035,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 165
    },
    "1089": {
      "batch_size": 788,
      "lambda_value": 0.9979849290854,
      "learning_rate": 0.0038739844578,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 659
    },
    "1090": {
      "batch_size": 97,
      "lambda_value": 0.9864346619144,
      "learning_rate": 0.0566954490861,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 150
    },
    "1091": {
      "batch_size": 498,
      "lambda_value": 0.1306249478362,
      "learning_rate": 0.002295600932,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 121
    },
    "1092": {
      "batch_size": 674,
      "lambda_value": 0.876305418993,
      "learning_rate": 0.00051969561,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 193
    },
    "1093": {
      "batch_size": 789,
      "lambda_value": 0.2156608983789,
      "learning_rate": 0.0002645356423,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 204
    },
    "1094": {
      "batch_size": 717,
      "lambda_value": 0.7139367555282,
      "learning_rate": 0.0001866023742,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 112
    },
    "1095": {
      "batch_size": 415,
      "lambda_value": 0.3735935257125,
      "learning_rate": 0.0009799331927,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 95
    },
    "1096": {
      "batch_size": 986,
      "lambda_value": 0.6218911259806,
      "learning_rate": 0.007750955929,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 499
    },
    "1097": {
      "batch_size": 705,
      "lambda_value": 0.5096485767431,
      "learning_rate": 0.0052779479491,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 107
    },
    "1098": {
      "batch_size": 34,
      "lambda_value": 0.1594967342905,
      "learning_rate": 0.021914851298,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 570
    },
    "1099": {
      "batch_size": 493,
      "lambda_value": 0.0930594402454,
      "learning_rate": 0.0014440758562,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 79
    },
    "1100": {
      "batch_size": 344,
      "lambda_value": 0.3722464755845,
      "learning_rate": 0.0050040810592,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 125
    },
    "1101": {
      "batch_size": 717,
      "lambda_value": 0.7206978230855,
      "learning_rate": 0.0005647249203,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 584
    },
    "1102": {
      "batch_size": 136,
      "lambda_value": 0.6903990285854,
      "learning_rate": 0.0006093353979,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 431
    },
    "1103": {
      "batch_size": 120,
      "lambda_value": 0.9348910250309,
      "learning_rate": 0.0001619379157,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 161
    },
    "1104": {
      "batch_size": 158,
      "lambda_value": 0.3608898318103,
      "learning_rate": 0.0021666052641,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 267
    },
    "1105": {
      "batch_size": 339,
      "lambda_value": 0.3826213391691,
      "learning_rate": 0.0170565268601,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 784
    },
    "1106": {
      "batch_size": 881,
      "lambda_value": 0.647311910512,
      "learning_rate": 0.035052968044,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 103
    },
    "1107": {
      "batch_size": 592,
      "lambda_value": 0.0859538409681,
      "learning_rate": 0.0001933555708,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "1108": {
      "batch_size": 91,
      "lambda_value": 0.9026999503775,
      "learning_rate": 0.0001679097311,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 267
    },
    "1109": {
      "batch_size": 591,
      "lambda_value": 0.2787220670802,
      "learning_rate": 0.00169791317,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 268
    },
    "1110": {
      "batch_size": 143,
      "lambda_value": 0.2907328523852,
      "learning_rate": 0.0145836787451,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 86
    },
    "1111": {
      "batch_size": 186,
      "lambda_value": 0.0816369359526,
      "learning_rate": 0.0014902252558,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 181
    },
    "1112": {
      "batch_size": 95,
      "lambda_value": 0.4627277823105,
      "learning_rate": 0.047707423411,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 681
    },
    "1113": {
      "batch_size": 205,
      "lambda_value": 0.1098684964987,
      "learning_rate": 0.0003259358898,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 547
    },
    "1114": {
      "batch_size": 271,
      "lambda_value": 0.0364954756569,
      "learning_rate": 0.000155460867,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 473
    },
    "1115": {
      "batch_size": 680,
      "lambda_value": 0.7568397459913,
      "learning_rate": 0.0017508569176,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 105
    },
    "1116": {
      "batch_size": 621,
      "lambda_value": 0.1359106567277,
      "learning_rate": 0.0003728505036,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 583
    },
    "1117": {
      "batch_size": 166,
      "lambda_value": 0.5915095346226,
      "learning_rate": 0.0080306770386,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "1118": {
      "batch_size": 351,
      "lambda_value": 0.8228552564374,
      "learning_rate": 0.0828874782722,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 201
    },
    "1119": {
      "batch_size": 735,
      "lambda_value": 0.3422680772092,
      "learning_rate": 0.0002377582508,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 89
    },
    "1120": {
      "batch_size": 40,
      "lambda_value": 0.3586898737984,
      "learning_rate": 0.0002368604916,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 73
    },
    "1121": {
      "batch_size": 340,
      "lambda_value": 0.1582575377607,
      "learning_rate": 0.018170858261,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 167
    },
    "1122": {
      "batch_size": 53,
      "lambda_value": 0.1620409311437,
      "learning_rate": 0.0542781979587,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 403
    },
    "1123": {
      "batch_size": 722,
      "lambda_value": 0.0154699585721,
      "learning_rate": 0.004228519805,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 155
    },
    "1124": {
      "batch_size": 573,
      "lambda_value": 0.2052307790666,
      "learning_rate": 0.0004988684624,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "1125": {
      "batch_size": 120,
      "lambda_value": 0.3771660533646,
      "learning_rate": 0.0002240089845,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 386
    },
    "1126": {
      "batch_size": 50,
      "lambda_value": 0.0999445801705,
      "learning_rate": 0.0058454907434,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 335
    },
    "1127": {
      "batch_size": 32,
      "lambda_value": 0.791544252192,
      "learning_rate": 0.0001867148797,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 104
    },
    "1128": {
      "batch_size": 172,
      "lambda_value": 0.413717795257,
      "learning_rate": 0.0160703982705,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 76
    },
    "1129": {
      "batch_size": 75,
      "lambda_value": 0.8578595899798,
      "learning_rate": 0.0001862186621,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 92
    },
    "1130": {
      "batch_size": 496,
      "lambda_value": 0.603977852515,
      "learning_rate": 0.0032780786916,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 77
    },
    "1131": {
      "batch_size": 868,
      "lambda_value": 0.0597637161758,
      "learning_rate": 0.0087264663983,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 555
    },
    "1132": {
      "batch_size": 770,
      "lambda_value": 0.0287493898522,
      "learning_rate": 0.0023329444211,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 173
    },
    "1133": {
      "batch_size": 292,
      "lambda_value": 0.8781338021389,
      "learning_rate": 0.0053742835152,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 153
    },
    "1134": {
      "batch_size": 242,
      "lambda_value": 0.8951271269681,
      "learning_rate": 0.0017418288063,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 78
    },
    "1135": {
      "batch_size": 855,
      "lambda_value": 0.5610024511207,
      "learning_rate": 0.0002060729209,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 453
    },
    "1136": {
      "batch_size": 213,
      "lambda_value": 0.341701214395,
      "learning_rate": 0.0008296119531,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 332
    },
    "1137": {
      "batch_size": 123,
      "lambda_value": 0.9402276302227,
      "learning_rate": 0.0004529115438,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 299
    },
    "1138": {
      "batch_size": 558,
      "lambda_value": 0.8919036747023,
      "learning_rate": 0.0005695133049,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 224
    },
    "1139": {
      "batch_size": 65,
      "lambda_value": 0.5471019370207,
      "learning_rate": 0.000608256342,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 419
    },
    "1140": {
      "batch_size": 53,
      "lambda_value": 0.0595094713465,
      "learning_rate": 0.0117829125348,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 178
    },
    "1141": {
      "batch_size": 322,
      "lambda_value": 0.4499496768201,
      "learning_rate": 0.0003031020788,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 90
    },
    "1142": {
      "batch_size": 188,
      "lambda_value": 0.2323333187828,
      "learning_rate": 0.0006630288966,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 176
    },
    "1143": {
      "batch_size": 166,
      "lambda_value": 0.1353431034656,
      "learning_rate": 0.0001408295581,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 416
    },
    "1144": {
      "batch_size": 45,
      "lambda_value": 0.0347211695278,
      "learning_rate": 0.0008888997849,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 179
    },
    "1145": {
      "batch_size": 709,
      "lambda_value": 0.0633128381268,
      "learning_rate": 0.0536263974108,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 431
    },
    "1146": {
      "batch_size": 964,
      "lambda_value": 0.0905897398466,
      "learning_rate": 0.0041598100348,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 414
    },
    "1147": {
      "batch_size": 657,
      "lambda_value": 0.8663667721518,
      "learning_rate": 0.0078243398429,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 71
    },
    "1148": {
      "batch_size": 550,
      "lambda_value": 0.5204247138342,
      "learning_rate": 0.0134645422769,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 817
    },
    "1149": {
      "batch_size": 334,
      "lambda_value": 0.7408257587108,
      "learning_rate": 0.0002529759478,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 132
    },
    "1150": {
      "batch_size": 223,
      "lambda_value": 0.0739725100034,
      "learning_rate": 0.0993017834628,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 660
    },
    "1151": {
      "batch_size": 63,
      "lambda_value": 0.4893136075805,
      "learning_rate": 0.022468653096,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 110
    },
    "1152": {
      "batch_size": 446,
      "lambda_value": 0.4481377692939,
      "learning_rate": 0.0149857927653,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 72
    },
    "1153": {
      "batch_size": 82,
      "lambda_value": 0.7177975736178,
      "learning_rate": 0.0004612756628,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 415
    },
    "1154": {
      "batch_size": 58,
      "lambda_value": 0.0753167817195,
      "learning_rate": 0.0002405537387,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 219
    },
    "1155": {
      "batch_size": 526,
      "lambda_value": 0.6985114333543,
      "learning_rate": 0.000724251201,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 87
    },
    "1156": {
      "batch_size": 885,
      "lambda_value": 0.2666132168834,
      "learning_rate": 0.0009484995516,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 936
    },
    "1157": {
      "batch_size": 165,
      "lambda_value": 0.3312889266658,
      "learning_rate": 0.0002056068009,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "1158": {
      "batch_size": 689,
      "lambda_value": 0.7602895508575,
      "learning_rate": 0.000212240616,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 374
    },
    "1159": {
      "batch_size": 822,
      "lambda_value": 0.8394430015394,
      "learning_rate": 0.0059982903897,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 153
    },
    "1160": {
      "batch_size": 62,
      "lambda_value": 0.0095144883899,
      "learning_rate": 0.0007877305592,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 208
    },
    "1161": {
      "batch_size": 702,
      "lambda_value": 0.8858700008387,
      "learning_rate": 0.0106488296993,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 342
    },
    "1162": {
      "batch_size": 209,
      "lambda_value": 0.4323787825414,
      "learning_rate": 0.000513318018,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 368
    },
    "1163": {
      "batch_size": 295,
      "lambda_value": 0.3884641501104,
      "learning_rate": 0.0034902933877,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 254
    },
    "1164": {
      "batch_size": 278,
      "lambda_value": 0.2448897361918,
      "learning_rate": 0.0001174428974,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 75
    },
    "1165": {
      "batch_size": 838,
      "lambda_value": 0.5011002128706,
      "learning_rate": 0.0286812868893,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "1166": {
      "batch_size": 673,
      "lambda_value": 0.3939018793467,
      "learning_rate": 0.0002637077378,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 102
    },
    "1167": {
      "batch_size": 134,
      "lambda_value": 0.8783978682164,
      "learning_rate": 0.0857187104345,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 501
    },
    "1168": {
      "batch_size": 44,
      "lambda_value": 0.0313488613502,
      "learning_rate": 0.0003654618068,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 174
    },
    "1169": {
      "batch_size": 820,
      "lambda_value": 0.9405362887083,
      "learning_rate": 0.0005085519575,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 152
    },
    "1170": {
      "batch_size": 666,
      "lambda_value": 0.8280115130553,
      "learning_rate": 0.0385885912609,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 76
    },
    "1171": {
      "batch_size": 430,
      "lambda_value": 0.3701913489872,
      "learning_rate": 0.0001335662779,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 301
    },
    "1172": {
      "batch_size": 60,
      "lambda_value": 0.6269266639563,
      "learning_rate": 0.0489730807951,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 276
    },
    "1173": {
      "batch_size": 53,
      "lambda_value": 0.1636666101452,
      "learning_rate": 0.000149354621,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 78
    },
    "1174": {
      "batch_size": 221,
      "lambda_value": 0.6118342805103,
      "learning_rate": 0.0169413796781,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 122
    },
    "1175": {
      "batch_size": 63,
      "lambda_value": 0.062982481789,
      "learning_rate": 0.015964340022,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 205
    },
    "1176": {
      "batch_size": 785,
      "lambda_value": 0.5436814321776,
      "learning_rate": 0.0039515070337,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 213
    },
    "1177": {
      "batch_size": 440,
      "lambda_value": 0.3972969415038,
      "learning_rate": 0.0496269486479,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 84
    },
    "1178": {
      "batch_size": 472,
      "lambda_value": 0.5681360829604,
      "learning_rate": 0.0005270361883,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 215
    },
    "1179": {
      "batch_size": 507,
      "lambda_value": 0.1191112694949,
      "learning_rate": 0.0001596211402,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "1180": {
      "batch_size": 53,
      "lambda_value": 0.726298149735,
      "learning_rate": 0.0042307717687,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 557
    },
    "1181": {
      "batch_size": 316,
      "lambda_value": 0.504968031613,
      "learning_rate": 0.0010686668171,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 100
    },
    "1182": {
      "batch_size": 147,
      "lambda_value": 0.2885357610862,
      "learning_rate": 0.0137558981973,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "1183": {
      "batch_size": 566,
      "lambda_value": 0.9414007846115,
      "learning_rate": 0.0019424456428,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 293
    },
    "1184": {
      "batch_size": 642,
      "lambda_value": 0.8444807205143,
      "learning_rate": 0.0143335802,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 310
    },
    "1185": {
      "batch_size": 502,
      "lambda_value": 0.9947083902713,
      "learning_rate": 0.001442248582,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 265
    },
    "1186": {
      "batch_size": 52,
      "lambda_value": 0.921651131976,
      "learning_rate": 0.0018124152447,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 147
    },
    "1187": {
      "batch_size": 804,
      "lambda_value": 0.5685404793218,
      "learning_rate": 0.0002151655515,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 131
    },
    "1188": {
      "batch_size": 230,
      "lambda_value": 0.5753180066908,
      "learning_rate": 0.000280551214,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 450
    },
    "1189": {
      "batch_size": 169,
      "lambda_value": 0.8338535103467,
      "learning_rate": 0.0005466554157,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 77
    },
    "1190": {
      "batch_size": 682,
      "lambda_value": 0.2111602211119,
      "learning_rate": 0.0008281328646,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 531
    },
    "1191": {
      "batch_size": 53,
      "lambda_value": 0.0660528870551,
      "learning_rate": 0.0166770076487,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 87
    },
    "1192": {
      "batch_size": 586,
      "lambda_value": 0.9095956313808,
      "learning_rate": 0.0003365189501,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 902
    },
    "1193": {
      "batch_size": 106,
      "lambda_value": 0.8377441087092,
      "learning_rate": 0.0137390891077,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 518
    },
    "1194": {
      "batch_size": 433,
      "lambda_value": 0.693237741578,
      "learning_rate": 0.0359936929796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 498
    },
    "1195": {
      "batch_size": 43,
      "lambda_value": 0.4644769267669,
      "learning_rate": 0.0329170190951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 64
    },
    "1196": {
      "batch_size": 702,
      "lambda_value": 0.8524549281846,
      "learning_rate": 0.0003360050296,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 350
    },
    "1197": {
      "batch_size": 699,
      "lambda_value": 0.1469039417186,
      "learning_rate": 0.0013282949393,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 219
    },
    "1198": {
      "batch_size": 62,
      "lambda_value": 0.0495525343119,
      "learning_rate": 0.0542781979587,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 316
    },
    "1199": {
      "batch_size": 552,
      "lambda_value": 0.6829124123231,
      "learning_rate": 0.0365720651908,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 455
    },
    "1200": {
      "batch_size": 185,
      "lambda_value": 0.7817319070804,
      "learning_rate": 0.0951045281351,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 237
    },
    "1201": {
      "batch_size": 76,
      "lambda_value": 0.0852627285054,
      "learning_rate": 0.0216676499355,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 88
    },
    "1202": {
      "batch_size": 404,
      "lambda_value": 0.313676593188,
      "learning_rate": 0.0014614146338,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 144
    },
    "1203": {
      "batch_size": 942,
      "lambda_value": 0.4307806969507,
      "learning_rate": 0.0120804105602,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 268
    },
    "1204": {
      "batch_size": 664,
      "lambda_value": 0.0733281149323,
      "learning_rate": 0.0013547861915,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 393
    },
    "1205": {
      "batch_size": 61,
      "lambda_value": 0.6428782776555,
      "learning_rate": 0.02432950402,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 70
    },
    "1206": {
      "batch_size": 128,
      "lambda_value": 0.6235444403442,
      "learning_rate": 0.0089299663385,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 209
    },
    "1207": {
      "batch_size": 474,
      "lambda_value": 0.7107279800552,
      "learning_rate": 0.0006333253112,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 71
    },
    "1208": {
      "batch_size": 291,
      "lambda_value": 0.7530661789296,
      "learning_rate": 0.0012252676987,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "1209": {
      "batch_size": 874,
      "lambda_value": 0.4909641673797,
      "learning_rate": 0.0002050599573,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 116
    },
    "1210": {
      "batch_size": 62,
      "lambda_value": 0.0330269454958,
      "learning_rate": 0.0699056292839,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 148
    },
    "1211": {
      "batch_size": 940,
      "lambda_value": 0.2792257808471,
      "learning_rate": 0.0024311214806,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "1212": {
      "batch_size": 886,
      "lambda_value": 0.6575744651723,
      "learning_rate": 0.0086754805287,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 92
    },
    "1213": {
      "batch_size": 638,
      "lambda_value": 0.0881756423506,
      "learning_rate": 0.0563286952061,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 498
    },
    "1214": {
      "batch_size": 116,
      "lambda_value": 0.1058881986749,
      "learning_rate": 0.0002945956039,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 241
    },
    "1215": {
      "batch_size": 792,
      "lambda_value": 0.0502020721557,
      "learning_rate": 0.000859008904,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 289
    },
    "1216": {
      "batch_size": 888,
      "lambda_value": 0.1318054990932,
      "learning_rate": 0.0930144473385,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 792
    },
    "1217": {
      "batch_size": 319,
      "lambda_value": 0.8562873634216,
      "learning_rate": 0.0757620775061,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 170
    },
    "1218": {
      "batch_size": 261,
      "lambda_value": 0.8740377978058,
      "learning_rate": 0.0020793650764,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 117
    },
    "1219": {
      "batch_size": 635,
      "lambda_value": 0.482459537719,
      "learning_rate": 0.0003550690822,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 376
    },
    "1220": {
      "batch_size": 209,
      "lambda_value": 0.0822383740424,
      "learning_rate": 0.0046662977678,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 102
    },
    "1221": {
      "batch_size": 241,
      "lambda_value": 0.699082641464,
      "learning_rate": 0.0610363094406,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 268
    },
    "1222": {
      "batch_size": 798,
      "lambda_value": 0.3431262951911,
      "learning_rate": 0.0342749996155,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 157
    },
    "1223": {
      "batch_size": 556,
      "lambda_value": 0.1696435906645,
      "learning_rate": 0.0033404126799,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 377
    },
    "1224": {
      "batch_size": 328,
      "lambda_value": 0.0167883866465,
      "learning_rate": 0.008399245089,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 492
    },
    "1225": {
      "batch_size": 780,
      "lambda_value": 0.8126193023389,
      "learning_rate": 0.005940104627,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 692
    },
    "1226": {
      "batch_size": 609,
      "lambda_value": 0.1350859624121,
      "learning_rate": 0.0001024899965,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 187
    },
    "1227": {
      "batch_size": 314,
      "lambda_value": 0.2821194258712,
      "learning_rate": 0.0864056359223,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 124
    },
    "1228": {
      "batch_size": 147,
      "lambda_value": 0.4984243365081,
      "learning_rate": 0.0054193273165,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 664
    },
    "1229": {
      "batch_size": 74,
      "lambda_value": 0.2316898301983,
      "learning_rate": 0.0065218971355,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 128
    },
    "1230": {
      "batch_size": 346,
      "lambda_value": 0.6517285741927,
      "learning_rate": 0.0494163519948,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 95
    },
    "1231": {
      "batch_size": 37,
      "lambda_value": 0.8479970309559,
      "learning_rate": 0.0005411746534,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 572
    },
    "1232": {
      "batch_size": 428,
      "lambda_value": 0.2827774716492,
      "learning_rate": 0.0572751132888,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 174
    },
    "1233": {
      "batch_size": 178,
      "lambda_value": 0.3571442482364,
      "learning_rate": 0.0019842279715,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 73
    },
    "1234": {
      "batch_size": 331,
      "lambda_value": 0.2984005965623,
      "learning_rate": 0.0075583302561,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 95
    },
    "1235": {
      "batch_size": 248,
      "lambda_value": 0.6294785806729,
      "learning_rate": 0.0121001246783,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 559
    },
    "1236": {
      "batch_size": 205,
      "lambda_value": 0.6149525800852,
      "learning_rate": 0.0090429531653,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 240
    },
    "1237": {
      "batch_size": 411,
      "lambda_value": 0.5042550718642,
      "learning_rate": 0.0023002557994,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 532
    },
    "1238": {
      "batch_size": 169,
      "lambda_value": 0.6066900840835,
      "learning_rate": 0.0776187207611,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 744
    },
    "1239": {
      "batch_size": 552,
      "lambda_value": 0.2485588937012,
      "learning_rate": 0.000252664262,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 836
    },
    "1240": {
      "batch_size": 746,
      "lambda_value": 0.4360893339182,
      "learning_rate": 0.0045582092847,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 403
    },
    "1241": {
      "batch_size": 527,
      "lambda_value": 0.2900478495749,
      "learning_rate": 0.0023653049331,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 90
    },
    "1242": {
      "batch_size": 45,
      "lambda_value": 0.9024379154999,
      "learning_rate": 0.0004604338038,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 151
    },
    "1243": {
      "batch_size": 419,
      "lambda_value": 0.4270995572858,
      "learning_rate": 0.0010257281998,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 506
    },
    "1244": {
      "batch_size": 214,
      "lambda_value": 0.1348552762146,
      "learning_rate": 0.0004863198934,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 468
    },
    "1245": {
      "batch_size": 821,
      "lambda_value": 0.9371922890442,
      "learning_rate": 0.0006436664882,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 85
    },
    "1246": {
      "batch_size": 50,
      "lambda_value": 0.0876563895739,
      "learning_rate": 0.0004267619006,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "1247": {
      "batch_size": 173,
      "lambda_value": 0.2251525962005,
      "learning_rate": 0.005960352456,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 100
    },
    "1248": {
      "batch_size": 756,
      "lambda_value": 0.7412742793669,
      "learning_rate": 0.0005975798369,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 215
    },
    "1249": {
      "batch_size": 622,
      "lambda_value": 0.4588572609952,
      "learning_rate": 0.0001291038242,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 688
    },
    "1250": {
      "batch_size": 834,
      "lambda_value": 0.6640585516276,
      "learning_rate": 0.0006445146717,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 96
    },
    "1251": {
      "batch_size": 127,
      "lambda_value": 0.3377028781369,
      "learning_rate": 0.0027348654678,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 354
    },
    "1252": {
      "batch_size": 366,
      "lambda_value": 0.8323918139969,
      "learning_rate": 0.0001086047454,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "1253": {
      "batch_size": 755,
      "lambda_value": 0.7028630102384,
      "learning_rate": 0.0017572821609,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 489
    },
    "1254": {
      "batch_size": 785,
      "lambda_value": 0.7433128264575,
      "learning_rate": 0.002606485753,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 186
    },
    "1255": {
      "batch_size": 941,
      "lambda_value": 0.426303361721,
      "learning_rate": 0.0745133679045,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 403
    },
    "1256": {
      "batch_size": 381,
      "lambda_value": 0.7462400035896,
      "learning_rate": 0.0074004846954,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 106
    },
    "1257": {
      "batch_size": 623,
      "lambda_value": 0.1874032378193,
      "learning_rate": 0.0020195892834,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 157
    },
    "1258": {
      "batch_size": 684,
      "lambda_value": 0.2750530670827,
      "learning_rate": 0.0004268179846,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 113
    },
    "1259": {
      "batch_size": 65,
      "lambda_value": 0.3815267757521,
      "learning_rate": 0.015624055114,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 495
    },
    "1260": {
      "batch_size": 78,
      "lambda_value": 0.2552912362447,
      "learning_rate": 0.000747690681,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 174
    },
    "1261": {
      "batch_size": 972,
      "lambda_value": 0.2413090195769,
      "learning_rate": 0.0008348040541,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 140
    },
    "1262": {
      "batch_size": 47,
      "lambda_value": 0.6706003127625,
      "learning_rate": 0.0128841863793,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 223
    },
    "1263": {
      "batch_size": 684,
      "lambda_value": 0.0729583804462,
      "learning_rate": 0.0103603571828,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 891
    },
    "1264": {
      "batch_size": 67,
      "lambda_value": 0.6700307723334,
      "learning_rate": 0.0792641781962,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 595
    },
    "1265": {
      "batch_size": 123,
      "lambda_value": 0.0482046868903,
      "learning_rate": 0.0003518481012,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 330
    },
    "1266": {
      "batch_size": 678,
      "lambda_value": 0.4508676756236,
      "learning_rate": 0.0046852256176,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 69
    },
    "1267": {
      "batch_size": 54,
      "lambda_value": 0.681966038192,
      "learning_rate": 0.0020226099477,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 153
    },
    "1268": {
      "batch_size": 56,
      "lambda_value": 0.0174618931817,
      "learning_rate": 0.0029290917281,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 140
    },
    "1269": {
      "batch_size": 905,
      "lambda_value": 0.4150815453042,
      "learning_rate": 0.0771635174106,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "1270": {
      "batch_size": 35,
      "lambda_value": 0.8563468730925,
      "learning_rate": 0.0886799955763,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 82
    },
    "1271": {
      "batch_size": 716,
      "lambda_value": 0.8168112823143,
      "learning_rate": 0.0001401908062,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 213
    },
    "1272": {
      "batch_size": 199,
      "lambda_value": 0.7008770586981,
      "learning_rate": 0.000600589993,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 70
    },
    "1273": {
      "batch_size": 512,
      "lambda_value": 0.6563568965049,
      "learning_rate": 0.0033053863842,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 73
    },
    "1274": {
      "batch_size": 398,
      "lambda_value": 0.7160315719933,
      "learning_rate": 0.0360343788939,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 626
    },
    "1275": {
      "batch_size": 57,
      "lambda_value": 0.4357472183593,
      "learning_rate": 0.0010484970093,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "1276": {
      "batch_size": 42,
      "lambda_value": 0.9514433036549,
      "learning_rate": 0.0881760956015,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 141
    },
    "1277": {
      "batch_size": 921,
      "lambda_value": 0.5129738662707,
      "learning_rate": 0.0648610051896,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 234
    },
    "1278": {
      "batch_size": 420,
      "lambda_value": 0.9189084483341,
      "learning_rate": 0.0031944830794,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "1279": {
      "batch_size": 141,
      "lambda_value": 0.8627509894917,
      "learning_rate": 0.0409145773868,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 243
    },
    "1280": {
      "batch_size": 79,
      "lambda_value": 0.8162027556567,
      "learning_rate": 0.0006473433114,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 338
    },
    "1281": {
      "batch_size": 524,
      "lambda_value": 0.8313304084535,
      "learning_rate": 0.0026438290962,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 146
    },
    "1282": {
      "batch_size": 443,
      "lambda_value": 0.1582795928207,
      "learning_rate": 0.0226282890524,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 282
    },
    "1283": {
      "batch_size": 142,
      "lambda_value": 0.676996159858,
      "learning_rate": 0.0053456480654,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 69
    },
    "1284": {
      "batch_size": 667,
      "lambda_value": 0.6676282144753,
      "learning_rate": 0.0006352436528,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 957
    },
    "1285": {
      "batch_size": 856,
      "lambda_value": 0.5816500292584,
      "learning_rate": 0.011088574322,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 436
    },
    "1286": {
      "batch_size": 476,
      "lambda_value": 0.7752220122208,
      "learning_rate": 0.000876865349,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 737
    },
    "1287": {
      "batch_size": 907,
      "lambda_value": 0.7700628274992,
      "learning_rate": 0.0054743113114,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 356
    },
    "1288": {
      "batch_size": 905,
      "lambda_value": 0.5099755992214,
      "learning_rate": 0.0007112609703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 132
    },
    "1289": {
      "batch_size": 373,
      "lambda_value": 0.6217735272549,
      "learning_rate": 0.0001532059471,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 184
    },
    "1290": {
      "batch_size": 38,
      "lambda_value": 0.8507354925031,
      "learning_rate": 0.0002380002089,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 585
    },
    "1291": {
      "batch_size": 60,
      "lambda_value": 0.2639753041343,
      "learning_rate": 0.0033434311032,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 89
    },
    "1292": {
      "batch_size": 736,
      "lambda_value": 0.5406738898089,
      "learning_rate": 0.0013482963048,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 91
    },
    "1293": {
      "batch_size": 99,
      "lambda_value": 0.8332960497876,
      "learning_rate": 0.0001120205756,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 101
    },
    "1294": {
      "batch_size": 953,
      "lambda_value": 0.2558487227722,
      "learning_rate": 0.0006167032371,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 258
    },
    "1295": {
      "batch_size": 951,
      "lambda_value": 0.9735584499863,
      "learning_rate": 0.0001102087291,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 205
    },
    "1296": {
      "batch_size": 63,
      "lambda_value": 0.1048307134026,
      "learning_rate": 0.0749405710253,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 240
    },
    "1297": {
      "batch_size": 52,
      "lambda_value": 0.8185812562234,
      "learning_rate": 0.0020383203158,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 119
    },
    "1298": {
      "batch_size": 157,
      "lambda_value": 0.7434578434321,
      "learning_rate": 0.0847296060736,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 67
    },
    "1299": {
      "batch_size": 84,
      "lambda_value": 0.9285442274434,
      "learning_rate": 0.0011639867741,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 213
    },
    "1300": {
      "batch_size": 663,
      "lambda_value": 0.7142318119465,
      "learning_rate": 0.0085316419957,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 79
    },
    "1301": {
      "batch_size": 875,
      "lambda_value": 0.5480678664225,
      "learning_rate": 0.0002286966005,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 257
    },
    "1302": {
      "batch_size": 752,
      "lambda_value": 0.2278456498121,
      "learning_rate": 0.0119484297548,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 612
    },
    "1303": {
      "batch_size": 276,
      "lambda_value": 0.4014051707218,
      "learning_rate": 0.0009049593711,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 167
    },
    "1304": {
      "batch_size": 138,
      "lambda_value": 0.5091030941856,
      "learning_rate": 0.000293994156,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 93
    },
    "1305": {
      "batch_size": 217,
      "lambda_value": 0.3436127085015,
      "learning_rate": 0.0006115598392,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "1306": {
      "batch_size": 191,
      "lambda_value": 0.8901366514108,
      "learning_rate": 0.0036154465303,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 384
    },
    "1307": {
      "batch_size": 74,
      "lambda_value": 0.7866930228999,
      "learning_rate": 0.0019581162793,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "1308": {
      "batch_size": 53,
      "lambda_value": 0.541339152825,
      "learning_rate": 0.0001312891685,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 307
    },
    "1309": {
      "batch_size": 484,
      "lambda_value": 0.7223151465884,
      "learning_rate": 0.0002100851305,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 252
    },
    "1310": {
      "batch_size": 666,
      "lambda_value": 0.9085282074027,
      "learning_rate": 0.0003542461325,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 69
    },
    "1311": {
      "batch_size": 437,
      "lambda_value": 0.8605526578507,
      "learning_rate": 0.0002122558427,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 474
    },
    "1312": {
      "batch_size": 262,
      "lambda_value": 0.7568355160604,
      "learning_rate": 0.0003273060319,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 446
    },
    "1313": {
      "batch_size": 842,
      "lambda_value": 0.6928749606205,
      "learning_rate": 0.0002717276607,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 133
    },
    "1314": {
      "batch_size": 282,
      "lambda_value": 0.1286124958588,
      "learning_rate": 0.0004164535447,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 81
    },
    "1315": {
      "batch_size": 405,
      "lambda_value": 0.5808373347905,
      "learning_rate": 0.0002886372684,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 554
    },
    "1316": {
      "batch_size": 600,
      "lambda_value": 0.5040922011924,
      "learning_rate": 0.0014703554784,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 209
    },
    "1317": {
      "batch_size": 136,
      "lambda_value": 0.9837081675487,
      "learning_rate": 0.0160333727398,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 188
    },
    "1318": {
      "batch_size": 973,
      "lambda_value": 0.9595831990597,
      "learning_rate": 0.0004302687861,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 230
    },
    "1319": {
      "batch_size": 197,
      "lambda_value": 0.1418989539436,
      "learning_rate": 0.0067012436813,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 87
    },
    "1320": {
      "batch_size": 113,
      "lambda_value": 0.649550239872,
      "learning_rate": 0.0965735095,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 521
    },
    "1321": {
      "batch_size": 518,
      "lambda_value": 0.1362627251918,
      "learning_rate": 0.0145794729975,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 577
    },
    "1322": {
      "batch_size": 534,
      "lambda_value": 0.3817656509145,
      "learning_rate": 0.0011037577022,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 468
    },
    "1323": {
      "batch_size": 818,
      "lambda_value": 0.3119445896533,
      "learning_rate": 0.0014562642546,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 136
    },
    "1324": {
      "batch_size": 372,
      "lambda_value": 0.4999963971867,
      "learning_rate": 0.0205363660337,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 73
    },
    "1325": {
      "batch_size": 362,
      "lambda_value": 0.3985335355393,
      "learning_rate": 0.0036148864797,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 372
    },
    "1326": {
      "batch_size": 423,
      "lambda_value": 0.5293061730114,
      "learning_rate": 0.0101416012559,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 518
    },
    "1327": {
      "batch_size": 119,
      "lambda_value": 0.1740742325327,
      "learning_rate": 0.0243379981489,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 82
    },
    "1328": {
      "batch_size": 661,
      "lambda_value": 0.1101032435165,
      "learning_rate": 0.0007119493001,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 890
    },
    "1329": {
      "batch_size": 580,
      "lambda_value": 0.3581489509932,
      "learning_rate": 0.0012321137921,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 147
    },
    "1330": {
      "batch_size": 820,
      "lambda_value": 0.1139357866241,
      "learning_rate": 0.0035564651385,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 300
    },
    "1331": {
      "batch_size": 299,
      "lambda_value": 0.2470334380506,
      "learning_rate": 0.0095731996364,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 162
    },
    "1332": {
      "batch_size": 92,
      "lambda_value": 0.9708569649371,
      "learning_rate": 0.0279112976562,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 94
    },
    "1333": {
      "batch_size": 126,
      "lambda_value": 0.4359841296464,
      "learning_rate": 0.0269861687423,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 332
    },
    "1334": {
      "batch_size": 221,
      "lambda_value": 0.8299074477529,
      "learning_rate": 0.0038743693723,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 437
    },
    "1335": {
      "batch_size": 248,
      "lambda_value": 0.0527758938422,
      "learning_rate": 0.0251845983684,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 180
    },
    "1336": {
      "batch_size": 415,
      "lambda_value": 0.3535210385282,
      "learning_rate": 0.00010056677,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 363
    },
    "1337": {
      "batch_size": 952,
      "lambda_value": 0.4956781168284,
      "learning_rate": 0.0539345441771,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 109
    },
    "1338": {
      "batch_size": 140,
      "lambda_value": 0.7772223868226,
      "learning_rate": 0.0162929489577,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 405
    },
    "1339": {
      "batch_size": 482,
      "lambda_value": 0.8193828056108,
      "learning_rate": 0.0309441976064,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 391
    },
    "1340": {
      "batch_size": 233,
      "lambda_value": 0.9638487468392,
      "learning_rate": 0.0201208977031,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "1341": {
      "batch_size": 121,
      "lambda_value": 0.132975869371,
      "learning_rate": 0.0073117473039,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 281
    },
    "1342": {
      "batch_size": 903,
      "lambda_value": 0.268763494421,
      "learning_rate": 0.0001546482861,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "1343": {
      "batch_size": 490,
      "lambda_value": 0.324876537358,
      "learning_rate": 0.0001992715235,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 289
    },
    "1344": {
      "batch_size": 280,
      "lambda_value": 0.4224546513565,
      "learning_rate": 0.0484101532431,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 73
    },
    "1345": {
      "batch_size": 964,
      "lambda_value": 0.6349454032178,
      "learning_rate": 0.0865079863383,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "1346": {
      "batch_size": 89,
      "lambda_value": 0.4964140385327,
      "learning_rate": 0.0002289520075,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 217
    },
    "1347": {
      "batch_size": 78,
      "lambda_value": 0.6757147614293,
      "learning_rate": 0.0005788216035,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 504
    },
    "1348": {
      "batch_size": 410,
      "lambda_value": 0.3926997651213,
      "learning_rate": 0.0077029441749,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "1349": {
      "batch_size": 114,
      "lambda_value": 0.8500115350495,
      "learning_rate": 0.0002044761505,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 188
    },
    "1350": {
      "batch_size": 442,
      "lambda_value": 0.0563135004376,
      "learning_rate": 0.0049615862085,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 132
    },
    "1351": {
      "batch_size": 262,
      "lambda_value": 0.7483825783916,
      "learning_rate": 0.0023219658723,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 86
    },
    "1352": {
      "batch_size": 596,
      "lambda_value": 0.9070201588038,
      "learning_rate": 0.0001667798206,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 263
    },
    "1353": {
      "batch_size": 843,
      "lambda_value": 0.43586451167,
      "learning_rate": 0.0024654126455,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 384
    },
    "1354": {
      "batch_size": 53,
      "lambda_value": 0.5666380578167,
      "learning_rate": 0.0002116345161,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 314
    },
    "1355": {
      "batch_size": 525,
      "lambda_value": 0.506846659439,
      "learning_rate": 0.0001291038242,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 389
    },
    "1356": {
      "batch_size": 97,
      "lambda_value": 0.4365060748751,
      "learning_rate": 0.0001218419694,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 691
    },
    "1357": {
      "batch_size": 83,
      "lambda_value": 0.1620529960412,
      "learning_rate": 0.0040015969652,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "1358": {
      "batch_size": 709,
      "lambda_value": 0.4459294295024,
      "learning_rate": 0.0006311637991,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 583
    },
    "1359": {
      "batch_size": 314,
      "lambda_value": 0.7503553217203,
      "learning_rate": 0.0737580667724,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 66
    },
    "1360": {
      "batch_size": 597,
      "lambda_value": 0.6251145974487,
      "learning_rate": 0.0352346145054,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 75
    },
    "1361": {
      "batch_size": 972,
      "lambda_value": 0.7486018593718,
      "learning_rate": 0.000214611321,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 715
    },
    "1362": {
      "batch_size": 685,
      "lambda_value": 0.6508420040128,
      "learning_rate": 0.000178563469,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 452
    },
    "1363": {
      "batch_size": 796,
      "lambda_value": 0.2237184747004,
      "learning_rate": 0.0005730497914,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 150
    },
    "1364": {
      "batch_size": 468,
      "lambda_value": 0.3689790844587,
      "learning_rate": 0.0009011958209,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 136
    },
    "1365": {
      "batch_size": 62,
      "lambda_value": 0.9240257722488,
      "learning_rate": 0.0230460766191,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "1366": {
      "batch_size": 847,
      "lambda_value": 0.4872607504314,
      "learning_rate": 0.00051147358,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 672
    },
    "1367": {
      "batch_size": 278,
      "lambda_value": 0.5123318885228,
      "learning_rate": 0.0001114009635,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 156
    },
    "1368": {
      "batch_size": 227,
      "lambda_value": 0.4274125818952,
      "learning_rate": 0.0030149405669,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 338
    },
    "1369": {
      "batch_size": 50,
      "lambda_value": 0.2503244027107,
      "learning_rate": 0.000184530695,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "1370": {
      "batch_size": 68,
      "lambda_value": 0.6333154465138,
      "learning_rate": 0.0103700966201,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 103
    },
    "1371": {
      "batch_size": 644,
      "lambda_value": 0.9645746140483,
      "learning_rate": 0.0331343288731,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 497
    },
    "1372": {
      "batch_size": 479,
      "lambda_value": 0.1605906760164,
      "learning_rate": 0.0002326489679,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 132
    },
    "1373": {
      "batch_size": 142,
      "lambda_value": 0.8594932220086,
      "learning_rate": 0.0035988711539,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 178
    },
    "1374": {
      "batch_size": 79,
      "lambda_value": 0.0286550290804,
      "learning_rate": 0.0049473012063,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "1375": {
      "batch_size": 40,
      "lambda_value": 0.1079505844581,
      "learning_rate": 0.0008371969716,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 465
    },
    "1376": {
      "batch_size": 46,
      "lambda_value": 0.7397673313772,
      "learning_rate": 0.0003082953412,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 281
    },
    "1377": {
      "batch_size": 333,
      "lambda_value": 0.3703394225824,
      "learning_rate": 0.0005234105884,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "1378": {
      "batch_size": 100,
      "lambda_value": 0.2360534884683,
      "learning_rate": 0.0001559050798,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 130
    },
    "1379": {
      "batch_size": 228,
      "lambda_value": 0.3796781961614,
      "learning_rate": 0.0003282918614,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 395
    },
    "1380": {
      "batch_size": 791,
      "lambda_value": 0.1190319596282,
      "learning_rate": 0.0003474961673,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 430
    },
    "1381": {
      "batch_size": 77,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0544115458143,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 272
    },
    "1382": {
      "batch_size": 614,
      "lambda_value": 0.9647976805457,
      "learning_rate": 0.0553559936892,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 271
    },
    "1383": {
      "batch_size": 635,
      "lambda_value": 0.0647870272306,
      "learning_rate": 0.0001300714104,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 403
    },
    "1384": {
      "batch_size": 365,
      "lambda_value": 0.5864878342997,
      "learning_rate": 0.000133797587,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 631
    },
    "1385": {
      "batch_size": 102,
      "lambda_value": 0.7869950703705,
      "learning_rate": 0.0037714649502,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 219
    },
    "1386": {
      "batch_size": 45,
      "lambda_value": 0.3146114923347,
      "learning_rate": 0.000298409762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 100
    },
    "1387": {
      "batch_size": 413,
      "lambda_value": 0.8674221786074,
      "learning_rate": 0.0003724694491,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 296
    },
    "1388": {
      "batch_size": 678,
      "lambda_value": 0.3892870033297,
      "learning_rate": 0.0814500763638,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "1389": {
      "batch_size": 971,
      "lambda_value": 0.1647174594332,
      "learning_rate": 0.0171535854238,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 362
    },
    "1390": {
      "batch_size": 507,
      "lambda_value": 0.0932130780851,
      "learning_rate": 0.0581915715209,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 133
    },
    "1391": {
      "batch_size": 921,
      "lambda_value": 0.2941352139709,
      "learning_rate": 0.0243200482371,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 340
    },
    "1392": {
      "batch_size": 665,
      "lambda_value": 0.4168724585464,
      "learning_rate": 0.0456621825927,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 124
    },
    "1393": {
      "batch_size": 160,
      "lambda_value": 0.2940045594211,
      "learning_rate": 0.000563831985,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "1394": {
      "batch_size": 943,
      "lambda_value": 0.8700141611818,
      "learning_rate": 0.0012216958599,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 441
    },
    "1395": {
      "batch_size": 450,
      "lambda_value": 0.0856837242113,
      "learning_rate": 0.002963481584,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 82
    },
    "1396": {
      "batch_size": 992,
      "lambda_value": 0.8074892994651,
      "learning_rate": 0.007084045654,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 237
    },
    "1397": {
      "batch_size": 521,
      "lambda_value": 0.0031783687498,
      "learning_rate": 0.0633822404451,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 423
    },
    "1398": {
      "batch_size": 564,
      "lambda_value": 0.2111602211119,
      "learning_rate": 0.0005140188255,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 297
    },
    "1399": {
      "batch_size": 152,
      "lambda_value": 0.2027752675159,
      "learning_rate": 0.0003838913577,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 353
    },
    "1400": {
      "batch_size": 106,
      "lambda_value": 0.5699425417713,
      "learning_rate": 0.0162859777664,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 72
    },
    "1401": {
      "batch_size": 95,
      "lambda_value": 0.3337228777622,
      "learning_rate": 0.0120610447094,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "1402": {
      "batch_size": 104,
      "lambda_value": 0.375159159931,
      "learning_rate": 0.0002492741508,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 298
    },
    "1403": {
      "batch_size": 51,
      "lambda_value": 0.6221091610754,
      "learning_rate": 0.0206413108048,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 182
    },
    "1404": {
      "batch_size": 260,
      "lambda_value": 0.9157231305119,
      "learning_rate": 0.0001088496311,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 279
    },
    "1405": {
      "batch_size": 66,
      "lambda_value": 0.5021053265572,
      "learning_rate": 0.0294286077658,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 128
    },
    "1406": {
      "batch_size": 149,
      "lambda_value": 0.6281471320525,
      "learning_rate": 0.0313333199965,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 114
    },
    "1407": {
      "batch_size": 576,
      "lambda_value": 0.3153112439558,
      "learning_rate": 0.0003704928953,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 356
    },
    "1408": {
      "batch_size": 783,
      "lambda_value": 0.8083936998298,
      "learning_rate": 0.0563495113745,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 86
    },
    "1409": {
      "batch_size": 479,
      "lambda_value": 0.9355904391047,
      "learning_rate": 0.00011662051,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 207
    },
    "1410": {
      "batch_size": 142,
      "lambda_value": 0.3053807664868,
      "learning_rate": 0.0832125359857,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 256
    },
    "1411": {
      "batch_size": 910,
      "lambda_value": 0.2367159534077,
      "learning_rate": 0.0006286894008,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 198
    },
    "1412": {
      "batch_size": 575,
      "lambda_value": 0.7624767206124,
      "learning_rate": 0.002085537199,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 223
    },
    "1413": {
      "batch_size": 125,
      "lambda_value": 0.8937470202141,
      "learning_rate": 0.0022192274699,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 364
    },
    "1414": {
      "batch_size": 747,
      "lambda_value": 0.7906492056193,
      "learning_rate": 0.0001417702423,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 234
    },
    "1415": {
      "batch_size": 175,
      "lambda_value": 0.3401806366952,
      "learning_rate": 0.0085246627046,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 113
    },
    "1416": {
      "batch_size": 136,
      "lambda_value": 0.5055451831646,
      "learning_rate": 0.002360826352,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 158
    },
    "1417": {
      "batch_size": 67,
      "lambda_value": 0.4539212832952,
      "learning_rate": 0.0155817914066,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 129
    },
    "1418": {
      "batch_size": 401,
      "lambda_value": 0.1669328658529,
      "learning_rate": 0.0002095088086,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "1419": {
      "batch_size": 211,
      "lambda_value": 0.8047025666855,
      "learning_rate": 0.004676823816,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 70
    },
    "1420": {
      "batch_size": 687,
      "lambda_value": 0.0309199442014,
      "learning_rate": 0.0817158606006,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 161
    },
    "1421": {
      "batch_size": 732,
      "lambda_value": 0.0492356827457,
      "learning_rate": 0.0012301232184,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 122
    },
    "1422": {
      "batch_size": 735,
      "lambda_value": 0.5916563709689,
      "learning_rate": 0.0202009973603,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "1423": {
      "batch_size": 289,
      "lambda_value": 0.1804838832869,
      "learning_rate": 0.0705090934053,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "1424": {
      "batch_size": 569,
      "lambda_value": 0.0370136095374,
      "learning_rate": 0.0377788031865,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 72
    },
    "1425": {
      "batch_size": 712,
      "lambda_value": 0.146845163389,
      "learning_rate": 0.0005744610897,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 609
    },
    "1426": {
      "batch_size": 340,
      "lambda_value": 0.1052704801072,
      "learning_rate": 0.0056302339442,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "1427": {
      "batch_size": 133,
      "lambda_value": 0.3830037284165,
      "learning_rate": 0.0001720472968,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 714
    },
    "1428": {
      "batch_size": 206,
      "lambda_value": 0.7403245000296,
      "learning_rate": 0.0088850107509,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 126
    },
    "1429": {
      "batch_size": 36,
      "lambda_value": 0.7264714114557,
      "learning_rate": 0.0154194070348,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 186
    },
    "1430": {
      "batch_size": 281,
      "lambda_value": 0.3340503820738,
      "learning_rate": 0.0003416753284,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 871
    },
    "1431": {
      "batch_size": 720,
      "lambda_value": 0.7291732228879,
      "learning_rate": 0.00589632727,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 247
    },
    "1432": {
      "batch_size": 52,
      "lambda_value": 0.4823782952753,
      "learning_rate": 0.0239349971849,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 569
    },
    "1433": {
      "batch_size": 508,
      "lambda_value": 0.2668252659597,
      "learning_rate": 0.0237603014689,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "1434": {
      "batch_size": 133,
      "lambda_value": 0.8742422444237,
      "learning_rate": 0.032809609866,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 157
    },
    "1435": {
      "batch_size": 328,
      "lambda_value": 0.8481903451795,
      "learning_rate": 0.0001232450265,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 795
    },
    "1436": {
      "batch_size": 42,
      "lambda_value": 0.1188030431638,
      "learning_rate": 0.0003236656547,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 97
    },
    "1437": {
      "batch_size": 113,
      "lambda_value": 0.8971030213272,
      "learning_rate": 0.0258816408899,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 97
    },
    "1438": {
      "batch_size": 54,
      "lambda_value": 0.5422302497209,
      "learning_rate": 0.0202867110787,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 66
    },
    "1439": {
      "batch_size": 200,
      "lambda_value": 0.6483914110619,
      "learning_rate": 0.0249987969305,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 350
    },
    "1440": {
      "batch_size": 719,
      "lambda_value": 0.7342330312833,
      "learning_rate": 0.0310886502421,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 172
    },
    "1441": {
      "batch_size": 216,
      "lambda_value": 0.9813105253602,
      "learning_rate": 0.000160097269,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 158
    },
    "1442": {
      "batch_size": 57,
      "lambda_value": 0.2913399253848,
      "learning_rate": 0.0001375514613,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 130
    },
    "1443": {
      "batch_size": 376,
      "lambda_value": 0.7096578575302,
      "learning_rate": 0.0106209680222,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 72
    },
    "1444": {
      "batch_size": 277,
      "lambda_value": 0.3757910260637,
      "learning_rate": 0.0122027713342,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 243
    },
    "1445": {
      "batch_size": 862,
      "lambda_value": 0.9180159271528,
      "learning_rate": 0.0147384733544,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 420
    },
    "1446": {
      "batch_size": 700,
      "lambda_value": 0.5299790087701,
      "learning_rate": 0.0029796257404,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "1447": {
      "batch_size": 196,
      "lambda_value": 0.644771584939,
      "learning_rate": 0.0048479493138,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "1448": {
      "batch_size": 255,
      "lambda_value": 0.6156176670234,
      "learning_rate": 0.0005633468923,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 68
    },
    "1449": {
      "batch_size": 40,
      "lambda_value": 0.2523241904779,
      "learning_rate": 0.001414922195,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 380
    },
    "1450": {
      "batch_size": 88,
      "lambda_value": 0.5864305958612,
      "learning_rate": 0.008141108266,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 89
    },
    "1451": {
      "batch_size": 1018,
      "lambda_value": 0.1680179928729,
      "learning_rate": 0.0046366926134,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 804
    },
    "1452": {
      "batch_size": 103,
      "lambda_value": 0.1561352859601,
      "learning_rate": 0.0013152975521,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 323
    },
    "1453": {
      "batch_size": 642,
      "lambda_value": 0.9371010012511,
      "learning_rate": 0.010267721642,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "1454": {
      "batch_size": 238,
      "lambda_value": 0.5160556332559,
      "learning_rate": 0.0025375195291,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "1455": {
      "batch_size": 45,
      "lambda_value": 0.8441266088433,
      "learning_rate": 0.0124934628552,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "1456": {
      "batch_size": 999,
      "lambda_value": 0.4253420005747,
      "learning_rate": 0.00194549407,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 246
    },
    "1457": {
      "batch_size": 479,
      "lambda_value": 0.4027028162047,
      "learning_rate": 0.0009126920745,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 131
    },
    "1458": {
      "batch_size": 63,
      "lambda_value": 0.4315203809183,
      "learning_rate": 0.0007398545948,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 421
    },
    "1459": {
      "batch_size": 278,
      "lambda_value": 0.1407463226538,
      "learning_rate": 0.0001798087199,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 70
    },
    "1460": {
      "batch_size": 716,
      "lambda_value": 0.1182182754458,
      "learning_rate": 0.0002940485218,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 201
    },
    "1461": {
      "batch_size": 651,
      "lambda_value": 0.5096485767431,
      "learning_rate": 0.0055464906732,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 107
    },
    "1462": {
      "batch_size": 322,
      "lambda_value": 0.5367721374889,
      "learning_rate": 0.0018153776868,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 79
    },
    "1463": {
      "batch_size": 506,
      "lambda_value": 0.9597470087296,
      "learning_rate": 0.0001679118473,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 227
    },
    "1464": {
      "batch_size": 40,
      "lambda_value": 0.5431522059638,
      "learning_rate": 0.0036882675177,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 197
    },
    "1465": {
      "batch_size": 36,
      "lambda_value": 0.6428782776555,
      "learning_rate": 0.0295876133877,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "1466": {
      "batch_size": 506,
      "lambda_value": 0.025317771843,
      "learning_rate": 0.0901068046977,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 111
    },
    "1467": {
      "batch_size": 294,
      "lambda_value": 0.7462528383498,
      "learning_rate": 0.055369838066,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 314
    },
    "1468": {
      "batch_size": 760,
      "lambda_value": 0.1749782280599,
      "learning_rate": 0.001683139707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "1469": {
      "batch_size": 200,
      "lambda_value": 0.8921429063463,
      "learning_rate": 0.0687432055378,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 270
    },
    "1470": {
      "batch_size": 69,
      "lambda_value": 0.2877141690733,
      "learning_rate": 0.0011172197968,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 342
    },
    "1471": {
      "batch_size": 725,
      "lambda_value": 0.5753462186054,
      "learning_rate": 0.0001198800279,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 66
    },
    "1472": {
      "batch_size": 88,
      "lambda_value": 0.4866500768538,
      "learning_rate": 0.0717030307598,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 132
    },
    "1473": {
      "batch_size": 610,
      "lambda_value": 0.5441724251429,
      "learning_rate": 0.0005251104572,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 171
    },
    "1474": {
      "batch_size": 263,
      "lambda_value": 0.6382839423849,
      "learning_rate": 0.0323054362167,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 319
    },
    "1475": {
      "batch_size": 230,
      "lambda_value": 0.6308067852123,
      "learning_rate": 0.0002069226114,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 278
    },
    "1476": {
      "batch_size": 225,
      "lambda_value": 0.3665350108598,
      "learning_rate": 0.0452315810885,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 72
    },
    "1477": {
      "batch_size": 884,
      "lambda_value": 0.0972439153484,
      "learning_rate": 0.000139329137,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 402
    },
    "1478": {
      "batch_size": 588,
      "lambda_value": 0.6745351627178,
      "learning_rate": 0.0294775788371,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 116
    },
    "1479": {
      "batch_size": 49,
      "lambda_value": 0.3800270065533,
      "learning_rate": 0.0371061424184,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 511
    },
    "1480": {
      "batch_size": 131,
      "lambda_value": 0.5034856830908,
      "learning_rate": 0.0001861220679,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 87
    },
    "1481": {
      "batch_size": 415,
      "lambda_value": 0.0822085259895,
      "learning_rate": 0.0553453425555,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 131
    },
    "1482": {
      "batch_size": 345,
      "lambda_value": 0.7190464802846,
      "learning_rate": 0.0028285571768,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 76
    },
    "1483": {
      "batch_size": 68,
      "lambda_value": 0.924648191776,
      "learning_rate": 0.0003267662999,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 219
    },
    "1484": {
      "batch_size": 51,
      "lambda_value": 0.7905450093101,
      "learning_rate": 0.0058028659967,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 133
    },
    "1485": {
      "batch_size": 935,
      "lambda_value": 0.9530016813411,
      "learning_rate": 0.0032812553345,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 153
    },
    "1486": {
      "batch_size": 443,
      "lambda_value": 0.9539807088558,
      "learning_rate": 0.0003001217261,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 635
    },
    "1487": {
      "batch_size": 661,
      "lambda_value": 0.9778934519785,
      "learning_rate": 0.0437111087289,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 429
    },
    "1488": {
      "batch_size": 668,
      "lambda_value": 0.1054555782705,
      "learning_rate": 0.0002699259366,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 312
    },
    "1489": {
      "batch_size": 662,
      "lambda_value": 0.8966151601126,
      "learning_rate": 0.0258618802472,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 604
    },
    "1490": {
      "batch_size": 59,
      "lambda_value": 0.869868246362,
      "learning_rate": 0.0021162709161,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 560
    },
    "1491": {
      "batch_size": 224,
      "lambda_value": 0.6811607878956,
      "learning_rate": 0.000836390383,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 332
    },
    "1492": {
      "batch_size": 190,
      "lambda_value": 0.2741480036066,
      "learning_rate": 0.0045290356423,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 273
    },
    "1493": {
      "batch_size": 324,
      "lambda_value": 0.3039856615729,
      "learning_rate": 0.0009581308833,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 138
    },
    "1494": {
      "batch_size": 60,
      "lambda_value": 0.4524605369655,
      "learning_rate": 0.0007791324428,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "1495": {
      "batch_size": 654,
      "lambda_value": 0.3647933516107,
      "learning_rate": 0.021198751247,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 556
    },
    "1496": {
      "batch_size": 424,
      "lambda_value": 0.6158581178928,
      "learning_rate": 0.0001036361314,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 110
    },
    "1497": {
      "batch_size": 760,
      "lambda_value": 0.2036956023817,
      "learning_rate": 0.000196751567,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 261
    },
    "1498": {
      "batch_size": 37,
      "lambda_value": 0.8732320985288,
      "learning_rate": 0.0074634668415,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "1499": {
      "batch_size": 360,
      "lambda_value": 0.3770736555932,
      "learning_rate": 0.0138430866904,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 102
    },
    "1500": {
      "batch_size": 700,
      "lambda_value": 0.4421761930112,
      "learning_rate": 0.0011688798539,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 139
    },
    "1501": {
      "batch_size": 335,
      "lambda_value": 0.4549819578172,
      "learning_rate": 0.004011476082,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 894
    },
    "1502": {
      "batch_size": 905,
      "lambda_value": 0.2158188080418,
      "learning_rate": 0.0703246877986,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 545
    },
    "1503": {
      "batch_size": 1024,
      "lambda_value": 0.8132388637893,
      "learning_rate": 0.0282992007178,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 240
    },
    "1504": {
      "batch_size": 321,
      "lambda_value": 0.9133372414402,
      "learning_rate": 0.0003043375351,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 268
    },
    "1505": {
      "batch_size": 44,
      "lambda_value": 0.0839196921059,
      "learning_rate": 0.0002567668024,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 223
    },
    "1506": {
      "batch_size": 667,
      "lambda_value": 0.6742474358271,
      "learning_rate": 0.0494248303127,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 186
    },
    "1507": {
      "batch_size": 135,
      "lambda_value": 0.6469799402735,
      "learning_rate": 0.053877028905,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 120
    },
    "1508": {
      "batch_size": 261,
      "lambda_value": 0.4617546004534,
      "learning_rate": 0.0047964066063,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 340
    },
    "1509": {
      "batch_size": 261,
      "lambda_value": 0.1752897939222,
      "learning_rate": 0.0883933084471,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 688
    },
    "1510": {
      "batch_size": 507,
      "lambda_value": 0.5889782920734,
      "learning_rate": 0.0219465289654,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "1511": {
      "batch_size": 332,
      "lambda_value": 0.3493657162565,
      "learning_rate": 0.0403046876478,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 486
    },
    "1512": {
      "batch_size": 64,
      "lambda_value": 0.0075342557159,
      "learning_rate": 0.001083903178,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "1513": {
      "batch_size": 61,
      "lambda_value": 0.0678261538574,
      "learning_rate": 0.0020721083078,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 361
    },
    "1514": {
      "batch_size": 781,
      "lambda_value": 0.4587709583446,
      "learning_rate": 0.0012030570086,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 925
    },
    "1515": {
      "batch_size": 452,
      "lambda_value": 0.0531882058162,
      "learning_rate": 0.0644516414379,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "1516": {
      "batch_size": 717,
      "lambda_value": 0.1745714541039,
      "learning_rate": 0.0016872665728,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "1517": {
      "batch_size": 315,
      "lambda_value": 0.5697495370398,
      "learning_rate": 0.0237326167919,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 535
    },
    "1518": {
      "batch_size": 317,
      "lambda_value": 0.9788973791193,
      "learning_rate": 0.0620108034853,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "1519": {
      "batch_size": 714,
      "lambda_value": 0.4920171030532,
      "learning_rate": 0.0134006697425,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 109
    },
    "1520": {
      "batch_size": 664,
      "lambda_value": 0.5795582126903,
      "learning_rate": 0.0067843308806,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 660
    },
    "1521": {
      "batch_size": 62,
      "lambda_value": 0.6704246832232,
      "learning_rate": 0.0418481290333,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 142
    },
    "1522": {
      "batch_size": 969,
      "lambda_value": 0.1965296152228,
      "learning_rate": 0.0021468546871,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 181
    },
    "1523": {
      "batch_size": 959,
      "lambda_value": 0.7209042936358,
      "learning_rate": 0.000999469402,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 299
    },
    "1524": {
      "batch_size": 86,
      "lambda_value": 0.8815250205863,
      "learning_rate": 0.0736223686564,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 235
    },
    "1525": {
      "batch_size": 699,
      "lambda_value": 0.6228561797455,
      "learning_rate": 0.0118123205677,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 75
    },
    "1526": {
      "batch_size": 504,
      "lambda_value": 0.6745745855276,
      "learning_rate": 0.0120723239986,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 682
    },
    "1527": {
      "batch_size": 48,
      "lambda_value": 0.5527425654101,
      "learning_rate": 0.0378863781843,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "1528": {
      "batch_size": 227,
      "lambda_value": 0.525710473332,
      "learning_rate": 0.0005688211075,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 309
    },
    "1529": {
      "batch_size": 45,
      "lambda_value": 0.118182483784,
      "learning_rate": 0.0715716045554,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 990
    },
    "1530": {
      "batch_size": 184,
      "lambda_value": 0.3188036388146,
      "learning_rate": 0.0033205538703,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 75
    },
    "1531": {
      "batch_size": 682,
      "lambda_value": 0.1852626098428,
      "learning_rate": 0.0012301232184,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 82
    },
    "1532": {
      "batch_size": 1006,
      "lambda_value": 0.3334244207502,
      "learning_rate": 0.0094648062346,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 119
    },
    "1533": {
      "batch_size": 247,
      "lambda_value": 0.2458154086891,
      "learning_rate": 0.0068463646299,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 395
    },
    "1534": {
      "batch_size": 588,
      "lambda_value": 0.4942614753914,
      "learning_rate": 0.0055273776536,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 867
    },
    "1535": {
      "batch_size": 137,
      "lambda_value": 0.9117346169209,
      "learning_rate": 0.0006733972521,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "1536": {
      "batch_size": 503,
      "lambda_value": 0.8182350251044,
      "learning_rate": 0.0004704518365,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 581
    },
    "1537": {
      "batch_size": 689,
      "lambda_value": 0.9216842818178,
      "learning_rate": 0.0010446667965,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 79
    },
    "1538": {
      "batch_size": 540,
      "lambda_value": 0.7767406965717,
      "learning_rate": 0.0005224764336,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 88
    },
    "1539": {
      "batch_size": 815,
      "lambda_value": 0.258411302964,
      "learning_rate": 0.0001297187757,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 417
    },
    "1540": {
      "batch_size": 204,
      "lambda_value": 0.2360324155753,
      "learning_rate": 0.0039399999466,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 484
    },
    "1541": {
      "batch_size": 349,
      "lambda_value": 0.0849655188212,
      "learning_rate": 0.0080272674694,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 187
    },
    "1542": {
      "batch_size": 45,
      "lambda_value": 0.0753203510618,
      "learning_rate": 0.0068588834439,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "1543": {
      "batch_size": 824,
      "lambda_value": 0.3227490885588,
      "learning_rate": 0.0002538736698,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 128
    },
    "1544": {
      "batch_size": 53,
      "lambda_value": 0.7862780674331,
      "learning_rate": 0.000156103426,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "1545": {
      "batch_size": 543,
      "lambda_value": 0.5875845448199,
      "learning_rate": 0.0099082476167,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 76
    },
    "1546": {
      "batch_size": 51,
      "lambda_value": 0.7184280685068,
      "learning_rate": 0.000155268893,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 370
    },
    "1547": {
      "batch_size": 548,
      "lambda_value": 0.1624032213621,
      "learning_rate": 0.0001613736815,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 70
    },
    "1548": {
      "batch_size": 417,
      "lambda_value": 0.7962923016687,
      "learning_rate": 0.0168891760561,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 1003
    },
    "1549": {
      "batch_size": 830,
      "lambda_value": 0.6643482393621,
      "learning_rate": 0.0048762292471,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 117
    },
    "1550": {
      "batch_size": 46,
      "lambda_value": 0.6792122103265,
      "learning_rate": 0.0002073445637,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "1551": {
      "batch_size": 369,
      "lambda_value": 0.4011225540436,
      "learning_rate": 0.0018300821898,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 190
    },
    "1552": {
      "batch_size": 118,
      "lambda_value": 0.7432517816955,
      "learning_rate": 0.0072167407731,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 73
    },
    "1553": {
      "batch_size": 669,
      "lambda_value": 0.8769258537298,
      "learning_rate": 0.0001955231736,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 525
    },
    "1554": {
      "batch_size": 305,
      "lambda_value": 0.547816731618,
      "learning_rate": 0.0175933584418,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 71
    },
    "1555": {
      "batch_size": 204,
      "lambda_value": 0.2691766392981,
      "learning_rate": 0.0028361010484,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 299
    },
    "1556": {
      "batch_size": 938,
      "lambda_value": 0.6545586626465,
      "learning_rate": 0.0713453477042,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "1557": {
      "batch_size": 43,
      "lambda_value": 0.4706311807226,
      "learning_rate": 0.0004514191942,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "1558": {
      "batch_size": 46,
      "lambda_value": 0.7725479506176,
      "learning_rate": 0.000335227891,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 195
    },
    "1559": {
      "batch_size": 520,
      "lambda_value": 0.4663507906931,
      "learning_rate": 0.0018526124086,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 76
    },
    "1560": {
      "batch_size": 945,
      "lambda_value": 0.1704034583682,
      "learning_rate": 0.0019936209577,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 361
    },
    "1561": {
      "batch_size": 590,
      "lambda_value": 0.6185861315721,
      "learning_rate": 0.0017548779046,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "1562": {
      "batch_size": 955,
      "lambda_value": 0.0770654498686,
      "learning_rate": 0.0634248915656,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "1563": {
      "batch_size": 192,
      "lambda_value": 0.95457192386,
      "learning_rate": 0.0003959414443,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 127
    },
    "1564": {
      "batch_size": 48,
      "lambda_value": 0.1025024170447,
      "learning_rate": 0.0165739675339,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 140
    },
    "1565": {
      "batch_size": 335,
      "lambda_value": 0.8973148111017,
      "learning_rate": 0.0465084266817,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 184
    },
    "1566": {
      "batch_size": 126,
      "lambda_value": 0.9480949922325,
      "learning_rate": 0.0444912608839,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 68
    },
    "1567": {
      "batch_size": 502,
      "lambda_value": 0.519046148856,
      "learning_rate": 0.0023135634795,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 293
    },
    "1568": {
      "batch_size": 210,
      "lambda_value": 0.2470207227723,
      "learning_rate": 0.0012654597197,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 474
    },
    "1569": {
      "batch_size": 54,
      "lambda_value": 0.5711813196552,
      "learning_rate": 0.0531131561236,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 67
    },
    "1570": {
      "batch_size": 726,
      "lambda_value": 0.5141823519903,
      "learning_rate": 0.0793043721491,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 598
    },
    "1571": {
      "batch_size": 524,
      "lambda_value": 0.1246681485947,
      "learning_rate": 0.0006121425146,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 223
    },
    "1572": {
      "batch_size": 254,
      "lambda_value": 0.6550698386615,
      "learning_rate": 0.00014237082,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 179
    },
    "1573": {
      "batch_size": 177,
      "lambda_value": 0.8868073734346,
      "learning_rate": 0.0016466507568,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 136
    },
    "1574": {
      "batch_size": 610,
      "lambda_value": 0.02214656407,
      "learning_rate": 0.087179125514,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "1575": {
      "batch_size": 280,
      "lambda_value": 0.1451903611646,
      "learning_rate": 0.0452616389641,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "1576": {
      "batch_size": 281,
      "lambda_value": 0.1785159969521,
      "learning_rate": 0.0225593431388,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 728
    },
    "1577": {
      "batch_size": 42,
      "lambda_value": 0.2249441083873,
      "learning_rate": 0.0318387200677,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 157
    },
    "1578": {
      "batch_size": 639,
      "lambda_value": 0.1515837398594,
      "learning_rate": 0.0013979843552,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "1579": {
      "batch_size": 416,
      "lambda_value": 0.9106364656876,
      "learning_rate": 0.0007019269252,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 307
    },
    "1580": {
      "batch_size": 693,
      "lambda_value": 0.4966296154117,
      "learning_rate": 0.0011196313746,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 934
    },
    "1581": {
      "batch_size": 831,
      "lambda_value": 0.2405195075851,
      "learning_rate": 0.0009537728976,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 393
    },
    "1582": {
      "batch_size": 248,
      "lambda_value": 0.5148913531682,
      "learning_rate": 0.0006008175906,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 184
    },
    "1583": {
      "batch_size": 68,
      "lambda_value": 0.952998229064,
      "learning_rate": 0.0015067416588,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 376
    },
    "1584": {
      "batch_size": 248,
      "lambda_value": 0.0287204365633,
      "learning_rate": 0.0771477492171,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 83
    },
    "1585": {
      "batch_size": 560,
      "lambda_value": 0.7762424542901,
      "learning_rate": 0.0037810148605,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 416
    },
    "1586": {
      "batch_size": 371,
      "lambda_value": 0.0930745469037,
      "learning_rate": 0.0006789188064,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "1587": {
      "batch_size": 37,
      "lambda_value": 0.6670283971767,
      "learning_rate": 0.0696979691392,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 420
    },
    "1588": {
      "batch_size": 80,
      "lambda_value": 0.652364458431,
      "learning_rate": 0.0103595805087,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 507
    },
    "1589": {
      "batch_size": 126,
      "lambda_value": 0.1245107057441,
      "learning_rate": 0.0178036291203,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 180
    },
    "1590": {
      "batch_size": 142,
      "lambda_value": 0.7506682018008,
      "learning_rate": 0.0416807261228,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 602
    },
    "1591": {
      "batch_size": 97,
      "lambda_value": 0.2051367903944,
      "learning_rate": 0.0183199841675,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 132
    },
    "1592": {
      "batch_size": 775,
      "lambda_value": 0.6718596646935,
      "learning_rate": 0.0221104866567,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 160
    },
    "1593": {
      "batch_size": 800,
      "lambda_value": 0.0716579555456,
      "learning_rate": 0.0003729150427,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 265
    },
    "1594": {
      "batch_size": 890,
      "lambda_value": 0.026889545542,
      "learning_rate": 0.0012916739063,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 200
    },
    "1595": {
      "batch_size": 426,
      "lambda_value": 0.7768613004261,
      "learning_rate": 0.0009465150402,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 270
    },
    "1596": {
      "batch_size": 571,
      "lambda_value": 0.3674650092694,
      "learning_rate": 0.0993831837989,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 111
    },
    "1597": {
      "batch_size": 459,
      "lambda_value": 0.9012433794085,
      "learning_rate": 0.0140120748894,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 120
    },
    "1598": {
      "batch_size": 34,
      "lambda_value": 0.6124199042013,
      "learning_rate": 0.0001067517209,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 237
    },
    "1599": {
      "batch_size": 984,
      "lambda_value": 0.9706345017305,
      "learning_rate": 0.0003363977567,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "1600": {
      "batch_size": 480,
      "lambda_value": 0.6406511988051,
      "learning_rate": 0.0009062590989,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 579
    },
    "1601": {
      "batch_size": 617,
      "lambda_value": 0.3510261976853,
      "learning_rate": 0.0290663855457,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 77
    },
    "1602": {
      "batch_size": 409,
      "lambda_value": 0.3567831324843,
      "learning_rate": 0.0074790736172,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 184
    },
    "1603": {
      "batch_size": 48,
      "lambda_value": 0.863995151642,
      "learning_rate": 0.0030889061322,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 186
    },
    "1604": {
      "batch_size": 912,
      "lambda_value": 0.8014855558094,
      "learning_rate": 0.0028190487773,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 115
    },
    "1605": {
      "batch_size": 792,
      "lambda_value": 0.124108829316,
      "learning_rate": 0.0824295909393,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 717
    },
    "1606": {
      "batch_size": 519,
      "lambda_value": 0.8353045656862,
      "learning_rate": 0.0005269812376,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 222
    },
    "1607": {
      "batch_size": 42,
      "lambda_value": 0.9655988838712,
      "learning_rate": 0.0011468416991,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 513
    },
    "1608": {
      "batch_size": 124,
      "lambda_value": 0.6923981164717,
      "learning_rate": 0.0014083905165,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "1609": {
      "batch_size": 527,
      "lambda_value": 0.1477564669903,
      "learning_rate": 0.0008267392636,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 729
    },
    "1610": {
      "batch_size": 807,
      "lambda_value": 0.1245678495489,
      "learning_rate": 0.0587048125228,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 790
    },
    "1611": {
      "batch_size": 251,
      "lambda_value": 0.6729160170004,
      "learning_rate": 0.0065362498002,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 685
    },
    "1612": {
      "batch_size": 55,
      "lambda_value": 0.8742222462047,
      "learning_rate": 0.0001486012479,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 162
    },
    "1613": {
      "batch_size": 804,
      "lambda_value": 0.0482123893527,
      "learning_rate": 0.0389334304877,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 397
    },
    "1614": {
      "batch_size": 74,
      "lambda_value": 0.0243599966944,
      "learning_rate": 0.0054158719878,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "1615": {
      "batch_size": 84,
      "lambda_value": 0.171445849391,
      "learning_rate": 0.0004134193729,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 150
    },
    "1616": {
      "batch_size": 942,
      "lambda_value": 0.9092802561641,
      "learning_rate": 0.0089401103005,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 79
    },
    "1617": {
      "batch_size": 79,
      "lambda_value": 0.8919491978283,
      "learning_rate": 0.0368730410618,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 257
    },
    "1618": {
      "batch_size": 123,
      "lambda_value": 0.0189522012228,
      "learning_rate": 0.0571324812852,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 73
    },
    "1619": {
      "batch_size": 709,
      "lambda_value": 0.1062013284409,
      "learning_rate": 0.0008956326997,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 99
    },
    "1620": {
      "batch_size": 502,
      "lambda_value": 0.5366875070621,
      "learning_rate": 0.00172805327,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 185
    },
    "1621": {
      "batch_size": 729,
      "lambda_value": 0.95493086855,
      "learning_rate": 0.0009762169349,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "1622": {
      "batch_size": 40,
      "lambda_value": 0.9642275410814,
      "learning_rate": 0.0467476371437,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 654
    },
    "1623": {
      "batch_size": 410,
      "lambda_value": 0.0220468430824,
      "learning_rate": 0.0010394377839,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 85
    },
    "1624": {
      "batch_size": 683,
      "lambda_value": 0.2429626302508,
      "learning_rate": 0.000130125442,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 710
    },
    "1625": {
      "batch_size": 575,
      "lambda_value": 0.6767655258352,
      "learning_rate": 0.0004400515194,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 425
    },
    "1626": {
      "batch_size": 976,
      "lambda_value": 0.9439920335729,
      "learning_rate": 0.0011168212165,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 276
    },
    "1627": {
      "batch_size": 703,
      "lambda_value": 0.5123308962589,
      "learning_rate": 0.006892886494,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 559
    },
    "1628": {
      "batch_size": 382,
      "lambda_value": 0.3857466387798,
      "learning_rate": 0.0001386969451,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 91
    },
    "1629": {
      "batch_size": 51,
      "lambda_value": 0.0642726691286,
      "learning_rate": 0.0005223566126,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 468
    },
    "1630": {
      "batch_size": 565,
      "lambda_value": 0.6256571827758,
      "learning_rate": 0.0003197754135,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 338
    },
    "1631": {
      "batch_size": 64,
      "lambda_value": 0.3897604325551,
      "learning_rate": 0.0231881930375,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 64
    },
    "1632": {
      "batch_size": 611,
      "lambda_value": 0.5581065134392,
      "learning_rate": 0.0057415299531,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 473
    },
    "1633": {
      "batch_size": 372,
      "lambda_value": 0.2905226050849,
      "learning_rate": 0.000130778578,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 106
    },
    "1634": {
      "batch_size": 211,
      "lambda_value": 0.6013445788905,
      "learning_rate": 0.0006269275102,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 142
    },
    "1635": {
      "batch_size": 151,
      "lambda_value": 0.1551545162717,
      "learning_rate": 0.028085957764,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "1636": {
      "batch_size": 266,
      "lambda_value": 0.0974652969089,
      "learning_rate": 0.0074173063783,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 726
    },
    "1637": {
      "batch_size": 620,
      "lambda_value": 0.2587772870146,
      "learning_rate": 0.0013231483721,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "1638": {
      "batch_size": 714,
      "lambda_value": 0.4726082364669,
      "learning_rate": 0.0018362512111,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 974
    },
    "1639": {
      "batch_size": 742,
      "lambda_value": 0.1223197455845,
      "learning_rate": 0.0001437501712,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 91
    },
    "1640": {
      "batch_size": 49,
      "lambda_value": 0.4384470720049,
      "learning_rate": 0.0052499173003,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 303
    },
    "1641": {
      "batch_size": 759,
      "lambda_value": 0.4265259549998,
      "learning_rate": 0.0002376566895,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 231
    },
    "1642": {
      "batch_size": 611,
      "lambda_value": 0.1189105850463,
      "learning_rate": 0.0508281850381,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 422
    },
    "1643": {
      "batch_size": 936,
      "lambda_value": 0.17317810903,
      "learning_rate": 0.000418807821,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 853
    },
    "1644": {
      "batch_size": 126,
      "lambda_value": 0.278145017489,
      "learning_rate": 0.0001385655718,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 66
    },
    "1645": {
      "batch_size": 97,
      "lambda_value": 0.2712906367738,
      "learning_rate": 0.0009793904467,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 272
    },
    "1646": {
      "batch_size": 353,
      "lambda_value": 0.5468842897656,
      "learning_rate": 0.015606905797,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 322
    },
    "1647": {
      "batch_size": 534,
      "lambda_value": 0.4126903169257,
      "learning_rate": 0.0002752568823,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 214
    },
    "1648": {
      "batch_size": 543,
      "lambda_value": 0.1295616467672,
      "learning_rate": 0.0001775512858,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 560
    },
    "1649": {
      "batch_size": 674,
      "lambda_value": 0.2088509674861,
      "learning_rate": 0.0007289569405,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 254
    },
    "1650": {
      "batch_size": 724,
      "lambda_value": 0.2884501621277,
      "learning_rate": 0.005069959133,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "1651": {
      "batch_size": 45,
      "lambda_value": 0.4451308542986,
      "learning_rate": 0.0411036403283,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "1652": {
      "batch_size": 282,
      "lambda_value": 0.1310948704637,
      "learning_rate": 0.0672546169663,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "1653": {
      "batch_size": 853,
      "lambda_value": 0.0701971580605,
      "learning_rate": 0.0001418424312,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 258
    },
    "1654": {
      "batch_size": 448,
      "lambda_value": 0.4443971604887,
      "learning_rate": 0.0007483786898,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 89
    },
    "1655": {
      "batch_size": 547,
      "lambda_value": 0.6366806565111,
      "learning_rate": 0.0447011667852,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 447
    },
    "1656": {
      "batch_size": 571,
      "lambda_value": 0.7405371298554,
      "learning_rate": 0.0078407453615,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 561
    },
    "1657": {
      "batch_size": 933,
      "lambda_value": 0.8830059798555,
      "learning_rate": 0.0468461430508,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 152
    },
    "1658": {
      "batch_size": 381,
      "lambda_value": 0.5848111922799,
      "learning_rate": 0.0010312875368,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 116
    },
    "1659": {
      "batch_size": 38,
      "lambda_value": 0.7705088377031,
      "learning_rate": 0.0006989063374,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 411
    },
    "1660": {
      "batch_size": 885,
      "lambda_value": 0.6263907194454,
      "learning_rate": 0.002134335698,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 510
    },
    "1661": {
      "batch_size": 272,
      "lambda_value": 0.7317501266481,
      "learning_rate": 0.0011464014324,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 73
    },
    "1662": {
      "batch_size": 110,
      "lambda_value": 0.8814967603886,
      "learning_rate": 0.0005820066291,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 70
    },
    "1663": {
      "batch_size": 522,
      "lambda_value": 0.663514035286,
      "learning_rate": 0.000103468865,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "1664": {
      "batch_size": 118,
      "lambda_value": 0.6488624722227,
      "learning_rate": 0.0005688211075,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 199
    }
  },
  "config_origins": {
    "1": "Initial Design: Sobol",
    "2": "Initial Design: Sobol",
    "3": "Initial Design: Sobol",
    "4": "Initial Design: Sobol",
    "5": "Initial Design: Sobol",
    "6": "Acquisition Function Maximizer: Local Search",
    "7": "Acquisition Function Maximizer: Local Search",
    "8": "Acquisition Function Maximizer: Local Search",
    "9": "Acquisition Function Maximizer: Local Search",
    "10": "Acquisition Function Maximizer: Local Search",
    "11": "Acquisition Function Maximizer: Local Search",
    "12": "Acquisition Function Maximizer: Local Search",
    "13": "Acquisition Function Maximizer: Local Search",
    "14": "Acquisition Function Maximizer: Local Search",
    "15": "Acquisition Function Maximizer: Local Search",
    "16": "Acquisition Function Maximizer: Local Search",
    "17": "Acquisition Function Maximizer: Local Search",
    "18": "Acquisition Function Maximizer: Local Search",
    "19": "Acquisition Function Maximizer: Local Search",
    "20": "Random Search",
    "21": "Random Search",
    "22": "Random Search",
    "23": "Acquisition Function Maximizer: Local Search",
    "24": "Acquisition Function Maximizer: Local Search",
    "25": "Acquisition Function Maximizer: Local Search",
    "26": "Acquisition Function Maximizer: Local Search",
    "27": "Acquisition Function Maximizer: Local Search",
    "28": "Acquisition Function Maximizer: Local Search",
    "29": "Acquisition Function Maximizer: Local Search",
    "30": "Random Search",
    "31": "Acquisition Function Maximizer: Local Search",
    "32": "Random Search",
    "33": "Acquisition Function Maximizer: Local Search",
    "34": "Acquisition Function Maximizer: Local Search",
    "35": "Acquisition Function Maximizer: Local Search",
    "36": "Acquisition Function Maximizer: Local Search",
    "37": "Acquisition Function Maximizer: Local Search",
    "38": "Acquisition Function Maximizer: Local Search",
    "39": "Acquisition Function Maximizer: Local Search",
    "40": "Random Search",
    "41": "Acquisition Function Maximizer: Local Search",
    "42": "Acquisition Function Maximizer: Local Search",
    "43": "Acquisition Function Maximizer: Local Search",
    "44": "Acquisition Function Maximizer: Local Search",
    "45": "Acquisition Function Maximizer: Local Search",
    "46": "Acquisition Function Maximizer: Local Search",
    "47": "Acquisition Function Maximizer: Local Search",
    "48": "Acquisition Function Maximizer: Local Search",
    "49": "Random Search",
    "50": "Acquisition Function Maximizer: Local Search",
    "51": "Acquisition Function Maximizer: Local Search",
    "52": "Acquisition Function Maximizer: Local Search",
    "53": "Random Search",
    "54": "Acquisition Function Maximizer: Local Search",
    "55": "Acquisition Function Maximizer: Local Search",
    "56": "Acquisition Function Maximizer: Local Search",
    "57": "Acquisition Function Maximizer: Local Search",
    "58": "Acquisition Function Maximizer: Local Search",
    "59": "Random Search",
    "60": "Acquisition Function Maximizer: Local Search",
    "61": "Random Search",
    "62": "Acquisition Function Maximizer: Local Search",
    "63": "Acquisition Function Maximizer: Local Search",
    "64": "Acquisition Function Maximizer: Local Search",
    "65": "Acquisition Function Maximizer: Local Search",
    "66": "Random Search",
    "67": "Random Search",
    "68": "Acquisition Function Maximizer: Local Search",
    "69": "Random Search",
    "70": "Random Search",
    "71": "Acquisition Function Maximizer: Local Search",
    "72": "Acquisition Function Maximizer: Local Search",
    "73": "Random Search",
    "74": "Acquisition Function Maximizer: Local Search",
    "75": "Random Search",
    "76": "Acquisition Function Maximizer: Local Search",
    "77": "Acquisition Function Maximizer: Local Search",
    "78": "Acquisition Function Maximizer: Local Search",
    "79": "Acquisition Function Maximizer: Local Search",
    "80": "Acquisition Function Maximizer: Local Search",
    "81": "Random Search",
    "82": "Acquisition Function Maximizer: Local Search",
    "83": "Random Search",
    "84": "Acquisition Function Maximizer: Local Search",
    "85": "Random Search",
    "86": "Acquisition Function Maximizer: Local Search",
    "87": "Acquisition Function Maximizer: Local Search",
    "88": "Random Search",
    "89": "Acquisition Function Maximizer: Local Search",
    "90": "Acquisition Function Maximizer: Local Search",
    "91": "Acquisition Function Maximizer: Local Search",
    "92": "Acquisition Function Maximizer: Local Search",
    "93": "Random Search",
    "94": "Acquisition Function Maximizer: Local Search",
    "95": "Acquisition Function Maximizer: Local Search",
    "96": "Acquisition Function Maximizer: Local Search",
    "97": "Acquisition Function Maximizer: Local Search",
    "98": "Random Search",
    "99": "Acquisition Function Maximizer: Local Search",
    "100": "Acquisition Function Maximizer: Local Search",
    "101": "Random Search",
    "102": "Acquisition Function Maximizer: Local Search",
    "103": "Random Search",
    "104": "Acquisition Function Maximizer: Local Search",
    "105": "Random Search",
    "106": "Acquisition Function Maximizer: Local Search",
    "107": "Acquisition Function Maximizer: Local Search",
    "108": "Acquisition Function Maximizer: Local Search",
    "109": "Acquisition Function Maximizer: Local Search",
    "110": "Acquisition Function Maximizer: Local Search",
    "111": "Acquisition Function Maximizer: Local Search",
    "112": "Acquisition Function Maximizer: Local Search",
    "113": "Acquisition Function Maximizer: Local Search",
    "114": "Acquisition Function Maximizer: Local Search",
    "115": "Acquisition Function Maximizer: Local Search",
    "116": "Acquisition Function Maximizer: Local Search",
    "117": "Acquisition Function Maximizer: Local Search",
    "118": "Acquisition Function Maximizer: Local Search",
    "119": "Acquisition Function Maximizer: Local Search",
    "120": "Acquisition Function Maximizer: Local Search",
    "121": "Acquisition Function Maximizer: Local Search",
    "122": "Acquisition Function Maximizer: Local Search",
    "123": "Acquisition Function Maximizer: Local Search",
    "124": "Acquisition Function Maximizer: Local Search",
    "125": "Acquisition Function Maximizer: Local Search",
    "126": "Acquisition Function Maximizer: Local Search",
    "127": "Acquisition Function Maximizer: Local Search",
    "128": "Acquisition Function Maximizer: Local Search",
    "129": "Acquisition Function Maximizer: Local Search",
    "130": "Acquisition Function Maximizer: Local Search",
    "131": "Acquisition Function Maximizer: Local Search",
    "132": "Random Search",
    "133": "Acquisition Function Maximizer: Local Search",
    "134": "Acquisition Function Maximizer: Local Search",
    "135": "Acquisition Function Maximizer: Local Search",
    "136": "Acquisition Function Maximizer: Local Search",
    "137": "Acquisition Function Maximizer: Local Search",
    "138": "Random Search",
    "139": "Acquisition Function Maximizer: Local Search",
    "140": "Acquisition Function Maximizer: Local Search",
    "141": "Acquisition Function Maximizer: Local Search",
    "142": "Acquisition Function Maximizer: Local Search",
    "143": "Acquisition Function Maximizer: Local Search",
    "144": "Acquisition Function Maximizer: Local Search",
    "145": "Acquisition Function Maximizer: Local Search",
    "146": "Acquisition Function Maximizer: Local Search",
    "147": "Acquisition Function Maximizer: Local Search",
    "148": "Acquisition Function Maximizer: Local Search",
    "149": "Acquisition Function Maximizer: Local Search",
    "150": "Acquisition Function Maximizer: Local Search",
    "151": "Acquisition Function Maximizer: Local Search",
    "152": "Random Search",
    "153": "Acquisition Function Maximizer: Local Search",
    "154": "Acquisition Function Maximizer: Local Search",
    "155": "Acquisition Function Maximizer: Local Search",
    "156": "Random Search",
    "157": "Acquisition Function Maximizer: Local Search",
    "158": "Random Search",
    "159": "Acquisition Function Maximizer: Local Search",
    "160": "Random Search",
    "161": "Acquisition Function Maximizer: Local Search",
    "162": "Acquisition Function Maximizer: Local Search",
    "163": "Acquisition Function Maximizer: Local Search",
    "164": "Acquisition Function Maximizer: Local Search",
    "165": "Random Search",
    "166": "Acquisition Function Maximizer: Local Search",
    "167": "Acquisition Function Maximizer: Local Search",
    "168": "Acquisition Function Maximizer: Local Search",
    "169": "Acquisition Function Maximizer: Local Search",
    "170": "Acquisition Function Maximizer: Local Search",
    "171": "Acquisition Function Maximizer: Local Search",
    "172": "Random Search",
    "173": "Acquisition Function Maximizer: Local Search",
    "174": "Acquisition Function Maximizer: Local Search",
    "175": "Random Search",
    "176": "Acquisition Function Maximizer: Local Search",
    "177": "Random Search",
    "178": "Random Search",
    "179": "Random Search",
    "180": "Acquisition Function Maximizer: Local Search",
    "181": "Acquisition Function Maximizer: Local Search",
    "182": "Acquisition Function Maximizer: Local Search",
    "183": "Acquisition Function Maximizer: Local Search",
    "184": "Acquisition Function Maximizer: Local Search",
    "185": "Random Search",
    "186": "Random Search",
    "187": "Acquisition Function Maximizer: Local Search",
    "188": "Acquisition Function Maximizer: Local Search",
    "189": "Acquisition Function Maximizer: Local Search",
    "190": "Acquisition Function Maximizer: Local Search",
    "191": "Acquisition Function Maximizer: Local Search",
    "192": "Acquisition Function Maximizer: Local Search",
    "193": "Acquisition Function Maximizer: Local Search",
    "194": "Acquisition Function Maximizer: Local Search",
    "195": "Acquisition Function Maximizer: Local Search",
    "196": "Acquisition Function Maximizer: Local Search",
    "197": "Acquisition Function Maximizer: Local Search",
    "198": "Random Search",
    "199": "Acquisition Function Maximizer: Local Search",
    "200": "Acquisition Function Maximizer: Local Search",
    "201": "Acquisition Function Maximizer: Local Search",
    "202": "Acquisition Function Maximizer: Local Search",
    "203": "Acquisition Function Maximizer: Local Search",
    "204": "Random Search",
    "205": "Acquisition Function Maximizer: Local Search",
    "206": "Acquisition Function Maximizer: Local Search",
    "207": "Acquisition Function Maximizer: Local Search",
    "208": "Acquisition Function Maximizer: Local Search",
    "209": "Random Search",
    "210": "Random Search",
    "211": "Random Search",
    "212": "Acquisition Function Maximizer: Local Search",
    "213": "Acquisition Function Maximizer: Local Search",
    "214": "Acquisition Function Maximizer: Local Search",
    "215": "Acquisition Function Maximizer: Local Search",
    "216": "Acquisition Function Maximizer: Local Search",
    "217": "Acquisition Function Maximizer: Local Search",
    "218": "Acquisition Function Maximizer: Local Search",
    "219": "Acquisition Function Maximizer: Local Search",
    "220": "Random Search",
    "221": "Acquisition Function Maximizer: Local Search",
    "222": "Acquisition Function Maximizer: Local Search",
    "223": "Acquisition Function Maximizer: Local Search",
    "224": "Acquisition Function Maximizer: Local Search",
    "225": "Acquisition Function Maximizer: Local Search",
    "226": "Acquisition Function Maximizer: Local Search",
    "227": "Acquisition Function Maximizer: Local Search",
    "228": "Acquisition Function Maximizer: Local Search",
    "229": "Acquisition Function Maximizer: Local Search",
    "230": "Random Search",
    "231": "Acquisition Function Maximizer: Local Search",
    "232": "Acquisition Function Maximizer: Local Search",
    "233": "Acquisition Function Maximizer: Local Search",
    "234": "Acquisition Function Maximizer: Local Search",
    "235": "Acquisition Function Maximizer: Local Search",
    "236": "Acquisition Function Maximizer: Local Search",
    "237": "Acquisition Function Maximizer: Local Search",
    "238": "Acquisition Function Maximizer: Local Search",
    "239": "Random Search",
    "240": "Acquisition Function Maximizer: Local Search",
    "241": "Acquisition Function Maximizer: Local Search",
    "242": "Acquisition Function Maximizer: Local Search",
    "243": "Acquisition Function Maximizer: Local Search",
    "244": "Acquisition Function Maximizer: Local Search",
    "245": "Acquisition Function Maximizer: Local Search",
    "246": "Acquisition Function Maximizer: Local Search",
    "247": "Random Search",
    "248": "Acquisition Function Maximizer: Local Search",
    "249": "Random Search",
    "250": "Acquisition Function Maximizer: Local Search",
    "251": "Acquisition Function Maximizer: Local Search",
    "252": "Acquisition Function Maximizer: Local Search",
    "253": "Random Search",
    "254": "Random Search",
    "255": "Acquisition Function Maximizer: Local Search",
    "256": "Acquisition Function Maximizer: Local Search",
    "257": "Acquisition Function Maximizer: Local Search",
    "258": "Acquisition Function Maximizer: Local Search",
    "259": "Acquisition Function Maximizer: Local Search",
    "260": "Acquisition Function Maximizer: Local Search",
    "261": "Random Search",
    "262": "Acquisition Function Maximizer: Local Search",
    "263": "Acquisition Function Maximizer: Local Search",
    "264": "Acquisition Function Maximizer: Local Search",
    "265": "Acquisition Function Maximizer: Local Search",
    "266": "Acquisition Function Maximizer: Local Search",
    "267": "Random Search",
    "268": "Random Search",
    "269": "Acquisition Function Maximizer: Local Search",
    "270": "Acquisition Function Maximizer: Local Search",
    "271": "Acquisition Function Maximizer: Local Search",
    "272": "Acquisition Function Maximizer: Local Search",
    "273": "Acquisition Function Maximizer: Local Search",
    "274": "Random Search",
    "275": "Acquisition Function Maximizer: Local Search",
    "276": "Acquisition Function Maximizer: Local Search",
    "277": "Acquisition Function Maximizer: Local Search",
    "278": "Acquisition Function Maximizer: Local Search",
    "279": "Acquisition Function Maximizer: Local Search",
    "280": "Acquisition Function Maximizer: Local Search",
    "281": "Acquisition Function Maximizer: Local Search",
    "282": "Acquisition Function Maximizer: Local Search",
    "283": "Acquisition Function Maximizer: Local Search",
    "284": "Acquisition Function Maximizer: Local Search",
    "285": "Acquisition Function Maximizer: Local Search",
    "286": "Acquisition Function Maximizer: Local Search",
    "287": "Acquisition Function Maximizer: Local Search",
    "288": "Acquisition Function Maximizer: Local Search",
    "289": "Random Search",
    "290": "Acquisition Function Maximizer: Local Search",
    "291": "Random Search",
    "292": "Acquisition Function Maximizer: Local Search",
    "293": "Acquisition Function Maximizer: Local Search",
    "294": "Acquisition Function Maximizer: Local Search",
    "295": "Acquisition Function Maximizer: Local Search",
    "296": "Acquisition Function Maximizer: Local Search",
    "297": "Random Search",
    "298": "Acquisition Function Maximizer: Local Search",
    "299": "Random Search",
    "300": "Acquisition Function Maximizer: Local Search",
    "301": "Acquisition Function Maximizer: Local Search",
    "302": "Random Search",
    "303": "Acquisition Function Maximizer: Local Search",
    "304": "Acquisition Function Maximizer: Local Search",
    "305": "Acquisition Function Maximizer: Local Search",
    "306": "Acquisition Function Maximizer: Local Search",
    "307": "Acquisition Function Maximizer: Local Search",
    "308": "Acquisition Function Maximizer: Local Search",
    "309": "Random Search",
    "310": "Acquisition Function Maximizer: Local Search",
    "311": "Acquisition Function Maximizer: Local Search",
    "312": "Random Search",
    "313": "Random Search",
    "314": "Acquisition Function Maximizer: Local Search",
    "315": "Random Search",
    "316": "Acquisition Function Maximizer: Local Search",
    "317": "Random Search",
    "318": "Random Search",
    "319": "Random Search",
    "320": "Acquisition Function Maximizer: Local Search",
    "321": "Acquisition Function Maximizer: Local Search",
    "322": "Acquisition Function Maximizer: Local Search",
    "323": "Acquisition Function Maximizer: Local Search",
    "324": "Acquisition Function Maximizer: Local Search",
    "325": "Acquisition Function Maximizer: Local Search",
    "326": "Acquisition Function Maximizer: Local Search",
    "327": "Random Search",
    "328": "Random Search",
    "329": "Acquisition Function Maximizer: Local Search",
    "330": "Acquisition Function Maximizer: Local Search",
    "331": "Acquisition Function Maximizer: Local Search",
    "332": "Acquisition Function Maximizer: Local Search",
    "333": "Acquisition Function Maximizer: Local Search",
    "334": "Acquisition Function Maximizer: Local Search",
    "335": "Acquisition Function Maximizer: Local Search",
    "336": "Random Search",
    "337": "Acquisition Function Maximizer: Local Search",
    "338": "Random Search",
    "339": "Acquisition Function Maximizer: Local Search",
    "340": "Acquisition Function Maximizer: Local Search",
    "341": "Acquisition Function Maximizer: Local Search",
    "342": "Acquisition Function Maximizer: Local Search",
    "343": "Acquisition Function Maximizer: Local Search",
    "344": "Acquisition Function Maximizer: Local Search",
    "345": "Acquisition Function Maximizer: Local Search",
    "346": "Acquisition Function Maximizer: Local Search",
    "347": "Random Search",
    "348": "Acquisition Function Maximizer: Local Search",
    "349": "Random Search",
    "350": "Acquisition Function Maximizer: Local Search",
    "351": "Random Search",
    "352": "Acquisition Function Maximizer: Local Search",
    "353": "Acquisition Function Maximizer: Local Search",
    "354": "Acquisition Function Maximizer: Local Search",
    "355": "Acquisition Function Maximizer: Local Search",
    "356": "Acquisition Function Maximizer: Local Search",
    "357": "Random Search",
    "358": "Acquisition Function Maximizer: Local Search",
    "359": "Acquisition Function Maximizer: Local Search",
    "360": "Acquisition Function Maximizer: Local Search",
    "361": "Acquisition Function Maximizer: Local Search",
    "362": "Acquisition Function Maximizer: Local Search",
    "363": "Random Search",
    "364": "Acquisition Function Maximizer: Local Search",
    "365": "Acquisition Function Maximizer: Local Search",
    "366": "Random Search",
    "367": "Acquisition Function Maximizer: Local Search",
    "368": "Acquisition Function Maximizer: Local Search",
    "369": "Acquisition Function Maximizer: Local Search",
    "370": "Acquisition Function Maximizer: Local Search",
    "371": "Acquisition Function Maximizer: Local Search",
    "372": "Acquisition Function Maximizer: Local Search",
    "373": "Acquisition Function Maximizer: Local Search",
    "374": "Acquisition Function Maximizer: Local Search",
    "375": "Acquisition Function Maximizer: Local Search",
    "376": "Acquisition Function Maximizer: Local Search",
    "377": "Acquisition Function Maximizer: Local Search",
    "378": "Acquisition Function Maximizer: Local Search",
    "379": "Acquisition Function Maximizer: Local Search",
    "380": "Acquisition Function Maximizer: Local Search",
    "381": "Random Search",
    "382": "Acquisition Function Maximizer: Local Search",
    "383": "Acquisition Function Maximizer: Local Search",
    "384": "Acquisition Function Maximizer: Local Search",
    "385": "Acquisition Function Maximizer: Local Search",
    "386": "Acquisition Function Maximizer: Local Search",
    "387": "Acquisition Function Maximizer: Local Search",
    "388": "Acquisition Function Maximizer: Local Search",
    "389": "Acquisition Function Maximizer: Local Search",
    "390": "Acquisition Function Maximizer: Local Search",
    "391": "Acquisition Function Maximizer: Local Search",
    "392": "Acquisition Function Maximizer: Local Search",
    "393": "Random Search",
    "394": "Acquisition Function Maximizer: Local Search",
    "395": "Acquisition Function Maximizer: Local Search",
    "396": "Random Search",
    "397": "Acquisition Function Maximizer: Local Search",
    "398": "Acquisition Function Maximizer: Local Search",
    "399": "Acquisition Function Maximizer: Local Search",
    "400": "Random Search",
    "401": "Acquisition Function Maximizer: Local Search",
    "402": "Acquisition Function Maximizer: Local Search",
    "403": "Acquisition Function Maximizer: Local Search",
    "404": "Random Search",
    "405": "Random Search",
    "406": "Acquisition Function Maximizer: Local Search",
    "407": "Acquisition Function Maximizer: Local Search",
    "408": "Random Search",
    "409": "Acquisition Function Maximizer: Local Search",
    "410": "Acquisition Function Maximizer: Local Search",
    "411": "Acquisition Function Maximizer: Local Search",
    "412": "Acquisition Function Maximizer: Local Search",
    "413": "Acquisition Function Maximizer: Local Search",
    "414": "Acquisition Function Maximizer: Local Search",
    "415": "Random Search",
    "416": "Random Search",
    "417": "Acquisition Function Maximizer: Local Search",
    "418": "Random Search",
    "419": "Acquisition Function Maximizer: Local Search",
    "420": "Acquisition Function Maximizer: Local Search",
    "421": "Acquisition Function Maximizer: Local Search",
    "422": "Random Search",
    "423": "Random Search",
    "424": "Random Search",
    "425": "Acquisition Function Maximizer: Local Search",
    "426": "Acquisition Function Maximizer: Local Search",
    "427": "Acquisition Function Maximizer: Local Search",
    "428": "Acquisition Function Maximizer: Local Search",
    "429": "Random Search",
    "430": "Acquisition Function Maximizer: Local Search",
    "431": "Acquisition Function Maximizer: Local Search",
    "432": "Acquisition Function Maximizer: Local Search",
    "433": "Random Search",
    "434": "Acquisition Function Maximizer: Local Search",
    "435": "Acquisition Function Maximizer: Local Search",
    "436": "Acquisition Function Maximizer: Local Search",
    "437": "Acquisition Function Maximizer: Local Search",
    "438": "Acquisition Function Maximizer: Local Search",
    "439": "Acquisition Function Maximizer: Local Search",
    "440": "Acquisition Function Maximizer: Local Search",
    "441": "Acquisition Function Maximizer: Local Search",
    "442": "Acquisition Function Maximizer: Local Search",
    "443": "Acquisition Function Maximizer: Local Search",
    "444": "Acquisition Function Maximizer: Local Search",
    "445": "Acquisition Function Maximizer: Local Search",
    "446": "Acquisition Function Maximizer: Local Search",
    "447": "Acquisition Function Maximizer: Local Search",
    "448": "Acquisition Function Maximizer: Local Search",
    "449": "Random Search",
    "450": "Acquisition Function Maximizer: Local Search",
    "451": "Acquisition Function Maximizer: Local Search",
    "452": "Acquisition Function Maximizer: Local Search",
    "453": "Acquisition Function Maximizer: Local Search",
    "454": "Acquisition Function Maximizer: Local Search",
    "455": "Acquisition Function Maximizer: Local Search",
    "456": "Acquisition Function Maximizer: Local Search",
    "457": "Acquisition Function Maximizer: Local Search",
    "458": "Acquisition Function Maximizer: Local Search",
    "459": "Random Search",
    "460": "Acquisition Function Maximizer: Local Search",
    "461": "Acquisition Function Maximizer: Local Search",
    "462": "Acquisition Function Maximizer: Local Search",
    "463": "Random Search",
    "464": "Acquisition Function Maximizer: Local Search",
    "465": "Acquisition Function Maximizer: Local Search",
    "466": "Acquisition Function Maximizer: Local Search",
    "467": "Acquisition Function Maximizer: Local Search",
    "468": "Acquisition Function Maximizer: Local Search",
    "469": "Acquisition Function Maximizer: Local Search",
    "470": "Acquisition Function Maximizer: Local Search",
    "471": "Random Search",
    "472": "Acquisition Function Maximizer: Local Search",
    "473": "Acquisition Function Maximizer: Local Search",
    "474": "Acquisition Function Maximizer: Local Search",
    "475": "Acquisition Function Maximizer: Local Search",
    "476": "Acquisition Function Maximizer: Local Search",
    "477": "Acquisition Function Maximizer: Local Search",
    "478": "Acquisition Function Maximizer: Local Search",
    "479": "Acquisition Function Maximizer: Local Search",
    "480": "Acquisition Function Maximizer: Local Search",
    "481": "Acquisition Function Maximizer: Local Search",
    "482": "Acquisition Function Maximizer: Local Search",
    "483": "Acquisition Function Maximizer: Local Search",
    "484": "Acquisition Function Maximizer: Local Search",
    "485": "Acquisition Function Maximizer: Local Search",
    "486": "Random Search",
    "487": "Acquisition Function Maximizer: Local Search",
    "488": "Random Search",
    "489": "Acquisition Function Maximizer: Local Search",
    "490": "Random Search",
    "491": "Acquisition Function Maximizer: Local Search",
    "492": "Acquisition Function Maximizer: Local Search",
    "493": "Acquisition Function Maximizer: Local Search",
    "494": "Acquisition Function Maximizer: Local Search",
    "495": "Acquisition Function Maximizer: Local Search",
    "496": "Acquisition Function Maximizer: Local Search",
    "497": "Acquisition Function Maximizer: Local Search",
    "498": "Acquisition Function Maximizer: Local Search",
    "499": "Acquisition Function Maximizer: Local Search",
    "500": "Acquisition Function Maximizer: Local Search",
    "501": "Acquisition Function Maximizer: Local Search",
    "502": "Acquisition Function Maximizer: Local Search",
    "503": "Acquisition Function Maximizer: Local Search",
    "504": "Acquisition Function Maximizer: Local Search",
    "505": "Acquisition Function Maximizer: Local Search",
    "506": "Acquisition Function Maximizer: Local Search",
    "507": "Acquisition Function Maximizer: Local Search",
    "508": "Acquisition Function Maximizer: Local Search",
    "509": "Acquisition Function Maximizer: Local Search",
    "510": "Acquisition Function Maximizer: Local Search",
    "511": "Acquisition Function Maximizer: Local Search",
    "512": "Acquisition Function Maximizer: Local Search",
    "513": "Random Search",
    "514": "Acquisition Function Maximizer: Local Search",
    "515": "Acquisition Function Maximizer: Local Search",
    "516": "Random Search",
    "517": "Acquisition Function Maximizer: Local Search",
    "518": "Acquisition Function Maximizer: Local Search",
    "519": "Acquisition Function Maximizer: Local Search",
    "520": "Acquisition Function Maximizer: Local Search",
    "521": "Acquisition Function Maximizer: Local Search",
    "522": "Acquisition Function Maximizer: Local Search",
    "523": "Acquisition Function Maximizer: Local Search",
    "524": "Acquisition Function Maximizer: Local Search",
    "525": "Acquisition Function Maximizer: Local Search",
    "526": "Acquisition Function Maximizer: Local Search",
    "527": "Acquisition Function Maximizer: Local Search",
    "528": "Random Search",
    "529": "Acquisition Function Maximizer: Local Search",
    "530": "Random Search",
    "531": "Acquisition Function Maximizer: Local Search",
    "532": "Acquisition Function Maximizer: Local Search",
    "533": "Acquisition Function Maximizer: Local Search",
    "534": "Random Search",
    "535": "Acquisition Function Maximizer: Local Search",
    "536": "Random Search",
    "537": "Acquisition Function Maximizer: Local Search",
    "538": "Acquisition Function Maximizer: Local Search",
    "539": "Acquisition Function Maximizer: Local Search",
    "540": "Acquisition Function Maximizer: Local Search",
    "541": "Random Search",
    "542": "Acquisition Function Maximizer: Local Search",
    "543": "Acquisition Function Maximizer: Local Search",
    "544": "Acquisition Function Maximizer: Local Search",
    "545": "Acquisition Function Maximizer: Local Search",
    "546": "Random Search",
    "547": "Acquisition Function Maximizer: Local Search",
    "548": "Acquisition Function Maximizer: Local Search",
    "549": "Acquisition Function Maximizer: Local Search",
    "550": "Acquisition Function Maximizer: Local Search",
    "551": "Random Search",
    "552": "Acquisition Function Maximizer: Local Search",
    "553": "Acquisition Function Maximizer: Local Search",
    "554": "Acquisition Function Maximizer: Local Search",
    "555": "Acquisition Function Maximizer: Local Search",
    "556": "Acquisition Function Maximizer: Local Search",
    "557": "Random Search",
    "558": "Acquisition Function Maximizer: Local Search",
    "559": "Acquisition Function Maximizer: Local Search",
    "560": "Acquisition Function Maximizer: Local Search",
    "561": "Random Search",
    "562": "Acquisition Function Maximizer: Local Search",
    "563": "Acquisition Function Maximizer: Local Search",
    "564": "Acquisition Function Maximizer: Local Search",
    "565": "Acquisition Function Maximizer: Local Search",
    "566": "Acquisition Function Maximizer: Local Search",
    "567": "Random Search",
    "568": "Acquisition Function Maximizer: Local Search",
    "569": "Acquisition Function Maximizer: Local Search",
    "570": "Acquisition Function Maximizer: Local Search",
    "571": "Acquisition Function Maximizer: Local Search",
    "572": "Acquisition Function Maximizer: Local Search",
    "573": "Acquisition Function Maximizer: Local Search",
    "574": "Acquisition Function Maximizer: Local Search",
    "575": "Acquisition Function Maximizer: Local Search",
    "576": "Acquisition Function Maximizer: Local Search",
    "577": "Random Search",
    "578": "Random Search",
    "579": "Acquisition Function Maximizer: Local Search",
    "580": "Acquisition Function Maximizer: Local Search",
    "581": "Acquisition Function Maximizer: Local Search",
    "582": "Random Search",
    "583": "Acquisition Function Maximizer: Local Search",
    "584": "Acquisition Function Maximizer: Local Search",
    "585": "Acquisition Function Maximizer: Local Search",
    "586": "Random Search",
    "587": "Acquisition Function Maximizer: Local Search",
    "588": "Acquisition Function Maximizer: Local Search",
    "589": "Random Search",
    "590": "Acquisition Function Maximizer: Local Search",
    "591": "Acquisition Function Maximizer: Local Search",
    "592": "Random Search",
    "593": "Random Search",
    "594": "Random Search",
    "595": "Acquisition Function Maximizer: Local Search",
    "596": "Acquisition Function Maximizer: Local Search",
    "597": "Acquisition Function Maximizer: Local Search",
    "598": "Acquisition Function Maximizer: Local Search",
    "599": "Acquisition Function Maximizer: Local Search",
    "600": "Acquisition Function Maximizer: Local Search",
    "601": "Acquisition Function Maximizer: Local Search",
    "602": "Acquisition Function Maximizer: Local Search",
    "603": "Acquisition Function Maximizer: Local Search",
    "604": "Acquisition Function Maximizer: Local Search",
    "605": "Acquisition Function Maximizer: Local Search",
    "606": "Random Search",
    "607": "Acquisition Function Maximizer: Local Search",
    "608": "Acquisition Function Maximizer: Local Search",
    "609": "Random Search",
    "610": "Acquisition Function Maximizer: Local Search",
    "611": "Acquisition Function Maximizer: Local Search",
    "612": "Acquisition Function Maximizer: Local Search",
    "613": "Acquisition Function Maximizer: Local Search",
    "614": "Acquisition Function Maximizer: Local Search",
    "615": "Acquisition Function Maximizer: Local Search",
    "616": "Acquisition Function Maximizer: Local Search",
    "617": "Acquisition Function Maximizer: Local Search",
    "618": "Acquisition Function Maximizer: Local Search",
    "619": "Random Search",
    "620": "Random Search",
    "621": "Acquisition Function Maximizer: Local Search",
    "622": "Acquisition Function Maximizer: Local Search",
    "623": "Acquisition Function Maximizer: Local Search",
    "624": "Acquisition Function Maximizer: Local Search",
    "625": "Acquisition Function Maximizer: Local Search",
    "626": "Acquisition Function Maximizer: Local Search",
    "627": "Acquisition Function Maximizer: Local Search",
    "628": "Acquisition Function Maximizer: Local Search",
    "629": "Acquisition Function Maximizer: Local Search",
    "630": "Acquisition Function Maximizer: Local Search",
    "631": "Acquisition Function Maximizer: Local Search",
    "632": "Acquisition Function Maximizer: Local Search",
    "633": "Acquisition Function Maximizer: Local Search",
    "634": "Acquisition Function Maximizer: Local Search",
    "635": "Random Search",
    "636": "Random Search",
    "637": "Acquisition Function Maximizer: Local Search",
    "638": "Acquisition Function Maximizer: Local Search",
    "639": "Acquisition Function Maximizer: Local Search",
    "640": "Acquisition Function Maximizer: Local Search",
    "641": "Acquisition Function Maximizer: Local Search",
    "642": "Random Search",
    "643": "Random Search",
    "644": "Acquisition Function Maximizer: Local Search",
    "645": "Acquisition Function Maximizer: Local Search",
    "646": "Acquisition Function Maximizer: Local Search",
    "647": "Acquisition Function Maximizer: Local Search",
    "648": "Acquisition Function Maximizer: Local Search",
    "649": "Acquisition Function Maximizer: Local Search",
    "650": "Acquisition Function Maximizer: Local Search",
    "651": "Random Search",
    "652": "Acquisition Function Maximizer: Local Search",
    "653": "Acquisition Function Maximizer: Local Search",
    "654": "Acquisition Function Maximizer: Local Search",
    "655": "Random Search",
    "656": "Acquisition Function Maximizer: Local Search",
    "657": "Acquisition Function Maximizer: Local Search",
    "658": "Acquisition Function Maximizer: Local Search",
    "659": "Random Search",
    "660": "Acquisition Function Maximizer: Local Search",
    "661": "Random Search",
    "662": "Acquisition Function Maximizer: Local Search",
    "663": "Random Search",
    "664": "Acquisition Function Maximizer: Local Search",
    "665": "Acquisition Function Maximizer: Local Search",
    "666": "Acquisition Function Maximizer: Local Search",
    "667": "Acquisition Function Maximizer: Local Search",
    "668": "Random Search",
    "669": "Acquisition Function Maximizer: Local Search",
    "670": "Acquisition Function Maximizer: Local Search",
    "671": "Acquisition Function Maximizer: Local Search",
    "672": "Acquisition Function Maximizer: Local Search",
    "673": "Acquisition Function Maximizer: Local Search",
    "674": "Acquisition Function Maximizer: Local Search",
    "675": "Acquisition Function Maximizer: Local Search",
    "676": "Acquisition Function Maximizer: Local Search",
    "677": "Acquisition Function Maximizer: Local Search",
    "678": "Acquisition Function Maximizer: Local Search",
    "679": "Random Search",
    "680": "Acquisition Function Maximizer: Local Search",
    "681": "Acquisition Function Maximizer: Local Search",
    "682": "Acquisition Function Maximizer: Local Search",
    "683": "Acquisition Function Maximizer: Local Search",
    "684": "Random Search",
    "685": "Acquisition Function Maximizer: Local Search",
    "686": "Acquisition Function Maximizer: Local Search",
    "687": "Acquisition Function Maximizer: Local Search",
    "688": "Random Search",
    "689": "Acquisition Function Maximizer: Local Search",
    "690": "Random Search",
    "691": "Acquisition Function Maximizer: Local Search",
    "692": "Acquisition Function Maximizer: Local Search",
    "693": "Acquisition Function Maximizer: Local Search",
    "694": "Acquisition Function Maximizer: Local Search",
    "695": "Random Search",
    "696": "Acquisition Function Maximizer: Local Search",
    "697": "Random Search",
    "698": "Acquisition Function Maximizer: Local Search",
    "699": "Acquisition Function Maximizer: Local Search",
    "700": "Acquisition Function Maximizer: Local Search",
    "701": "Acquisition Function Maximizer: Local Search",
    "702": "Random Search",
    "703": "Random Search",
    "704": "Acquisition Function Maximizer: Local Search",
    "705": "Acquisition Function Maximizer: Local Search",
    "706": "Acquisition Function Maximizer: Local Search",
    "707": "Acquisition Function Maximizer: Local Search",
    "708": "Random Search",
    "709": "Random Search",
    "710": "Acquisition Function Maximizer: Local Search",
    "711": "Random Search",
    "712": "Acquisition Function Maximizer: Local Search",
    "713": "Random Search",
    "714": "Random Search",
    "715": "Acquisition Function Maximizer: Local Search",
    "716": "Random Search",
    "717": "Acquisition Function Maximizer: Local Search",
    "718": "Acquisition Function Maximizer: Local Search",
    "719": "Acquisition Function Maximizer: Local Search",
    "720": "Random Search",
    "721": "Random Search",
    "722": "Acquisition Function Maximizer: Local Search",
    "723": "Acquisition Function Maximizer: Local Search",
    "724": "Acquisition Function Maximizer: Local Search",
    "725": "Acquisition Function Maximizer: Local Search",
    "726": "Acquisition Function Maximizer: Local Search",
    "727": "Acquisition Function Maximizer: Local Search",
    "728": "Random Search",
    "729": "Acquisition Function Maximizer: Local Search",
    "730": "Acquisition Function Maximizer: Local Search",
    "731": "Acquisition Function Maximizer: Local Search",
    "732": "Acquisition Function Maximizer: Local Search",
    "733": "Acquisition Function Maximizer: Local Search",
    "734": "Acquisition Function Maximizer: Local Search",
    "735": "Acquisition Function Maximizer: Local Search",
    "736": "Acquisition Function Maximizer: Local Search",
    "737": "Acquisition Function Maximizer: Local Search",
    "738": "Acquisition Function Maximizer: Local Search",
    "739": "Acquisition Function Maximizer: Local Search",
    "740": "Acquisition Function Maximizer: Local Search",
    "741": "Acquisition Function Maximizer: Local Search",
    "742": "Acquisition Function Maximizer: Local Search",
    "743": "Acquisition Function Maximizer: Local Search",
    "744": "Random Search",
    "745": "Random Search",
    "746": "Random Search",
    "747": "Acquisition Function Maximizer: Local Search",
    "748": "Random Search",
    "749": "Random Search",
    "750": "Acquisition Function Maximizer: Local Search",
    "751": "Random Search",
    "752": "Acquisition Function Maximizer: Local Search",
    "753": "Acquisition Function Maximizer: Local Search",
    "754": "Acquisition Function Maximizer: Local Search",
    "755": "Acquisition Function Maximizer: Local Search",
    "756": "Acquisition Function Maximizer: Local Search",
    "757": "Acquisition Function Maximizer: Local Search",
    "758": "Acquisition Function Maximizer: Local Search",
    "759": "Acquisition Function Maximizer: Local Search",
    "760": "Acquisition Function Maximizer: Local Search",
    "761": "Acquisition Function Maximizer: Local Search",
    "762": "Acquisition Function Maximizer: Local Search",
    "763": "Random Search",
    "764": "Acquisition Function Maximizer: Local Search",
    "765": "Acquisition Function Maximizer: Local Search",
    "766": "Acquisition Function Maximizer: Local Search",
    "767": "Acquisition Function Maximizer: Local Search",
    "768": "Acquisition Function Maximizer: Local Search",
    "769": "Acquisition Function Maximizer: Local Search",
    "770": "Acquisition Function Maximizer: Local Search",
    "771": "Acquisition Function Maximizer: Local Search",
    "772": "Acquisition Function Maximizer: Local Search",
    "773": "Acquisition Function Maximizer: Local Search",
    "774": "Acquisition Function Maximizer: Local Search",
    "775": "Acquisition Function Maximizer: Local Search",
    "776": "Acquisition Function Maximizer: Local Search",
    "777": "Acquisition Function Maximizer: Local Search",
    "778": "Acquisition Function Maximizer: Local Search",
    "779": "Random Search",
    "780": "Acquisition Function Maximizer: Local Search",
    "781": "Acquisition Function Maximizer: Local Search",
    "782": "Acquisition Function Maximizer: Local Search",
    "783": "Acquisition Function Maximizer: Local Search",
    "784": "Acquisition Function Maximizer: Local Search",
    "785": "Acquisition Function Maximizer: Local Search",
    "786": "Random Search",
    "787": "Acquisition Function Maximizer: Local Search",
    "788": "Acquisition Function Maximizer: Local Search",
    "789": "Acquisition Function Maximizer: Local Search",
    "790": "Random Search",
    "791": "Random Search",
    "792": "Acquisition Function Maximizer: Local Search",
    "793": "Random Search",
    "794": "Acquisition Function Maximizer: Local Search",
    "795": "Random Search",
    "796": "Acquisition Function Maximizer: Local Search",
    "797": "Acquisition Function Maximizer: Local Search",
    "798": "Acquisition Function Maximizer: Local Search",
    "799": "Random Search",
    "800": "Acquisition Function Maximizer: Local Search",
    "801": "Acquisition Function Maximizer: Local Search",
    "802": "Acquisition Function Maximizer: Local Search",
    "803": "Acquisition Function Maximizer: Local Search",
    "804": "Acquisition Function Maximizer: Local Search",
    "805": "Acquisition Function Maximizer: Local Search",
    "806": "Random Search",
    "807": "Acquisition Function Maximizer: Local Search",
    "808": "Acquisition Function Maximizer: Local Search",
    "809": "Acquisition Function Maximizer: Local Search",
    "810": "Acquisition Function Maximizer: Local Search",
    "811": "Acquisition Function Maximizer: Local Search",
    "812": "Acquisition Function Maximizer: Local Search",
    "813": "Acquisition Function Maximizer: Local Search",
    "814": "Acquisition Function Maximizer: Local Search",
    "815": "Acquisition Function Maximizer: Local Search",
    "816": "Acquisition Function Maximizer: Local Search",
    "817": "Acquisition Function Maximizer: Local Search",
    "818": "Acquisition Function Maximizer: Local Search",
    "819": "Acquisition Function Maximizer: Local Search",
    "820": "Random Search",
    "821": "Acquisition Function Maximizer: Local Search",
    "822": "Random Search",
    "823": "Acquisition Function Maximizer: Local Search",
    "824": "Acquisition Function Maximizer: Local Search",
    "825": "Acquisition Function Maximizer: Local Search",
    "826": "Acquisition Function Maximizer: Local Search",
    "827": "Random Search",
    "828": "Acquisition Function Maximizer: Local Search",
    "829": "Random Search",
    "830": "Acquisition Function Maximizer: Local Search",
    "831": "Acquisition Function Maximizer: Local Search",
    "832": "Acquisition Function Maximizer: Local Search",
    "833": "Acquisition Function Maximizer: Local Search",
    "834": "Acquisition Function Maximizer: Local Search",
    "835": "Random Search",
    "836": "Acquisition Function Maximizer: Local Search",
    "837": "Random Search",
    "838": "Acquisition Function Maximizer: Local Search",
    "839": "Acquisition Function Maximizer: Local Search",
    "840": "Acquisition Function Maximizer: Local Search",
    "841": "Acquisition Function Maximizer: Local Search",
    "842": "Acquisition Function Maximizer: Local Search",
    "843": "Random Search",
    "844": "Acquisition Function Maximizer: Local Search",
    "845": "Acquisition Function Maximizer: Local Search",
    "846": "Acquisition Function Maximizer: Local Search",
    "847": "Random Search",
    "848": "Random Search",
    "849": "Acquisition Function Maximizer: Local Search",
    "850": "Acquisition Function Maximizer: Local Search",
    "851": "Acquisition Function Maximizer: Local Search",
    "852": "Acquisition Function Maximizer: Local Search",
    "853": "Acquisition Function Maximizer: Local Search",
    "854": "Acquisition Function Maximizer: Local Search",
    "855": "Acquisition Function Maximizer: Local Search",
    "856": "Acquisition Function Maximizer: Local Search",
    "857": "Acquisition Function Maximizer: Local Search",
    "858": "Random Search",
    "859": "Acquisition Function Maximizer: Local Search",
    "860": "Acquisition Function Maximizer: Local Search",
    "861": "Acquisition Function Maximizer: Local Search",
    "862": "Random Search",
    "863": "Acquisition Function Maximizer: Local Search",
    "864": "Random Search",
    "865": "Acquisition Function Maximizer: Local Search",
    "866": "Acquisition Function Maximizer: Local Search",
    "867": "Acquisition Function Maximizer: Local Search",
    "868": "Acquisition Function Maximizer: Local Search",
    "869": "Acquisition Function Maximizer: Local Search",
    "870": "Acquisition Function Maximizer: Local Search",
    "871": "Acquisition Function Maximizer: Local Search",
    "872": "Random Search",
    "873": "Acquisition Function Maximizer: Local Search",
    "874": "Acquisition Function Maximizer: Local Search",
    "875": "Acquisition Function Maximizer: Local Search",
    "876": "Acquisition Function Maximizer: Local Search",
    "877": "Random Search",
    "878": "Acquisition Function Maximizer: Local Search",
    "879": "Acquisition Function Maximizer: Local Search",
    "880": "Acquisition Function Maximizer: Local Search",
    "881": "Acquisition Function Maximizer: Local Search",
    "882": "Acquisition Function Maximizer: Local Search",
    "883": "Acquisition Function Maximizer: Local Search",
    "884": "Acquisition Function Maximizer: Local Search",
    "885": "Acquisition Function Maximizer: Local Search",
    "886": "Acquisition Function Maximizer: Local Search",
    "887": "Acquisition Function Maximizer: Local Search",
    "888": "Acquisition Function Maximizer: Local Search",
    "889": "Acquisition Function Maximizer: Local Search",
    "890": "Acquisition Function Maximizer: Local Search",
    "891": "Acquisition Function Maximizer: Local Search",
    "892": "Acquisition Function Maximizer: Local Search",
    "893": "Acquisition Function Maximizer: Local Search",
    "894": "Random Search",
    "895": "Acquisition Function Maximizer: Local Search",
    "896": "Acquisition Function Maximizer: Local Search",
    "897": "Acquisition Function Maximizer: Local Search",
    "898": "Acquisition Function Maximizer: Local Search",
    "899": "Acquisition Function Maximizer: Local Search",
    "900": "Acquisition Function Maximizer: Local Search",
    "901": "Acquisition Function Maximizer: Local Search",
    "902": "Acquisition Function Maximizer: Local Search",
    "903": "Acquisition Function Maximizer: Local Search",
    "904": "Acquisition Function Maximizer: Local Search",
    "905": "Acquisition Function Maximizer: Local Search",
    "906": "Acquisition Function Maximizer: Local Search",
    "907": "Acquisition Function Maximizer: Local Search",
    "908": "Acquisition Function Maximizer: Local Search",
    "909": "Random Search",
    "910": "Acquisition Function Maximizer: Local Search",
    "911": "Acquisition Function Maximizer: Local Search",
    "912": "Random Search",
    "913": "Acquisition Function Maximizer: Local Search",
    "914": "Random Search",
    "915": "Random Search",
    "916": "Acquisition Function Maximizer: Local Search",
    "917": "Random Search",
    "918": "Acquisition Function Maximizer: Local Search",
    "919": "Random Search",
    "920": "Acquisition Function Maximizer: Local Search",
    "921": "Acquisition Function Maximizer: Local Search",
    "922": "Acquisition Function Maximizer: Local Search",
    "923": "Acquisition Function Maximizer: Local Search",
    "924": "Acquisition Function Maximizer: Local Search",
    "925": "Acquisition Function Maximizer: Local Search",
    "926": "Acquisition Function Maximizer: Local Search",
    "927": "Acquisition Function Maximizer: Local Search",
    "928": "Acquisition Function Maximizer: Local Search",
    "929": "Acquisition Function Maximizer: Local Search",
    "930": "Acquisition Function Maximizer: Local Search",
    "931": "Acquisition Function Maximizer: Local Search",
    "932": "Acquisition Function Maximizer: Local Search",
    "933": "Random Search",
    "934": "Acquisition Function Maximizer: Local Search",
    "935": "Acquisition Function Maximizer: Local Search",
    "936": "Acquisition Function Maximizer: Local Search",
    "937": "Random Search",
    "938": "Acquisition Function Maximizer: Local Search",
    "939": "Random Search",
    "940": "Acquisition Function Maximizer: Local Search",
    "941": "Acquisition Function Maximizer: Local Search",
    "942": "Acquisition Function Maximizer: Local Search",
    "943": "Random Search",
    "944": "Acquisition Function Maximizer: Local Search",
    "945": "Acquisition Function Maximizer: Local Search",
    "946": "Random Search",
    "947": "Acquisition Function Maximizer: Local Search",
    "948": "Random Search",
    "949": "Acquisition Function Maximizer: Local Search",
    "950": "Acquisition Function Maximizer: Local Search",
    "951": "Acquisition Function Maximizer: Local Search",
    "952": "Acquisition Function Maximizer: Local Search",
    "953": "Acquisition Function Maximizer: Local Search",
    "954": "Acquisition Function Maximizer: Local Search",
    "955": "Acquisition Function Maximizer: Local Search",
    "956": "Acquisition Function Maximizer: Local Search",
    "957": "Acquisition Function Maximizer: Local Search",
    "958": "Random Search",
    "959": "Acquisition Function Maximizer: Local Search",
    "960": "Random Search",
    "961": "Acquisition Function Maximizer: Local Search",
    "962": "Acquisition Function Maximizer: Local Search",
    "963": "Acquisition Function Maximizer: Local Search",
    "964": "Acquisition Function Maximizer: Local Search",
    "965": "Acquisition Function Maximizer: Local Search",
    "966": "Acquisition Function Maximizer: Local Search",
    "967": "Acquisition Function Maximizer: Local Search",
    "968": "Random Search",
    "969": "Acquisition Function Maximizer: Local Search",
    "970": "Acquisition Function Maximizer: Local Search",
    "971": "Acquisition Function Maximizer: Local Search",
    "972": "Acquisition Function Maximizer: Local Search",
    "973": "Acquisition Function Maximizer: Local Search",
    "974": "Random Search",
    "975": "Acquisition Function Maximizer: Local Search",
    "976": "Acquisition Function Maximizer: Local Search",
    "977": "Random Search",
    "978": "Acquisition Function Maximizer: Local Search",
    "979": "Acquisition Function Maximizer: Local Search",
    "980": "Acquisition Function Maximizer: Local Search",
    "981": "Random Search",
    "982": "Acquisition Function Maximizer: Local Search",
    "983": "Acquisition Function Maximizer: Local Search",
    "984": "Acquisition Function Maximizer: Local Search",
    "985": "Acquisition Function Maximizer: Local Search",
    "986": "Acquisition Function Maximizer: Local Search",
    "987": "Acquisition Function Maximizer: Local Search",
    "988": "Acquisition Function Maximizer: Local Search",
    "989": "Acquisition Function Maximizer: Local Search",
    "990": "Acquisition Function Maximizer: Local Search",
    "991": "Acquisition Function Maximizer: Local Search",
    "992": "Acquisition Function Maximizer: Local Search",
    "993": "Acquisition Function Maximizer: Local Search",
    "994": "Acquisition Function Maximizer: Local Search",
    "995": "Acquisition Function Maximizer: Local Search",
    "996": "Random Search",
    "997": "Acquisition Function Maximizer: Local Search",
    "998": "Acquisition Function Maximizer: Local Search",
    "999": "Acquisition Function Maximizer: Local Search",
    "1000": "Acquisition Function Maximizer: Local Search",
    "1001": "Random Search",
    "1002": "Acquisition Function Maximizer: Local Search",
    "1003": "Acquisition Function Maximizer: Local Search",
    "1004": "Acquisition Function Maximizer: Local Search",
    "1005": "Acquisition Function Maximizer: Local Search",
    "1006": "Acquisition Function Maximizer: Local Search",
    "1007": "Random Search",
    "1008": "Acquisition Function Maximizer: Local Search",
    "1009": "Acquisition Function Maximizer: Local Search",
    "1010": "Random Search",
    "1011": "Acquisition Function Maximizer: Local Search",
    "1012": "Acquisition Function Maximizer: Local Search",
    "1013": "Random Search",
    "1014": "Acquisition Function Maximizer: Local Search",
    "1015": "Acquisition Function Maximizer: Local Search",
    "1016": "Acquisition Function Maximizer: Local Search",
    "1017": "Random Search",
    "1018": "Acquisition Function Maximizer: Local Search",
    "1019": "Acquisition Function Maximizer: Local Search",
    "1020": "Random Search",
    "1021": "Acquisition Function Maximizer: Local Search",
    "1022": "Acquisition Function Maximizer: Local Search",
    "1023": "Acquisition Function Maximizer: Local Search",
    "1024": "Acquisition Function Maximizer: Local Search",
    "1025": "Acquisition Function Maximizer: Local Search",
    "1026": "Acquisition Function Maximizer: Local Search",
    "1027": "Acquisition Function Maximizer: Local Search",
    "1028": "Acquisition Function Maximizer: Local Search",
    "1029": "Acquisition Function Maximizer: Local Search",
    "1030": "Acquisition Function Maximizer: Local Search",
    "1031": "Acquisition Function Maximizer: Local Search",
    "1032": "Acquisition Function Maximizer: Local Search",
    "1033": "Random Search",
    "1034": "Acquisition Function Maximizer: Local Search",
    "1035": "Random Search",
    "1036": "Acquisition Function Maximizer: Local Search",
    "1037": "Random Search",
    "1038": "Acquisition Function Maximizer: Local Search",
    "1039": "Acquisition Function Maximizer: Local Search",
    "1040": "Acquisition Function Maximizer: Local Search",
    "1041": "Acquisition Function Maximizer: Local Search",
    "1042": "Acquisition Function Maximizer: Local Search",
    "1043": "Acquisition Function Maximizer: Local Search",
    "1044": "Random Search",
    "1045": "Acquisition Function Maximizer: Local Search",
    "1046": "Random Search",
    "1047": "Acquisition Function Maximizer: Local Search",
    "1048": "Acquisition Function Maximizer: Local Search",
    "1049": "Acquisition Function Maximizer: Local Search",
    "1050": "Random Search",
    "1051": "Acquisition Function Maximizer: Local Search",
    "1052": "Acquisition Function Maximizer: Local Search",
    "1053": "Acquisition Function Maximizer: Local Search",
    "1054": "Acquisition Function Maximizer: Local Search",
    "1055": "Acquisition Function Maximizer: Local Search",
    "1056": "Acquisition Function Maximizer: Local Search",
    "1057": "Random Search",
    "1058": "Acquisition Function Maximizer: Local Search",
    "1059": "Acquisition Function Maximizer: Local Search",
    "1060": "Acquisition Function Maximizer: Local Search",
    "1061": "Acquisition Function Maximizer: Local Search",
    "1062": "Acquisition Function Maximizer: Local Search",
    "1063": "Acquisition Function Maximizer: Local Search",
    "1064": "Acquisition Function Maximizer: Local Search",
    "1065": "Acquisition Function Maximizer: Local Search",
    "1066": "Acquisition Function Maximizer: Local Search",
    "1067": "Acquisition Function Maximizer: Local Search",
    "1068": "Random Search",
    "1069": "Random Search",
    "1070": "Acquisition Function Maximizer: Local Search",
    "1071": "Random Search",
    "1072": "Random Search",
    "1073": "Acquisition Function Maximizer: Local Search",
    "1074": "Acquisition Function Maximizer: Local Search",
    "1075": "Random Search",
    "1076": "Random Search",
    "1077": "Acquisition Function Maximizer: Local Search",
    "1078": "Acquisition Function Maximizer: Local Search",
    "1079": "Random Search",
    "1080": "Acquisition Function Maximizer: Local Search",
    "1081": "Random Search",
    "1082": "Acquisition Function Maximizer: Local Search",
    "1083": "Acquisition Function Maximizer: Local Search",
    "1084": "Acquisition Function Maximizer: Local Search",
    "1085": "Acquisition Function Maximizer: Local Search",
    "1086": "Acquisition Function Maximizer: Local Search",
    "1087": "Acquisition Function Maximizer: Local Search",
    "1088": "Random Search",
    "1089": "Acquisition Function Maximizer: Local Search",
    "1090": "Acquisition Function Maximizer: Local Search",
    "1091": "Acquisition Function Maximizer: Local Search",
    "1092": "Random Search",
    "1093": "Acquisition Function Maximizer: Local Search",
    "1094": "Acquisition Function Maximizer: Local Search",
    "1095": "Acquisition Function Maximizer: Local Search",
    "1096": "Acquisition Function Maximizer: Local Search",
    "1097": "Random Search",
    "1098": "Acquisition Function Maximizer: Local Search",
    "1099": "Acquisition Function Maximizer: Local Search",
    "1100": "Random Search",
    "1101": "Acquisition Function Maximizer: Local Search",
    "1102": "Random Search",
    "1103": "Acquisition Function Maximizer: Local Search",
    "1104": "Acquisition Function Maximizer: Local Search",
    "1105": "Acquisition Function Maximizer: Local Search",
    "1106": "Acquisition Function Maximizer: Local Search",
    "1107": "Acquisition Function Maximizer: Local Search",
    "1108": "Acquisition Function Maximizer: Local Search",
    "1109": "Acquisition Function Maximizer: Local Search",
    "1110": "Acquisition Function Maximizer: Local Search",
    "1111": "Acquisition Function Maximizer: Local Search",
    "1112": "Acquisition Function Maximizer: Local Search",
    "1113": "Random Search",
    "1114": "Acquisition Function Maximizer: Local Search",
    "1115": "Acquisition Function Maximizer: Local Search",
    "1116": "Acquisition Function Maximizer: Local Search",
    "1117": "Acquisition Function Maximizer: Local Search",
    "1118": "Acquisition Function Maximizer: Local Search",
    "1119": "Random Search",
    "1120": "Acquisition Function Maximizer: Local Search",
    "1121": "Acquisition Function Maximizer: Local Search",
    "1122": "Acquisition Function Maximizer: Local Search",
    "1123": "Random Search",
    "1124": "Acquisition Function Maximizer: Local Search",
    "1125": "Acquisition Function Maximizer: Local Search",
    "1126": "Acquisition Function Maximizer: Local Search",
    "1127": "Acquisition Function Maximizer: Local Search",
    "1128": "Acquisition Function Maximizer: Local Search",
    "1129": "Random Search",
    "1130": "Acquisition Function Maximizer: Local Search",
    "1131": "Acquisition Function Maximizer: Local Search",
    "1132": "Acquisition Function Maximizer: Local Search",
    "1133": "Acquisition Function Maximizer: Local Search",
    "1134": "Random Search",
    "1135": "Acquisition Function Maximizer: Local Search",
    "1136": "Random Search",
    "1137": "Random Search",
    "1138": "Acquisition Function Maximizer: Local Search",
    "1139": "Acquisition Function Maximizer: Local Search",
    "1140": "Acquisition Function Maximizer: Local Search",
    "1141": "Acquisition Function Maximizer: Local Search",
    "1142": "Acquisition Function Maximizer: Local Search",
    "1143": "Acquisition Function Maximizer: Local Search",
    "1144": "Acquisition Function Maximizer: Local Search",
    "1145": "Acquisition Function Maximizer: Local Search",
    "1146": "Random Search",
    "1147": "Acquisition Function Maximizer: Local Search",
    "1148": "Acquisition Function Maximizer: Local Search",
    "1149": "Acquisition Function Maximizer: Local Search",
    "1150": "Random Search",
    "1151": "Acquisition Function Maximizer: Local Search",
    "1152": "Acquisition Function Maximizer: Local Search",
    "1153": "Acquisition Function Maximizer: Local Search",
    "1154": "Acquisition Function Maximizer: Local Search",
    "1155": "Acquisition Function Maximizer: Local Search",
    "1156": "Random Search",
    "1157": "Acquisition Function Maximizer: Local Search",
    "1158": "Acquisition Function Maximizer: Local Search",
    "1159": "Acquisition Function Maximizer: Local Search",
    "1160": "Acquisition Function Maximizer: Local Search",
    "1161": "Acquisition Function Maximizer: Local Search",
    "1162": "Acquisition Function Maximizer: Local Search",
    "1163": "Acquisition Function Maximizer: Local Search",
    "1164": "Random Search",
    "1165": "Acquisition Function Maximizer: Local Search",
    "1166": "Acquisition Function Maximizer: Local Search",
    "1167": "Random Search",
    "1168": "Acquisition Function Maximizer: Local Search",
    "1169": "Acquisition Function Maximizer: Local Search",
    "1170": "Random Search",
    "1171": "Random Search",
    "1172": "Acquisition Function Maximizer: Local Search",
    "1173": "Acquisition Function Maximizer: Local Search",
    "1174": "Acquisition Function Maximizer: Local Search",
    "1175": "Acquisition Function Maximizer: Local Search",
    "1176": "Acquisition Function Maximizer: Local Search",
    "1177": "Acquisition Function Maximizer: Local Search",
    "1178": "Acquisition Function Maximizer: Local Search",
    "1179": "Acquisition Function Maximizer: Local Search",
    "1180": "Acquisition Function Maximizer: Local Search",
    "1181": "Acquisition Function Maximizer: Local Search",
    "1182": "Acquisition Function Maximizer: Local Search",
    "1183": "Acquisition Function Maximizer: Local Search",
    "1184": "Acquisition Function Maximizer: Local Search",
    "1185": "Random Search",
    "1186": "Acquisition Function Maximizer: Local Search",
    "1187": "Acquisition Function Maximizer: Local Search",
    "1188": "Acquisition Function Maximizer: Local Search",
    "1189": "Acquisition Function Maximizer: Local Search",
    "1190": "Random Search",
    "1191": "Acquisition Function Maximizer: Local Search",
    "1192": "Acquisition Function Maximizer: Local Search",
    "1193": "Acquisition Function Maximizer: Local Search",
    "1194": "Acquisition Function Maximizer: Local Search",
    "1195": "Acquisition Function Maximizer: Local Search",
    "1196": "Acquisition Function Maximizer: Local Search",
    "1197": "Acquisition Function Maximizer: Local Search",
    "1198": "Acquisition Function Maximizer: Local Search",
    "1199": "Acquisition Function Maximizer: Local Search",
    "1200": "Acquisition Function Maximizer: Local Search",
    "1201": "Acquisition Function Maximizer: Local Search",
    "1202": "Acquisition Function Maximizer: Local Search",
    "1203": "Acquisition Function Maximizer: Local Search",
    "1204": "Random Search",
    "1205": "Acquisition Function Maximizer: Local Search",
    "1206": "Acquisition Function Maximizer: Local Search",
    "1207": "Acquisition Function Maximizer: Local Search",
    "1208": "Acquisition Function Maximizer: Local Search",
    "1209": "Acquisition Function Maximizer: Local Search",
    "1210": "Acquisition Function Maximizer: Local Search",
    "1211": "Acquisition Function Maximizer: Local Search",
    "1212": "Acquisition Function Maximizer: Local Search",
    "1213": "Acquisition Function Maximizer: Local Search",
    "1214": "Random Search",
    "1215": "Acquisition Function Maximizer: Local Search",
    "1216": "Random Search",
    "1217": "Acquisition Function Maximizer: Local Search",
    "1218": "Acquisition Function Maximizer: Local Search",
    "1219": "Random Search",
    "1220": "Acquisition Function Maximizer: Local Search",
    "1221": "Acquisition Function Maximizer: Local Search",
    "1222": "Random Search",
    "1223": "Random Search",
    "1224": "Acquisition Function Maximizer: Local Search",
    "1225": "Acquisition Function Maximizer: Local Search",
    "1226": "Acquisition Function Maximizer: Local Search",
    "1227": "Acquisition Function Maximizer: Local Search",
    "1228": "Acquisition Function Maximizer: Local Search",
    "1229": "Random Search",
    "1230": "Acquisition Function Maximizer: Local Search",
    "1231": "Acquisition Function Maximizer: Local Search",
    "1232": "Acquisition Function Maximizer: Local Search",
    "1233": "Acquisition Function Maximizer: Local Search",
    "1234": "Acquisition Function Maximizer: Local Search",
    "1235": "Acquisition Function Maximizer: Local Search",
    "1236": "Random Search",
    "1237": "Random Search",
    "1238": "Random Search",
    "1239": "Acquisition Function Maximizer: Local Search",
    "1240": "Random Search",
    "1241": "Acquisition Function Maximizer: Local Search",
    "1242": "Acquisition Function Maximizer: Local Search",
    "1243": "Acquisition Function Maximizer: Local Search",
    "1244": "Random Search",
    "1245": "Random Search",
    "1246": "Acquisition Function Maximizer: Local Search",
    "1247": "Random Search",
    "1248": "Acquisition Function Maximizer: Local Search",
    "1249": "Random Search",
    "1250": "Acquisition Function Maximizer: Local Search",
    "1251": "Acquisition Function Maximizer: Local Search",
    "1252": "Acquisition Function Maximizer: Local Search",
    "1253": "Acquisition Function Maximizer: Local Search",
    "1254": "Acquisition Function Maximizer: Local Search",
    "1255": "Acquisition Function Maximizer: Local Search",
    "1256": "Acquisition Function Maximizer: Local Search",
    "1257": "Acquisition Function Maximizer: Local Search",
    "1258": "Acquisition Function Maximizer: Local Search",
    "1259": "Acquisition Function Maximizer: Local Search",
    "1260": "Acquisition Function Maximizer: Local Search",
    "1261": "Random Search",
    "1262": "Acquisition Function Maximizer: Local Search",
    "1263": "Acquisition Function Maximizer: Local Search",
    "1264": "Acquisition Function Maximizer: Local Search",
    "1265": "Acquisition Function Maximizer: Local Search",
    "1266": "Acquisition Function Maximizer: Local Search",
    "1267": "Acquisition Function Maximizer: Local Search",
    "1268": "Acquisition Function Maximizer: Local Search",
    "1269": "Acquisition Function Maximizer: Local Search",
    "1270": "Acquisition Function Maximizer: Local Search",
    "1271": "Acquisition Function Maximizer: Local Search",
    "1272": "Acquisition Function Maximizer: Local Search",
    "1273": "Acquisition Function Maximizer: Local Search",
    "1274": "Acquisition Function Maximizer: Local Search",
    "1275": "Acquisition Function Maximizer: Local Search",
    "1276": "Acquisition Function Maximizer: Local Search",
    "1277": "Random Search",
    "1278": "Acquisition Function Maximizer: Local Search",
    "1279": "Acquisition Function Maximizer: Local Search",
    "1280": "Acquisition Function Maximizer: Local Search",
    "1281": "Acquisition Function Maximizer: Local Search",
    "1282": "Acquisition Function Maximizer: Local Search",
    "1283": "Acquisition Function Maximizer: Local Search",
    "1284": "Acquisition Function Maximizer: Local Search",
    "1285": "Acquisition Function Maximizer: Local Search",
    "1286": "Acquisition Function Maximizer: Local Search",
    "1287": "Acquisition Function Maximizer: Local Search",
    "1288": "Random Search",
    "1289": "Random Search",
    "1290": "Acquisition Function Maximizer: Local Search",
    "1291": "Acquisition Function Maximizer: Local Search",
    "1292": "Random Search",
    "1293": "Acquisition Function Maximizer: Local Search",
    "1294": "Random Search",
    "1295": "Acquisition Function Maximizer: Local Search",
    "1296": "Acquisition Function Maximizer: Local Search",
    "1297": "Acquisition Function Maximizer: Local Search",
    "1298": "Acquisition Function Maximizer: Local Search",
    "1299": "Acquisition Function Maximizer: Local Search",
    "1300": "Random Search",
    "1301": "Acquisition Function Maximizer: Local Search",
    "1302": "Acquisition Function Maximizer: Local Search",
    "1303": "Random Search",
    "1304": "Acquisition Function Maximizer: Local Search",
    "1305": "Random Search",
    "1306": "Acquisition Function Maximizer: Local Search",
    "1307": "Acquisition Function Maximizer: Local Search",
    "1308": "Acquisition Function Maximizer: Local Search",
    "1309": "Acquisition Function Maximizer: Local Search",
    "1310": "Acquisition Function Maximizer: Local Search",
    "1311": "Acquisition Function Maximizer: Local Search",
    "1312": "Acquisition Function Maximizer: Local Search",
    "1313": "Random Search",
    "1314": "Acquisition Function Maximizer: Local Search",
    "1315": "Acquisition Function Maximizer: Local Search",
    "1316": "Acquisition Function Maximizer: Local Search",
    "1317": "Random Search",
    "1318": "Acquisition Function Maximizer: Local Search",
    "1319": "Random Search",
    "1320": "Acquisition Function Maximizer: Local Search",
    "1321": "Acquisition Function Maximizer: Local Search",
    "1322": "Acquisition Function Maximizer: Local Search",
    "1323": "Acquisition Function Maximizer: Local Search",
    "1324": "Acquisition Function Maximizer: Local Search",
    "1325": "Acquisition Function Maximizer: Local Search",
    "1326": "Acquisition Function Maximizer: Local Search",
    "1327": "Random Search",
    "1328": "Random Search",
    "1329": "Acquisition Function Maximizer: Local Search",
    "1330": "Acquisition Function Maximizer: Local Search",
    "1331": "Acquisition Function Maximizer: Local Search",
    "1332": "Acquisition Function Maximizer: Local Search",
    "1333": "Random Search",
    "1334": "Random Search",
    "1335": "Acquisition Function Maximizer: Local Search",
    "1336": "Acquisition Function Maximizer: Local Search",
    "1337": "Acquisition Function Maximizer: Local Search",
    "1338": "Acquisition Function Maximizer: Local Search",
    "1339": "Acquisition Function Maximizer: Local Search",
    "1340": "Acquisition Function Maximizer: Local Search",
    "1341": "Acquisition Function Maximizer: Local Search",
    "1342": "Acquisition Function Maximizer: Local Search",
    "1343": "Acquisition Function Maximizer: Local Search",
    "1344": "Acquisition Function Maximizer: Local Search",
    "1345": "Acquisition Function Maximizer: Local Search",
    "1346": "Acquisition Function Maximizer: Local Search",
    "1347": "Acquisition Function Maximizer: Local Search",
    "1348": "Acquisition Function Maximizer: Local Search",
    "1349": "Acquisition Function Maximizer: Local Search",
    "1350": "Acquisition Function Maximizer: Local Search",
    "1351": "Acquisition Function Maximizer: Local Search",
    "1352": "Random Search",
    "1353": "Acquisition Function Maximizer: Local Search",
    "1354": "Acquisition Function Maximizer: Local Search",
    "1355": "Acquisition Function Maximizer: Local Search",
    "1356": "Acquisition Function Maximizer: Local Search",
    "1357": "Acquisition Function Maximizer: Local Search",
    "1358": "Acquisition Function Maximizer: Local Search",
    "1359": "Acquisition Function Maximizer: Local Search",
    "1360": "Acquisition Function Maximizer: Local Search",
    "1361": "Random Search",
    "1362": "Random Search",
    "1363": "Acquisition Function Maximizer: Local Search",
    "1364": "Acquisition Function Maximizer: Local Search",
    "1365": "Acquisition Function Maximizer: Local Search",
    "1366": "Acquisition Function Maximizer: Local Search",
    "1367": "Acquisition Function Maximizer: Local Search",
    "1368": "Acquisition Function Maximizer: Local Search",
    "1369": "Acquisition Function Maximizer: Local Search",
    "1370": "Acquisition Function Maximizer: Local Search",
    "1371": "Acquisition Function Maximizer: Local Search",
    "1372": "Acquisition Function Maximizer: Local Search",
    "1373": "Acquisition Function Maximizer: Local Search",
    "1374": "Acquisition Function Maximizer: Local Search",
    "1375": "Acquisition Function Maximizer: Local Search",
    "1376": "Acquisition Function Maximizer: Local Search",
    "1377": "Acquisition Function Maximizer: Local Search",
    "1378": "Acquisition Function Maximizer: Local Search",
    "1379": "Random Search",
    "1380": "Random Search",
    "1381": "Acquisition Function Maximizer: Local Search",
    "1382": "Random Search",
    "1383": "Acquisition Function Maximizer: Local Search",
    "1384": "Acquisition Function Maximizer: Local Search",
    "1385": "Acquisition Function Maximizer: Local Search",
    "1386": "Acquisition Function Maximizer: Local Search",
    "1387": "Random Search",
    "1388": "Acquisition Function Maximizer: Local Search",
    "1389": "Acquisition Function Maximizer: Local Search",
    "1390": "Acquisition Function Maximizer: Local Search",
    "1391": "Acquisition Function Maximizer: Local Search",
    "1392": "Acquisition Function Maximizer: Local Search",
    "1393": "Acquisition Function Maximizer: Local Search",
    "1394": "Random Search",
    "1395": "Acquisition Function Maximizer: Local Search",
    "1396": "Random Search",
    "1397": "Acquisition Function Maximizer: Local Search",
    "1398": "Acquisition Function Maximizer: Local Search",
    "1399": "Acquisition Function Maximizer: Local Search",
    "1400": "Acquisition Function Maximizer: Local Search",
    "1401": "Acquisition Function Maximizer: Local Search",
    "1402": "Acquisition Function Maximizer: Local Search",
    "1403": "Acquisition Function Maximizer: Local Search",
    "1404": "Acquisition Function Maximizer: Local Search",
    "1405": "Acquisition Function Maximizer: Local Search",
    "1406": "Acquisition Function Maximizer: Local Search",
    "1407": "Acquisition Function Maximizer: Local Search",
    "1408": "Acquisition Function Maximizer: Local Search",
    "1409": "Acquisition Function Maximizer: Local Search",
    "1410": "Acquisition Function Maximizer: Local Search",
    "1411": "Acquisition Function Maximizer: Local Search",
    "1412": "Random Search",
    "1413": "Random Search",
    "1414": "Acquisition Function Maximizer: Local Search",
    "1415": "Acquisition Function Maximizer: Local Search",
    "1416": "Acquisition Function Maximizer: Local Search",
    "1417": "Acquisition Function Maximizer: Local Search",
    "1418": "Acquisition Function Maximizer: Local Search",
    "1419": "Random Search",
    "1420": "Acquisition Function Maximizer: Local Search",
    "1421": "Random Search",
    "1422": "Acquisition Function Maximizer: Local Search",
    "1423": "Random Search",
    "1424": "Random Search",
    "1425": "Acquisition Function Maximizer: Local Search",
    "1426": "Random Search",
    "1427": "Random Search",
    "1428": "Random Search",
    "1429": "Acquisition Function Maximizer: Local Search",
    "1430": "Acquisition Function Maximizer: Local Search",
    "1431": "Acquisition Function Maximizer: Local Search",
    "1432": "Acquisition Function Maximizer: Local Search",
    "1433": "Acquisition Function Maximizer: Local Search",
    "1434": "Acquisition Function Maximizer: Local Search",
    "1435": "Acquisition Function Maximizer: Local Search",
    "1436": "Acquisition Function Maximizer: Local Search",
    "1437": "Random Search",
    "1438": "Acquisition Function Maximizer: Local Search",
    "1439": "Acquisition Function Maximizer: Local Search",
    "1440": "Acquisition Function Maximizer: Local Search",
    "1441": "Acquisition Function Maximizer: Local Search",
    "1442": "Acquisition Function Maximizer: Local Search",
    "1443": "Acquisition Function Maximizer: Local Search",
    "1444": "Acquisition Function Maximizer: Local Search",
    "1445": "Acquisition Function Maximizer: Local Search",
    "1446": "Acquisition Function Maximizer: Local Search",
    "1447": "Random Search",
    "1448": "Acquisition Function Maximizer: Local Search",
    "1449": "Acquisition Function Maximizer: Local Search",
    "1450": "Acquisition Function Maximizer: Local Search",
    "1451": "Random Search",
    "1452": "Acquisition Function Maximizer: Local Search",
    "1453": "Acquisition Function Maximizer: Local Search",
    "1454": "Acquisition Function Maximizer: Local Search",
    "1455": "Acquisition Function Maximizer: Local Search",
    "1456": "Acquisition Function Maximizer: Local Search",
    "1457": "Acquisition Function Maximizer: Local Search",
    "1458": "Acquisition Function Maximizer: Local Search",
    "1459": "Acquisition Function Maximizer: Local Search",
    "1460": "Acquisition Function Maximizer: Local Search",
    "1461": "Acquisition Function Maximizer: Local Search",
    "1462": "Acquisition Function Maximizer: Local Search",
    "1463": "Acquisition Function Maximizer: Local Search",
    "1464": "Acquisition Function Maximizer: Local Search",
    "1465": "Acquisition Function Maximizer: Local Search",
    "1466": "Acquisition Function Maximizer: Local Search",
    "1467": "Acquisition Function Maximizer: Local Search",
    "1468": "Acquisition Function Maximizer: Local Search",
    "1469": "Acquisition Function Maximizer: Local Search",
    "1470": "Acquisition Function Maximizer: Local Search",
    "1471": "Acquisition Function Maximizer: Local Search",
    "1472": "Acquisition Function Maximizer: Local Search",
    "1473": "Random Search",
    "1474": "Acquisition Function Maximizer: Local Search",
    "1475": "Acquisition Function Maximizer: Local Search",
    "1476": "Random Search",
    "1477": "Acquisition Function Maximizer: Local Search",
    "1478": "Acquisition Function Maximizer: Local Search",
    "1479": "Acquisition Function Maximizer: Local Search",
    "1480": "Acquisition Function Maximizer: Local Search",
    "1481": "Acquisition Function Maximizer: Local Search",
    "1482": "Acquisition Function Maximizer: Local Search",
    "1483": "Random Search",
    "1484": "Acquisition Function Maximizer: Local Search",
    "1485": "Acquisition Function Maximizer: Local Search",
    "1486": "Random Search",
    "1487": "Acquisition Function Maximizer: Local Search",
    "1488": "Random Search",
    "1489": "Acquisition Function Maximizer: Local Search",
    "1490": "Acquisition Function Maximizer: Local Search",
    "1491": "Acquisition Function Maximizer: Local Search",
    "1492": "Acquisition Function Maximizer: Local Search",
    "1493": "Acquisition Function Maximizer: Local Search",
    "1494": "Acquisition Function Maximizer: Local Search",
    "1495": "Acquisition Function Maximizer: Local Search",
    "1496": "Acquisition Function Maximizer: Local Search",
    "1497": "Acquisition Function Maximizer: Local Search",
    "1498": "Acquisition Function Maximizer: Local Search",
    "1499": "Acquisition Function Maximizer: Local Search",
    "1500": "Acquisition Function Maximizer: Local Search",
    "1501": "Random Search",
    "1502": "Random Search",
    "1503": "Random Search",
    "1504": "Random Search",
    "1505": "Acquisition Function Maximizer: Local Search",
    "1506": "Acquisition Function Maximizer: Local Search",
    "1507": "Acquisition Function Maximizer: Local Search",
    "1508": "Acquisition Function Maximizer: Local Search",
    "1509": "Acquisition Function Maximizer: Local Search",
    "1510": "Acquisition Function Maximizer: Local Search",
    "1511": "Acquisition Function Maximizer: Local Search",
    "1512": "Acquisition Function Maximizer: Local Search",
    "1513": "Acquisition Function Maximizer: Local Search",
    "1514": "Acquisition Function Maximizer: Local Search",
    "1515": "Acquisition Function Maximizer: Local Search",
    "1516": "Random Search",
    "1517": "Random Search",
    "1518": "Acquisition Function Maximizer: Local Search",
    "1519": "Acquisition Function Maximizer: Local Search",
    "1520": "Acquisition Function Maximizer: Local Search",
    "1521": "Acquisition Function Maximizer: Local Search",
    "1522": "Acquisition Function Maximizer: Local Search",
    "1523": "Acquisition Function Maximizer: Local Search",
    "1524": "Acquisition Function Maximizer: Local Search",
    "1525": "Acquisition Function Maximizer: Local Search",
    "1526": "Acquisition Function Maximizer: Local Search",
    "1527": "Acquisition Function Maximizer: Local Search",
    "1528": "Acquisition Function Maximizer: Local Search",
    "1529": "Acquisition Function Maximizer: Local Search",
    "1530": "Acquisition Function Maximizer: Local Search",
    "1531": "Acquisition Function Maximizer: Local Search",
    "1532": "Random Search",
    "1533": "Acquisition Function Maximizer: Local Search",
    "1534": "Acquisition Function Maximizer: Local Search",
    "1535": "Acquisition Function Maximizer: Local Search",
    "1536": "Random Search",
    "1537": "Acquisition Function Maximizer: Local Search",
    "1538": "Acquisition Function Maximizer: Local Search",
    "1539": "Random Search",
    "1540": "Acquisition Function Maximizer: Local Search",
    "1541": "Acquisition Function Maximizer: Local Search",
    "1542": "Acquisition Function Maximizer: Local Search",
    "1543": "Acquisition Function Maximizer: Local Search",
    "1544": "Acquisition Function Maximizer: Local Search",
    "1545": "Acquisition Function Maximizer: Local Search",
    "1546": "Acquisition Function Maximizer: Local Search",
    "1547": "Acquisition Function Maximizer: Local Search",
    "1548": "Random Search",
    "1549": "Random Search",
    "1550": "Acquisition Function Maximizer: Local Search",
    "1551": "Acquisition Function Maximizer: Local Search",
    "1552": "Acquisition Function Maximizer: Local Search",
    "1553": "Acquisition Function Maximizer: Local Search",
    "1554": "Acquisition Function Maximizer: Local Search",
    "1555": "Acquisition Function Maximizer: Local Search",
    "1556": "Acquisition Function Maximizer: Local Search",
    "1557": "Acquisition Function Maximizer: Local Search",
    "1558": "Acquisition Function Maximizer: Local Search",
    "1559": "Acquisition Function Maximizer: Local Search",
    "1560": "Random Search",
    "1561": "Acquisition Function Maximizer: Local Search",
    "1562": "Random Search",
    "1563": "Acquisition Function Maximizer: Local Search",
    "1564": "Acquisition Function Maximizer: Local Search",
    "1565": "Acquisition Function Maximizer: Local Search",
    "1566": "Acquisition Function Maximizer: Local Search",
    "1567": "Acquisition Function Maximizer: Local Search",
    "1568": "Random Search",
    "1569": "Acquisition Function Maximizer: Local Search",
    "1570": "Acquisition Function Maximizer: Local Search",
    "1571": "Acquisition Function Maximizer: Local Search",
    "1572": "Random Search",
    "1573": "Acquisition Function Maximizer: Local Search",
    "1574": "Acquisition Function Maximizer: Local Search",
    "1575": "Acquisition Function Maximizer: Local Search",
    "1576": "Acquisition Function Maximizer: Local Search",
    "1577": "Acquisition Function Maximizer: Local Search",
    "1578": "Acquisition Function Maximizer: Local Search",
    "1579": "Acquisition Function Maximizer: Local Search",
    "1580": "Random Search",
    "1581": "Random Search",
    "1582": "Acquisition Function Maximizer: Local Search",
    "1583": "Acquisition Function Maximizer: Local Search",
    "1584": "Acquisition Function Maximizer: Local Search",
    "1585": "Acquisition Function Maximizer: Local Search",
    "1586": "Acquisition Function Maximizer: Local Search",
    "1587": "Acquisition Function Maximizer: Local Search",
    "1588": "Acquisition Function Maximizer: Local Search",
    "1589": "Acquisition Function Maximizer: Local Search",
    "1590": "Acquisition Function Maximizer: Local Search",
    "1591": "Acquisition Function Maximizer: Local Search",
    "1592": "Acquisition Function Maximizer: Local Search",
    "1593": "Random Search",
    "1594": "Acquisition Function Maximizer: Local Search",
    "1595": "Random Search",
    "1596": "Acquisition Function Maximizer: Local Search",
    "1597": "Acquisition Function Maximizer: Local Search",
    "1598": "Acquisition Function Maximizer: Local Search",
    "1599": "Random Search",
    "1600": "Random Search",
    "1601": "Acquisition Function Maximizer: Local Search",
    "1602": "Acquisition Function Maximizer: Local Search",
    "1603": "Acquisition Function Maximizer: Local Search",
    "1604": "Acquisition Function Maximizer: Local Search",
    "1605": "Random Search",
    "1606": "Acquisition Function Maximizer: Local Search",
    "1607": "Acquisition Function Maximizer: Local Search",
    "1608": "Acquisition Function Maximizer: Local Search",
    "1609": "Acquisition Function Maximizer: Local Search",
    "1610": "Acquisition Function Maximizer: Local Search",
    "1611": "Random Search",
    "1612": "Acquisition Function Maximizer: Local Search",
    "1613": "Random Search",
    "1614": "Acquisition Function Maximizer: Local Search",
    "1615": "Acquisition Function Maximizer: Local Search",
    "1616": "Acquisition Function Maximizer: Local Search",
    "1617": "Acquisition Function Maximizer: Local Search",
    "1618": "Acquisition Function Maximizer: Local Search",
    "1619": "Acquisition Function Maximizer: Local Search",
    "1620": "Acquisition Function Maximizer: Local Search",
    "1621": "Acquisition Function Maximizer: Local Search",
    "1622": "Acquisition Function Maximizer: Local Search",
    "1623": "Random Search",
    "1624": "Random Search",
    "1625": "Random Search",
    "1626": "Random Search",
    "1627": "Acquisition Function Maximizer: Local Search",
    "1628": "Acquisition Function Maximizer: Local Search",
    "1629": "Acquisition Function Maximizer: Local Search",
    "1630": "Acquisition Function Maximizer: Local Search",
    "1631": "Acquisition Function Maximizer: Local Search",
    "1632": "Acquisition Function Maximizer: Local Search",
    "1633": "Acquisition Function Maximizer: Local Search",
    "1634": "Acquisition Function Maximizer: Local Search",
    "1635": "Acquisition Function Maximizer: Local Search",
    "1636": "Acquisition Function Maximizer: Local Search",
    "1637": "Acquisition Function Maximizer: Local Search",
    "1638": "Random Search",
    "1639": "Random Search",
    "1640": "Acquisition Function Maximizer: Local Search",
    "1641": "Acquisition Function Maximizer: Local Search",
    "1642": "Acquisition Function Maximizer: Local Search",
    "1643": "Random Search",
    "1644": "Acquisition Function Maximizer: Local Search",
    "1645": "Acquisition Function Maximizer: Local Search",
    "1646": "Random Search",
    "1647": "Acquisition Function Maximizer: Local Search",
    "1648": "Acquisition Function Maximizer: Local Search",
    "1649": "Acquisition Function Maximizer: Local Search",
    "1650": "Acquisition Function Maximizer: Local Search",
    "1651": "Acquisition Function Maximizer: Local Search",
    "1652": "Acquisition Function Maximizer: Local Search",
    "1653": "Random Search",
    "1654": "Acquisition Function Maximizer: Local Search",
    "1655": "Random Search",
    "1656": "Acquisition Function Maximizer: Local Search",
    "1657": "Random Search",
    "1658": "Random Search",
    "1659": "Acquisition Function Maximizer: Local Search",
    "1660": "Acquisition Function Maximizer: Local Search",
    "1661": "Acquisition Function Maximizer: Local Search",
    "1662": "Acquisition Function Maximizer: Local Search",
    "1663": "Acquisition Function Maximizer: Local Search",
    "1664": "Acquisition Function Maximizer: Local Search"
  }
}