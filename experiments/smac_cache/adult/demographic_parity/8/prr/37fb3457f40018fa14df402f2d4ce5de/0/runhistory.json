{
  "stats": {
    "submitted": 450,
    "finished": 450,
    "running": 0
  },
  "data": [
    [
      1,
      null,
      209652396,
      null,
      [
        0.23049090818551896,
        0.0031429722905158995
      ],
      335.40668773651123,
      1,
      1739632373.6229715,
      1739632709.0314906,
      {}
    ],
    [
      2,
      null,
      209652396,
      null,
      [
        0.21485888551756815,
        0.0029034942388534548
      ],
      157.2825493812561,
      1,
      1739632709.0389645,
      1739632866.3235886,
      {}
    ],
    [
      3,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0019305929541587829
      ],
      186.16132140159607,
      1,
      1739632866.3610985,
      1739633052.525426,
      {}
    ],
    [
      4,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739633052.53323,
      1739633078.7983751,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      5,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739633078.8065948,
      1739633078.922809,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      6,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739633079.6293085,
      1739633079.726353,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      7,
      null,
      209652396,
      null,
      [
        0.19615483170872391,
        0.004227913916110992
      ],
      415.2479281425476,
      1,
      1739633079.7341747,
      1739633494.9839396,
      {}
    ],
    [
      8,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0002593159675598145
      ],
      163.00556659698486,
      1,
      1739633494.9934733,
      1739633658.0010567,
      {}
    ],
    [
      9,
      null,
      209652396,
      null,
      [
        0.2167630341283036,
        0.003304806351661682
      ],
      164.2772719860077,
      1,
      1739633658.0108337,
      1739633822.2900767,
      {}
    ],
    [
      10,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739633822.2994158,
      1739633909.8695633,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      11,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00020349323749542237
      ],
      117.91091132164001,
      1,
      1739633909.8802986,
      1739634027.7933204,
      {}
    ],
    [
      12,
      null,
      209652396,
      null,
      [
        0.23521988342347627,
        0.0023607760667800903
      ],
      998.253880739212,
      1,
      1739634027.804061,
      1739635026.0606928,
      {}
    ],
    [
      13,
      null,
      209652396,
      null,
      [
        0.20349541891458056,
        0.00284854918718338
      ],
      259.90187406539917,
      1,
      1739635026.0714862,
      1739635285.9754136,
      {}
    ],
    [
      14,
      null,
      209652396,
      null,
      [
        0.1493504910421078,
        0.09333904013037682
      ],
      249.78274273872375,
      1,
      1739635286.9137268,
      1739635536.698449,
      {}
    ],
    [
      15,
      null,
      209652396,
      null,
      [
        0.2065972713427803,
        0.003885045647621155
      ],
      184.0729649066925,
      1,
      1739635536.7103326,
      1739635720.7853308,
      {}
    ],
    [
      16,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739635720.7998247,
      1739635821.5205038,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      17,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739635821.533876,
      1739635821.5774856,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      18,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739635821.5889313,
      1739635840.1707227,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      19,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739635840.1821659,
      1739636682.309437,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      20,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739636682.3234997,
      1739636749.6976156,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      21,
      null,
      209652396,
      null,
      [
        0.23967317208335173,
        0.0013938456773757934
      ],
      97.55195617675781,
      1,
      1739636749.713143,
      1739636847.2675276,
      {}
    ],
    [
      22,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739636847.2902927,
      1739636847.460621,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      23,
      null,
      209652396,
      null,
      [
        0.21058946650264015,
        0.0022891849279403687
      ],
      292.46132922172546,
      1,
      1739636848.2958336,
      1739637140.7589328,
      {}
    ],
    [
      24,
      null,
      209652396,
      null,
      [
        0.2393967498757918,
        0.0015621930360794067
      ],
      160.77093982696533,
      1,
      1739637140.7730808,
      1739637301.5459356,
      {}
    ],
    [
      25,
      null,
      209652396,
      null,
      [
        0.15171517199960313,
        0.0841910868883133
      ],
      146.76905846595764,
      1,
      1739637301.5619442,
      1739637448.333367,
      {}
    ],
    [
      26,
      null,
      209652396,
      null,
      [
        0.19848891330927257,
        0.004808740317821502
      ],
      252.7096927165985,
      1,
      1739637448.3523238,
      1739637701.0647004,
      {}
    ],
    [
      27,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739637701.085468,
      1739637787.0646648,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      28,
      null,
      209652396,
      null,
      [
        0.2134453876220343,
        0.0021981358528137206
      ],
      455.77990078926086,
      1,
      1739637787.085602,
      1739638242.8679276,
      {}
    ],
    [
      29,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739638242.8870754,
      1739638279.6405702,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      30,
      null,
      209652396,
      null,
      [
        0.2010688177604345,
        0.004063427448272705
      ],
      235.14086747169495,
      1,
      1739638279.6667318,
      1739638514.8096778,
      {}
    ],
    [
      31,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739638515.769875,
      1739638515.81565,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      32,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739638515.8358335,
      1739638515.9779005,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      33,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739638515.9969928,
      1739638516.029164,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      34,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.003816896677017212
      ],
      284.4293613433838,
      1,
      1739638516.0475843,
      1739638800.4787369,
      {}
    ],
    [
      35,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739638800.4995086,
      1739639106.7187533,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      36,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739639106.7394996,
      1739639176.1718035,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      37,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739639176.1988304,
      1739639176.2440088,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      38,
      null,
      209652396,
      null,
      [
        0.2085319249989909,
        0.003588198125362396
      ],
      150.96872282028198,
      1,
      1739639177.434768,
      1739639328.405348,
      {}
    ],
    [
      39,
      null,
      209652396,
      null,
      [
        0.23767705564112748,
        0.004637591540813446
      ],
      410.23320174217224,
      1,
      1739639328.4284034,
      1739639738.6637108,
      {}
    ],
    [
      40,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0015739917755126954
      ],
      811.2106447219849,
      1,
      1739639738.686097,
      1739640549.89878,
      {}
    ],
    [
      41,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739640549.921075,
      1739640569.3977919,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      42,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00099620521068573
      ],
      204.60994124412537,
      1,
      1739640569.420716,
      1739640774.0327156,
      {}
    ],
    [
      43,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739640774.0543375,
      1739640774.0992084,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      44,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739640774.1207156,
      1739640776.165031,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      45,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739640776.188001,
      1739640776.31557,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      46,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739640777.518391,
      1739640779.8044298,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      47,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739640779.829084,
      1739640779.947984,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      48,
      null,
      209652396,
      null,
      [
        0.19984060889749514,
        0.005129966139793396
      ],
      287.4613826274872,
      1,
      1739640779.9706047,
      1739641067.4338558,
      {}
    ],
    [
      49,
      null,
      209652396,
      null,
      [
        0.19805913121781382,
        0.0024745270609855654
      ],
      297.97012758255005,
      1,
      1739641067.4582465,
      1739641365.430382,
      {}
    ],
    [
      50,
      null,
      209652396,
      null,
      [
        0.22867860480135932,
        0.0025867611169815064
      ],
      247.3551321029663,
      1,
      1739641365.4543478,
      1739641612.811504,
      {}
    ],
    [
      51,
      null,
      209652396,
      null,
      [
        0.1784650789141807,
        0.018588155508041382
      ],
      150.22961711883545,
      1,
      1739641612.8364508,
      1739641763.0680125,
      {}
    ],
    [
      52,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739641763.0946817,
      1739642101.510542,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      53,
      null,
      209652396,
      null,
      [
        0.1799084688306245,
        0.01599888950586319
      ],
      186.39620780944824,
      1,
      1739642101.5384586,
      1739642287.9368358,
      {}
    ],
    [
      54,
      null,
      209652396,
      null,
      [
        0.19449654838876398,
        0.0033598363399505613
      ],
      206.9508762359619,
      1,
      1739642289.103943,
      1739642496.056695,
      {}
    ],
    [
      55,
      null,
      209652396,
      null,
      [
        0.207119030696875,
        0.0035751193761825563
      ],
      263.3123641014099,
      1,
      1739642496.0836546,
      1739642759.3980684,
      {}
    ],
    [
      56,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739642759.4246042,
      1739642759.8999643,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      57,
      null,
      209652396,
      null,
      [
        0.16489054587856983,
        0.0321688711643219
      ],
      145.1837146282196,
      1,
      1739642759.9261575,
      1739642905.1117709,
      {}
    ],
    [
      58,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0031417697668075562
      ],
      307.1362805366516,
      1,
      1739642905.1439073,
      1739643212.2825334,
      {}
    ],
    [
      59,
      null,
      209652396,
      null,
      [
        0.18890696211055494,
        0.004782834649085998
      ],
      383.9723598957062,
      1,
      1739643212.3117156,
      1739643596.2864504,
      {}
    ],
    [
      60,
      null,
      209652396,
      null,
      [
        0.1982742179598467,
        0.006788557767868042
      ],
      183.93362545967102,
      1,
      1739643596.3157437,
      1739643780.2512805,
      {}
    ],
    [
      61,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739643780.2794,
      1739643780.4093697,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      62,
      null,
      209652396,
      null,
      [
        0.21292402437612018,
        0.004023474454879761
      ],
      171.983145236969,
      1,
      1739643781.7988002,
      1739643953.7838109,
      {}
    ],
    [
      63,
      null,
      209652396,
      null,
      [
        0.14984199056055342,
        0.07603987008333206
      ],
      341.0276174545288,
      1,
      1739643953.8181465,
      1739644294.8481505,
      {}
    ],
    [
      64,
      null,
      209652396,
      null,
      [
        0.2256999184394394,
        0.0035904929041862487
      ],
      191.83321452140808,
      1,
      1739644294.8776941,
      1739644486.7130237,
      {}
    ],
    [
      65,
      null,
      209652396,
      null,
      [
        0.18396250402238426,
        0.01384807974100113
      ],
      324.4507875442505,
      1,
      1739644486.7418966,
      1739644811.1947918,
      {}
    ],
    [
      66,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739644811.2251642,
      1739644811.3613846,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      67,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739644811.3898551,
      1739644811.498303,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      68,
      null,
      209652396,
      null,
      [
        0.1925308191026754,
        0.006198501586914063
      ],
      366.250519990921,
      1,
      1739644811.5284336,
      1739645177.7808573,
      {}
    ],
    [
      69,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739645177.8112621,
      1739645288.1470268,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      70,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739645288.1928685,
      1739645288.280732,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      71,
      null,
      209652396,
      null,
      [
        0.1821811536631896,
        0.011622533202171326
      ],
      171.79861521720886,
      1,
      1739645289.6907697,
      1739645461.4912174,
      {}
    ],
    [
      72,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0006102591753005982
      ],
      504.00034189224243,
      1,
      1739645461.5223029,
      1739645965.5246212,
      {}
    ],
    [
      73,
      null,
      209652396,
      null,
      [
        0.18838478778598539,
        0.006231573224067688
      ],
      163.12476062774658,
      1,
      1739645965.5560927,
      1739646128.6828802,
      {}
    ],
    [
      74,
      null,
      209652396,
      null,
      [
        0.19772129809554959,
        0.003427565097808838
      ],
      250.74608182907104,
      1,
      1739646128.7153292,
      1739646379.463396,
      {}
    ],
    [
      75,
      null,
      209652396,
      null,
      [
        0.1990417860178339,
        0.004912655055522919
      ],
      192.32579970359802,
      1,
      1739646379.4957197,
      1739646571.8233545,
      {}
    ],
    [
      76,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00037856996059417727
      ],
      211.5380311012268,
      1,
      1739646571.8537443,
      1739646783.3936274,
      {}
    ],
    [
      77,
      null,
      209652396,
      null,
      [
        0.21197135119290805,
        0.0026466265320777894
      ],
      344.0755136013031,
      1,
      1739646783.4247556,
      1739647127.5021198,
      {}
    ],
    [
      78,
      null,
      209652396,
      null,
      [
        0.22357993802604578,
        0.002681957185268402
      ],
      312.2101194858551,
      1,
      1739647128.9046993,
      1739647441.1169367,
      {}
    ],
    [
      79,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739647441.1493504,
      1739647441.291064,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      80,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739647441.3230665,
      1739647441.4524915,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      81,
      null,
      209652396,
      null,
      [
        0.19277657593525854,
        0.004205347597599029
      ],
      277.12549781799316,
      1,
      1739647441.4852085,
      1739647718.6124449,
      {}
    ],
    [
      82,
      null,
      209652396,
      null,
      [
        0.21436745201715263,
        0.003375019133090973
      ],
      172.22696781158447,
      1,
      1739647718.6464932,
      1739647890.8752923,
      {}
    ],
    [
      83,
      null,
      209652396,
      null,
      [
        0.2062898678168139,
        0.002849563956260681
      ],
      390.6025323867798,
      1,
      1739647890.9080138,
      1739648281.5124469,
      {}
    ],
    [
      84,
      null,
      209652396,
      null,
      [
        0.18795479820928923,
        0.010424770414829254
      ],
      424.00633692741394,
      1,
      1739648281.567356,
      1739648705.5758495,
      {}
    ],
    [
      85,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739648705.613345,
      1739648705.857917,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      86,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739648707.3397982,
      1739648936.8194242,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      87,
      null,
      209652396,
      null,
      [
        0.20214396382061048,
        0.006232735514640808
      ],
      269.1755428314209,
      1,
      1739648936.8549995,
      1739649206.0326731,
      {}
    ],
    [
      88,
      null,
      209652396,
      null,
      [
        0.16375423882908915,
        0.04287407398223877
      ],
      204.27937126159668,
      1,
      1739649206.0673673,
      1739649410.348736,
      {}
    ],
    [
      89,
      null,
      209652396,
      null,
      [
        0.20610587085137982,
        0.005426666140556336
      ],
      400.96528005599976,
      1,
      1739649410.3839288,
      1739649811.3511982,
      {}
    ],
    [
      90,
      null,
      209652396,
      null,
      [
        0.21359822407726597,
        0.0020910948514938354
      ],
      178.96342182159424,
      1,
      1739649811.386129,
      1739649990.3517103,
      {}
    ],
    [
      91,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739649990.3925903,
      1739650003.696088,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      92,
      null,
      209652396,
      null,
      [
        0.2163930643721063,
        0.00610186904668808
      ],
      215.7086887359619,
      1,
      1739650003.732309,
      1739650219.4433324,
      {}
    ],
    [
      93,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739650219.482134,
      1739650219.5933113,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      94,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0008429750800132751
      ],
      438.2839767932892,
      1,
      1739650221.3003771,
      1739650659.586332,
      {}
    ],
    [
      95,
      null,
      209652396,
      null,
      [
        0.16142002047690673,
        0.04227904826402664
      ],
      169.85274481773376,
      1,
      1739650659.6318498,
      1739650829.4872465,
      {}
    ],
    [
      96,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739650829.524566,
      1739650893.926416,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      97,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739650893.9629958,
      1739650896.953449,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      98,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739650896.990097,
      1739650907.2224984,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      99,
      null,
      209652396,
      null,
      [
        0.18310250129112404,
        0.013004715740680694
      ],
      226.17004323005676,
      1,
      1739650907.2696593,
      1739651133.4420562,
      {}
    ],
    [
      100,
      null,
      209652396,
      null,
      [
        0.22794111738722514,
        0.0028647646307945252
      ],
      294.5472469329834,
      1,
      1739651133.4839916,
      1739651428.033361,
      {}
    ],
    [
      101,
      null,
      209652396,
      null,
      [
        0.1774208858789697,
        0.014862194657325745
      ],
      912.1231698989868,
      1,
      1739651428.0740914,
      1739652340.1993842,
      {}
    ],
    [
      102,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739652341.9848914,
      1739652370.4005742,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      103,
      null,
      209652396,
      null,
      [
        0.18082984003642685,
        0.011744426190853119
      ],
      279.23765563964844,
      1,
      1739652370.440097,
      1739652649.6798315,
      {}
    ],
    [
      104,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739652649.719487,
      1739652649.870565,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      105,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739652649.9083061,
      1739652650.0439427,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      106,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0008257970213890076
      ],
      95.95680952072144,
      1,
      1739652650.0821276,
      1739652746.0407627,
      {}
    ],
    [
      107,
      null,
      209652396,
      null,
      [
        0.18952097694612663,
        0.008412259817123412
      ],
      378.1645073890686,
      1,
      1739652746.0797484,
      1739653124.2464774,
      {}
    ],
    [
      108,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0022439807653427124
      ],
      339.36525797843933,
      1,
      1739653124.2862384,
      1739653463.653708,
      {}
    ],
    [
      109,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739653463.6935115,
      1739653463.826177,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      110,
      null,
      209652396,
      null,
      [
        0.15008755405461993,
        0.07953838184475899
      ],
      468.59722423553467,
      1,
      1739653465.6830382,
      1739653934.2822354,
      {}
    ],
    [
      111,
      null,
      209652396,
      null,
      [
        0.21203275267646524,
        0.002624203264713287
      ],
      272.30308175086975,
      1,
      1739653934.3226588,
      1739654206.6278334,
      {}
    ],
    [
      112,
      null,
      209652396,
      null,
      [
        0.18955193468666523,
        0.008377748727798461
      ],
      300.4927501678467,
      1,
      1739654206.6710532,
      1739654507.165889,
      {}
    ],
    [
      113,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739654507.2110999,
      1739654507.2575836,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      114,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0017468884587287902
      ],
      300.42408537864685,
      1,
      1739654507.297372,
      1739654807.723305,
      {}
    ],
    [
      115,
      null,
      209652396,
      null,
      [
        0.1905653255952657,
        0.005536170303821563
      ],
      383.9086699485779,
      1,
      1739654807.7647295,
      1739655191.675532,
      {}
    ],
    [
      116,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739655191.718321,
      1739655372.1042109,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      117,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739655372.146555,
      1739655372.4781537,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      118,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.000778430700302124
      ],
      186.49445176124573,
      1,
      1739655374.4300241,
      1739655560.9264119,
      {}
    ],
    [
      119,
      null,
      209652396,
      null,
      [
        0.18313383627754884,
        0.028387962281703948
      ],
      201.95644783973694,
      1,
      1739655560.9699688,
      1739655762.9284892,
      {}
    ],
    [
      120,
      null,
      209652396,
      null,
      [
        0.22437916172946112,
        0.001505492627620697
      ],
      131.48953533172607,
      1,
      1739655762.9707346,
      1739655894.4622827,
      {}
    ],
    [
      121,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00015989840030670167
      ],
      290.3830542564392,
      1,
      1739655894.5051844,
      1739656184.8901567,
      {}
    ],
    [
      122,
      null,
      209652396,
      null,
      [
        0.17487168924294674,
        0.016836434602737427
      ],
      490.3650481700897,
      1,
      1739656184.9340444,
      1739656675.3011615,
      {}
    ],
    [
      123,
      null,
      209652396,
      null,
      [
        0.18844616569167466,
        0.005881117284297943
      ],
      140.52554750442505,
      1,
      1739656675.3456502,
      1739656815.8731825,
      {}
    ],
    [
      124,
      null,
      209652396,
      null,
      [
        0.15411084842222567,
        0.07416778579354286
      ],
      295.46048402786255,
      1,
      1739656815.9178894,
      1739657111.3803313,
      {}
    ],
    [
      125,
      null,
      209652396,
      null,
      [
        0.18918347391401283,
        0.008363574743270874
      ],
      348.26497745513916,
      1,
      1739657111.426752,
      1739657459.6938,
      {}
    ],
    [
      126,
      null,
      209652396,
      null,
      [
        0.23076652874557063,
        0.004496262967586517
      ],
      175.01699590682983,
      1,
      1739657461.542637,
      1739657636.5616562,
      {}
    ],
    [
      127,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739657636.604946,
      1739657719.915861,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      128,
      null,
      209652396,
      null,
      [
        0.21897291695195883,
        0.0031924769282341003
      ],
      165.99905371665955,
      1,
      1739657719.9617045,
      1739657885.9628541,
      {}
    ],
    [
      129,
      null,
      209652396,
      null,
      [
        0.15343512559081424,
        0.06343141496181488
      ],
      140.89470505714417,
      1,
      1739657886.00748,
      1739658026.9042602,
      {}
    ],
    [
      130,
      null,
      209652396,
      null,
      [
        0.21393669851753688,
        0.004520685970783233
      ],
      157.1214451789856,
      1,
      1739658026.9508667,
      1739658184.074503,
      {}
    ],
    [
      131,
      null,
      209652396,
      null,
      [
        0.17646879271130766,
        0.01720404326915741
      ],
      185.55410242080688,
      1,
      1739658184.1204433,
      1739658369.6766226,
      {}
    ],
    [
      132,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739658369.7230413,
      1739658392.3048306,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      133,
      null,
      209652396,
      null,
      [
        0.18844623642527833,
        0.005056227743625641
      ],
      257.459490776062,
      1,
      1739658392.3503752,
      1739658649.8117988,
      {}
    ],
    [
      134,
      null,
      209652396,
      null,
      [
        0.18383933324053087,
        0.009106013178825378
      ],
      255.32896947860718,
      1,
      1739658651.89791,
      1739658907.2288609,
      {}
    ],
    [
      135,
      null,
      209652396,
      null,
      [
        0.1940050347235976,
        0.0037133291363716124
      ],
      308.12133955955505,
      1,
      1739658907.276856,
      1739659215.4001443,
      {}
    ],
    [
      136,
      null,
      209652396,
      null,
      [
        0.1558305568036107,
        0.06036252081394196
      ],
      191.14541029930115,
      1,
      1739659215.461209,
      1739659406.609047,
      {}
    ],
    [
      137,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739659406.671695,
      1739659406.7414618,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      138,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739659406.7877476,
      1739659726.863056,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      139,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739659726.9121954,
      1739659780.2411096,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      140,
      null,
      209652396,
      null,
      [
        0.19523359253898176,
        0.0018142610788345337
      ],
      308.1721444129944,
      1,
      1739659780.2903032,
      1739660088.4645896,
      {}
    ],
    [
      141,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739660088.5136814,
      1739660088.6664178,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      142,
      null,
      209652396,
      null,
      [
        0.1913329643868566,
        0.006964826583862304
      ],
      192.79787921905518,
      1,
      1739660090.6961315,
      1739660283.4959662,
      {}
    ],
    [
      143,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        3.0122697353363037e-05
      ],
      179.61272859573364,
      1,
      1739660283.544974,
      1739660463.1596224,
      {}
    ],
    [
      144,
      null,
      209652396,
      null,
      [
        0.21298502503592323,
        0.0026019781827926634
      ],
      304.0737364292145,
      1,
      1739660463.2136827,
      1739660767.289417,
      {}
    ],
    [
      145,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739660767.3373823,
      1739660767.392106,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      146,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739660767.4404063,
      1739660767.5641944,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      147,
      null,
      209652396,
      null,
      [
        0.2028807957700173,
        0.004163499176502228
      ],
      240.65560841560364,
      1,
      1739660767.6129234,
      1739661008.2703147,
      {}
    ],
    [
      148,
      null,
      209652396,
      null,
      [
        0.1991034845825265,
        0.005320504307746887
      ],
      307.4773094654083,
      1,
      1739661008.3187556,
      1739661315.7979865,
      {}
    ],
    [
      149,
      null,
      209652396,
      null,
      [
        0.16728591107333624,
        0.036233948171138765
      ],
      450.71926641464233,
      1,
      1739661315.8477306,
      1739661766.5690718,
      {}
    ],
    [
      150,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739661768.5927422,
      1739661768.7814693,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      151,
      null,
      209652396,
      null,
      [
        0.157396971319127,
        0.05736740976572037
      ],
      302.26435685157776,
      1,
      1739661768.8462453,
      1739662071.1129026,
      {}
    ],
    [
      152,
      null,
      209652396,
      null,
      [
        0.18804697824158903,
        0.006213553249835968
      ],
      152.4867227077484,
      1,
      1739662071.1649706,
      1739662223.6535976,
      {}
    ],
    [
      153,
      null,
      209652396,
      null,
      [
        0.1970149287514557,
        0.0031290486454963683
      ],
      265.9267568588257,
      1,
      1739662223.705294,
      1739662489.633829,
      {}
    ],
    [
      154,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.003053803741931915
      ],
      748.0866582393646,
      1,
      1739662489.6981843,
      1739663237.7871916,
      {}
    ],
    [
      155,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739663237.8383982,
      1739663237.9676719,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      156,
      null,
      209652396,
      null,
      [
        0.19250014429655146,
        0.006923243403434753
      ],
      161.3951280117035,
      1,
      1739663238.0190005,
      1739663399.4158907,
      {}
    ],
    [
      157,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00018318295478820802
      ],
      149.37476301193237,
      1,
      1739663399.4747713,
      1739663548.85147,
      {}
    ],
    [
      158,
      null,
      209652396,
      null,
      [
        0.2082555735250346,
        0.004107242822647095
      ],
      119.09511399269104,
      1,
      1739663548.9474237,
      1739663668.0444937,
      {}
    ],
    [
      159,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739663670.2821047,
      1739663722.59173,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      160,
      null,
      209652396,
      null,
      [
        0.1845766603251633,
        0.009989814460277557
      ],
      315.3343482017517,
      1,
      1739663722.6441894,
      1739664037.9804764,
      {}
    ],
    [
      161,
      null,
      209652396,
      null,
      [
        0.23684775129385907,
        0.0021984651684761047
      ],
      687.4036190509796,
      1,
      1739664038.0331051,
      1739664725.4388165,
      {}
    ],
    [
      162,
      null,
      209652396,
      null,
      [
        0.24084023881928074,
        0.004190520942211151
      ],
      441.67726588249207,
      1,
      1739664725.4917028,
      1739665167.1710215,
      {}
    ],
    [
      163,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739665167.224399,
      1739665246.860839,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      164,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739665246.9143162,
      1739665270.063687,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      165,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001360677182674408
      ],
      267.40838265419006,
      1,
      1739665270.1164303,
      1739665537.5266132,
      {}
    ],
    [
      166,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739665540.1343853,
      1739665544.183676,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      167,
      null,
      209652396,
      null,
      [
        0.22023247494804382,
        0.0031141474843025207
      ],
      242.17419171333313,
      1,
      1739665544.2391956,
      1739665786.4154608,
      {}
    ],
    [
      168,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739665786.4734776,
      1739665802.4187617,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      169,
      null,
      209652396,
      null,
      [
        0.18933685737577952,
        0.00806768387556076
      ],
      260.2020797729492,
      1,
      1739665802.4797494,
      1739666062.683867,
      {}
    ],
    [
      170,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739666062.7473955,
      1739666062.8528202,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      171,
      null,
      209652396,
      null,
      [
        0.20939225782040155,
        0.0061662569642066956
      ],
      708.0502843856812,
      1,
      1739666062.9077194,
      1739666770.9598157,
      {}
    ],
    [
      172,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739666771.016545,
      1739666771.1357467,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      173,
      null,
      209652396,
      null,
      [
        0.19747559313427576,
        0.003624357283115387
      ],
      293.81790494918823,
      1,
      1739666771.1904502,
      1739667065.0101993,
      {}
    ],
    [
      174,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739667067.3877633,
      1739667067.7274325,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      175,
      null,
      209652396,
      null,
      [
        0.19498787814656077,
        0.0031739071011543272
      ],
      152.9531373977661,
      1,
      1739667067.8001168,
      1739667220.7555435,
      {}
    ],
    [
      176,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        1.9371509552001954e-08
      ],
      241.3735375404358,
      1,
      1739667220.813689,
      1739667462.1893039,
      {}
    ],
    [
      177,
      null,
      209652396,
      null,
      [
        0.19164014628086484,
        0.009205292165279388
      ],
      401.04740142822266,
      1,
      1739667462.2531486,
      1739667863.3025658,
      {}
    ],
    [
      178,
      null,
      209652396,
      null,
      [
        0.1954177026781817,
        0.007541397213935852
      ],
      193.85039925575256,
      1,
      1739667863.3601284,
      1739668057.2124772,
      {}
    ],
    [
      179,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739668057.2697873,
      1739668106.7037978,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      180,
      null,
      209652396,
      null,
      [
        0.20914600113701906,
        0.0030913993716239927
      ],
      170.40407705307007,
      1,
      1739668106.7629657,
      1739668277.169023,
      {}
    ],
    [
      181,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739668277.2290268,
      1739668285.180235,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      182,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739668287.731469,
      1739668685.7713072,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      183,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739668685.8310525,
      1739668685.9486501,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      184,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        6.980299949645996e-05
      ],
      322.6924629211426,
      1,
      1739668686.0144236,
      1739669008.7087238,
      {}
    ],
    [
      185,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739669008.768451,
      1739669008.897013,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      186,
      null,
      209652396,
      null,
      [
        0.23690917635528413,
        0.0029846787452697753
      ],
      132.44466829299927,
      1,
      1739669008.9551508,
      1739669141.4016023,
      {}
    ],
    [
      187,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739669141.4609773,
      1739669168.7464404,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      188,
      null,
      209652396,
      null,
      [
        0.23798397346301542,
        0.0033992260694503786
      ],
      152.28206634521484,
      1,
      1739669168.8104641,
      1739669321.0947418,
      {}
    ],
    [
      189,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739669321.1587973,
      1739669478.910348,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      190,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0007863923907279968
      ],
      136.1581678390503,
      1,
      1739669481.450339,
      1739669617.6105351,
      {}
    ],
    [
      191,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739669617.671351,
      1739669781.7966676,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      192,
      null,
      209652396,
      null,
      [
        0.15966949582219042,
        0.04606809318065643
      ],
      211.90263652801514,
      1,
      1739669781.8584437,
      1739669993.76313,
      {}
    ],
    [
      193,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739669993.8254402,
      1739670026.780663,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      194,
      null,
      209652396,
      null,
      [
        0.19197812558591001,
        0.008036939799785614
      ],
      240.9281222820282,
      1,
      1739670026.840919,
      1739670267.7708108,
      {}
    ],
    [
      195,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0011171966791152955
      ],
      161.94799995422363,
      1,
      1739670267.8372793,
      1739670429.787189,
      {}
    ],
    [
      196,
      null,
      209652396,
      null,
      [
        0.238137536116578,
        0.0019559398293495177
      ],
      366.7845299243927,
      1,
      1739670429.8524303,
      1739670796.6390448,
      {}
    ],
    [
      197,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739670796.7057507,
      1739670796.8350906,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      198,
      null,
      209652396,
      null,
      [
        0.19452699684735614,
        0.005060084164142609
      ],
      390.1308650970459,
      1,
      1739670796.9896746,
      1739671187.1227918,
      {}
    ],
    [
      199,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.0023604884743690492
      ],
      118.63146185874939,
      1,
      1739671189.7350473,
      1739671308.3685274,
      {}
    ],
    [
      200,
      null,
      209652396,
      null,
      [
        0.2390897660358738,
        0.002216777205467224
      ],
      176.04372382164001,
      1,
      1739671308.4304202,
      1739671484.4760196,
      {}
    ],
    [
      201,
      null,
      209652396,
      null,
      [
        0.20113021924399171,
        0.004416918754577637
      ],
      187.37738275527954,
      1,
      1739671484.538404,
      1739671671.9176946,
      {}
    ],
    [
      202,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739671671.980577,
      1739671787.8260746,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      203,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739671787.8934402,
      1739671788.0140905,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      204,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739671788.0790195,
      1739671788.2484214,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      205,
      null,
      209652396,
      null,
      [
        0.21086589814134724,
        0.0023244425654411318
      ],
      418.2011249065399,
      1,
      1739671788.3129113,
      1739672206.5159075,
      {}
    ],
    [
      206,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739672209.5788193,
      1739672298.5421631,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      207,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739672298.6077452,
      1739672325.5206559,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      208,
      null,
      209652396,
      null,
      [
        0.18838495283106063,
        0.010340563952922821
      ],
      212.59090948104858,
      1,
      1739672325.5863776,
      1739672538.1794188,
      {}
    ],
    [
      209,
      null,
      209652396,
      null,
      [
        0.23239459938561735,
        0.0025824546813964845
      ],
      174.2341501712799,
      1,
      1739672538.2456005,
      1739672712.4817214,
      {}
    ],
    [
      210,
      null,
      209652396,
      null,
      [
        0.19317590485255154,
        0.0037233516573905944
      ],
      307.9440290927887,
      1,
      1739672712.5460198,
      1739673020.4919353,
      {}
    ],
    [
      211,
      null,
      209652396,
      null,
      [
        0.2158414412905431,
        0.006357356905937195
      ],
      233.02204751968384,
      1,
      1739673020.5595584,
      1739673253.5835657,
      {}
    ],
    [
      212,
      null,
      209652396,
      null,
      [
        0.19959463986410092,
        0.0048322916030883786
      ],
      263.7661714553833,
      1,
      1739673253.657829,
      1739673517.42609,
      {}
    ],
    [
      213,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739673517.5116885,
      1739673517.633743,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      214,
      null,
      209652396,
      null,
      [
        0.19299175698876297,
        0.003275354206562042
      ],
      249.9762623310089,
      1,
      1739673520.6513507,
      1739673770.6295974,
      {}
    ],
    [
      215,
      null,
      209652396,
      null,
      [
        0.2034026824445986,
        0.005279320478439331
      ],
      211.35943579673767,
      1,
      1739673770.699213,
      1739673982.0607314,
      {}
    ],
    [
      216,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739673982.13111,
      1739673994.8878896,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      217,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739673994.9547436,
      1739674016.9070475,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      218,
      null,
      209652396,
      null,
      [
        0.15948528665594536,
        0.05398223102092743
      ],
      173.6260368824005,
      1,
      1739674016.9753356,
      1739674190.603433,
      {}
    ],
    [
      219,
      null,
      209652396,
      null,
      [
        0.19882670399137464,
        0.0036457180976867676
      ],
      300.45990657806396,
      1,
      1739674190.673183,
      1739674491.1351035,
      {}
    ],
    [
      220,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739674491.206435,
      1739674491.3442268,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      221,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739674491.411159,
      1739674670.329091,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      222,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.002042117714881897
      ],
      172.85761547088623,
      1,
      1739674673.3219457,
      1739674846.1815782,
      {}
    ],
    [
      223,
      null,
      209652396,
      null,
      [
        0.19959478604688183,
        0.0034525543451309204
      ],
      252.17093634605408,
      1,
      1739674846.2659793,
      1739675098.4391525,
      {}
    ],
    [
      224,
      null,
      209652396,
      null,
      [
        0.16605759846777812,
        0.035031452775001526
      ],
      190.7895872592926,
      1,
      1739675098.5122604,
      1739675289.3039682,
      {}
    ],
    [
      225,
      null,
      209652396,
      null,
      [
        0.21405993531742035,
        0.0022724494338035583
      ],
      391.87918877601624,
      1,
      1739675289.372561,
      1739675681.2537823,
      {}
    ],
    [
      226,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739675681.3275976,
      1739675958.2941911,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      227,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.002750447392463684
      ],
      183.66459012031555,
      1,
      1739675958.3652334,
      1739676142.0318825,
      {}
    ],
    [
      228,
      null,
      209652396,
      null,
      [
        0.2007922069299315,
        0.00283629447221756
      ],
      328.8989372253418,
      1,
      1739676142.100818,
      1739676471.0017219,
      {}
    ],
    [
      229,
      null,
      209652396,
      null,
      [
        0.18906038801248382,
        0.005994515120983123
      ],
      124.72182559967041,
      1,
      1739676471.0716865,
      1739676595.79565,
      {}
    ],
    [
      230,
      null,
      209652396,
      null,
      [
        0.2396117375907795,
        0.0009079977869987487
      ],
      230.21755933761597,
      1,
      1739676595.9327483,
      1739676826.1522095,
      {}
    ],
    [
      231,
      null,
      209652396,
      null,
      [
        0.21627159591231448,
        0.0019867017865180968
      ],
      220.19625520706177,
      1,
      1739676829.1544576,
      1739677049.352695,
      {}
    ],
    [
      232,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739677049.4445148,
      1739677151.631206,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      233,
      null,
      209652396,
      null,
      [
        0.17677571524876914,
        0.01807529479265213
      ],
      217.17217707633972,
      1,
      1739677151.7288668,
      1739677368.9030926,
      {}
    ],
    [
      234,
      null,
      209652396,
      null,
      [
        0.2241646219939633,
        0.0034347176551818848
      ],
      626.9225981235504,
      1,
      1739677368.9746585,
      1739677995.8996668,
      {}
    ],
    [
      235,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00039163678884506225
      ],
      221.92238593101501,
      1,
      1739677995.9761953,
      1739678217.9014394,
      {}
    ],
    [
      236,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739678217.9723144,
      1739678376.5555432,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      237,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739678376.6289294,
      1739678387.908692,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      238,
      null,
      209652396,
      null,
      [
        0.18807789825753896,
        0.011451391875743866
      ],
      349.46621680259705,
      1,
      1739678391.2277977,
      1739678740.6959743,
      {}
    ],
    [
      239,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0008209794759750366
      ],
      304.6148331165314,
      1,
      1739678740.7687736,
      1739679045.3855097,
      {}
    ],
    [
      240,
      null,
      209652396,
      null,
      [
        0.19173244891807767,
        0.004349939525127411
      ],
      270.9111270904541,
      1,
      1739679045.4579837,
      1739679316.3709512,
      {}
    ],
    [
      241,
      null,
      209652396,
      null,
      [
        0.18236526851796314,
        0.013663759827613831
      ],
      214.91856861114502,
      1,
      1739679316.4455068,
      1739679531.3660593,
      {}
    ],
    [
      242,
      null,
      209652396,
      null,
      [
        0.18405458031206534,
        0.011290661990642548
      ],
      792.894161939621,
      1,
      1739679531.4403489,
      1739680324.33652,
      {}
    ],
    [
      243,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739680324.4246242,
      1739680331.6551094,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      244,
      null,
      209652396,
      null,
      [
        0.20423205752547072,
        0.0014066353440284729
      ],
      191.762864112854,
      1,
      1739680331.7309716,
      1739680523.4958472,
      {}
    ],
    [
      245,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739680523.5702324,
      1739680523.6761386,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      246,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739680526.8971338,
      1739680526.9582834,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      247,
      null,
      209652396,
      null,
      [
        0.24001112309495545,
        0.0011855229735374452
      ],
      140.7064881324768,
      1,
      1739680527.032814,
      1739680667.741163,
      {}
    ],
    [
      248,
      null,
      209652396,
      null,
      [
        0.20696540674085587,
        0.002023318409919739
      ],
      399.0617763996124,
      1,
      1739680667.8166652,
      1739681066.8804514,
      {}
    ],
    [
      249,
      null,
      209652396,
      null,
      [
        0.18691065232981402,
        0.006531444191932678
      ],
      149.8014988899231,
      1,
      1739681066.955595,
      1739681216.7590494,
      {}
    ],
    [
      250,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739681216.834831,
      1739681227.9804983,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      251,
      null,
      209652396,
      null,
      [
        0.18976693654837368,
        0.004907824099063873
      ],
      244.53210973739624,
      1,
      1739681228.0570068,
      1739681472.591149,
      {}
    ],
    [
      252,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739681472.6713564,
      1739681492.516017,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      253,
      null,
      209652396,
      null,
      [
        0.1735205123678178,
        0.017002633213996886
      ],
      177.0445613861084,
      1,
      1739681492.5925114,
      1739681669.6390896,
      {}
    ],
    [
      254,
      null,
      209652396,
      null,
      [
        0.20159093549812113,
        0.00303434282541275
      ],
      386.4975881576538,
      1,
      1739681669.7912529,
      1739682056.2907681,
      {}
    ],
    [
      255,
      null,
      209652396,
      null,
      [
        0.14993405270351376,
        0.08682706952095032
      ],
      167.63331007957458,
      1,
      1739682059.5498612,
      1739682227.1852696,
      {}
    ],
    [
      256,
      null,
      209652396,
      null,
      [
        0.18976704500656594,
        0.008305874466896058
      ],
      362.02230501174927,
      1,
      1739682227.2641106,
      1739682589.2885792,
      {}
    ],
    [
      257,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0013524293899536133
      ],
      269.48585414886475,
      1,
      1739682589.3672812,
      1739682858.8552306,
      {}
    ],
    [
      258,
      null,
      209652396,
      null,
      [
        0.19093400328430268,
        0.005388641357421875
      ],
      235.4319405555725,
      1,
      1739682858.9332511,
      1739683094.3673215,
      {}
    ],
    [
      259,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739683094.4457958,
      1739683263.3956668,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      260,
      null,
      209652396,
      null,
      [
        0.22281198329102522,
        0.002264559268951416
      ],
      193.83006119728088,
      1,
      1739683263.473874,
      1739683457.305945,
      {}
    ],
    [
      261,
      null,
      209652396,
      null,
      [
        0.18955177435716358,
        0.00798415094614029
      ],
      332.39967489242554,
      1,
      1739683457.4055982,
      1739683789.8076217,
      {}
    ],
    [
      262,
      null,
      209652396,
      null,
      [
        0.19990149638353233,
        0.004956240952014923
      ],
      379.2225308418274,
      1,
      1739683793.4005089,
      1739684172.6251614,
      {}
    ],
    [
      263,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739684172.7058332,
      1739684178.63802,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      264,
      null,
      209652396,
      null,
      [
        0.1920702678936212,
        0.003789304196834564
      ],
      170.1492521762848,
      1,
      1739684178.7163763,
      1739684348.8675542,
      {}
    ],
    [
      265,
      null,
      209652396,
      null,
      [
        0.2014067404785968,
        0.004719193279743195
      ],
      173.8982343673706,
      1,
      1739684348.947647,
      1739684522.847896,
      {}
    ],
    [
      266,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739684522.9286067,
      1739684564.156232,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      267,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0017471641302108764
      ],
      484.14784264564514,
      1,
      1739684564.2385802,
      1739685048.388504,
      {}
    ],
    [
      268,
      null,
      209652396,
      null,
      [
        0.18783210841594075,
        0.007336755096912384
      ],
      250.39405822753906,
      1,
      1739685048.4793515,
      1739685298.8753817,
      {}
    ],
    [
      269,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00035919249057769775
      ],
      351.560213804245,
      1,
      1739685298.9554956,
      1739685650.5176823,
      {}
    ],
    [
      270,
      null,
      209652396,
      null,
      [
        0.2386903616694036,
        0.0013004496693611145
      ],
      292.90536284446716,
      1,
      1739685654.1457274,
      1739685947.0530398,
      {}
    ],
    [
      271,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739685947.1369455,
      1739686772.6803591,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      272,
      null,
      209652396,
      null,
      [
        0.153711448771329,
        0.06869547963142394
      ],
      290.9278426170349,
      1,
      1739686772.7629285,
      1739687063.6929045,
      {}
    ],
    [
      273,
      null,
      209652396,
      null,
      [
        0.16562766547796487,
        0.038942015171051024
      ],
      123.20019674301147,
      1,
      1739687063.7760584,
      1739687186.9783854,
      {}
    ],
    [
      274,
      null,
      209652396,
      null,
      [
        0.1923465863585624,
        0.005752192437648773
      ],
      213.79119086265564,
      1,
      1739687187.0584698,
      1739687400.851405,
      {}
    ],
    [
      275,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739687400.9328954,
      1739687459.7644155,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      276,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739687459.8471937,
      1739687655.3159897,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      277,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0012227118015289307
      ],
      324.03897070884705,
      1,
      1739687655.398521,
      1739687979.439578,
      {}
    ],
    [
      278,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739687983.2154567,
      1739688019.40644,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      279,
      null,
      209652396,
      null,
      [
        0.1837781581045054,
        0.011031821370124817
      ],
      263.68215584754944,
      1,
      1739688019.502911,
      1739688283.1871274,
      {}
    ],
    [
      280,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739688283.2714708,
      1739688291.1559672,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      281,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739688291.243066,
      1739688301.9366996,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      282,
      null,
      209652396,
      null,
      [
        0.16507471732022633,
        0.033814847469329834
      ],
      709.0975961685181,
      1,
      1739688302.019544,
      1739689011.1190917,
      {}
    ],
    [
      283,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739689011.2027035,
      1739689043.0602236,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      284,
      null,
      209652396,
      null,
      [
        0.239581025060067,
        0.0009709775447845459
      ],
      187.48595190048218,
      1,
      1739689043.1449451,
      1739689230.6329165,
      {}
    ],
    [
      285,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739689230.717958,
      1739689233.7443123,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      286,
      null,
      209652396,
      null,
      [
        0.19541779227407968,
        0.004802975058555603
      ],
      251.88991975784302,
      1,
      1739689237.5217526,
      1739689489.4137013,
      {}
    ],
    [
      287,
      null,
      209652396,
      null,
      [
        0.17880297805447504,
        0.022167737782001495
      ],
      247.7399082183838,
      1,
      1739689489.4993944,
      1739689737.24136,
      {}
    ],
    [
      288,
      null,
      209652396,
      null,
      [
        0.18426944070656642,
        0.012294574081897736
      ],
      180.5171754360199,
      1,
      1739689737.3509088,
      1739689917.8706114,
      {}
    ],
    [
      289,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739689917.9564338,
      1739689923.1836112,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      290,
      null,
      209652396,
      null,
      [
        0.2023590034069076,
        0.0024910300970077516
      ],
      253.6824324131012,
      1,
      1739689923.269982,
      1739690176.9544919,
      {}
    ],
    [
      291,
      null,
      209652396,
      null,
      [
        0.21725324157958886,
        0.002765186131000519
      ],
      203.0177562236786,
      1,
      1739690177.0418165,
      1739690380.0615785,
      {}
    ],
    [
      292,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0014549314975738526
      ],
      324.5058674812317,
      1,
      1739690380.1470032,
      1739690704.6548853,
      {}
    ],
    [
      293,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739690704.7473042,
      1739690750.0388758,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      294,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739690753.9180958,
      1739690755.1767738,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      295,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0009140893816947937
      ],
      257.32104897499084,
      1,
      1739690755.2610443,
      1739691012.5838282,
      {}
    ],
    [
      296,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739691012.6744769,
      1739691098.326285,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      297,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739691098.414985,
      1739691098.5662425,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      298,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739691098.652143,
      1739691115.5098329,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      299,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739691115.5975602,
      1739691115.7933917,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      300,
      null,
      209652396,
      null,
      [
        0.18172041383119228,
        0.012066608667373658
      ],
      241.01205444335938,
      1,
      1739691115.8785915,
      1739691356.8924272,
      {}
    ],
    [
      301,
      null,
      209652396,
      null,
      [
        0.17732839933438735,
        0.020247921347618103
      ],
      103.65748143196106,
      1,
      1739691356.9811382,
      1739691460.6406627,
      {}
    ],
    [
      302,
      null,
      209652396,
      null,
      [
        0.24004171302075497,
        0.001980006694793701
      ],
      168.61183738708496,
      1,
      1739691460.827929,
      1739691629.441869,
      {}
    ],
    [
      303,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0003346651792526245
      ],
      370.90906715393066,
      1,
      1739691633.4069679,
      1739692004.3181946,
      {}
    ],
    [
      304,
      null,
      209652396,
      null,
      [
        0.198980370387556,
        0.002899971604347229
      ],
      395.83292961120605,
      1,
      1739692004.410798,
      1739692400.246388,
      {}
    ],
    [
      305,
      null,
      209652396,
      null,
      [
        0.17772791687462347,
        0.011014576256275176
      ],
      244.57942962646484,
      1,
      1739692400.335586,
      1739692644.916939,
      {}
    ],
    [
      306,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739692645.0073504,
      1739692645.1633854,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      307,
      null,
      209652396,
      null,
      [
        0.1523294556228688,
        0.07863326594233513
      ],
      97.7312741279602,
      1,
      1739692645.2510428,
      1739692742.9841218,
      {}
    ],
    [
      308,
      null,
      209652396,
      null,
      [
        0.1925002433235966,
        0.003522023558616638
      ],
      207.62913393974304,
      1,
      1739692743.0755851,
      1739692950.7065768,
      {}
    ],
    [
      309,
      null,
      209652396,
      null,
      [
        0.19305294155593558,
        0.004907725751399994
      ],
      172.73605680465698,
      1,
      1739692950.798759,
      1739693123.5367475,
      {}
    ],
    [
      310,
      null,
      209652396,
      null,
      [
        0.2024511598613395,
        0.002203799784183502
      ],
      170.9278597831726,
      1,
      1739693127.4586644,
      1739693298.3885872,
      {}
    ],
    [
      311,
      null,
      209652396,
      null,
      [
        0.2172852556086089,
        0.0029471293091773987
      ],
      373.7582902908325,
      1,
      1739693298.479172,
      1739693672.2393467,
      {}
    ],
    [
      312,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.0020221292972564696
      ],
      189.83225393295288,
      1,
      1739693672.330264,
      1739693862.1645029,
      {}
    ],
    [
      313,
      null,
      209652396,
      null,
      [
        0.19234669481675468,
        0.0037587732076644897
      ],
      215.92822790145874,
      1,
      1739693862.2544274,
      1739694078.1845279,
      {}
    ],
    [
      314,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739694078.2756872,
      1739694183.656443,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      315,
      null,
      209652396,
      null,
      [
        0.19019710060129222,
        0.005168244242668152
      ],
      154.23784160614014,
      1,
      1739694183.7481186,
      1739694337.9878428,
      {}
    ],
    [
      316,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739694338.0791903,
      1739694417.2187843,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      317,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0019976258277893066
      ],
      120.38236141204834,
      1,
      1739694417.3128214,
      1739694537.6970375,
      {}
    ],
    [
      318,
      null,
      209652396,
      null,
      [
        0.23988829183439958,
        0.002837243676185608
      ],
      262.8905806541443,
      1,
      1739694537.9195292,
      1739694800.8121305,
      {}
    ],
    [
      319,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739694800.9046545,
      1739694876.7894025,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      320,
      null,
      209652396,
      null,
      [
        0.19756761755264748,
        0.002868075668811798
      ],
      198.4844105243683,
      1,
      1739694880.959012,
      1739695079.4453623,
      {}
    ],
    [
      321,
      null,
      209652396,
      null,
      [
        0.1905346272112739,
        0.004922565817832947
      ],
      183.42526721954346,
      1,
      1739695079.5380254,
      1739695262.965088,
      {}
    ],
    [
      322,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739695263.0582163,
      1739695357.3148882,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      323,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739695357.4101746,
      1739695837.3728716,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      324,
      null,
      209652396,
      null,
      [
        0.19833536951800423,
        0.0026777461171150208
      ],
      392.2783110141754,
      1,
      1739695837.4734776,
      1739696229.75455,
      {}
    ],
    [
      325,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739696229.8489347,
      1739696229.95853,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      326,
      null,
      209652396,
      null,
      [
        0.1830411139542876,
        0.009675763547420502
      ],
      218.236798286438,
      1,
      1739696234.2578034,
      1739696452.4963987,
      {}
    ],
    [
      327,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739696452.594894,
      1739696458.821864,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      328,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0008516296744346619
      ],
      103.44778060913086,
      1,
      1739696458.915298,
      1739696562.365,
      {}
    ],
    [
      329,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739696562.4621913,
      1739696562.5793626,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      330,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739696562.6722937,
      1739696566.4835284,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      331,
      null,
      209652396,
      null,
      [
        0.18982822957373852,
        0.00568973422050476
      ],
      314.9223177433014,
      1,
      1739696566.578519,
      1739696881.502691,
      {}
    ],
    [
      332,
      null,
      209652396,
      null,
      [
        0.1778508707400923,
        0.017584264278411865
      ],
      263.31939911842346,
      1,
      1739696881.836951,
      1739697145.1582768,
      {}
    ],
    [
      333,
      null,
      209652396,
      null,
      [
        0.2144897598490413,
        0.0034275874495506287
      ],
      288.520135641098,
      1,
      1739697145.2656646,
      1739697433.7878842,
      {}
    ],
    [
      334,
      null,
      209652396,
      null,
      [
        0.23773839110665457,
        0.0029154956340789796
      ],
      142.59488153457642,
      1,
      1739697438.0347366,
      1739697580.6315753,
      {}
    ],
    [
      335,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739697580.7262602,
      1739697580.840588,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      336,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739697580.9353275,
      1739697611.7144778,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      337,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001731574535369873
      ],
      158.60598039627075,
      1,
      1739697611.8108108,
      1739697770.4188006,
      {}
    ],
    [
      338,
      null,
      209652396,
      null,
      [
        0.17063353448083987,
        0.027707004547119142
      ],
      121.45705819129944,
      1,
      1739697770.5153387,
      1739697891.9743512,
      {}
    ],
    [
      339,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739697892.075003,
      1739697892.212905,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      340,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.001592010259628296
      ],
      288.85113430023193,
      1,
      1739697892.3084962,
      1739698181.1614642,
      {}
    ],
    [
      341,
      null,
      209652396,
      null,
      [
        0.20506148919322573,
        0.004227264225482941
      ],
      351.1540222167969,
      1,
      1739698181.258225,
      1739698532.4142847,
      {}
    ],
    [
      342,
      null,
      209652396,
      null,
      [
        0.23433016314752844,
        0.003285035490989685
      ],
      290.6882610321045,
      1,
      1739698536.858809,
      1739698827.549189,
      {}
    ],
    [
      343,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739698827.646664,
      1739698827.8117626,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      344,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739698827.908461,
      1739698828.0281246,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      345,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00035064071416854856
      ],
      224.90783262252808,
      1,
      1739698828.1261618,
      1739699053.0357964,
      {}
    ],
    [
      346,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739699053.1369004,
      1739699058.244412,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      347,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739699058.3421323,
      1739699404.8407977,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      348,
      null,
      209652396,
      null,
      [
        0.19243876167528864,
        0.00500916838645935
      ],
      240.7114338874817,
      1,
      1739699404.9412768,
      1739699645.6547883,
      {}
    ],
    [
      349,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739699645.7609167,
      1739699852.119235,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      350,
      null,
      209652396,
      null,
      [
        0.2291705334370005,
        0.0027723997831344605
      ],
      184.23267459869385,
      1,
      1739699856.5555909,
      1739700040.7903488,
      {}
    ],
    [
      351,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0006369739770889282
      ],
      432.4433398246765,
      1,
      1739700040.9020765,
      1739700473.3474073,
      {}
    ],
    [
      352,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739700473.447557,
      1739700473.6061716,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      353,
      null,
      209652396,
      null,
      [
        0.21224801861029405,
        0.0033921316266059876
      ],
      245.8163857460022,
      1,
      1739700473.7132304,
      1739700719.5314033,
      {}
    ],
    [
      354,
      null,
      209652396,
      null,
      [
        0.19922609421112414,
        0.01235843002796173
      ],
      238.82714009284973,
      1,
      1739700719.6356213,
      1739700958.4648502,
      {}
    ],
    [
      355,
      null,
      209652396,
      null,
      [
        0.15933169099336766,
        0.052281910181045534
      ],
      359.20477318763733,
      1,
      1739700958.5662684,
      1739701317.77337,
      {}
    ],
    [
      356,
      null,
      209652396,
      null,
      [
        0.18328649354098456,
        0.013674062490463258
      ],
      326.94256043434143,
      1,
      1739701317.8793197,
      1739701644.8245816,
      {}
    ],
    [
      357,
      null,
      209652396,
      null,
      [
        0.1887840082450861,
        0.00457046627998352
      ],
      195.61042189598083,
      1,
      1739701644.9285293,
      1739701840.540891,
      {}
    ],
    [
      358,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739701845.310267,
      1739701922.8999188,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      359,
      null,
      209652396,
      null,
      [
        0.2272044929230558,
        0.0020515233278274535
      ],
      201.23481726646423,
      1,
      1739701923.005017,
      1739702124.241943,
      {}
    ],
    [
      360,
      null,
      209652396,
      null,
      [
        0.240625251104293,
        0.003225719928741455
      ],
      156.52622985839844,
      1,
      1739702124.3431876,
      1739702280.8716304,
      {}
    ],
    [
      361,
      null,
      209652396,
      null,
      [
        0.1982124580926976,
        0.0034751683473587037
      ],
      534.6787641048431,
      1,
      1739702280.9735475,
      1739702815.6543593,
      {}
    ],
    [
      362,
      null,
      209652396,
      null,
      [
        0.18276458328853534,
        0.012041340768337249
      ],
      201.29769849777222,
      1,
      1739702815.7588987,
      1739703017.0586867,
      {}
    ],
    [
      363,
      null,
      209652396,
      null,
      [
        0.1914867911125396,
        0.005195164680480957
      ],
      273.41834354400635,
      1,
      1739703017.2005017,
      1739703290.62136,
      {}
    ],
    [
      364,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739703290.7317607,
      1739703310.1930485,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      365,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739703310.3009238,
      1739703340.8397524,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      366,
      null,
      209652396,
      null,
      [
        0.18899920344531124,
        0.008217543363571167
      ],
      115.30322551727295,
      1,
      1739703341.0736926,
      1739703456.3792045,
      {}
    ],
    [
      367,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739703461.0228856,
      1739703461.0827928,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      368,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00042728781700134276
      ],
      215.35530614852905,
      1,
      1739703461.2089393,
      1739703676.5660603,
      {}
    ],
    [
      369,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739703676.6695223,
      1739703676.785637,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      370,
      null,
      209652396,
      null,
      [
        0.18617353744599255,
        0.008898086845874786
      ],
      329.5986421108246,
      1,
      1739703676.887624,
      1739704006.488078,
      {}
    ],
    [
      371,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739704006.5969443,
      1739704016.6093085,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      372,
      null,
      209652396,
      null,
      [
        0.17800448054939072,
        0.01656549870967865
      ],
      262.294713973999,
      1,
      1739704016.717127,
      1739704279.0138803,
      {}
    ],
    [
      373,
      null,
      209652396,
      null,
      [
        0.18998179222730122,
        0.004140801727771759
      ],
      321.39374923706055,
      1,
      1739704279.1242292,
      1739704600.5199823,
      {}
    ],
    [
      374,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739704605.3649735,
      1739704631.2339277,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      375,
      null,
      209652396,
      null,
      [
        0.1885386569518306,
        0.0067015886306762695
      ],
      399.2060408592224,
      1,
      1739704631.3729923,
      1739705030.5815775,
      {}
    ],
    [
      376,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.000964076817035675
      ],
      286.59816694259644,
      1,
      1739705030.6921024,
      1739705317.2922451,
      {}
    ],
    [
      377,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.0013114050030708312
      ],
      146.7766239643097,
      1,
      1739705317.4016275,
      1739705464.1801498,
      {}
    ],
    [
      378,
      null,
      209652396,
      null,
      [
        0.20463111765506975,
        0.004758626222610474
      ],
      375.5542006492615,
      1,
      1739705464.2890348,
      1739705839.845183,
      {}
    ],
    [
      379,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739705839.9921222,
      1739705895.7884707,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      380,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739705895.8945587,
      1739705974.4622612,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      381,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739705974.570116,
      1739705997.8356533,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      382,
      null,
      209652396,
      null,
      [
        0.16691745030068383,
        0.02813130021095276
      ],
      366.18203711509705,
      1,
      1739706003.060038,
      1739706369.2439806,
      {}
    ],
    [
      383,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739706369.3529098,
      1739706396.1234598,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      384,
      null,
      209652396,
      null,
      [
        0.18918334659352626,
        0.006100031733512879
      ],
      366.293860912323,
      1,
      1739706396.2331164,
      1739706762.5291157,
      {}
    ],
    [
      385,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739706762.6422174,
      1739706781.9225898,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      386,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0008889675140380859
      ],
      197.9662220478058,
      1,
      1739706782.029743,
      1739706979.997834,
      {}
    ],
    [
      387,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739706980.1077147,
      1739706980.2272754,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      388,
      null,
      209652396,
      null,
      [
        0.1797855951299065,
        0.011367975175380707
      ],
      300.2322154045105,
      1,
      1739706980.3352554,
      1739707280.5693555,
      {}
    ],
    [
      389,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739707280.679875,
      1739707283.9870207,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      390,
      null,
      209652396,
      null,
      [
        0.23589552137456332,
        0.0015958413481712342
      ],
      154.68492722511292,
      1,
      1739707289.1337898,
      1739707443.8207946,
      {}
    ],
    [
      391,
      null,
      209652396,
      null,
      [
        0.22864860903783057,
        0.004470714926719665
      ],
      344.71988892555237,
      1,
      1739707443.934083,
      1739707788.6560006,
      {}
    ],
    [
      392,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739707788.7690341,
      1739707793.3992453,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      393,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739707793.5110765,
      1739707793.5995786,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      394,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739707793.70867,
      1739707971.3358278,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      395,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739707971.4482634,
      1739708024.8936756,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      396,
      null,
      209652396,
      null,
      [
        0.20263527943168658,
        0.0031172677874565123
      ],
      246.11056780815125,
      1,
      1739708025.0411797,
      1739708271.1544046,
      {}
    ],
    [
      397,
      null,
      209652396,
      null,
      [
        0.2307051036841456,
        0.001790742576122284
      ],
      166.14275002479553,
      1,
      1739708271.2674437,
      1739708437.4122062,
      {}
    ],
    [
      398,
      null,
      209652396,
      null,
      [
        0.22330386477093062,
        0.0014515295624732971
      ],
      378.1548979282379,
      1,
      1739708442.8042426,
      1739708820.9611669,
      {}
    ],
    [
      399,
      null,
      209652396,
      null,
      [
        0.182918023337185,
        0.0163809671998024
      ],
      208.54501962661743,
      1,
      1739708821.1081753,
      1739709029.6557114,
      {}
    ],
    [
      400,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0003175213932991028
      ],
      202.42679119110107,
      1,
      1739709029.804949,
      1739709232.2342641,
      {}
    ],
    [
      401,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739709232.3453405,
      1739709232.4581697,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      402,
      null,
      209652396,
      null,
      [
        0.24062525581986663,
        0.0027354583144187927
      ],
      108.45144271850586,
      1,
      1739709232.5931895,
      1739709341.046565,
      {}
    ],
    [
      403,
      null,
      209652396,
      null,
      [
        0.21335332076350041,
        0.0029653429985046385
      ],
      167.3077495098114,
      1,
      1739709341.1594415,
      1739709508.4693227,
      {}
    ],
    [
      404,
      null,
      209652396,
      null,
      [
        0.23349994397898594,
        0.002446417510509491
      ],
      183.12106108665466,
      1,
      1739709508.5825799,
      1739709691.7057126,
      {}
    ],
    [
      405,
      null,
      209652396,
      null,
      [
        0.19173228858857602,
        0.0071369558572769165
      ],
      188.90866661071777,
      1,
      1739709691.819515,
      1739709880.7300966,
      {}
    ],
    [
      406,
      null,
      209652396,
      null,
      [
        0.182119667299308,
        0.011828117072582245
      ],
      188.64024186134338,
      1,
      1739709886.0021331,
      1739710074.6445038,
      {}
    ],
    [
      407,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0011574313044548034
      ],
      246.74773335456848,
      1,
      1739710074.760843,
      1739710321.5106852,
      {}
    ],
    [
      408,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0021754488348960876
      ],
      182.35252141952515,
      1,
      1739710321.640566,
      1739710503.9951725,
      {}
    ],
    [
      409,
      null,
      209652396,
      null,
      [
        0.1716776379201529,
        0.02495065927505493
      ],
      580.7428143024445,
      1,
      1739710504.1091487,
      1739711084.8540335,
      {}
    ],
    [
      410,
      null,
      209652396,
      null,
      [
        0.19345222803306633,
        0.0022177085280418395
      ],
      360.8906674385071,
      1,
      1739711084.9699566,
      1739711445.8626719,
      {}
    ],
    [
      411,
      null,
      209652396,
      null,
      [
        0.19495731651420273,
        0.003538919985294342
      ],
      328.311021566391,
      1,
      1739711445.979375,
      1739711774.292476,
      {}
    ],
    [
      412,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739711774.40864,
      1739711856.3705857,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      413,
      null,
      209652396,
      null,
      [
        0.16912872421854458,
        0.02416704297065735
      ],
      143.19386076927185,
      1,
      1739711856.4869823,
      1739711999.6828923,
      {}
    ],
    [
      414,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739712005.2207162,
      1739712005.773578,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      415,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739712005.9221432,
      1739712006.0494819,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      416,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739712006.1987753,
      1739712007.697093,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      417,
      null,
      209652396,
      null,
      [
        0.23973458771362965,
        0.00244876891374588
      ],
      284.77064847946167,
      1,
      1739712007.8467097,
      1739712292.6196995,
      {}
    ],
    [
      418,
      null,
      209652396,
      null,
      [
        0.19271501412219974,
        0.0045918717980384825
      ],
      219.5157973766327,
      1,
      1739712292.7359796,
      1739712512.2537606,
      {}
    ],
    [
      419,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0006348103284835816
      ],
      236.82939982414246,
      1,
      1739712512.3718238,
      1739712749.2031767,
      {}
    ],
    [
      420,
      null,
      209652396,
      null,
      [
        0.21187980776304133,
        0.0021887272596359253
      ],
      211.9669749736786,
      1,
      1739712749.3186214,
      1739712961.2875588,
      {}
    ],
    [
      421,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0018782243132591248
      ],
      342.9991753101349,
      1,
      1739712961.445872,
      1739713304.4477394,
      {}
    ],
    [
      422,
      null,
      209652396,
      null,
      [
        0.2127700608988034,
        0.00230584591627121
      ],
      392.51145696640015,
      1,
      1739713304.7262254,
      1739713697.2396646,
      {}
    ],
    [
      423,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739713697.3575494,
      1739713712.6339715,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      424,
      null,
      209652396,
      null,
      [
        0.18592788907160163,
        0.008744417130947113
      ],
      183.4054238796234,
      1,
      1739713712.7529738,
      1739713896.1603372,
      {}
    ],
    [
      425,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739713901.452916,
      1739713937.8989024,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      426,
      null,
      209652396,
      null,
      [
        0.18826206969919543,
        0.005981597304344177
      ],
      265.3599729537964,
      1,
      1739713938.0204983,
      1739714203.3825958,
      {}
    ],
    [
      427,
      null,
      209652396,
      null,
      [
        0.23577327956070473,
        0.0008386984467506408
      ],
      215.7965579032898,
      1,
      1739714203.505271,
      1739714419.3038597,
      {}
    ],
    [
      428,
      null,
      209652396,
      null,
      [
        0.24077881847342927,
        0.0011057063937187194
      ],
      331.59928822517395,
      1,
      1739714419.4366634,
      1739714751.0378947,
      {}
    ],
    [
      429,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.00010694563388824463
      ],
      272.56651282310486,
      1,
      1739714751.1599157,
      1739715023.7285242,
      {}
    ],
    [
      430,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739715029.2774634,
      1739715033.5654464,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      431,
      null,
      209652396,
      null,
      [
        0.23500485798389992,
        0.0026578187942504885
      ],
      193.65549898147583,
      1,
      1739715033.6864762,
      1739715227.3439837,
      {}
    ],
    [
      432,
      null,
      209652396,
      null,
      [
        0.18927541345206014,
        0.007204599678516388
      ],
      250.39167618751526,
      1,
      1739715227.4618268,
      1739715477.855414,
      {}
    ],
    [
      433,
      null,
      209652396,
      null,
      [
        0.19547927392238768,
        0.005131828784942627
      ],
      169.78976011276245,
      1,
      1739715477.9778457,
      1739715647.7695746,
      {}
    ],
    [
      434,
      null,
      209652396,
      null,
      [
        0.19213175897307638,
        0.00494527667760849
      ],
      364.20054364204407,
      1,
      1739715647.898285,
      1739716012.1008756,
      {}
    ],
    [
      435,
      null,
      209652396,
      null,
      [
        0.2314114918905338,
        0.0023542702198028564
      ],
      237.46332478523254,
      1,
      1739716012.2233596,
      1739716249.688788,
      {}
    ],
    [
      436,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739716249.8146124,
      1739716251.8750072,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      437,
      null,
      209652396,
      null,
      [
        0.19200904560185994,
        0.005680738389492035
      ],
      114.94825959205627,
      1,
      1739716251.9968324,
      1739716366.9471338,
      {}
    ],
    [
      438,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0012432828545570374
      ],
      135.33898735046387,
      1,
      1739716372.8357356,
      1739716508.176678,
      {}
    ],
    [
      439,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739716508.296963,
      1739716511.9478579,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      440,
      null,
      209652396,
      null,
      [
        0.20521477362794727,
        0.006653778254985809
      ],
      98.87788796424866,
      1,
      1739716512.0868857,
      1739716610.9667158,
      {}
    ],
    [
      441,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0007760494947433472
      ],
      206.3811857700348,
      1,
      1739716611.0890152,
      1739716817.4723008,
      {}
    ],
    [
      442,
      null,
      209652396,
      null,
      [
        0.19157873065058692,
        0.007139928638935089
      ],
      293.39780855178833,
      1,
      1739716817.5952334,
      1739717110.9951317,
      {}
    ],
    [
      443,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739717111.1194987,
      1739717329.0722458,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      444,
      null,
      209652396,
      null,
      [
        0.19210108888252603,
        0.002529908716678619
      ],
      323.0459928512573,
      1,
      1739717329.195422,
      1739717652.2435176,
      {}
    ],
    [
      445,
      null,
      209652396,
      null,
      [
        0.19259251766736796,
        0.005412076413631439
      ],
      230.7641899585724,
      1,
      1739717652.3955424,
      1739717883.161731,
      {}
    ],
    [
      446,
      null,
      209652396,
      null,
      [
        0.19520285643040133,
        0.003431272506713867
      ],
      206.80057621002197,
      1,
      1739717888.9468677,
      1739718095.7493868,
      {}
    ],
    [
      447,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0014357179403305053
      ],
      185.52587604522705,
      1,
      1739718095.8734388,
      1739718281.401355,
      {}
    ],
    [
      448,
      null,
      209652396,
      null,
      [
        0.24080952628856825,
        0.0018269345164299011
      ],
      275.78475069999695,
      1,
      1739718281.5251322,
      1739718557.311983,
      {}
    ],
    [
      449,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1739718557.43627,
      1739718697.9415438,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      450,
      null,
      209652396,
      null,
      [
        0.23865964913869106,
        0.0019461408257484436
      ],
      328.9453456401825,
      1,
      1739718698.0659933,
      1739719027.0132375,
      {}
    ]
  ],
  "configs": {
    "1": {
      "batch_size": 297,
      "lambda_value": 0.6205646954477,
      "learning_rate": 0.000210147218,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 697
    },
    "2": {
      "batch_size": 979,
      "lambda_value": 0.3596079321578,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "3": {
      "batch_size": 652,
      "lambda_value": 0.7642785040662,
      "learning_rate": 0.0014379647071,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 136
    },
    "4": {
      "batch_size": 94,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 339
    },
    "5": {
      "batch_size": 241,
      "lambda_value": 0.9708397453651,
      "learning_rate": 0.0329667406801,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 407
    },
    "6": {
      "batch_size": 107,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0301390578778,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 338
    },
    "7": {
      "batch_size": 322,
      "lambda_value": 0.412513526121,
      "learning_rate": 0.0006441000446,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "8": {
      "batch_size": 815,
      "lambda_value": 0.8617159873378,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 752
    },
    "9": {
      "batch_size": 925,
      "lambda_value": 0.3837167412653,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "10": {
      "batch_size": 150,
      "lambda_value": 0.1709107359706,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "11": {
      "batch_size": 1024,
      "lambda_value": 0.9367846473174,
      "learning_rate": 0.0044448572887,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "12": {
      "batch_size": 102,
      "lambda_value": 0.6765698196157,
      "learning_rate": 0.0001975638963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 697
    },
    "13": {
      "batch_size": 659,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0117063616816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "14": {
      "batch_size": 59,
      "lambda_value": 0.0030815114132,
      "learning_rate": 0.0057836649805,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 153
    },
    "15": {
      "batch_size": 659,
      "lambda_value": 0.4262363360775,
      "learning_rate": 0.0063782393736,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "16": {
      "batch_size": 176,
      "lambda_value": 0.5650710721095,
      "learning_rate": 0.0001467921737,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 463
    },
    "17": {
      "batch_size": 78,
      "lambda_value": 0.9864346619144,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "18": {
      "batch_size": 752,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0255903600372,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 709
    },
    "19": {
      "batch_size": 85,
      "lambda_value": 0.6624668076433,
      "learning_rate": 0.0001461455212,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 455
    },
    "20": {
      "batch_size": 277,
      "lambda_value": 0.0788153739624,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 788
    },
    "21": {
      "batch_size": 895,
      "lambda_value": 0.7897473442105,
      "learning_rate": 0.011623077444,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 411
    },
    "22": {
      "batch_size": 597,
      "lambda_value": 0.4199483890762,
      "learning_rate": 0.0062957704128,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1002
    },
    "23": {
      "batch_size": 498,
      "lambda_value": 0.4997052812651,
      "learning_rate": 0.0008260624616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 201
    },
    "24": {
      "batch_size": 81,
      "lambda_value": 0.801774956151,
      "learning_rate": 0.0054916470096,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "25": {
      "batch_size": 69,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0027189688569,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "26": {
      "batch_size": 544,
      "lambda_value": 0.3566148090088,
      "learning_rate": 0.0077072238861,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "27": {
      "batch_size": 635,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0144818936694,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "28": {
      "batch_size": 184,
      "lambda_value": 0.5249395800268,
      "learning_rate": 0.0002461496774,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 328
    },
    "29": {
      "batch_size": 40,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0216101868293,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "30": {
      "batch_size": 497,
      "lambda_value": 0.4323787825414,
      "learning_rate": 0.0004186695981,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 866
    },
    "31": {
      "batch_size": 47,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0584663913961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 229
    },
    "32": {
      "batch_size": 242,
      "lambda_value": 0.5897873412338,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 140
    },
    "33": {
      "batch_size": 59,
      "lambda_value": 0.9315102941087,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "34": {
      "batch_size": 53,
      "lambda_value": 0.7431359447524,
      "learning_rate": 0.0001324462442,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 383
    },
    "35": {
      "batch_size": 55,
      "lambda_value": 0.5959451110671,
      "learning_rate": 0.0279512903626,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "36": {
      "batch_size": 62,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0042972583038,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 456
    },
    "37": {
      "batch_size": 40,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0591287940477,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 557
    },
    "38": {
      "batch_size": 143,
      "lambda_value": 0.4893136075805,
      "learning_rate": 0.0143524519362,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 124
    },
    "39": {
      "batch_size": 111,
      "lambda_value": 0.6237206127861,
      "learning_rate": 0.0011527170707,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "40": {
      "batch_size": 203,
      "lambda_value": 0.836270266563,
      "learning_rate": 0.0026409543209,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 612
    },
    "41": {
      "batch_size": 68,
      "lambda_value": 0.1473946081284,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 788
    },
    "42": {
      "batch_size": 682,
      "lambda_value": 0.8411544066865,
      "learning_rate": 0.0006865924239,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 174
    },
    "43": {
      "batch_size": 61,
      "lambda_value": 0.9525627850943,
      "learning_rate": 0.0886799955763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 133
    },
    "44": {
      "batch_size": 766,
      "lambda_value": 0.8645144427745,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 276
    },
    "45": {
      "batch_size": 680,
      "lambda_value": 0.2601044820299,
      "learning_rate": 0.0155794633931,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 532
    },
    "46": {
      "batch_size": 61,
      "lambda_value": 0.737447287188,
      "learning_rate": 0.0001600052257,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 408
    },
    "47": {
      "batch_size": 563,
      "lambda_value": 0.5684020796476,
      "learning_rate": 0.0360030852203,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 276
    },
    "48": {
      "batch_size": 342,
      "lambda_value": 0.3794140715116,
      "learning_rate": 0.0094428768473,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "49": {
      "batch_size": 539,
      "lambda_value": 0.4096195582972,
      "learning_rate": 0.0014614146338,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 269
    },
    "50": {
      "batch_size": 540,
      "lambda_value": 0.6011431890687,
      "learning_rate": 0.0002228815534,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "51": {
      "batch_size": 65,
      "lambda_value": 0.2425091147505,
      "learning_rate": 0.0001738203182,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "52": {
      "batch_size": 313,
      "lambda_value": 0.4545499988336,
      "learning_rate": 0.0003879558517,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 696
    },
    "53": {
      "batch_size": 582,
      "lambda_value": 0.0387496336331,
      "learning_rate": 0.0003356147463,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 83
    },
    "54": {
      "batch_size": 841,
      "lambda_value": 0.3293608465041,
      "learning_rate": 0.0018412961777,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "55": {
      "batch_size": 507,
      "lambda_value": 0.5071325061685,
      "learning_rate": 0.0001639990325,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 291
    },
    "56": {
      "batch_size": 523,
      "lambda_value": 0.5220340899809,
      "learning_rate": 0.0261351106367,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 332
    },
    "57": {
      "batch_size": 63,
      "lambda_value": 0.1525805406835,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "58": {
      "batch_size": 51,
      "lambda_value": 0.6743427482514,
      "learning_rate": 0.0203488979235,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 182
    },
    "59": {
      "batch_size": 526,
      "lambda_value": 0.1558490208903,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 71
    },
    "60": {
      "batch_size": 571,
      "lambda_value": 0.1632290921883,
      "learning_rate": 0.0403526510329,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 155
    },
    "61": {
      "batch_size": 900,
      "lambda_value": 0.4300912433377,
      "learning_rate": 0.0152683361273,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 574
    },
    "62": {
      "batch_size": 946,
      "lambda_value": 0.240475409915,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "63": {
      "batch_size": 45,
      "lambda_value": 0.025892842149,
      "learning_rate": 0.0064701372435,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 138
    },
    "64": {
      "batch_size": 578,
      "lambda_value": 0.466940713799,
      "learning_rate": 0.0069166965864,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 247
    },
    "65": {
      "batch_size": 71,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0043214032666,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 297
    },
    "66": {
      "batch_size": 921,
      "lambda_value": 0.0402320288874,
      "learning_rate": 0.0695202977577,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 410
    },
    "67": {
      "batch_size": 217,
      "lambda_value": 0.6966025769503,
      "learning_rate": 0.0609459009151,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 409
    },
    "68": {
      "batch_size": 506,
      "lambda_value": 0.2774871972287,
      "learning_rate": 0.000458934893,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 239
    },
    "69": {
      "batch_size": 435,
      "lambda_value": 0.6182493089424,
      "learning_rate": 0.0313142741224,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "70": {
      "batch_size": 193,
      "lambda_value": 0.4888227212062,
      "learning_rate": 0.0678987026873,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 198
    },
    "71": {
      "batch_size": 799,
      "lambda_value": 0.0490666417774,
      "learning_rate": 0.000188798116,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 231
    },
    "72": {
      "batch_size": 83,
      "lambda_value": 0.9431689307954,
      "learning_rate": 0.0005462678091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 381
    },
    "73": {
      "batch_size": 962,
      "lambda_value": 0.1658029844256,
      "learning_rate": 0.0009078367561,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 387
    },
    "74": {
      "batch_size": 633,
      "lambda_value": 0.4527774250837,
      "learning_rate": 0.0005033519202,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 444
    },
    "75": {
      "batch_size": 632,
      "lambda_value": 0.2859097380484,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 145
    },
    "76": {
      "batch_size": 681,
      "lambda_value": 0.9252130831835,
      "learning_rate": 0.000225824127,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 160
    },
    "77": {
      "batch_size": 442,
      "lambda_value": 0.5011312487499,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 162
    },
    "78": {
      "batch_size": 363,
      "lambda_value": 0.5999613374055,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 119
    },
    "79": {
      "batch_size": 500,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0227301664178,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 487
    },
    "80": {
      "batch_size": 387,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0407226893036,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 860
    },
    "81": {
      "batch_size": 917,
      "lambda_value": 0.2528729324812,
      "learning_rate": 0.0002112474838,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 84
    },
    "82": {
      "batch_size": 683,
      "lambda_value": 0.4302554532778,
      "learning_rate": 0.0069425824515,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 336
    },
    "83": {
      "batch_size": 869,
      "lambda_value": 0.3577941791914,
      "learning_rate": 0.0001144897283,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 85
    },
    "84": {
      "batch_size": 219,
      "lambda_value": 0.1326945416802,
      "learning_rate": 0.0055501982149,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 497
    },
    "85": {
      "batch_size": 603,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.050363997522,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 431
    },
    "86": {
      "batch_size": 33,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0043216314201,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 925
    },
    "87": {
      "batch_size": 39,
      "lambda_value": 0.568414398817,
      "learning_rate": 0.0066942051347,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "88": {
      "batch_size": 959,
      "lambda_value": 0.0099039525899,
      "learning_rate": 0.0001330037572,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 856
    },
    "89": {
      "batch_size": 156,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0053294934748,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "90": {
      "batch_size": 844,
      "lambda_value": 0.2250047838217,
      "learning_rate": 0.0777989782816,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "91": {
      "batch_size": 84,
      "lambda_value": 0.0464184110839,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "92": {
      "batch_size": 65,
      "lambda_value": 0.4572054964111,
      "learning_rate": 0.0269030355547,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 150
    },
    "93": {
      "batch_size": 501,
      "lambda_value": 0.4344636044526,
      "learning_rate": 0.0343406853747,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 551
    },
    "94": {
      "batch_size": 193,
      "lambda_value": 0.6825317392541,
      "learning_rate": 0.0012800826778,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 78
    },
    "95": {
      "batch_size": 59,
      "lambda_value": 0.0982368328669,
      "learning_rate": 0.0062053850896,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "96": {
      "batch_size": 44,
      "lambda_value": 0.0105993407731,
      "learning_rate": 0.0059496031762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 116
    },
    "97": {
      "batch_size": 61,
      "lambda_value": 0.4695952651957,
      "learning_rate": 0.0024192530494,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 136
    },
    "98": {
      "batch_size": 355,
      "lambda_value": 0.9137569290511,
      "learning_rate": 0.034912055568,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 196
    },
    "99": {
      "batch_size": 431,
      "lambda_value": 0.0822383740424,
      "learning_rate": 0.0075073454367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 156
    },
    "100": {
      "batch_size": 259,
      "lambda_value": 0.6182439422905,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 90
    },
    "101": {
      "batch_size": 103,
      "lambda_value": 0.2833626254686,
      "learning_rate": 0.0005003261748,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 490
    },
    "102": {
      "batch_size": 37,
      "lambda_value": 0.5840919399451,
      "learning_rate": 0.0001459429644,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 355
    },
    "103": {
      "batch_size": 441,
      "lambda_value": 0.1020683828299,
      "learning_rate": 0.0037946946911,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 771
    },
    "104": {
      "batch_size": 298,
      "lambda_value": 0.6523313109885,
      "learning_rate": 0.0418434218437,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 217
    },
    "105": {
      "batch_size": 105,
      "lambda_value": 0.5175676044407,
      "learning_rate": 0.0804624104669,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 720
    },
    "106": {
      "batch_size": 132,
      "lambda_value": 0.8645510243583,
      "learning_rate": 0.0065231774625,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "107": {
      "batch_size": 222,
      "lambda_value": 0.3163643900406,
      "learning_rate": 0.0077402548612,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "108": {
      "batch_size": 274,
      "lambda_value": 0.8391282420355,
      "learning_rate": 0.0007788324639,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 627
    },
    "109": {
      "batch_size": 202,
      "lambda_value": 0.9814558991599,
      "learning_rate": 0.0305959268152,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 681
    },
    "110": {
      "batch_size": 118,
      "lambda_value": 0.0095926156531,
      "learning_rate": 0.0001209499004,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 489
    },
    "111": {
      "batch_size": 725,
      "lambda_value": 0.4495361860686,
      "learning_rate": 0.0001828620707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "112": {
      "batch_size": 142,
      "lambda_value": 0.3018269311536,
      "learning_rate": 0.0013615516581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 156
    },
    "113": {
      "batch_size": 39,
      "lambda_value": 0.6366104708849,
      "learning_rate": 0.0911637803703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 197
    },
    "114": {
      "batch_size": 48,
      "lambda_value": 0.8393505362879,
      "learning_rate": 0.000335227891,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 278
    },
    "115": {
      "batch_size": 456,
      "lambda_value": 0.2025097518032,
      "learning_rate": 0.000165906658,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "116": {
      "batch_size": 52,
      "lambda_value": 0.1777602005584,
      "learning_rate": 0.0071062444482,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 245
    },
    "117": {
      "batch_size": 387,
      "lambda_value": 0.8469855847131,
      "learning_rate": 0.0159663538365,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 871
    },
    "118": {
      "batch_size": 544,
      "lambda_value": 0.7637452690801,
      "learning_rate": 0.0189128877645,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "119": {
      "batch_size": 78,
      "lambda_value": 0.1333517870819,
      "learning_rate": 0.0379151435743,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 376
    },
    "120": {
      "batch_size": 858,
      "lambda_value": 0.5295439381285,
      "learning_rate": 0.0008570201388,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 874
    },
    "121": {
      "batch_size": 514,
      "lambda_value": 0.9751001598295,
      "learning_rate": 0.0023139794505,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 290
    },
    "122": {
      "batch_size": 181,
      "lambda_value": 0.1042301237216,
      "learning_rate": 0.0056294156898,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 184
    },
    "123": {
      "batch_size": 852,
      "lambda_value": 0.1477343378818,
      "learning_rate": 0.0001720754894,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 578
    },
    "124": {
      "batch_size": 287,
      "lambda_value": 0.0042305286159,
      "learning_rate": 0.0003825520686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 280
    },
    "125": {
      "batch_size": 38,
      "lambda_value": 0.4950446899782,
      "learning_rate": 0.0006069868363,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "126": {
      "batch_size": 713,
      "lambda_value": 0.4736068584881,
      "learning_rate": 0.0484101532431,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "127": {
      "batch_size": 46,
      "lambda_value": 0.2266582964608,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 481
    },
    "128": {
      "batch_size": 876,
      "lambda_value": 0.3843229233274,
      "learning_rate": 0.0312081445008,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "129": {
      "batch_size": 102,
      "lambda_value": 0.0243599966944,
      "learning_rate": 0.0034664159679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 142
    },
    "130": {
      "batch_size": 145,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0036689786017,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 86
    },
    "131": {
      "batch_size": 884,
      "lambda_value": 0.0240476070589,
      "learning_rate": 0.0001244318996,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 523
    },
    "132": {
      "batch_size": 725,
      "lambda_value": 0.5275737085407,
      "learning_rate": 0.0962149393336,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 78
    },
    "133": {
      "batch_size": 267,
      "lambda_value": 0.2227488758416,
      "learning_rate": 0.0133378701537,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "134": {
      "batch_size": 276,
      "lambda_value": 0.1850431063149,
      "learning_rate": 0.0050170483991,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 101
    },
    "135": {
      "batch_size": 852,
      "lambda_value": 0.2554158173882,
      "learning_rate": 0.0001859212949,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "136": {
      "batch_size": 66,
      "lambda_value": 0.0453077602809,
      "learning_rate": 0.0038705299809,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 173
    },
    "137": {
      "batch_size": 33,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 375
    },
    "138": {
      "batch_size": 313,
      "lambda_value": 0.4943773457039,
      "learning_rate": 0.0025848473367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 885
    },
    "139": {
      "batch_size": 74,
      "lambda_value": 0.0927269727559,
      "learning_rate": 0.0011079056334,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 465
    },
    "140": {
      "batch_size": 460,
      "lambda_value": 0.2886737918534,
      "learning_rate": 0.011874222675,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 145
    },
    "141": {
      "batch_size": 139,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0457859391684,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "142": {
      "batch_size": 776,
      "lambda_value": 0.1506642600813,
      "learning_rate": 0.00253628593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 529
    },
    "143": {
      "batch_size": 330,
      "lambda_value": 0.9821690174032,
      "learning_rate": 0.0229054208914,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "144": {
      "batch_size": 542,
      "lambda_value": 0.3884680740375,
      "learning_rate": 0.0047964066063,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 599
    },
    "145": {
      "batch_size": 46,
      "lambda_value": 0.7914718216174,
      "learning_rate": 0.0567631885834,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 276
    },
    "146": {
      "batch_size": 814,
      "lambda_value": 0.4706617753678,
      "learning_rate": 0.0280124201071,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 405
    },
    "147": {
      "batch_size": 671,
      "lambda_value": 0.477805553039,
      "learning_rate": 0.0001000439302,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 742
    },
    "148": {
      "batch_size": 307,
      "lambda_value": 0.3966296496465,
      "learning_rate": 0.0065078037431,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 550
    },
    "149": {
      "batch_size": 67,
      "lambda_value": 0.1238591984675,
      "learning_rate": 0.0008622153901,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 450
    },
    "150": {
      "batch_size": 538,
      "lambda_value": 0.1472817942137,
      "learning_rate": 0.0073574994525,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 635
    },
    "151": {
      "batch_size": 49,
      "lambda_value": 0.0688601702784,
      "learning_rate": 0.0003239179582,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 237
    },
    "152": {
      "batch_size": 793,
      "lambda_value": 0.2500518198771,
      "learning_rate": 0.0072989042556,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 564
    },
    "153": {
      "batch_size": 776,
      "lambda_value": 0.3086653060848,
      "learning_rate": 0.0004287369379,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "154": {
      "batch_size": 39,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0037841646219,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 544
    },
    "155": {
      "batch_size": 962,
      "lambda_value": 0.7517036849034,
      "learning_rate": 0.0123398549816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 611
    },
    "156": {
      "batch_size": 915,
      "lambda_value": 0.2951589262888,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 325
    },
    "157": {
      "batch_size": 831,
      "lambda_value": 0.9121447002385,
      "learning_rate": 0.0258958220048,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 86
    },
    "158": {
      "batch_size": 976,
      "lambda_value": 0.3603359633198,
      "learning_rate": 0.0163222644592,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 278
    },
    "159": {
      "batch_size": 493,
      "lambda_value": 0.6414907887986,
      "learning_rate": 0.0751665791976,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 235
    },
    "160": {
      "batch_size": 454,
      "lambda_value": 0.1246000775699,
      "learning_rate": 0.0038598459083,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "161": {
      "batch_size": 137,
      "lambda_value": 0.6329745326815,
      "learning_rate": 0.0016575807729,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 351
    },
    "162": {
      "batch_size": 50,
      "lambda_value": 0.740179719234,
      "learning_rate": 0.0059510273029,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 165
    },
    "163": {
      "batch_size": 41,
      "lambda_value": 0.2084059817426,
      "learning_rate": 0.0013291369141,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "164": {
      "batch_size": 64,
      "lambda_value": 0.5561857015528,
      "learning_rate": 0.0035434237772,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "165": {
      "batch_size": 498,
      "lambda_value": 0.6579712863223,
      "learning_rate": 0.00944846031,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 146
    },
    "166": {
      "batch_size": 60,
      "lambda_value": 0.9268347430002,
      "learning_rate": 0.0039761620925,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "167": {
      "batch_size": 317,
      "lambda_value": 0.5774632610946,
      "learning_rate": 0.0004289380476,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 90
    },
    "168": {
      "batch_size": 33,
      "lambda_value": 0.844330408685,
      "learning_rate": 0.0036197636688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 852
    },
    "169": {
      "batch_size": 451,
      "lambda_value": 0.1924494999061,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 88
    },
    "170": {
      "batch_size": 537,
      "lambda_value": 0.2461028946703,
      "learning_rate": 0.0320480978609,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 482
    },
    "171": {
      "batch_size": 160,
      "lambda_value": 0.4670716943235,
      "learning_rate": 0.0028172952438,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 556
    },
    "172": {
      "batch_size": 188,
      "lambda_value": 0.2461939552216,
      "learning_rate": 0.0409216311654,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 474
    },
    "173": {
      "batch_size": 546,
      "lambda_value": 0.328880259391,
      "learning_rate": 0.0012850548044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "174": {
      "batch_size": 205,
      "lambda_value": 0.5479223007212,
      "learning_rate": 0.0362149473803,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 552
    },
    "175": {
      "batch_size": 805,
      "lambda_value": 0.3334198233134,
      "learning_rate": 0.0012575315579,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 213
    },
    "176": {
      "batch_size": 404,
      "lambda_value": 0.9522543525878,
      "learning_rate": 0.0620108034853,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "177": {
      "batch_size": 364,
      "lambda_value": 0.2034449398154,
      "learning_rate": 0.0042526599584,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 495
    },
    "178": {
      "batch_size": 733,
      "lambda_value": 0.1597686694848,
      "learning_rate": 0.031534156064,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 249
    },
    "179": {
      "batch_size": 296,
      "lambda_value": 0.3073615378608,
      "learning_rate": 0.0006343167147,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 541
    },
    "180": {
      "batch_size": 846,
      "lambda_value": 0.3837065982754,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "181": {
      "batch_size": 68,
      "lambda_value": 0.4765783643147,
      "learning_rate": 0.0022563929374,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "182": {
      "batch_size": 103,
      "lambda_value": 0.2461385129023,
      "learning_rate": 0.0001337143277,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 315
    },
    "183": {
      "batch_size": 390,
      "lambda_value": 0.9070245463357,
      "learning_rate": 0.0627349351707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 287
    },
    "184": {
      "batch_size": 473,
      "lambda_value": 0.9899025879147,
      "learning_rate": 0.0001115728064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 248
    },
    "185": {
      "batch_size": 621,
      "lambda_value": 0.2078800181557,
      "learning_rate": 0.0984325826781,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 277
    },
    "186": {
      "batch_size": 803,
      "lambda_value": 0.6304196192746,
      "learning_rate": 0.0013917449989,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 500
    },
    "187": {
      "batch_size": 64,
      "lambda_value": 0.0584250613346,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 229
    },
    "188": {
      "batch_size": 948,
      "lambda_value": 0.5201064105195,
      "learning_rate": 0.0644814831068,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 76
    },
    "189": {
      "batch_size": 52,
      "lambda_value": 0.1224029330303,
      "learning_rate": 0.008250906644,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 135
    },
    "190": {
      "batch_size": 791,
      "lambda_value": 0.8335977075286,
      "learning_rate": 0.0032926830009,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 494
    },
    "191": {
      "batch_size": 52,
      "lambda_value": 0.6956110933781,
      "learning_rate": 0.019084000727,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 305
    },
    "192": {
      "batch_size": 65,
      "lambda_value": 0.0858165163043,
      "learning_rate": 0.0001396075788,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 217
    },
    "193": {
      "batch_size": 38,
      "lambda_value": 0.5819568111468,
      "learning_rate": 0.0002132918471,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 249
    },
    "194": {
      "batch_size": 754,
      "lambda_value": 0.2698123628689,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 173
    },
    "195": {
      "batch_size": 668,
      "lambda_value": 0.8470592534302,
      "learning_rate": 0.0006430637512,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 141
    },
    "196": {
      "batch_size": 386,
      "lambda_value": 0.6863903558802,
      "learning_rate": 0.0008170013725,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "197": {
      "batch_size": 266,
      "lambda_value": 0.4414773952143,
      "learning_rate": 0.0268449154553,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 432
    },
    "198": {
      "batch_size": 222,
      "lambda_value": 0.3646827688118,
      "learning_rate": 0.0162151725013,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 81
    },
    "199": {
      "batch_size": 828,
      "lambda_value": 0.6994291661053,
      "learning_rate": 0.0048399368793,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 417
    },
    "200": {
      "batch_size": 845,
      "lambda_value": 0.5639110820217,
      "learning_rate": 0.0014623104992,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 463
    },
    "201": {
      "batch_size": 542,
      "lambda_value": 0.4027838092624,
      "learning_rate": 0.001307904062,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 561
    },
    "202": {
      "batch_size": 47,
      "lambda_value": 0.3342370768098,
      "learning_rate": 0.0066597022586,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 540
    },
    "203": {
      "batch_size": 234,
      "lambda_value": 0.4344920974789,
      "learning_rate": 0.032527985566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 278
    },
    "204": {
      "batch_size": 1022,
      "lambda_value": 0.2594121754683,
      "learning_rate": 0.0925450324862,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1007
    },
    "205": {
      "batch_size": 212,
      "lambda_value": 0.5286350730685,
      "learning_rate": 0.0071310853992,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 161
    },
    "206": {
      "batch_size": 190,
      "lambda_value": 0.5933051286032,
      "learning_rate": 0.0003288523716,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "207": {
      "batch_size": 93,
      "lambda_value": 0.5720078172236,
      "learning_rate": 0.000164626935,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "208": {
      "batch_size": 48,
      "lambda_value": 0.4541612209449,
      "learning_rate": 0.0019654478707,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "209": {
      "batch_size": 912,
      "lambda_value": 0.6501855402958,
      "learning_rate": 0.0001602316999,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 182
    },
    "210": {
      "batch_size": 642,
      "lambda_value": 0.3218750954514,
      "learning_rate": 0.0083602316064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "211": {
      "batch_size": 221,
      "lambda_value": 0.5098011891873,
      "learning_rate": 0.018540436892,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 105
    },
    "212": {
      "batch_size": 457,
      "lambda_value": 0.4042878294431,
      "learning_rate": 0.0008100329996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 108
    },
    "213": {
      "batch_size": 378,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.0637641872301,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 330
    },
    "214": {
      "batch_size": 460,
      "lambda_value": 0.2902332847431,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "215": {
      "batch_size": 686,
      "lambda_value": 0.3967036195568,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "216": {
      "batch_size": 150,
      "lambda_value": 0.6873889937377,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 97
    },
    "217": {
      "batch_size": 46,
      "lambda_value": 0.5442420143571,
      "learning_rate": 0.0041065218421,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 626
    },
    "218": {
      "batch_size": 69,
      "lambda_value": 0.0571109552735,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 64
    },
    "219": {
      "batch_size": 534,
      "lambda_value": 0.278817431718,
      "learning_rate": 0.054738169918,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 93
    },
    "220": {
      "batch_size": 637,
      "lambda_value": 0.6218435051405,
      "learning_rate": 0.0392186381003,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 555
    },
    "221": {
      "batch_size": 85,
      "lambda_value": 0.5498388846059,
      "learning_rate": 0.0279389198285,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "222": {
      "batch_size": 65,
      "lambda_value": 0.8734633914291,
      "learning_rate": 0.0026232078723,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 377
    },
    "223": {
      "batch_size": 416,
      "lambda_value": 0.4083321161572,
      "learning_rate": 0.0032544993566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 113
    },
    "224": {
      "batch_size": 51,
      "lambda_value": 0.1388957563608,
      "learning_rate": 0.000366593903,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "225": {
      "batch_size": 438,
      "lambda_value": 0.561111631904,
      "learning_rate": 0.0006101854537,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 288
    },
    "226": {
      "batch_size": 53,
      "lambda_value": 0.0741220638225,
      "learning_rate": 0.0304844386375,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "227": {
      "batch_size": 703,
      "lambda_value": 0.6124061564869,
      "learning_rate": 0.0035069436309,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 329
    },
    "228": {
      "batch_size": 710,
      "lambda_value": 0.3471934695898,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "229": {
      "batch_size": 131,
      "lambda_value": 0.3877559393645,
      "learning_rate": 0.0004915697162,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 112
    },
    "230": {
      "batch_size": 437,
      "lambda_value": 0.7574403115985,
      "learning_rate": 0.0087990083065,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 97
    },
    "231": {
      "batch_size": 769,
      "lambda_value": 0.5363343601572,
      "learning_rate": 0.0050951608204,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "232": {
      "batch_size": 435,
      "lambda_value": 0.2176978224086,
      "learning_rate": 0.0263258332272,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 245
    },
    "233": {
      "batch_size": 63,
      "lambda_value": 0.2336341509155,
      "learning_rate": 0.0004226593644,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "234": {
      "batch_size": 49,
      "lambda_value": 0.6806976718747,
      "learning_rate": 0.0069988860332,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 128
    },
    "235": {
      "batch_size": 455,
      "lambda_value": 0.8495232198256,
      "learning_rate": 0.0095403809884,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 110
    },
    "236": {
      "batch_size": 50,
      "lambda_value": 0.1519592189992,
      "learning_rate": 0.0155866756906,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 330
    },
    "237": {
      "batch_size": 32,
      "lambda_value": 0.6276940584115,
      "learning_rate": 0.0001745200849,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "238": {
      "batch_size": 51,
      "lambda_value": 0.4978130092022,
      "learning_rate": 0.0006479136368,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 168
    },
    "239": {
      "batch_size": 344,
      "lambda_value": 0.8248795737402,
      "learning_rate": 0.0002610219568,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 407
    },
    "240": {
      "batch_size": 641,
      "lambda_value": 0.280073581512,
      "learning_rate": 0.0016486629264,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 530
    },
    "241": {
      "batch_size": 71,
      "lambda_value": 0.2886039406427,
      "learning_rate": 0.0043323441692,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 192
    },
    "242": {
      "batch_size": 111,
      "lambda_value": 0.3255187079453,
      "learning_rate": 0.002088036926,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 492
    },
    "243": {
      "batch_size": 70,
      "lambda_value": 0.1630554128522,
      "learning_rate": 0.0003439187365,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 176
    },
    "244": {
      "batch_size": 961,
      "lambda_value": 0.417971716796,
      "learning_rate": 0.0002595916085,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 334
    },
    "245": {
      "batch_size": 294,
      "lambda_value": 0.729133400265,
      "learning_rate": 0.0666283501018,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 590
    },
    "246": {
      "batch_size": 40,
      "lambda_value": 0.7967112548555,
      "learning_rate": 0.0353565829307,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 238
    },
    "247": {
      "batch_size": 780,
      "lambda_value": 0.7083343086535,
      "learning_rate": 0.0326606169,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 105
    },
    "248": {
      "batch_size": 442,
      "lambda_value": 0.5201046118183,
      "learning_rate": 0.0001811518715,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 102
    },
    "249": {
      "batch_size": 816,
      "lambda_value": 0.1006982395772,
      "learning_rate": 0.0001623275114,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 419
    },
    "250": {
      "batch_size": 60,
      "lambda_value": 0.1914094420551,
      "learning_rate": 0.0004606071383,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "251": {
      "batch_size": 753,
      "lambda_value": 0.2435795480092,
      "learning_rate": 0.0004095912949,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 722
    },
    "252": {
      "batch_size": 704,
      "lambda_value": 0.144880579601,
      "learning_rate": 0.0002366997783,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 328
    },
    "253": {
      "batch_size": 102,
      "lambda_value": 0.1894695080254,
      "learning_rate": 0.0026068828701,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "254": {
      "batch_size": 547,
      "lambda_value": 0.4239860884209,
      "learning_rate": 0.0001356935227,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 149
    },
    "255": {
      "batch_size": 86,
      "lambda_value": 0.0045154409777,
      "learning_rate": 0.0030138194765,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 199
    },
    "256": {
      "batch_size": 376,
      "lambda_value": 0.1582188227815,
      "learning_rate": 0.0045780134808,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 524
    },
    "257": {
      "batch_size": 51,
      "lambda_value": 0.9108112310834,
      "learning_rate": 0.0001277308521,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 341
    },
    "258": {
      "batch_size": 765,
      "lambda_value": 0.1783089366069,
      "learning_rate": 0.0005607461675,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 336
    },
    "259": {
      "batch_size": 54,
      "lambda_value": 0.7760907682766,
      "learning_rate": 0.019084000727,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 262
    },
    "260": {
      "batch_size": 782,
      "lambda_value": 0.4208203917144,
      "learning_rate": 0.0344213993223,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 98
    },
    "261": {
      "batch_size": 363,
      "lambda_value": 0.2913048958122,
      "learning_rate": 0.0115743270024,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "262": {
      "batch_size": 387,
      "lambda_value": 0.4808552083858,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 205
    },
    "263": {
      "batch_size": 465,
      "lambda_value": 0.6264949327585,
      "learning_rate": 0.0081532443273,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 208
    },
    "264": {
      "batch_size": 843,
      "lambda_value": 0.2755907586144,
      "learning_rate": 0.0014261932923,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 310
    },
    "265": {
      "batch_size": 534,
      "lambda_value": 0.3886122845379,
      "learning_rate": 0.0011270176996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 644
    },
    "266": {
      "batch_size": 32,
      "lambda_value": 0.0555308977991,
      "learning_rate": 0.0009211259258,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 260
    },
    "267": {
      "batch_size": 178,
      "lambda_value": 0.7361547279816,
      "learning_rate": 0.0002666736091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "268": {
      "batch_size": 540,
      "lambda_value": 0.1126117643449,
      "learning_rate": 0.0042339443161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 461
    },
    "269": {
      "batch_size": 237,
      "lambda_value": 0.9976105432415,
      "learning_rate": 0.0001410508481,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 216
    },
    "270": {
      "batch_size": 334,
      "lambda_value": 0.6608835092183,
      "learning_rate": 0.0007244468698,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 86
    },
    "271": {
      "batch_size": 50,
      "lambda_value": 0.3539514749546,
      "learning_rate": 0.0001473504196,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 737
    },
    "272": {
      "batch_size": 39,
      "lambda_value": 0.0434074217682,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "273": {
      "batch_size": 63,
      "lambda_value": 0.1011284741403,
      "learning_rate": 0.0057869377883,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "274": {
      "batch_size": 758,
      "lambda_value": 0.1773664279903,
      "learning_rate": 0.0002236086227,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "275": {
      "batch_size": 176,
      "lambda_value": 0.8080018143185,
      "learning_rate": 0.0016972267439,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 87
    },
    "276": {
      "batch_size": 55,
      "lambda_value": 0.0245481552275,
      "learning_rate": 0.0038124057677,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "277": {
      "batch_size": 384,
      "lambda_value": 0.8210957953613,
      "learning_rate": 0.0003022091502,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "278": {
      "batch_size": 58,
      "lambda_value": 0.486513851508,
      "learning_rate": 0.000972353582,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 114
    },
    "279": {
      "batch_size": 463,
      "lambda_value": 0.0886199292692,
      "learning_rate": 0.0028951068882,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 374
    },
    "280": {
      "batch_size": 42,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0419915713539,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "281": {
      "batch_size": 34,
      "lambda_value": 0.0110450647425,
      "learning_rate": 0.0037398300895,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 132
    },
    "282": {
      "batch_size": 125,
      "lambda_value": 0.073563589368,
      "learning_rate": 0.0007287942283,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 662
    },
    "283": {
      "batch_size": 105,
      "lambda_value": 0.0244539059088,
      "learning_rate": 0.00837156209,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 270
    },
    "284": {
      "batch_size": 521,
      "lambda_value": 0.8089856629774,
      "learning_rate": 0.0076508599827,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "285": {
      "batch_size": 35,
      "lambda_value": 0.7719643918195,
      "learning_rate": 0.0017623959647,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "286": {
      "batch_size": 381,
      "lambda_value": 0.3834047145119,
      "learning_rate": 0.0038237497074,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 234
    },
    "287": {
      "batch_size": 413,
      "lambda_value": 0.0535191435259,
      "learning_rate": 0.0377148256786,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 100
    },
    "288": {
      "batch_size": 290,
      "lambda_value": 0.1320726262101,
      "learning_rate": 0.0023254224427,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "289": {
      "batch_size": 217,
      "lambda_value": 0.9365282264493,
      "learning_rate": 0.0050431783915,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 123
    },
    "290": {
      "batch_size": 544,
      "lambda_value": 0.4355872915023,
      "learning_rate": 0.0103945201972,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 237
    },
    "291": {
      "batch_size": 1011,
      "lambda_value": 0.4804118476289,
      "learning_rate": 0.0005972414841,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 587
    },
    "292": {
      "batch_size": 262,
      "lambda_value": 0.8036567934905,
      "learning_rate": 0.0001911999794,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "293": {
      "batch_size": 522,
      "lambda_value": 0.6810171385066,
      "learning_rate": 0.0363285889677,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 226
    },
    "294": {
      "batch_size": 68,
      "lambda_value": 0.1122108482366,
      "learning_rate": 0.0004946291044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 66
    },
    "295": {
      "batch_size": 697,
      "lambda_value": 0.7873240093307,
      "learning_rate": 0.0001594353537,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "296": {
      "batch_size": 33,
      "lambda_value": 0.1052317687943,
      "learning_rate": 0.0003359396443,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 148
    },
    "297": {
      "batch_size": 79,
      "lambda_value": 0.4196490252802,
      "learning_rate": 0.0100423699896,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 642
    },
    "298": {
      "batch_size": 148,
      "lambda_value": 0.4101648178047,
      "learning_rate": 0.0170134585068,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "299": {
      "batch_size": 801,
      "lambda_value": 0.833097150633,
      "learning_rate": 0.0862965434581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 217
    },
    "300": {
      "batch_size": 722,
      "lambda_value": 0.0686970530845,
      "learning_rate": 0.000118835971,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 426
    },
    "301": {
      "batch_size": 151,
      "lambda_value": 0.1765449594378,
      "learning_rate": 0.0005750675549,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "302": {
      "batch_size": 90,
      "lambda_value": 0.80285407825,
      "learning_rate": 0.0079014107354,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 97
    },
    "303": {
      "batch_size": 162,
      "lambda_value": 0.8985286621682,
      "learning_rate": 0.0174342739555,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 113
    },
    "304": {
      "batch_size": 621,
      "lambda_value": 0.3360339953694,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "305": {
      "batch_size": 377,
      "lambda_value": 0.0764293009661,
      "learning_rate": 0.0019926714499,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 617
    },
    "306": {
      "batch_size": 571,
      "lambda_value": 0.353016718935,
      "learning_rate": 0.0440802633021,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 155
    },
    "307": {
      "batch_size": 640,
      "lambda_value": 0.0011522622186,
      "learning_rate": 0.0001056551388,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 362
    },
    "308": {
      "batch_size": 661,
      "lambda_value": 0.2229809643412,
      "learning_rate": 0.0018678134703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 379
    },
    "309": {
      "batch_size": 831,
      "lambda_value": 0.2298700683603,
      "learning_rate": 0.0004065521248,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 216
    },
    "310": {
      "batch_size": 861,
      "lambda_value": 0.4043921180506,
      "learning_rate": 0.0053265918237,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 209
    },
    "311": {
      "batch_size": 390,
      "lambda_value": 0.5314194809525,
      "learning_rate": 0.0013443259838,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 242
    },
    "312": {
      "batch_size": 741,
      "lambda_value": 0.7148476112948,
      "learning_rate": 0.0021213467033,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 82
    },
    "313": {
      "batch_size": 849,
      "lambda_value": 0.3099768475404,
      "learning_rate": 0.0006553087978,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 124
    },
    "314": {
      "batch_size": 41,
      "lambda_value": 0.0660568722404,
      "learning_rate": 0.0040521423813,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "315": {
      "batch_size": 780,
      "lambda_value": 0.2064525755689,
      "learning_rate": 0.0002593296815,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 548
    },
    "316": {
      "batch_size": 277,
      "lambda_value": 0.0994308555944,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 397
    },
    "317": {
      "batch_size": 905,
      "lambda_value": 0.8059902862067,
      "learning_rate": 0.0018633581119,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 416
    },
    "318": {
      "batch_size": 437,
      "lambda_value": 0.7358982056678,
      "learning_rate": 0.0067680718763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 82
    },
    "319": {
      "batch_size": 659,
      "lambda_value": 0.6213471081522,
      "learning_rate": 0.0060203559486,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 718
    },
    "320": {
      "batch_size": 498,
      "lambda_value": 0.3797333205204,
      "learning_rate": 0.0026146954891,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 235
    },
    "321": {
      "batch_size": 843,
      "lambda_value": 0.1865370858349,
      "learning_rate": 0.0020195892834,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 235
    },
    "322": {
      "batch_size": 47,
      "lambda_value": 0.5182538469109,
      "learning_rate": 0.0089358135385,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 103
    },
    "323": {
      "batch_size": 121,
      "lambda_value": 0.541339152825,
      "learning_rate": 0.0002017361907,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 438
    },
    "324": {
      "batch_size": 418,
      "lambda_value": 0.4806562688073,
      "learning_rate": 0.0001280087689,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 151
    },
    "325": {
      "batch_size": 505,
      "lambda_value": 0.1804699936187,
      "learning_rate": 0.0515528982345,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 512
    },
    "326": {
      "batch_size": 756,
      "lambda_value": 0.0563130399479,
      "learning_rate": 0.0022234197184,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 129
    },
    "327": {
      "batch_size": 58,
      "lambda_value": 0.4944094677612,
      "learning_rate": 0.0002060823911,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 247
    },
    "328": {
      "batch_size": 156,
      "lambda_value": 0.8337801698394,
      "learning_rate": 0.0499835912667,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "329": {
      "batch_size": 443,
      "lambda_value": 0.2533722448979,
      "learning_rate": 0.020662701703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 439
    },
    "330": {
      "batch_size": 60,
      "lambda_value": 0.1306990600206,
      "learning_rate": 0.0065000343887,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 106
    },
    "331": {
      "batch_size": 307,
      "lambda_value": 0.2683873329488,
      "learning_rate": 0.0002594694874,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 107
    },
    "332": {
      "batch_size": 272,
      "lambda_value": 0.0894764468418,
      "learning_rate": 0.0003411331376,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 114
    },
    "333": {
      "batch_size": 257,
      "lambda_value": 0.5553544255642,
      "learning_rate": 0.0002451181655,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 77
    },
    "334": {
      "batch_size": 839,
      "lambda_value": 0.6434392806542,
      "learning_rate": 0.0004632122203,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 847
    },
    "335": {
      "batch_size": 743,
      "lambda_value": 0.215031883639,
      "learning_rate": 0.01152356152,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "336": {
      "batch_size": 435,
      "lambda_value": 0.6808719321627,
      "learning_rate": 0.0679194637572,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 90
    },
    "337": {
      "batch_size": 717,
      "lambda_value": 0.7887801615769,
      "learning_rate": 0.0005094724236,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 356
    },
    "338": {
      "batch_size": 581,
      "lambda_value": 0.0178358357788,
      "learning_rate": 0.0003477267856,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 103
    },
    "339": {
      "batch_size": 218,
      "lambda_value": 0.1696888094239,
      "learning_rate": 0.052309575188,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 810
    },
    "340": {
      "batch_size": 401,
      "lambda_value": 0.7568355160604,
      "learning_rate": 0.0005585359023,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 520
    },
    "341": {
      "batch_size": 473,
      "lambda_value": 0.4546944937188,
      "learning_rate": 0.0027846284343,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 236
    },
    "342": {
      "batch_size": 350,
      "lambda_value": 0.5559936772425,
      "learning_rate": 0.0100529394688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 231
    },
    "343": {
      "batch_size": 530,
      "lambda_value": 0.8712284711014,
      "learning_rate": 0.0299782918803,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 218
    },
    "344": {
      "batch_size": 635,
      "lambda_value": 0.6639737340676,
      "learning_rate": 0.0558536530177,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 602
    },
    "345": {
      "batch_size": 395,
      "lambda_value": 0.6229592140736,
      "learning_rate": 0.089214428506,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 76
    },
    "346": {
      "batch_size": 766,
      "lambda_value": 0.2242789140878,
      "learning_rate": 0.0201515256305,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 162
    },
    "347": {
      "batch_size": 50,
      "lambda_value": 0.0852627285054,
      "learning_rate": 0.0308602695679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 125
    },
    "348": {
      "batch_size": 663,
      "lambda_value": 0.2197957309267,
      "learning_rate": 0.0006061254588,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 69
    },
    "349": {
      "batch_size": 52,
      "lambda_value": 0.9515193689156,
      "learning_rate": 0.0002946615193,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "350": {
      "batch_size": 785,
      "lambda_value": 0.6064813774206,
      "learning_rate": 0.0044035167819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 382
    },
    "351": {
      "batch_size": 254,
      "lambda_value": 0.9054709401563,
      "learning_rate": 0.0002642115192,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 665
    },
    "352": {
      "batch_size": 549,
      "lambda_value": 0.674096520909,
      "learning_rate": 0.0188256591059,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "353": {
      "batch_size": 288,
      "lambda_value": 0.5248121876714,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 103
    },
    "354": {
      "batch_size": 51,
      "lambda_value": 0.4900602108518,
      "learning_rate": 0.0033119573752,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "355": {
      "batch_size": 51,
      "lambda_value": 0.0864264480572,
      "learning_rate": 0.0036006553919,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 339
    },
    "356": {
      "batch_size": 254,
      "lambda_value": 0.1335888882005,
      "learning_rate": 0.0293502269983,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "357": {
      "batch_size": 948,
      "lambda_value": 0.1227161072199,
      "learning_rate": 0.0003706377685,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 814
    },
    "358": {
      "batch_size": 32,
      "lambda_value": 0.5590620740748,
      "learning_rate": 0.0001887486611,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "359": {
      "batch_size": 736,
      "lambda_value": 0.5877962768707,
      "learning_rate": 0.000173328844,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 86
    },
    "360": {
      "batch_size": 96,
      "lambda_value": 0.6820598906435,
      "learning_rate": 0.0137231840115,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "361": {
      "batch_size": 152,
      "lambda_value": 0.4622814816124,
      "learning_rate": 0.0001798692692,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 350
    },
    "362": {
      "batch_size": 584,
      "lambda_value": 0.0554709545819,
      "learning_rate": 0.002867925593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "363": {
      "batch_size": 381,
      "lambda_value": 0.2759440299071,
      "learning_rate": 0.005834854811,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 315
    },
    "364": {
      "batch_size": 155,
      "lambda_value": 0.0126718534249,
      "learning_rate": 0.068001605758,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 179
    },
    "365": {
      "batch_size": 47,
      "lambda_value": 0.5370564885229,
      "learning_rate": 0.0139226790705,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 86
    },
    "366": {
      "batch_size": 143,
      "lambda_value": 0.3048283869862,
      "learning_rate": 0.0001422244224,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 95
    },
    "367": {
      "batch_size": 47,
      "lambda_value": 0.6556781774429,
      "learning_rate": 0.0165539675071,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 702
    },
    "368": {
      "batch_size": 514,
      "lambda_value": 0.9325032292789,
      "learning_rate": 0.0028561687279,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 196
    },
    "369": {
      "batch_size": 482,
      "lambda_value": 0.3176803263535,
      "learning_rate": 0.0398799204606,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 370
    },
    "370": {
      "batch_size": 361,
      "lambda_value": 0.1317226997102,
      "learning_rate": 0.0079847689986,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 131
    },
    "371": {
      "batch_size": 54,
      "lambda_value": 0.5065217763128,
      "learning_rate": 0.0005039206588,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "372": {
      "batch_size": 195,
      "lambda_value": 0.1182898929868,
      "learning_rate": 0.0006307295736,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 88
    },
    "373": {
      "batch_size": 615,
      "lambda_value": 0.1713031609062,
      "learning_rate": 0.000327779834,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "374": {
      "batch_size": 210,
      "lambda_value": 0.5999363245098,
      "learning_rate": 0.0001227598618,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 109
    },
    "375": {
      "batch_size": 228,
      "lambda_value": 0.2097534663918,
      "learning_rate": 0.0044908007691,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 98
    },
    "376": {
      "batch_size": 588,
      "lambda_value": 0.6921191491618,
      "learning_rate": 0.0002698674969,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 117
    },
    "377": {
      "batch_size": 827,
      "lambda_value": 0.7449112412928,
      "learning_rate": 0.0088357537548,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 265
    },
    "378": {
      "batch_size": 306,
      "lambda_value": 0.4408812080456,
      "learning_rate": 0.0149767955939,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 136
    },
    "379": {
      "batch_size": 32,
      "lambda_value": 0.2036762467285,
      "learning_rate": 0.0007120181963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 298
    },
    "380": {
      "batch_size": 44,
      "lambda_value": 0.363548252842,
      "learning_rate": 0.0146518248161,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "381": {
      "batch_size": 392,
      "lambda_value": 0.8530809109696,
      "learning_rate": 0.0068378774336,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 936
    },
    "382": {
      "batch_size": 285,
      "lambda_value": 0.0405681071044,
      "learning_rate": 0.0004518383496,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 354
    },
    "383": {
      "batch_size": 85,
      "lambda_value": 0.4744191316373,
      "learning_rate": 0.0427057286624,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "384": {
      "batch_size": 306,
      "lambda_value": 0.2010288654859,
      "learning_rate": 0.0002725464319,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "385": {
      "batch_size": 651,
      "lambda_value": 0.8976907571079,
      "learning_rate": 0.0051642740405,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 317
    },
    "386": {
      "batch_size": 315,
      "lambda_value": 0.4797039031948,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "387": {
      "batch_size": 472,
      "lambda_value": 0.4614628028735,
      "learning_rate": 0.0291505470366,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 392
    },
    "388": {
      "batch_size": 458,
      "lambda_value": 0.0995730051319,
      "learning_rate": 0.0039095602593,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 299
    },
    "389": {
      "batch_size": 56,
      "lambda_value": 0.6254740258478,
      "learning_rate": 0.0002301867794,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "390": {
      "batch_size": 693,
      "lambda_value": 0.5463370696629,
      "learning_rate": 0.080973575191,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "391": {
      "batch_size": 209,
      "lambda_value": 0.5536684799516,
      "learning_rate": 0.0129454765127,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 208
    },
    "392": {
      "batch_size": 58,
      "lambda_value": 0.2603218459407,
      "learning_rate": 0.0001532968651,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "393": {
      "batch_size": 58,
      "lambda_value": 0.1620409311437,
      "learning_rate": 0.0735796471111,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 627
    },
    "394": {
      "batch_size": 36,
      "lambda_value": 0.7723035029214,
      "learning_rate": 0.0009204157787,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "395": {
      "batch_size": 205,
      "lambda_value": 0.7727489068701,
      "learning_rate": 0.0140877870417,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 92
    },
    "396": {
      "batch_size": 657,
      "lambda_value": 0.4360791272104,
      "learning_rate": 0.0003511187487,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 326
    },
    "397": {
      "batch_size": 785,
      "lambda_value": 0.4730155072588,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "398": {
      "batch_size": 540,
      "lambda_value": 0.5582406622968,
      "learning_rate": 0.0001278093202,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "399": {
      "batch_size": 366,
      "lambda_value": 0.0727961021739,
      "learning_rate": 0.0402294898411,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "400": {
      "batch_size": 538,
      "lambda_value": 0.9368961678792,
      "learning_rate": 0.0004181432648,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 271
    },
    "401": {
      "batch_size": 757,
      "lambda_value": 0.9354630310557,
      "learning_rate": 0.0888041723761,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "402": {
      "batch_size": 90,
      "lambda_value": 0.7273220355144,
      "learning_rate": 0.0069453207755,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "403": {
      "batch_size": 844,
      "lambda_value": 0.4824731983172,
      "learning_rate": 0.0003002825268,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 244
    },
    "404": {
      "batch_size": 935,
      "lambda_value": 0.5230953842041,
      "learning_rate": 0.0189973487557,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "405": {
      "batch_size": 995,
      "lambda_value": 0.2168455217586,
      "learning_rate": 0.0027721601592,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 821
    },
    "406": {
      "batch_size": 89,
      "lambda_value": 0.3156048390222,
      "learning_rate": 0.0022198634559,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 194
    },
    "407": {
      "batch_size": 262,
      "lambda_value": 0.8093492297006,
      "learning_rate": 0.0006733972521,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "408": {
      "batch_size": 730,
      "lambda_value": 0.7664908687939,
      "learning_rate": 0.001002848265,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 630
    },
    "409": {
      "batch_size": 154,
      "lambda_value": 0.0952613435301,
      "learning_rate": 0.0006647907154,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 798
    },
    "410": {
      "batch_size": 452,
      "lambda_value": 0.4100844074923,
      "learning_rate": 0.0009856662478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 251
    },
    "411": {
      "batch_size": 231,
      "lambda_value": 0.3275671178479,
      "learning_rate": 0.0002000204542,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 89
    },
    "412": {
      "batch_size": 57,
      "lambda_value": 0.0463424973171,
      "learning_rate": 0.0195673926561,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 200
    },
    "413": {
      "batch_size": 122,
      "lambda_value": 0.110140993716,
      "learning_rate": 0.0026667648338,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 78
    },
    "414": {
      "batch_size": 327,
      "lambda_value": 0.9688895059356,
      "learning_rate": 0.0166234825902,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 359
    },
    "415": {
      "batch_size": 111,
      "lambda_value": 0.1290040542266,
      "learning_rate": 0.0383601008507,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 872
    },
    "416": {
      "batch_size": 554,
      "lambda_value": 0.875718867045,
      "learning_rate": 0.0001409537536,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 913
    },
    "417": {
      "batch_size": 411,
      "lambda_value": 0.6791133254209,
      "learning_rate": 0.003080698466,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 99
    },
    "418": {
      "batch_size": 751,
      "lambda_value": 0.2964694426296,
      "learning_rate": 0.0006311637991,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 964
    },
    "419": {
      "batch_size": 638,
      "lambda_value": 0.809871371246,
      "learning_rate": 0.0012990282325,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 318
    },
    "420": {
      "batch_size": 577,
      "lambda_value": 0.4342900910398,
      "learning_rate": 0.0481822694665,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "421": {
      "batch_size": 45,
      "lambda_value": 0.8518940421392,
      "learning_rate": 0.0079236122108,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 102
    },
    "422": {
      "batch_size": 623,
      "lambda_value": 0.5327950896181,
      "learning_rate": 0.0001028681582,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "423": {
      "batch_size": 1024,
      "lambda_value": 0.8973291223541,
      "learning_rate": 0.0150597220624,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 217
    },
    "424": {
      "batch_size": 629,
      "lambda_value": 0.0960157047896,
      "learning_rate": 0.0109639694441,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "425": {
      "batch_size": 36,
      "lambda_value": 0.2024840795611,
      "learning_rate": 0.0001960291943,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "426": {
      "batch_size": 607,
      "lambda_value": 0.1383618143966,
      "learning_rate": 0.0026266122149,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 180
    },
    "427": {
      "batch_size": 649,
      "lambda_value": 0.6641101531537,
      "learning_rate": 0.0009131406471,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 121
    },
    "428": {
      "batch_size": 359,
      "lambda_value": 0.777661779255,
      "learning_rate": 0.0012177002287,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 242
    },
    "429": {
      "batch_size": 251,
      "lambda_value": 0.9902859186046,
      "learning_rate": 0.0079500805258,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 104
    },
    "430": {
      "batch_size": 120,
      "lambda_value": 0.6401709483762,
      "learning_rate": 0.0511947218235,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 143
    },
    "431": {
      "batch_size": 625,
      "lambda_value": 0.547026907589,
      "learning_rate": 0.0348766379912,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "432": {
      "batch_size": 318,
      "lambda_value": 0.1976681376706,
      "learning_rate": 0.0078438662891,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 69
    },
    "433": {
      "batch_size": 786,
      "lambda_value": 0.3304246919642,
      "learning_rate": 0.0010188720378,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 200
    },
    "434": {
      "batch_size": 240,
      "lambda_value": 0.3250953520818,
      "learning_rate": 0.0158235846031,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 178
    },
    "435": {
      "batch_size": 519,
      "lambda_value": 0.576923925179,
      "learning_rate": 0.016810576472,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "436": {
      "batch_size": 46,
      "lambda_value": 0.0448820923995,
      "learning_rate": 0.0001231661583,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 180
    },
    "437": {
      "batch_size": 119,
      "lambda_value": 0.4059533800196,
      "learning_rate": 0.0003517171686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "438": {
      "batch_size": 791,
      "lambda_value": 0.8071511713332,
      "learning_rate": 0.0044489428443,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 230
    },
    "439": {
      "batch_size": 68,
      "lambda_value": 0.0779707639047,
      "learning_rate": 0.0461783232972,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 111
    },
    "440": {
      "batch_size": 130,
      "lambda_value": 0.5248121876714,
      "learning_rate": 0.0138796755616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "441": {
      "batch_size": 816,
      "lambda_value": 0.8717455164644,
      "learning_rate": 0.0001786287251,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 565
    },
    "442": {
      "batch_size": 357,
      "lambda_value": 0.2177427493109,
      "learning_rate": 0.0002357764524,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 477
    },
    "443": {
      "batch_size": 43,
      "lambda_value": 0.8920943096487,
      "learning_rate": 0.0001742152858,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "444": {
      "batch_size": 375,
      "lambda_value": 0.3164903259613,
      "learning_rate": 0.0026873277912,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 259
    },
    "445": {
      "batch_size": 776,
      "lambda_value": 0.2497535308347,
      "learning_rate": 0.0066559651906,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 190
    },
    "446": {
      "batch_size": 716,
      "lambda_value": 0.3506635014426,
      "learning_rate": 0.0006431334297,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 66
    },
    "447": {
      "batch_size": 742,
      "lambda_value": 0.6142547760672,
      "learning_rate": 0.0520499710913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "448": {
      "batch_size": 569,
      "lambda_value": 0.7592947955,
      "learning_rate": 0.0023713833184,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 293
    },
    "449": {
      "batch_size": 880,
      "lambda_value": 0.1861251225005,
      "learning_rate": 0.0156666338249,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "450": {
      "batch_size": 273,
      "lambda_value": 0.6672254078551,
      "learning_rate": 0.0004944291762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    }
  },
  "config_origins": {
    "1": "Initial Design: Sobol",
    "2": "Initial Design: Sobol",
    "3": "Initial Design: Sobol",
    "4": "Initial Design: Sobol",
    "5": "Initial Design: Sobol",
    "6": "Acquisition Function Maximizer: Local Search",
    "7": "Acquisition Function Maximizer: Local Search",
    "8": "Acquisition Function Maximizer: Local Search",
    "9": "Acquisition Function Maximizer: Local Search",
    "10": "Acquisition Function Maximizer: Local Search",
    "11": "Acquisition Function Maximizer: Local Search",
    "12": "Acquisition Function Maximizer: Local Search",
    "13": "Acquisition Function Maximizer: Local Search",
    "14": "Acquisition Function Maximizer: Local Search",
    "15": "Acquisition Function Maximizer: Local Search",
    "16": "Acquisition Function Maximizer: Local Search",
    "17": "Acquisition Function Maximizer: Local Search",
    "18": "Acquisition Function Maximizer: Local Search",
    "19": "Acquisition Function Maximizer: Local Search",
    "20": "Random Search",
    "21": "Random Search",
    "22": "Random Search",
    "23": "Acquisition Function Maximizer: Local Search",
    "24": "Acquisition Function Maximizer: Local Search",
    "25": "Acquisition Function Maximizer: Local Search",
    "26": "Acquisition Function Maximizer: Local Search",
    "27": "Acquisition Function Maximizer: Local Search",
    "28": "Acquisition Function Maximizer: Local Search",
    "29": "Acquisition Function Maximizer: Local Search",
    "30": "Random Search",
    "31": "Acquisition Function Maximizer: Local Search",
    "32": "Random Search",
    "33": "Acquisition Function Maximizer: Local Search",
    "34": "Acquisition Function Maximizer: Local Search",
    "35": "Acquisition Function Maximizer: Local Search",
    "36": "Acquisition Function Maximizer: Local Search",
    "37": "Acquisition Function Maximizer: Local Search",
    "38": "Acquisition Function Maximizer: Local Search",
    "39": "Acquisition Function Maximizer: Local Search",
    "40": "Random Search",
    "41": "Acquisition Function Maximizer: Local Search",
    "42": "Acquisition Function Maximizer: Local Search",
    "43": "Acquisition Function Maximizer: Local Search",
    "44": "Acquisition Function Maximizer: Local Search",
    "45": "Acquisition Function Maximizer: Local Search",
    "46": "Acquisition Function Maximizer: Local Search",
    "47": "Acquisition Function Maximizer: Local Search",
    "48": "Acquisition Function Maximizer: Local Search",
    "49": "Random Search",
    "50": "Acquisition Function Maximizer: Local Search",
    "51": "Acquisition Function Maximizer: Local Search",
    "52": "Acquisition Function Maximizer: Local Search",
    "53": "Random Search",
    "54": "Acquisition Function Maximizer: Local Search",
    "55": "Acquisition Function Maximizer: Local Search",
    "56": "Acquisition Function Maximizer: Local Search",
    "57": "Acquisition Function Maximizer: Local Search",
    "58": "Acquisition Function Maximizer: Local Search",
    "59": "Random Search",
    "60": "Acquisition Function Maximizer: Local Search",
    "61": "Random Search",
    "62": "Acquisition Function Maximizer: Local Search",
    "63": "Acquisition Function Maximizer: Local Search",
    "64": "Acquisition Function Maximizer: Local Search",
    "65": "Acquisition Function Maximizer: Local Search",
    "66": "Random Search",
    "67": "Random Search",
    "68": "Acquisition Function Maximizer: Local Search",
    "69": "Random Search",
    "70": "Random Search",
    "71": "Acquisition Function Maximizer: Local Search",
    "72": "Acquisition Function Maximizer: Local Search",
    "73": "Random Search",
    "74": "Acquisition Function Maximizer: Local Search",
    "75": "Random Search",
    "76": "Acquisition Function Maximizer: Local Search",
    "77": "Acquisition Function Maximizer: Local Search",
    "78": "Acquisition Function Maximizer: Local Search",
    "79": "Acquisition Function Maximizer: Local Search",
    "80": "Acquisition Function Maximizer: Local Search",
    "81": "Random Search",
    "82": "Acquisition Function Maximizer: Local Search",
    "83": "Random Search",
    "84": "Acquisition Function Maximizer: Local Search",
    "85": "Random Search",
    "86": "Acquisition Function Maximizer: Local Search",
    "87": "Acquisition Function Maximizer: Local Search",
    "88": "Random Search",
    "89": "Acquisition Function Maximizer: Local Search",
    "90": "Acquisition Function Maximizer: Local Search",
    "91": "Acquisition Function Maximizer: Local Search",
    "92": "Acquisition Function Maximizer: Local Search",
    "93": "Random Search",
    "94": "Acquisition Function Maximizer: Local Search",
    "95": "Acquisition Function Maximizer: Local Search",
    "96": "Acquisition Function Maximizer: Local Search",
    "97": "Acquisition Function Maximizer: Local Search",
    "98": "Random Search",
    "99": "Acquisition Function Maximizer: Local Search",
    "100": "Acquisition Function Maximizer: Local Search",
    "101": "Random Search",
    "102": "Acquisition Function Maximizer: Local Search",
    "103": "Random Search",
    "104": "Acquisition Function Maximizer: Local Search",
    "105": "Random Search",
    "106": "Acquisition Function Maximizer: Local Search",
    "107": "Acquisition Function Maximizer: Local Search",
    "108": "Acquisition Function Maximizer: Local Search",
    "109": "Acquisition Function Maximizer: Local Search",
    "110": "Acquisition Function Maximizer: Local Search",
    "111": "Acquisition Function Maximizer: Local Search",
    "112": "Acquisition Function Maximizer: Local Search",
    "113": "Acquisition Function Maximizer: Local Search",
    "114": "Acquisition Function Maximizer: Local Search",
    "115": "Acquisition Function Maximizer: Local Search",
    "116": "Acquisition Function Maximizer: Local Search",
    "117": "Acquisition Function Maximizer: Local Search",
    "118": "Acquisition Function Maximizer: Local Search",
    "119": "Acquisition Function Maximizer: Local Search",
    "120": "Acquisition Function Maximizer: Local Search",
    "121": "Acquisition Function Maximizer: Local Search",
    "122": "Acquisition Function Maximizer: Local Search",
    "123": "Acquisition Function Maximizer: Local Search",
    "124": "Acquisition Function Maximizer: Local Search",
    "125": "Acquisition Function Maximizer: Local Search",
    "126": "Acquisition Function Maximizer: Local Search",
    "127": "Acquisition Function Maximizer: Local Search",
    "128": "Acquisition Function Maximizer: Local Search",
    "129": "Acquisition Function Maximizer: Local Search",
    "130": "Acquisition Function Maximizer: Local Search",
    "131": "Acquisition Function Maximizer: Local Search",
    "132": "Random Search",
    "133": "Acquisition Function Maximizer: Local Search",
    "134": "Acquisition Function Maximizer: Local Search",
    "135": "Acquisition Function Maximizer: Local Search",
    "136": "Acquisition Function Maximizer: Local Search",
    "137": "Acquisition Function Maximizer: Local Search",
    "138": "Random Search",
    "139": "Acquisition Function Maximizer: Local Search",
    "140": "Acquisition Function Maximizer: Local Search",
    "141": "Acquisition Function Maximizer: Local Search",
    "142": "Acquisition Function Maximizer: Local Search",
    "143": "Acquisition Function Maximizer: Local Search",
    "144": "Acquisition Function Maximizer: Local Search",
    "145": "Acquisition Function Maximizer: Local Search",
    "146": "Acquisition Function Maximizer: Local Search",
    "147": "Acquisition Function Maximizer: Local Search",
    "148": "Acquisition Function Maximizer: Local Search",
    "149": "Acquisition Function Maximizer: Local Search",
    "150": "Acquisition Function Maximizer: Local Search",
    "151": "Acquisition Function Maximizer: Local Search",
    "152": "Random Search",
    "153": "Acquisition Function Maximizer: Local Search",
    "154": "Acquisition Function Maximizer: Local Search",
    "155": "Acquisition Function Maximizer: Local Search",
    "156": "Random Search",
    "157": "Acquisition Function Maximizer: Local Search",
    "158": "Random Search",
    "159": "Acquisition Function Maximizer: Local Search",
    "160": "Random Search",
    "161": "Acquisition Function Maximizer: Local Search",
    "162": "Acquisition Function Maximizer: Local Search",
    "163": "Acquisition Function Maximizer: Local Search",
    "164": "Acquisition Function Maximizer: Local Search",
    "165": "Random Search",
    "166": "Acquisition Function Maximizer: Local Search",
    "167": "Acquisition Function Maximizer: Local Search",
    "168": "Acquisition Function Maximizer: Local Search",
    "169": "Acquisition Function Maximizer: Local Search",
    "170": "Acquisition Function Maximizer: Local Search",
    "171": "Acquisition Function Maximizer: Local Search",
    "172": "Random Search",
    "173": "Acquisition Function Maximizer: Local Search",
    "174": "Acquisition Function Maximizer: Local Search",
    "175": "Random Search",
    "176": "Acquisition Function Maximizer: Local Search",
    "177": "Random Search",
    "178": "Random Search",
    "179": "Random Search",
    "180": "Acquisition Function Maximizer: Local Search",
    "181": "Acquisition Function Maximizer: Local Search",
    "182": "Acquisition Function Maximizer: Local Search",
    "183": "Acquisition Function Maximizer: Local Search",
    "184": "Acquisition Function Maximizer: Local Search",
    "185": "Random Search",
    "186": "Random Search",
    "187": "Acquisition Function Maximizer: Local Search",
    "188": "Acquisition Function Maximizer: Local Search",
    "189": "Acquisition Function Maximizer: Local Search",
    "190": "Acquisition Function Maximizer: Local Search",
    "191": "Acquisition Function Maximizer: Local Search",
    "192": "Acquisition Function Maximizer: Local Search",
    "193": "Acquisition Function Maximizer: Local Search",
    "194": "Acquisition Function Maximizer: Local Search",
    "195": "Acquisition Function Maximizer: Local Search",
    "196": "Acquisition Function Maximizer: Local Search",
    "197": "Acquisition Function Maximizer: Local Search",
    "198": "Random Search",
    "199": "Acquisition Function Maximizer: Local Search",
    "200": "Acquisition Function Maximizer: Local Search",
    "201": "Acquisition Function Maximizer: Local Search",
    "202": "Acquisition Function Maximizer: Local Search",
    "203": "Acquisition Function Maximizer: Local Search",
    "204": "Random Search",
    "205": "Acquisition Function Maximizer: Local Search",
    "206": "Acquisition Function Maximizer: Local Search",
    "207": "Acquisition Function Maximizer: Local Search",
    "208": "Acquisition Function Maximizer: Local Search",
    "209": "Random Search",
    "210": "Random Search",
    "211": "Random Search",
    "212": "Acquisition Function Maximizer: Local Search",
    "213": "Acquisition Function Maximizer: Local Search",
    "214": "Acquisition Function Maximizer: Local Search",
    "215": "Acquisition Function Maximizer: Local Search",
    "216": "Acquisition Function Maximizer: Local Search",
    "217": "Acquisition Function Maximizer: Local Search",
    "218": "Acquisition Function Maximizer: Local Search",
    "219": "Acquisition Function Maximizer: Local Search",
    "220": "Random Search",
    "221": "Acquisition Function Maximizer: Local Search",
    "222": "Acquisition Function Maximizer: Local Search",
    "223": "Acquisition Function Maximizer: Local Search",
    "224": "Acquisition Function Maximizer: Local Search",
    "225": "Acquisition Function Maximizer: Local Search",
    "226": "Acquisition Function Maximizer: Local Search",
    "227": "Acquisition Function Maximizer: Local Search",
    "228": "Acquisition Function Maximizer: Local Search",
    "229": "Acquisition Function Maximizer: Local Search",
    "230": "Random Search",
    "231": "Acquisition Function Maximizer: Local Search",
    "232": "Acquisition Function Maximizer: Local Search",
    "233": "Acquisition Function Maximizer: Local Search",
    "234": "Acquisition Function Maximizer: Local Search",
    "235": "Acquisition Function Maximizer: Local Search",
    "236": "Acquisition Function Maximizer: Local Search",
    "237": "Acquisition Function Maximizer: Local Search",
    "238": "Acquisition Function Maximizer: Local Search",
    "239": "Random Search",
    "240": "Acquisition Function Maximizer: Local Search",
    "241": "Acquisition Function Maximizer: Local Search",
    "242": "Acquisition Function Maximizer: Local Search",
    "243": "Acquisition Function Maximizer: Local Search",
    "244": "Acquisition Function Maximizer: Local Search",
    "245": "Acquisition Function Maximizer: Local Search",
    "246": "Acquisition Function Maximizer: Local Search",
    "247": "Random Search",
    "248": "Acquisition Function Maximizer: Local Search",
    "249": "Random Search",
    "250": "Acquisition Function Maximizer: Local Search",
    "251": "Acquisition Function Maximizer: Local Search",
    "252": "Acquisition Function Maximizer: Local Search",
    "253": "Random Search",
    "254": "Random Search",
    "255": "Acquisition Function Maximizer: Local Search",
    "256": "Acquisition Function Maximizer: Local Search",
    "257": "Acquisition Function Maximizer: Local Search",
    "258": "Acquisition Function Maximizer: Local Search",
    "259": "Acquisition Function Maximizer: Local Search",
    "260": "Acquisition Function Maximizer: Local Search",
    "261": "Random Search",
    "262": "Acquisition Function Maximizer: Local Search",
    "263": "Acquisition Function Maximizer: Local Search",
    "264": "Acquisition Function Maximizer: Local Search",
    "265": "Acquisition Function Maximizer: Local Search",
    "266": "Acquisition Function Maximizer: Local Search",
    "267": "Random Search",
    "268": "Random Search",
    "269": "Acquisition Function Maximizer: Local Search",
    "270": "Acquisition Function Maximizer: Local Search",
    "271": "Acquisition Function Maximizer: Local Search",
    "272": "Acquisition Function Maximizer: Local Search",
    "273": "Acquisition Function Maximizer: Local Search",
    "274": "Random Search",
    "275": "Acquisition Function Maximizer: Local Search",
    "276": "Acquisition Function Maximizer: Local Search",
    "277": "Acquisition Function Maximizer: Local Search",
    "278": "Acquisition Function Maximizer: Local Search",
    "279": "Acquisition Function Maximizer: Local Search",
    "280": "Acquisition Function Maximizer: Local Search",
    "281": "Acquisition Function Maximizer: Local Search",
    "282": "Acquisition Function Maximizer: Local Search",
    "283": "Acquisition Function Maximizer: Local Search",
    "284": "Acquisition Function Maximizer: Local Search",
    "285": "Acquisition Function Maximizer: Local Search",
    "286": "Acquisition Function Maximizer: Local Search",
    "287": "Acquisition Function Maximizer: Local Search",
    "288": "Acquisition Function Maximizer: Local Search",
    "289": "Random Search",
    "290": "Acquisition Function Maximizer: Local Search",
    "291": "Random Search",
    "292": "Acquisition Function Maximizer: Local Search",
    "293": "Acquisition Function Maximizer: Local Search",
    "294": "Acquisition Function Maximizer: Local Search",
    "295": "Acquisition Function Maximizer: Local Search",
    "296": "Acquisition Function Maximizer: Local Search",
    "297": "Random Search",
    "298": "Acquisition Function Maximizer: Local Search",
    "299": "Random Search",
    "300": "Acquisition Function Maximizer: Local Search",
    "301": "Acquisition Function Maximizer: Local Search",
    "302": "Random Search",
    "303": "Acquisition Function Maximizer: Local Search",
    "304": "Acquisition Function Maximizer: Local Search",
    "305": "Acquisition Function Maximizer: Local Search",
    "306": "Acquisition Function Maximizer: Local Search",
    "307": "Acquisition Function Maximizer: Local Search",
    "308": "Acquisition Function Maximizer: Local Search",
    "309": "Random Search",
    "310": "Acquisition Function Maximizer: Local Search",
    "311": "Acquisition Function Maximizer: Local Search",
    "312": "Random Search",
    "313": "Random Search",
    "314": "Acquisition Function Maximizer: Local Search",
    "315": "Random Search",
    "316": "Acquisition Function Maximizer: Local Search",
    "317": "Random Search",
    "318": "Random Search",
    "319": "Random Search",
    "320": "Acquisition Function Maximizer: Local Search",
    "321": "Acquisition Function Maximizer: Local Search",
    "322": "Acquisition Function Maximizer: Local Search",
    "323": "Acquisition Function Maximizer: Local Search",
    "324": "Acquisition Function Maximizer: Local Search",
    "325": "Acquisition Function Maximizer: Local Search",
    "326": "Acquisition Function Maximizer: Local Search",
    "327": "Random Search",
    "328": "Random Search",
    "329": "Acquisition Function Maximizer: Local Search",
    "330": "Acquisition Function Maximizer: Local Search",
    "331": "Acquisition Function Maximizer: Local Search",
    "332": "Acquisition Function Maximizer: Local Search",
    "333": "Acquisition Function Maximizer: Local Search",
    "334": "Acquisition Function Maximizer: Local Search",
    "335": "Acquisition Function Maximizer: Local Search",
    "336": "Random Search",
    "337": "Acquisition Function Maximizer: Local Search",
    "338": "Random Search",
    "339": "Acquisition Function Maximizer: Local Search",
    "340": "Acquisition Function Maximizer: Local Search",
    "341": "Acquisition Function Maximizer: Local Search",
    "342": "Acquisition Function Maximizer: Local Search",
    "343": "Acquisition Function Maximizer: Local Search",
    "344": "Acquisition Function Maximizer: Local Search",
    "345": "Acquisition Function Maximizer: Local Search",
    "346": "Acquisition Function Maximizer: Local Search",
    "347": "Random Search",
    "348": "Acquisition Function Maximizer: Local Search",
    "349": "Random Search",
    "350": "Acquisition Function Maximizer: Local Search",
    "351": "Random Search",
    "352": "Acquisition Function Maximizer: Local Search",
    "353": "Acquisition Function Maximizer: Local Search",
    "354": "Acquisition Function Maximizer: Local Search",
    "355": "Acquisition Function Maximizer: Local Search",
    "356": "Acquisition Function Maximizer: Local Search",
    "357": "Random Search",
    "358": "Acquisition Function Maximizer: Local Search",
    "359": "Acquisition Function Maximizer: Local Search",
    "360": "Acquisition Function Maximizer: Local Search",
    "361": "Acquisition Function Maximizer: Local Search",
    "362": "Acquisition Function Maximizer: Local Search",
    "363": "Random Search",
    "364": "Acquisition Function Maximizer: Local Search",
    "365": "Acquisition Function Maximizer: Local Search",
    "366": "Random Search",
    "367": "Acquisition Function Maximizer: Local Search",
    "368": "Acquisition Function Maximizer: Local Search",
    "369": "Acquisition Function Maximizer: Local Search",
    "370": "Acquisition Function Maximizer: Local Search",
    "371": "Acquisition Function Maximizer: Local Search",
    "372": "Acquisition Function Maximizer: Local Search",
    "373": "Acquisition Function Maximizer: Local Search",
    "374": "Acquisition Function Maximizer: Local Search",
    "375": "Acquisition Function Maximizer: Local Search",
    "376": "Acquisition Function Maximizer: Local Search",
    "377": "Acquisition Function Maximizer: Local Search",
    "378": "Acquisition Function Maximizer: Local Search",
    "379": "Acquisition Function Maximizer: Local Search",
    "380": "Acquisition Function Maximizer: Local Search",
    "381": "Random Search",
    "382": "Acquisition Function Maximizer: Local Search",
    "383": "Acquisition Function Maximizer: Local Search",
    "384": "Acquisition Function Maximizer: Local Search",
    "385": "Acquisition Function Maximizer: Local Search",
    "386": "Acquisition Function Maximizer: Local Search",
    "387": "Acquisition Function Maximizer: Local Search",
    "388": "Acquisition Function Maximizer: Local Search",
    "389": "Acquisition Function Maximizer: Local Search",
    "390": "Acquisition Function Maximizer: Local Search",
    "391": "Acquisition Function Maximizer: Local Search",
    "392": "Acquisition Function Maximizer: Local Search",
    "393": "Random Search",
    "394": "Acquisition Function Maximizer: Local Search",
    "395": "Acquisition Function Maximizer: Local Search",
    "396": "Random Search",
    "397": "Acquisition Function Maximizer: Local Search",
    "398": "Acquisition Function Maximizer: Local Search",
    "399": "Acquisition Function Maximizer: Local Search",
    "400": "Random Search",
    "401": "Acquisition Function Maximizer: Local Search",
    "402": "Acquisition Function Maximizer: Local Search",
    "403": "Acquisition Function Maximizer: Local Search",
    "404": "Random Search",
    "405": "Random Search",
    "406": "Acquisition Function Maximizer: Local Search",
    "407": "Acquisition Function Maximizer: Local Search",
    "408": "Random Search",
    "409": "Acquisition Function Maximizer: Local Search",
    "410": "Acquisition Function Maximizer: Local Search",
    "411": "Acquisition Function Maximizer: Local Search",
    "412": "Acquisition Function Maximizer: Local Search",
    "413": "Acquisition Function Maximizer: Local Search",
    "414": "Acquisition Function Maximizer: Local Search",
    "415": "Random Search",
    "416": "Random Search",
    "417": "Acquisition Function Maximizer: Local Search",
    "418": "Random Search",
    "419": "Acquisition Function Maximizer: Local Search",
    "420": "Acquisition Function Maximizer: Local Search",
    "421": "Acquisition Function Maximizer: Local Search",
    "422": "Random Search",
    "423": "Random Search",
    "424": "Random Search",
    "425": "Acquisition Function Maximizer: Local Search",
    "426": "Acquisition Function Maximizer: Local Search",
    "427": "Acquisition Function Maximizer: Local Search",
    "428": "Acquisition Function Maximizer: Local Search",
    "429": "Random Search",
    "430": "Acquisition Function Maximizer: Local Search",
    "431": "Acquisition Function Maximizer: Local Search",
    "432": "Acquisition Function Maximizer: Local Search",
    "433": "Random Search",
    "434": "Acquisition Function Maximizer: Local Search",
    "435": "Acquisition Function Maximizer: Local Search",
    "436": "Acquisition Function Maximizer: Local Search",
    "437": "Acquisition Function Maximizer: Local Search",
    "438": "Acquisition Function Maximizer: Local Search",
    "439": "Acquisition Function Maximizer: Local Search",
    "440": "Acquisition Function Maximizer: Local Search",
    "441": "Acquisition Function Maximizer: Local Search",
    "442": "Acquisition Function Maximizer: Local Search",
    "443": "Acquisition Function Maximizer: Local Search",
    "444": "Acquisition Function Maximizer: Local Search",
    "445": "Acquisition Function Maximizer: Local Search",
    "446": "Acquisition Function Maximizer: Local Search",
    "447": "Acquisition Function Maximizer: Local Search",
    "448": "Acquisition Function Maximizer: Local Search",
    "449": "Random Search",
    "450": "Acquisition Function Maximizer: Local Search"
  }
}