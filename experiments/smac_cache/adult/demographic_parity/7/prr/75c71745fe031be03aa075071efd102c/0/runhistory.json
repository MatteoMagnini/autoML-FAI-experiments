{
  "stats": {
    "submitted": 976,
    "finished": 976,
    "running": 0
  },
  "data": [
    [
      1,
      null,
      209652396,
      null,
      [
        0.1498418868179347,
        0.06617849469184875
      ],
      90.90591883659363,
      1,
      1740650202.3739343,
      1740650293.2817082,
      {}
    ],
    [
      2,
      null,
      209652396,
      null,
      [
        0.15288239434946024,
        0.06531419426202774
      ],
      39.86353802680969,
      1,
      1740650293.2888045,
      1740650333.1545112,
      {}
    ],
    [
      3,
      null,
      209652396,
      null,
      [
        0.15226808243275308,
        0.06689197838306427
      ],
      45.378063917160034,
      1,
      1740650333.1628213,
      1740650378.543302,
      {}
    ],
    [
      4,
      null,
      209652396,
      null,
      [
        0.1492582968630873,
        0.06683732926845551
      ],
      488.87029218673706,
      1,
      1740650378.550106,
      1740650867.4223607,
      {}
    ],
    [
      5,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740650867.4320028,
      1740650867.5492587,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      6,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740650868.464598,
      1740650868.5583498,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      7,
      null,
      209652396,
      null,
      [
        0.15091671221910744,
        0.06524144053459167
      ],
      70.16352033615112,
      1,
      1740650868.567484,
      1740650938.7333558,
      {}
    ],
    [
      8,
      null,
      209652396,
      null,
      [
        0.15100882151780354,
        0.06309199601411819
      ],
      51.448885440826416,
      1,
      1740650938.7429917,
      1740650990.1938562,
      {}
    ],
    [
      9,
      null,
      209652396,
      null,
      [
        0.1511623653090719,
        0.06632592320442199
      ],
      37.67532181739807,
      1,
      1740650990.2027733,
      1740651027.880034,
      {}
    ],
    [
      10,
      null,
      209652396,
      null,
      [
        0.15202237747147923,
        0.0657302126288414
      ],
      148.14669132232666,
      1,
      1740651027.8898468,
      1740651176.0384648,
      {}
    ],
    [
      11,
      null,
      209652396,
      null,
      [
        0.15171511069714663,
        0.06534467935562134
      ],
      34.90452432632446,
      1,
      1740651176.0485005,
      1740651210.9550571,
      {}
    ],
    [
      12,
      null,
      209652396,
      null,
      [
        0.15082461706713204,
        0.06571547865867615
      ],
      262.6513533592224,
      1,
      1740651210.9642448,
      1740651473.6175542,
      {}
    ],
    [
      13,
      null,
      209652396,
      null,
      [
        0.15137736717078037,
        0.0656461700797081
      ],
      48.63468360900879,
      1,
      1740651473.629435,
      1740651522.2661452,
      {}
    ],
    [
      14,
      null,
      209652396,
      null,
      [
        0.1517458939614628,
        0.06284867972135544
      ],
      142.86183071136475,
      1,
      1740651523.0419438,
      1740651665.9057837,
      {}
    ],
    [
      15,
      null,
      209652396,
      null,
      [
        0.15150024087149833,
        0.06354383856058121
      ],
      46.74027490615845,
      1,
      1740651665.918383,
      1740651712.6606781,
      {}
    ],
    [
      16,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740651712.6718776,
      1740651751.041393,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      17,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740651751.0547302,
      1740651751.0961616,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      18,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740651751.1077344,
      1740651757.8431594,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      19,
      null,
      209652396,
      null,
      [
        0.15060962935214434,
        0.06732523381710052
      ],
      501.58043670654297,
      1,
      1740651757.8556478,
      1740652259.4380634,
      {}
    ],
    [
      20,
      null,
      209652396,
      null,
      [
        0.1492275890479483,
        0.06462642848491669
      ],
      85.59800577163696,
      1,
      1740652259.4513063,
      1740652345.051396,
      {}
    ],
    [
      21,
      null,
      209652396,
      null,
      [
        0.1503639715466063,
        0.06558146625757218
      ],
      36.3040406703949,
      1,
      1740652345.064476,
      1740652381.370568,
      {}
    ],
    [
      22,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740652381.3850741,
      1740652381.549401,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      23,
      null,
      209652396,
      null,
      [
        0.15199157534486873,
        0.06496837347745896
      ],
      70.71971535682678,
      1,
      1740652382.3792262,
      1740652453.100755,
      {}
    ],
    [
      24,
      null,
      209652396,
      null,
      [
        0.1497190366950846,
        0.0669584149122238
      ],
      69.20988583564758,
      1,
      1740652453.1123772,
      1740652522.324355,
      {}
    ],
    [
      25,
      null,
      209652396,
      null,
      [
        0.15011833731893612,
        0.0647960251569748
      ],
      78.71461820602417,
      1,
      1740652522.3363786,
      1740652601.0531206,
      {}
    ],
    [
      26,
      null,
      209652396,
      null,
      [
        0.15242156020599135,
        0.06317999899387361
      ],
      52.186445236206055,
      1,
      1740652601.064505,
      1740652653.2528853,
      {}
    ],
    [
      27,
      null,
      209652396,
      null,
      [
        0.1516231475812314,
        0.06503965765237808
      ],
      46.18504476547241,
      1,
      1740652653.2659369,
      1740652699.4533029,
      {}
    ],
    [
      28,
      null,
      209652396,
      null,
      [
        0.15371148178034405,
        0.06700894892215728
      ],
      180.6457962989807,
      1,
      1740652699.4678888,
      1740652880.1166887,
      {}
    ],
    [
      29,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740652880.129229,
      1740652988.8282306,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      30,
      null,
      209652396,
      null,
      [
        0.15024107426802036,
        0.06469499677419663
      ],
      55.85195231437683,
      1,
      1740652988.8482373,
      1740653044.7021337,
      {}
    ],
    [
      31,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740653045.7965794,
      1740653045.8377593,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      32,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740653045.8504252,
      1740653045.9219093,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      33,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740653045.9334688,
      1740653102.4658005,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      34,
      null,
      209652396,
      null,
      [
        0.1507016632016632,
        0.06615865230560303
      ],
      125.3647038936615,
      1,
      1740653102.4797337,
      1740653227.8469439,
      {}
    ],
    [
      35,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740653227.8618839,
      1740653253.6737454,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      36,
      null,
      209652396,
      null,
      [
        0.14922765035040486,
        0.06465265274047852
      ],
      426.3605749607086,
      1,
      1740653253.6867716,
      1740653680.0491815,
      {}
    ],
    [
      37,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740653680.0629616,
      1740653680.1130514,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      38,
      null,
      209652396,
      null,
      [
        0.15079396112330243,
        0.06534840673208236
      ],
      145.44545245170593,
      1,
      1740653681.1158276,
      1740653826.5630598,
      {}
    ],
    [
      39,
      null,
      209652396,
      null,
      [
        0.15279005870323237,
        0.06441714614629745
      ],
      436.5996949672699,
      1,
      1740653826.577089,
      1740654263.1789227,
      {}
    ],
    [
      40,
      null,
      209652396,
      null,
      [
        0.1509781372805325,
        0.06517797201871872
      ],
      201.98445987701416,
      1,
      1740654263.2971895,
      1740654465.283751,
      {}
    ],
    [
      41,
      null,
      209652396,
      null,
      [
        0.15067106384471654,
        0.06484790295362472
      ],
      676.4936332702637,
      1,
      1740654465.2978184,
      1740655141.7935514,
      {}
    ],
    [
      42,
      null,
      209652396,
      null,
      [
        0.1501795501795502,
        0.06512783020734787
      ],
      48.95437693595886,
      1,
      1740655141.8077266,
      1740655190.7641997,
      {}
    ],
    [
      43,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740655190.777809,
      1740655190.8159978,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      44,
      null,
      209652396,
      null,
      [
        0.15533922704581388,
        0.06534305512905121
      ],
      38.651875019073486,
      1,
      1740655190.8292727,
      1740655229.4829283,
      {}
    ],
    [
      45,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740655229.4970043,
      1740655229.5947733,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      46,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740655230.6591794,
      1740655234.094903,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      47,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740655234.1103883,
      1740655234.1886432,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      48,
      null,
      209652396,
      null,
      [
        0.14981107526017706,
        0.06493083506822586
      ],
      75.93580985069275,
      1,
      1740655234.2032487,
      1740655310.1409032,
      {}
    ],
    [
      49,
      null,
      209652396,
      null,
      [
        0.15193023044819454,
        0.06541749626398088
      ],
      66.58340954780579,
      1,
      1740655310.156342,
      1740655376.741704,
      {}
    ],
    [
      50,
      null,
      209652396,
      null,
      [
        0.15512424404639974,
        0.0638687613606453
      ],
      51.571368932724,
      1,
      1740655376.756685,
      1740655428.3299594,
      {}
    ],
    [
      51,
      null,
      209652396,
      null,
      [
        0.15171518614632384,
        0.06513703703880311
      ],
      79.94405436515808,
      1,
      1740655428.3571236,
      1740655508.3038936,
      {}
    ],
    [
      52,
      null,
      209652396,
      null,
      [
        0.1499340102633516,
        0.06525294840335846
      ],
      112.16369652748108,
      1,
      1740655508.3192048,
      1740655620.4849308,
      {}
    ],
    [
      53,
      null,
      209652396,
      null,
      [
        0.15758108145832694,
        0.0638620737195015
      ],
      43.623677015304565,
      1,
      1740655620.5031834,
      1740655664.1288347,
      {}
    ],
    [
      54,
      null,
      209652396,
      null,
      [
        0.1548785815252881,
        0.06629051476716996
      ],
      36.31018400192261,
      1,
      1740655665.2982705,
      1740655701.6103294,
      {}
    ],
    [
      55,
      null,
      209652396,
      null,
      [
        0.15131594682492885,
        0.06527938097715377
      ],
      73.79639148712158,
      1,
      1740655701.6263585,
      1740655775.424781,
      {}
    ],
    [
      56,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740655775.4401522,
      1740655792.7139204,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      57,
      null,
      209652396,
      null,
      [
        0.15140813628837585,
        0.06633216738700867
      ],
      92.8872447013855,
      1,
      1740655792.7293472,
      1740655885.6185,
      {}
    ],
    [
      58,
      null,
      209652396,
      null,
      [
        0.15251367893583462,
        0.06561679601669311
      ],
      167.79364466667175,
      1,
      1740655885.6350443,
      1740656053.4310198,
      {}
    ],
    [
      59,
      null,
      209652396,
      null,
      [
        0.1535578766866192,
        0.06058326125144958
      ],
      55.84314155578613,
      1,
      1740656053.4498465,
      1740656109.2953866,
      {}
    ],
    [
      60,
      null,
      209652396,
      null,
      [
        0.15150021729363047,
        0.06309968531131745
      ],
      46.411442279815674,
      1,
      1740656109.3146188,
      1740656155.7283456,
      {}
    ],
    [
      61,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740656155.7494957,
      1740656155.8598487,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      62,
      null,
      209652396,
      null,
      [
        0.15137738131750106,
        0.06363141715526581
      ],
      39.21972298622131,
      1,
      1740656157.2146835,
      1740656196.4361072,
      {}
    ],
    [
      63,
      null,
      209652396,
      null,
      [
        0.1512239789934401,
        0.06429142385721207
      ],
      129.86898255348206,
      1,
      1740656196.4553223,
      1740656326.3262057,
      {}
    ],
    [
      64,
      null,
      209652396,
      null,
      [
        0.1511931674356824,
        0.06489320397377014
      ],
      64.87687230110168,
      1,
      1740656326.3443496,
      1740656391.223199,
      {}
    ],
    [
      65,
      null,
      209652396,
      null,
      [
        0.14984190568022904,
        0.06485233187675475
      ],
      172.75866985321045,
      1,
      1740656391.2405066,
      1740656564.0010679,
      {}
    ],
    [
      66,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740656564.0196393,
      1740656564.0976279,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      67,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740656564.1273613,
      1740656564.2142422,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      68,
      null,
      209652396,
      null,
      [
        0.15269797298240412,
        0.06466776698827743
      ],
      64.04826641082764,
      1,
      1740656564.2321193,
      1740656628.2821584,
      {}
    ],
    [
      69,
      null,
      209652396,
      null,
      [
        0.1506096576455858,
        0.06675214380025864
      ],
      85.43433880805969,
      1,
      1740656628.3006165,
      1740656713.7367475,
      {}
    ],
    [
      70,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740656713.7703438,
      1740656713.852488,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      71,
      null,
      209652396,
      null,
      [
        0.15552347865222116,
        0.06484323799610138
      ],
      35.93929719924927,
      1,
      1740656715.1417608,
      1740656751.0828176,
      {}
    ],
    [
      72,
      null,
      209652396,
      null,
      [
        0.1509782457387248,
        0.06648259103298189
      ],
      547.4019429683685,
      1,
      1740656751.1006875,
      1740657298.5045326,
      {}
    ],
    [
      73,
      null,
      209652396,
      null,
      [
        0.1524829664051221,
        0.06489618241786957
      ],
      43.98525404930115,
      1,
      1740657298.52459,
      1740657342.5117815,
      {}
    ],
    [
      74,
      null,
      209652396,
      null,
      [
        0.14879762304912006,
        0.06528613835573197
      ],
      51.281962156295776,
      1,
      1740657342.5302894,
      1740657393.8140962,
      {}
    ],
    [
      75,
      null,
      209652396,
      null,
      [
        0.15174594111719858,
        0.0677465033531189
      ],
      47.13664889335632,
      1,
      1740657393.8357265,
      1740657440.9741964,
      {}
    ],
    [
      76,
      null,
      209652396,
      null,
      [
        0.15199160835388378,
        0.06529487282037735
      ],
      44.47538995742798,
      1,
      1740657440.9987178,
      1740657485.4759321,
      {}
    ],
    [
      77,
      null,
      209652396,
      null,
      [
        0.15245231046129246,
        0.06647206604480743
      ],
      56.153873920440674,
      1,
      1740657485.5019114,
      1740657541.6576166,
      {}
    ],
    [
      78,
      null,
      209652396,
      null,
      [
        0.15177664421676396,
        0.06656923055648804
      ],
      71.02077412605286,
      1,
      1740657543.0500011,
      1740657614.0726433,
      {}
    ],
    [
      79,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740657614.0947783,
      1740657614.1923947,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      80,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740657614.2138546,
      1740657614.2946453,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      81,
      null,
      209652396,
      null,
      [
        0.1612049808906096,
        0.06355774402618408
      ],
      35.20459604263306,
      1,
      1740657614.3167765,
      1740657649.523177,
      {}
    ],
    [
      82,
      null,
      209652396,
      null,
      [
        0.15266728402955948,
        0.06584872752428056
      ],
      48.35491609573364,
      1,
      1740657649.54785,
      1740657697.904699,
      {}
    ],
    [
      83,
      null,
      209652396,
      null,
      [
        0.17957065928622812,
        0.0490052342414856
      ],
      34.06399869918823,
      1,
      1740657697.9329047,
      1740657731.9989243,
      {}
    ],
    [
      84,
      null,
      209652396,
      null,
      [
        0.1506095916275557,
        0.06456442117691039
      ],
      150.12646889686584,
      1,
      1740657732.027016,
      1740657882.1554945,
      {}
    ],
    [
      85,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740657882.187279,
      1740657882.261064,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      86,
      null,
      209652396,
      null,
      [
        0.15211447733902825,
        0.06685396760702132
      ],
      543.3655107021332,
      1,
      1740657883.7341945,
      1740658427.1015606,
      {}
    ],
    [
      87,
      null,
      209652396,
      null,
      [
        0.1505484070603831,
        0.06292254269123079
      ],
      135.15653657913208,
      1,
      1740658427.1287684,
      1740658562.287365,
      {}
    ],
    [
      88,
      null,
      209652396,
      null,
      [
        0.15291298427525973,
        0.0665420013666153
      ],
      67.15357995033264,
      1,
      1740658562.314434,
      1740658629.470009,
      {}
    ],
    [
      89,
      null,
      209652396,
      null,
      [
        0.15186870164415073,
        0.06734571993350982
      ],
      142.96728324890137,
      1,
      1740658629.4957662,
      1740658772.4650824,
      {}
    ],
    [
      90,
      null,
      209652396,
      null,
      [
        0.15355777294400047,
        0.06866580069065095
      ],
      40.5107798576355,
      1,
      1740658772.4916794,
      1740658813.004434,
      {}
    ],
    [
      91,
      null,
      209652396,
      null,
      [
        0.15223724258155397,
        0.0661761137843132
      ],
      58.28306460380554,
      1,
      1740658813.029714,
      1740658871.3146644,
      {}
    ],
    [
      92,
      null,
      209652396,
      null,
      [
        0.15447926675471585,
        0.06424659967422486
      ],
      115.17801332473755,
      1,
      1740658871.3413467,
      1740658986.5214236,
      {}
    ],
    [
      93,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740658986.54873,
      1740658986.6237857,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      94,
      null,
      209652396,
      null,
      [
        0.15137747562897264,
        0.06525356680154801
      ],
      114.45274424552917,
      1,
      1740658988.1716473,
      1740659102.6262257,
      {}
    ],
    [
      95,
      null,
      209652396,
      null,
      [
        0.15002614313991558,
        0.06562102437019349
      ],
      78.02781939506531,
      1,
      1740659102.6539247,
      1740659180.6838229,
      {}
    ],
    [
      96,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740659180.7107003,
      1740659212.4870605,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      97,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740659212.5140107,
      1740659214.5845022,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      98,
      null,
      209652396,
      null,
      [
        0.15134668764908282,
        0.06630971819162369
      ],
      98.94709825515747,
      1,
      1740659214.6110978,
      1740659313.5599098,
      {}
    ],
    [
      99,
      null,
      209652396,
      null,
      [
        0.14864407925785172,
        0.06705422043800355
      ],
      63.02294325828552,
      1,
      1740659313.5865965,
      1740659376.6114514,
      {}
    ],
    [
      100,
      null,
      209652396,
      null,
      [
        0.15306658936898457,
        0.06398522913455965
      ],
      90.10331702232361,
      1,
      1740659376.6420274,
      1740659466.747398,
      {}
    ],
    [
      101,
      null,
      209652396,
      null,
      [
        0.15288228117569436,
        0.06901585280895232
      ],
      268.7969753742218,
      1,
      1740659466.7780213,
      1740659735.5770392,
      {}
    ],
    [
      102,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740659737.3807425,
      1740659761.6448133,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      103,
      null,
      209652396,
      null,
      [
        0.15186880538676947,
        0.06304806232452392
      ],
      94.82568335533142,
      1,
      1740659761.6753912,
      1740659856.503159,
      {}
    ],
    [
      104,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740659856.5342193,
      1740659932.1116214,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      105,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740659932.144347,
      1740659932.2221768,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      106,
      null,
      209652396,
      null,
      [
        0.1485518992255519,
        0.0681877675652504
      ],
      83.16845488548279,
      1,
      1740659932.2528377,
      1740660015.423143,
      {}
    ],
    [
      107,
      null,
      209652396,
      null,
      [
        0.15162309570992208,
        0.06382642120122908
      ],
      106.18266987800598,
      1,
      1740660015.4571595,
      1740660121.6419003,
      {}
    ],
    [
      108,
      null,
      209652396,
      null,
      [
        0.1515310147046674,
        0.06650807231664657
      ],
      89.56898641586304,
      1,
      1740660121.690531,
      1740660211.2616477,
      {}
    ],
    [
      109,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740660211.2959034,
      1740660211.3845727,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      110,
      null,
      209652396,
      null,
      [
        0.15263651962753758,
        0.06514753490686417
      ],
      265.91684579849243,
      1,
      1740660213.2546349,
      1740660479.1734028,
      {}
    ],
    [
      111,
      null,
      209652396,
      null,
      [
        0.1563525707986786,
        0.06351926535367966
      ],
      42.61468577384949,
      1,
      1740660479.2079463,
      1740660521.8246584,
      {}
    ],
    [
      112,
      null,
      209652396,
      null,
      [
        0.15211443018329246,
        0.06526271551847458
      ],
      139.9220814704895,
      1,
      1740660521.8582683,
      1740660661.7822466,
      {}
    ],
    [
      113,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740660661.817328,
      1740660661.8654664,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      114,
      null,
      209652396,
      null,
      [
        0.15057890267471102,
        0.06683964729309083
      ],
      134.02360367774963,
      1,
      1740660661.899807,
      1740660795.9251943,
      {}
    ],
    [
      115,
      null,
      209652396,
      null,
      [
        0.1521759401250419,
        0.06633891463279724
      ],
      72.70378375053406,
      1,
      1740660795.960608,
      1740660868.6663923,
      {}
    ],
    [
      116,
      null,
      209652396,
      null,
      [
        0.1499033024482126,
        0.06513186395168305
      ],
      106.81422138214111,
      1,
      1740660868.7017982,
      1740660975.5179694,
      {}
    ],
    [
      117,
      null,
      209652396,
      null,
      [
        0.1505482372997343,
        0.06586493611335754
      ],
      69.35051131248474,
      1,
      1740660975.5534353,
      1740661044.9060173,
      {}
    ],
    [
      118,
      null,
      209652396,
      null,
      [
        0.15232935659582364,
        0.062459793090820316
      ],
      54.87417793273926,
      1,
      1740661046.8749807,
      1740661101.7510567,
      {}
    ],
    [
      119,
      null,
      209652396,
      null,
      [
        0.15404935734277053,
        0.06624906867742539
      ],
      582.4413478374481,
      1,
      1740661101.789288,
      1740661684.2326965,
      {}
    ],
    [
      120,
      null,
      209652396,
      null,
      [
        0.1507938620962573,
        0.06456827908754349
      ],
      48.631346702575684,
      1,
      1740661684.28308,
      1740661732.9169762,
      {}
    ],
    [
      121,
      null,
      209652396,
      null,
      [
        0.15352721131164243,
        0.06519714772701264
      ],
      71.67367768287659,
      1,
      1740661732.9537191,
      1740661804.629212,
      {}
    ],
    [
      122,
      null,
      209652396,
      null,
      [
        0.15030258420976983,
        0.06419102340936661
      ],
      195.50518012046814,
      1,
      1740661804.6687744,
      1740662000.1759582,
      {}
    ],
    [
      123,
      null,
      209652396,
      null,
      [
        0.15245231046129246,
        0.06551079392433166
      ],
      37.50960326194763,
      1,
      1740662000.2187707,
      1740662037.7304006,
      {}
    ],
    [
      124,
      null,
      209652396,
      null,
      [
        0.15042535888344272,
        0.06536405682563781
      ],
      132.96157503128052,
      1,
      1740662037.774858,
      1740662170.7383337,
      {}
    ],
    [
      125,
      null,
      209652396,
      null,
      [
        0.15205303813088245,
        0.06686486870050432
      ],
      148.70659017562866,
      1,
      1740662170.7810366,
      1740662319.4897325,
      {}
    ],
    [
      126,
      null,
      209652396,
      null,
      [
        0.15285162523186474,
        0.06747016459703445
      ],
      45.11362266540527,
      1,
      1740662321.3727076,
      1740662366.4884262,
      {}
    ],
    [
      127,
      null,
      209652396,
      null,
      [
        0.14968828643978344,
        0.06558527290821076
      ],
      178.6411759853363,
      1,
      1740662366.5302124,
      1740662545.1734107,
      {}
    ],
    [
      128,
      null,
      209652396,
      null,
      [
        0.15229872894543556,
        0.06194726794958114
      ],
      34.464725494384766,
      1,
      1740662545.216413,
      1740662579.683139,
      {}
    ],
    [
      129,
      null,
      209652396,
      null,
      [
        0.15030256534747552,
        0.0676225671172142
      ],
      72.6156816482544,
      1,
      1740662579.7259376,
      1740662652.343447,
      {}
    ],
    [
      130,
      null,
      209652396,
      null,
      [
        0.15208341585587096,
        0.06374739497900009
      ],
      151.6086974143982,
      1,
      1740662652.3875232,
      1740662803.9982975,
      {}
    ],
    [
      131,
      null,
      209652396,
      null,
      [
        0.1531586986676807,
        0.06530802369117736
      ],
      50.38794445991516,
      1,
      1740662804.0427349,
      1740662854.4326668,
      {}
    ],
    [
      132,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740662854.4747682,
      1740662854.564663,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      133,
      null,
      209652396,
      null,
      [
        0.1488590292482508,
        0.06552595257759093
      ],
      86.61661410331726,
      1,
      1740662854.620342,
      1740662941.2387545,
      {}
    ],
    [
      134,
      null,
      209652396,
      null,
      [
        0.14968831473322491,
        0.06418179184198379
      ],
      76.95381045341492,
      1,
      1740662943.2853715,
      1740663020.2412803,
      {}
    ],
    [
      135,
      null,
      209652396,
      null,
      [
        0.16062157955870532,
        0.06342528373003006
      ],
      40.13644790649414,
      1,
      1740663020.329055,
      1740663060.4675226,
      {}
    ],
    [
      136,
      null,
      209652396,
      null,
      [
        0.14858267305872094,
        0.06760164320468902
      ],
      100.5802264213562,
      1,
      1740663060.5203865,
      1740663161.1026824,
      {}
    ],
    [
      137,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740663161.1488156,
      1740663161.1950653,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      138,
      null,
      209652396,
      null,
      [
        0.15054825144645506,
        0.0670014324784279
      ],
      107.9475109577179,
      1,
      1740663161.238556,
      1740663269.1879091,
      {}
    ],
    [
      139,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740663269.233418,
      1740663377.6016743,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      140,
      null,
      209652396,
      null,
      [
        0.15260596271075313,
        0.061756210923194874
      ],
      57.12436866760254,
      1,
      1740663377.6629515,
      1740663434.7899537,
      {}
    ],
    [
      141,
      null,
      209652396,
      null,
      [
        0.15444875699366717,
        0.06474704086780549
      ],
      203.5906434059143,
      1,
      1740663434.8468363,
      1740663638.4395611,
      {}
    ],
    [
      142,
      null,
      209652396,
      null,
      [
        0.14971896124590736,
        0.0667097681760788
      ],
      41.98152256011963,
      1,
      1740663640.6682537,
      1740663682.6518881,
      {}
    ],
    [
      143,
      null,
      209652396,
      null,
      [
        0.1505788932435639,
        0.06736333966255188
      ],
      78.29670906066895,
      1,
      1740663682.6977706,
      1740663760.9964492,
      {}
    ],
    [
      144,
      null,
      209652396,
      null,
      [
        0.1520838308263458,
        0.061006128787994385
      ],
      66.14532542228699,
      1,
      1740663761.043665,
      1740663827.191066,
      {}
    ],
    [
      145,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740663827.2401552,
      1740663827.2871156,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      146,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740663827.350453,
      1740663827.4350057,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      147,
      null,
      209652396,
      null,
      [
        0.15239095141789752,
        0.06450020432472228
      ],
      44.80923938751221,
      1,
      1740663827.4826295,
      1740663872.2937076,
      {}
    ],
    [
      148,
      null,
      209652396,
      null,
      [
        0.150732484190568,
        0.0637042945623398
      ],
      91.01163578033447,
      1,
      1740663872.3419166,
      1740663963.355606,
      {}
    ],
    [
      149,
      null,
      209652396,
      null,
      [
        0.15429503872617645,
        0.06230877786874771
      ],
      607.166487455368,
      1,
      1740663963.4158816,
      1740664570.5844395,
      {}
    ],
    [
      150,
      null,
      209652396,
      null,
      [
        0.1501489272447356,
        0.06550780177116396
      ],
      67.49098014831543,
      1,
      1740664572.6501677,
      1740664640.1432116,
      {}
    ],
    [
      151,
      null,
      209652396,
      null,
      [
        0.1504866754866755,
        0.06702364563941955
      ],
      154.3599317073822,
      1,
      1740664640.1916468,
      1740664794.553481,
      {}
    ],
    [
      152,
      null,
      209652396,
      null,
      [
        0.1519608439518619,
        0.06683936476707458
      ],
      49.753321409225464,
      1,
      1740664794.6034853,
      1740664844.3587716,
      {}
    ],
    [
      153,
      null,
      209652396,
      null,
      [
        0.15536992071423208,
        0.06460447102785111
      ],
      37.85799312591553,
      1,
      1740664844.405629,
      1740664882.2654603,
      {}
    ],
    [
      154,
      null,
      209652396,
      null,
      [
        0.15128515412946553,
        0.06374937951564788
      ],
      336.5220730304718,
      1,
      1740664882.3135066,
      1740665218.8375196,
      {}
    ],
    [
      155,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740665218.8878393,
      1740665218.993613,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      156,
      null,
      209652396,
      null,
      [
        0.15002614785548915,
        0.06607470154762268
      ],
      40.62363624572754,
      1,
      1740665219.0431314,
      1740665259.668525,
      {}
    ],
    [
      157,
      null,
      209652396,
      null,
      [
        0.1489512705830071,
        0.0644404062628746
      ],
      36.95881462097168,
      1,
      1740665259.7179964,
      1740665296.6786256,
      {}
    ],
    [
      158,
      null,
      209652396,
      null,
      [
        0.15223717656352384,
        0.06512313663959504
      ],
      33.039321422576904,
      1,
      1740665296.7902846,
      1740665329.8318756,
      {}
    ],
    [
      159,
      null,
      209652396,
      null,
      [
        0.1538036901060853,
        0.061778102517127995
      ],
      66.55138874053955,
      1,
      1740665332.1967437,
      1740665398.7500894,
      {}
    ],
    [
      160,
      null,
      209652396,
      null,
      [
        0.15076302696063176,
        0.0679855114221573
      ],
      63.71664261817932,
      1,
      1740665398.8018637,
      1740665462.520408,
      {}
    ],
    [
      161,
      null,
      209652396,
      null,
      [
        0.14913547031810503,
        0.06313594162464142
      ],
      242.17067456245422,
      1,
      1740665462.5720553,
      1740665704.7447395,
      {}
    ],
    [
      162,
      null,
      209652396,
      null,
      [
        0.1510702512948022,
        0.06836498707532881
      ],
      176.4545476436615,
      1,
      1740665704.7975903,
      1740665881.2542608,
      {}
    ],
    [
      163,
      null,
      209652396,
      null,
      [
        0.15122389411311565,
        0.06577419310808182
      ],
      127.52071642875671,
      1,
      1740665881.3208358,
      1740666008.8438814,
      {}
    ],
    [
      164,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740666008.8997867,
      1740666028.2470312,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      165,
      null,
      209652396,
      null,
      [
        0.15165357717752925,
        0.06766081809997557
      ],
      57.598432302474976,
      1,
      1740666028.2985103,
      1740666085.898721,
      {}
    ],
    [
      166,
      null,
      209652396,
      null,
      [
        0.14870555619058615,
        0.0661269372701645
      ],
      95.32326865196228,
      1,
      1740666088.4256756,
      1740666183.750879,
      {}
    ],
    [
      167,
      null,
      209652396,
      null,
      [
        0.1504867745137206,
        0.06373014569282533
      ],
      65.47083806991577,
      1,
      1740666183.8165913,
      1740666249.2895892,
      {}
    ],
    [
      168,
      null,
      209652396,
      null,
      [
        0.15272873738442602,
        0.06718308180570602
      ],
      786.2643444538116,
      1,
      1740666249.3433132,
      1740667035.6097252,
      {}
    ],
    [
      169,
      null,
      209652396,
      null,
      [
        0.1530050794272351,
        0.06255797922611236
      ],
      60.952171087265015,
      1,
      1740667035.6636324,
      1740667096.6178646,
      {}
    ],
    [
      170,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740667096.6711404,
      1740667096.7679558,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      171,
      null,
      209652396,
      null,
      [
        0.1494732374223392,
        0.06712401151657105
      ],
      262.03220319747925,
      1,
      1740667096.8210127,
      1740667358.855072,
      {}
    ],
    [
      172,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740667358.9167411,
      1740667358.9923146,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      173,
      null,
      209652396,
      null,
      [
        0.152206624362313,
        0.06760918140411377
      ],
      49.65692853927612,
      1,
      1740667359.0461926,
      1740667408.7048657,
      {}
    ],
    [
      174,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740667411.1606026,
      1740667437.0866137,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      175,
      null,
      209652396,
      null,
      [
        0.15024107898359396,
        0.068344247341156
      ],
      40.49248194694519,
      1,
      1740667437.1428804,
      1740667477.6373014,
      {}
    ],
    [
      176,
      null,
      209652396,
      null,
      [
        0.16400029745838127,
        0.05989542871713638
      ],
      69.7275505065918,
      1,
      1740667477.6910708,
      1740667547.420484,
      {}
    ],
    [
      177,
      null,
      209652396,
      null,
      [
        0.15079390453641953,
        0.06663921684026719
      ],
      73.84184145927429,
      1,
      1740667547.4783316,
      1740667621.3220634,
      {}
    ],
    [
      178,
      null,
      209652396,
      null,
      [
        0.15064029944269466,
        0.06649825602769852
      ],
      41.717748403549194,
      1,
      1740667621.3771582,
      1740667663.0967402,
      {}
    ],
    [
      179,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740667663.1519964,
      1740667679.6013813,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      180,
      null,
      209652396,
      null,
      [
        0.15076311655652974,
        0.06373127847909928
      ],
      36.126652002334595,
      1,
      1740667679.6589174,
      1740667715.7875082,
      {}
    ],
    [
      181,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740667715.8431592,
      1740667988.5516284,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      182,
      null,
      209652396,
      null,
      [
        0.15205295325055806,
        0.06400905549526215
      ],
      436.8331379890442,
      1,
      1740667991.0141053,
      1740668427.8493967,
      {}
    ],
    [
      183,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740668427.923699,
      1740668428.0149603,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      184,
      null,
      209652396,
      null,
      [
        0.1530662687099813,
        0.06409596651792526
      ],
      84.79229664802551,
      1,
      1740668428.0878825,
      1740668512.8823888,
      {}
    ],
    [
      185,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740668512.9390512,
      1740668513.0303378,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      186,
      null,
      209652396,
      null,
      [
        0.1487976089023993,
        0.06740123152732849
      ],
      44.29387331008911,
      1,
      1740668513.097203,
      1740668557.392913,
      {}
    ],
    [
      187,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740668557.4500115,
      1740668577.2740326,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      188,
      null,
      209652396,
      null,
      [
        0.15226810129504742,
        0.06470284789800644
      ],
      34.43398094177246,
      1,
      1740668577.3316593,
      1740668611.7675776,
      {}
    ],
    [
      189,
      null,
      209652396,
      null,
      [
        0.1494426474965397,
        0.06261019200086594
      ],
      114.9454710483551,
      1,
      1740668611.823126,
      1740668726.7705,
      {}
    ],
    [
      190,
      null,
      209652396,
      null,
      [
        0.14971902726393743,
        0.06450281083583832
      ],
      44.59941601753235,
      1,
      1740668729.5918865,
      1740668774.1932938,
      {}
    ],
    [
      191,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740668774.2677622,
      1740668774.3211198,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      192,
      null,
      209652396,
      null,
      [
        0.15113171408081588,
        0.06258316695690155
      ],
      114.46883511543274,
      1,
      1740668774.4083953,
      1740668888.879536,
      {}
    ],
    [
      193,
      null,
      209652396,
      null,
      [
        0.15030242388026818,
        0.06614909559488297
      ],
      128.967711687088,
      1,
      1740668888.9402366,
      1740669017.909988,
      {}
    ],
    [
      194,
      null,
      209652396,
      null,
      [
        0.15094742003424635,
        0.06759547412395477
      ],
      38.20244526863098,
      1,
      1740669017.9702783,
      1740669056.1748037,
      {}
    ],
    [
      195,
      null,
      209652396,
      null,
      [
        0.1509166462010773,
        0.06524833381175996
      ],
      43.978060245513916,
      1,
      1740669056.233564,
      1740669100.213405,
      {}
    ],
    [
      196,
      null,
      209652396,
      null,
      [
        0.15254439618212073,
        0.06466944634914398
      ],
      61.91926312446594,
      1,
      1740669100.2727046,
      1740669162.1937034,
      {}
    ],
    [
      197,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740669162.271252,
      1740669162.3538897,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      198,
      null,
      209652396,
      null,
      [
        0.15079386681183088,
        0.06340845793485642
      ],
      105.87933921813965,
      1,
      1740669162.5104868,
      1740669268.3920243,
      {}
    ],
    [
      199,
      null,
      209652396,
      null,
      [
        0.151377527500282,
        0.06617639541625978
      ],
      38.95339012145996,
      1,
      1740669271.028396,
      1740669309.9837337,
      {}
    ],
    [
      200,
      null,
      209652396,
      null,
      [
        0.15100890639812797,
        0.06761072665452958
      ],
      48.91088128089905,
      1,
      1740669310.043798,
      1740669358.9564853,
      {}
    ],
    [
      201,
      null,
      209652396,
      null,
      [
        0.15005683680833382,
        0.06752229571342469
      ],
      53.5252799987793,
      1,
      1740669359.017666,
      1740669412.5448902,
      {}
    ],
    [
      202,
      null,
      209652396,
      null,
      [
        0.15358869767552402,
        0.06217983722686767
      ],
      487.8671061992645,
      1,
      1740669412.6055884,
      1740669900.4746172,
      {}
    ],
    [
      203,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740669900.5371244,
      1740669900.617296,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      204,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740669900.6882992,
      1740669900.823927,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      205,
      null,
      209652396,
      null,
      [
        0.15082453690238123,
        0.06573687613010407
      ],
      115.4703598022461,
      1,
      1740669900.8863811,
      1740670016.3586164,
      {}
    ],
    [
      206,
      null,
      209652396,
      null,
      [
        0.15208377423946287,
        0.06330460399389268
      ],
      123.6513135433197,
      1,
      1740670019.2202632,
      1740670142.8737066,
      {}
    ],
    [
      207,
      null,
      209652396,
      null,
      [
        0.15193018329245872,
        0.06567675054073334
      ],
      102.57217526435852,
      1,
      1740670142.9372199,
      1740670245.5114992,
      {}
    ],
    [
      208,
      null,
      209652396,
      null,
      [
        0.14947334116495795,
        0.06659437716007233
      ],
      101.55222630500793,
      1,
      1740670245.5903623,
      1740670347.144766,
      {}
    ],
    [
      209,
      null,
      209652396,
      null,
      [
        0.1622799241811218,
        0.06394554138183593
      ],
      35.8329291343689,
      1,
      1740670347.2094257,
      1740670383.044391,
      {}
    ],
    [
      210,
      null,
      209652396,
      null,
      [
        0.15183807870933622,
        0.06767389386892317
      ],
      53.36871385574341,
      1,
      1740670383.1068132,
      1740670436.4775112,
      {}
    ],
    [
      211,
      null,
      209652396,
      null,
      [
        0.15082468308516211,
        0.06448405236005783
      ],
      90.39689993858337,
      1,
      1740670436.5413802,
      1740670526.9402835,
      {}
    ],
    [
      212,
      null,
      209652396,
      null,
      [
        0.153005103005103,
        0.06619369029998778
      ],
      50.50804829597473,
      1,
      1740670527.0087395,
      1740670577.5187924,
      {}
    ],
    [
      213,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740670577.5854971,
      1740670577.6699927,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      214,
      null,
      209652396,
      null,
      [
        0.15226800698357582,
        0.06724498510360719
      ],
      59.761141538619995,
      1,
      1740670580.6763117,
      1740670640.4395993,
      {}
    ],
    [
      215,
      null,
      209652396,
      null,
      [
        0.15168451605577354,
        0.06442642956972122
      ],
      43.894558906555176,
      1,
      1740670640.5044708,
      1740670684.4010394,
      {}
    ],
    [
      216,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740670684.468711,
      1740670684.5552983,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      217,
      null,
      209652396,
      null,
      [
        0.1501183231722154,
        0.06539251953363419
      ],
      431.84953212738037,
      1,
      1740670684.61877,
      1740671116.470137,
      {}
    ],
    [
      218,
      null,
      209652396,
      null,
      [
        0.1495039876776404,
        0.0664176794886589
      ],
      81.32562565803528,
      1,
      1740671116.5358074,
      1740671197.8635564,
      {}
    ],
    [
      219,
      null,
      209652396,
      null,
      [
        0.15288230003798864,
        0.06642172068357469
      ],
      50.819470167160034,
      1,
      1740671197.929858,
      1740671248.7516346,
      {}
    ],
    [
      220,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740671248.826612,
      1740671248.9417708,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      221,
      null,
      209652396,
      null,
      [
        0.15417218860332632,
        0.061186575889587404
      ],
      82.35045337677002,
      1,
      1740671249.0228605,
      1740671331.3751926,
      {}
    ],
    [
      222,
      null,
      209652396,
      null,
      [
        0.14904333744154102,
        0.06800984978675842
      ],
      181.38849306106567,
      1,
      1740671334.4211323,
      1740671515.811986,
      {}
    ],
    [
      223,
      null,
      209652396,
      null,
      [
        0.15174594583277218,
        0.06370718359947206
      ],
      61.905322790145874,
      1,
      1740671515.882683,
      1740671577.7904499,
      {}
    ],
    [
      224,
      null,
      209652396,
      null,
      [
        0.15134656975974342,
        0.06275566190481185
      ],
      93.01890158653259,
      1,
      1740671577.876264,
      1740671670.8975575,
      {}
    ],
    [
      225,
      null,
      209652396,
      null,
      [
        0.15153089681532797,
        0.06657813370227814
      ],
      86.75015926361084,
      1,
      1740671670.9645543,
      1740671757.7168114,
      {}
    ],
    [
      226,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740671757.7852259,
      1740671757.8516068,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      227,
      null,
      209652396,
      null,
      [
        0.1504561232854646,
        0.06504028797149658
      ],
      50.568997621536255,
      1,
      1740671757.9161246,
      1740671808.486891,
      {}
    ],
    [
      228,
      null,
      209652396,
      null,
      [
        0.1652282045246117,
        0.06318720817565918
      ],
      42.08920454978943,
      1,
      1740671808.5678859,
      1740671850.6589081,
      {}
    ],
    [
      229,
      null,
      209652396,
      null,
      [
        0.15067099311111287,
        0.06694308936595916
      ],
      146.9954056739807,
      1,
      1740671850.725888,
      1740671997.723198,
      {}
    ],
    [
      230,
      null,
      209652396,
      null,
      [
        0.1496575550467766,
        0.06816241979599
      ],
      56.34627366065979,
      1,
      1740671997.859685,
      1740672054.2079225,
      {}
    ],
    [
      231,
      null,
      209652396,
      null,
      [
        0.1515616659329234,
        0.06589857161045073
      ],
      41.211519956588745,
      1,
      1740672057.2454739,
      1740672098.4589396,
      {}
    ],
    [
      232,
      null,
      209652396,
      null,
      [
        0.15042516554492605,
        0.06541284501552583
      ],
      85.8301637172699,
      1,
      1740672098.5297413,
      1740672184.3618016,
      {}
    ],
    [
      233,
      null,
      209652396,
      null,
      [
        0.15254440561326787,
        0.06590294152498245
      ],
      100.4719614982605,
      1,
      1740672184.4309924,
      1740672284.9050512,
      {}
    ],
    [
      234,
      null,
      209652396,
      null,
      [
        0.14931974550238022,
        0.06705446392297745
      ],
      153.25893783569336,
      1,
      1740672284.9855652,
      1740672438.246811,
      {}
    ],
    [
      235,
      null,
      209652396,
      null,
      [
        0.15180728129829923,
        0.06642178893089294
      ],
      55.14790487289429,
      1,
      1740672438.3204231,
      1740672493.4710333,
      {}
    ],
    [
      236,
      null,
      209652396,
      null,
      [
        0.15223749250695356,
        0.06687891453504562
      ],
      114.492262840271,
      1,
      1740672493.540356,
      1740672608.0345392,
      {}
    ],
    [
      237,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740672608.1052306,
      1740672634.9283016,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      238,
      null,
      209652396,
      null,
      [
        0.1494424965981852,
        0.06829908877611161
      ],
      133.8030562400818,
      1,
      1740672638.1248333,
      1740672771.9298131,
      {}
    ],
    [
      239,
      null,
      209652396,
      null,
      [
        0.15085524000194658,
        0.06318398714065551
      ],
      98.468496799469,
      1,
      1740672772.0005517,
      1740672870.4711423,
      {}
    ],
    [
      240,
      null,
      209652396,
      null,
      [
        0.14925833458767593,
        0.06640765964984895
      ],
      52.212196588516235,
      1,
      1740672870.54251,
      1740672922.7567117,
      {}
    ],
    [
      241,
      null,
      209652396,
      null,
      [
        0.14953468606163217,
        0.0658687949180603
      ],
      93.9212293624878,
      1,
      1740672922.827174,
      1740673016.7502956,
      {}
    ],
    [
      242,
      null,
      209652396,
      null,
      [
        0.1508860751375721,
        0.0633327379822731
      ],
      266.19136786460876,
      1,
      1740673016.8215187,
      1740673283.0149872,
      {}
    ],
    [
      243,
      null,
      209652396,
      null,
      [
        0.14947325156905994,
        0.06641651153564454
      ],
      136.8934462070465,
      1,
      1740673283.0866795,
      1740673419.9821923,
      {}
    ],
    [
      244,
      null,
      209652396,
      null,
      [
        0.15116237945579264,
        0.06639714628458024
      ],
      40.26092982292175,
      1,
      1740673420.055044,
      1740673460.3181074,
      {}
    ],
    [
      245,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740673460.3886843,
      1740673460.480411,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      246,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740673463.8546565,
      1740673463.901938,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      247,
      null,
      209652396,
      null,
      [
        0.1521144867701754,
        0.06462820917367935
      ],
      36.951706409454346,
      1,
      1740673463.9960318,
      1740673500.9499476,
      {}
    ],
    [
      248,
      null,
      209652396,
      null,
      [
        0.1531894064828197,
        0.06609302937984467
      ],
      58.70383358001709,
      1,
      1740673501.022002,
      1740673559.7277522,
      {}
    ],
    [
      249,
      null,
      209652396,
      null,
      [
        0.15288230475356224,
        0.06537083387374877
      ],
      37.65390992164612,
      1,
      1740673559.8047004,
      1740673597.4605305,
      {}
    ],
    [
      250,
      null,
      209652396,
      null,
      [
        0.1503639668310327,
        0.06777486085891724
      ],
      92.16648554801941,
      1,
      1740673597.5328143,
      1740673689.701189,
      {}
    ],
    [
      251,
      null,
      209652396,
      null,
      [
        0.15054821843743998,
        0.06676358520984652
      ],
      57.92228960990906,
      1,
      1740673689.7746785,
      1740673747.6989522,
      {}
    ],
    [
      252,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740673747.7710023,
      1740673756.0053847,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      253,
      null,
      209652396,
      null,
      [
        0.15288217743307564,
        0.06382217735052108
      ],
      75.36123847961426,
      1,
      1740673756.0788207,
      1740673831.441855,
      {}
    ],
    [
      254,
      null,
      209652396,
      null,
      [
        0.15441787470230584,
        0.0642496857047081
      ],
      49.6261510848999,
      1,
      1740673831.590158,
      1740673881.2181735,
      {}
    ],
    [
      255,
      null,
      209652396,
      null,
      [
        0.15100879793993566,
        0.06601567208766937
      ],
      82.34764456748962,
      1,
      1740673884.5083354,
      1740673966.8579943,
      {}
    ],
    [
      256,
      null,
      209652396,
      null,
      [
        0.15278999268520227,
        0.06585352212190629
      ],
      91.14604139328003,
      1,
      1740673966.9339461,
      1740674058.0821748,
      {}
    ],
    [
      257,
      null,
      209652396,
      null,
      [
        0.14947328929364856,
        0.06720460325479508
      ],
      127.99870991706848,
      1,
      1740674058.1569078,
      1740674186.1575842,
      {}
    ],
    [
      258,
      null,
      209652396,
      null,
      [
        0.15137732473061813,
        0.06668876588344573
      ],
      47.75307869911194,
      1,
      1740674186.2339673,
      1740674233.9891255,
      {}
    ],
    [
      259,
      null,
      209652396,
      null,
      [
        0.19203802751706944,
        0.047203015685081486
      ],
      207.64534783363342,
      1,
      1740674234.0633025,
      1740674441.7107015,
      {}
    ],
    [
      260,
      null,
      209652396,
      null,
      [
        0.15054820900629282,
        0.06387506872415542
      ],
      35.25982165336609,
      1,
      1740674441.787881,
      1740674477.0496528,
      {}
    ],
    [
      261,
      null,
      209652396,
      null,
      [
        0.15189945189945192,
        0.06844380378723144
      ],
      73.40868711471558,
      1,
      1740674477.123113,
      1740674550.5337536,
      {}
    ],
    [
      262,
      null,
      209652396,
      null,
      [
        0.1528514601867895,
        0.06196367919445038
      ],
      102.98313593864441,
      1,
      1740674553.9979048,
      1740674656.9831624,
      {}
    ],
    [
      263,
      null,
      209652396,
      null,
      [
        0.15266730760742736,
        0.0667248347401619
      ],
      83.71014928817749,
      1,
      1740674657.0586479,
      1740674740.7708704,
      {}
    ],
    [
      264,
      null,
      209652396,
      null,
      [
        0.15067107327586368,
        0.06584814101457595
      ],
      37.603747844696045,
      1,
      1740674740.8542404,
      1740674778.4600487,
      {}
    ],
    [
      265,
      null,
      209652396,
      null,
      [
        0.14935039201506267,
        0.06410083711147309
      ],
      50.929256200790405,
      1,
      1740674778.5493915,
      1740674829.4805832,
      {}
    ],
    [
      266,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740674829.558128,
      1740674871.101687,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      267,
      null,
      209652396,
      null,
      [
        0.15131588552247238,
        0.0690850281715393
      ],
      137.5702543258667,
      1,
      1740674871.191394,
      1740675008.763616,
      {}
    ],
    [
      268,
      null,
      209652396,
      null,
      [
        0.15079394226100812,
        0.062444929778575894
      ],
      60.1412410736084,
      1,
      1740675008.864733,
      1740675069.0086257,
      {}
    ],
    [
      269,
      null,
      209652396,
      null,
      [
        0.1533736863826684,
        0.06472572445869446
      ],
      139.5080795288086,
      1,
      1740675069.0864122,
      1740675208.5962944,
      {}
    ],
    [
      270,
      null,
      209652396,
      null,
      [
        0.15202225958213983,
        0.06350690573453903
      ],
      70.52706980705261,
      1,
      1740675212.0675697,
      1740675282.5965629,
      {}
    ],
    [
      271,
      null,
      209652396,
      null,
      [
        0.15008740315626545,
        0.06550766527652742
      ],
      669.5229957103729,
      1,
      1740675282.675414,
      1740675952.2004704,
      {}
    ],
    [
      272,
      null,
      209652396,
      null,
      [
        0.15122382809508556,
        0.063421288728714
      ],
      202.38046073913574,
      1,
      1740675952.2800243,
      1740676154.6625884,
      {}
    ],
    [
      273,
      null,
      209652396,
      null,
      [
        0.1490739839542235,
        0.06808586210012436
      ],
      72.88802552223206,
      1,
      1740676154.7418642,
      1740676227.6322649,
      {}
    ],
    [
      274,
      null,
      209652396,
      null,
      [
        0.15392646949533179,
        0.06485525786876678
      ],
      39.82183790206909,
      1,
      1740676227.7165284,
      1740676267.540756,
      {}
    ],
    [
      275,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740676267.6180859,
      1740676290.8706784,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      276,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740676290.9764068,
      1740676388.3406613,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      277,
      null,
      209652396,
      null,
      [
        0.15408007458905662,
        0.06304765284061432
      ],
      66.89389491081238,
      1,
      1740676388.4342663,
      1740676455.330151,
      {}
    ],
    [
      278,
      null,
      209652396,
      null,
      [
        0.15165383181850248,
        0.06360132306814195
      ],
      95.76779198646545,
      1,
      1740676458.9314806,
      1740676554.7012942,
      {}
    ],
    [
      279,
      null,
      209652396,
      null,
      [
        0.15131589023804595,
        0.06929958701133729
      ],
      63.14703607559204,
      1,
      1740676554.7823875,
      1740676617.9315307,
      {}
    ],
    [
      280,
      null,
      209652396,
      null,
      [
        0.15561557380419658,
        0.06178460657596587
      ],
      128.40098309516907,
      1,
      1740676618.0123007,
      1740676746.4152465,
      {}
    ],
    [
      281,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740676746.4964132,
      1740676753.9628828,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      282,
      null,
      209652396,
      null,
      [
        0.14938115641708455,
        0.06319125592708588
      ],
      280.6356234550476,
      1,
      1740676754.048748,
      1740677034.6866121,
      {}
    ],
    [
      283,
      null,
      209652396,
      null,
      [
        0.15291286638592028,
        0.0628593796491623
      ],
      442.30258440971375,
      1,
      1740677034.7694347,
      1740677477.0744069,
      {}
    ],
    [
      284,
      null,
      209652396,
      null,
      [
        0.1505481712817042,
        0.06471211761236191
      ],
      51.997570276260376,
      1,
      1740677477.156341,
      1740677529.1559503,
      {}
    ],
    [
      285,
      null,
      209652396,
      null,
      [
        0.151561670648497,
        0.061117578446865085
      ],
      177.89296698570251,
      1,
      1740677529.2403996,
      1740677707.135288,
      {}
    ],
    [
      286,
      null,
      209652396,
      null,
      [
        0.1506095539029671,
        0.06655240565538408
      ],
      102.5535717010498,
      1,
      1740677711.0372148,
      1740677813.592757,
      {}
    ],
    [
      287,
      null,
      209652396,
      null,
      [
        0.15229876195445058,
        0.06391457915306091
      ],
      52.57911729812622,
      1,
      1740677813.6793737,
      1740677866.2605681,
      {}
    ],
    [
      288,
      null,
      209652396,
      null,
      [
        0.15039452846339074,
        0.06725174367427826
      ],
      77.14916729927063,
      1,
      1740677866.3455527,
      1740677943.4968023,
      {}
    ],
    [
      289,
      null,
      209652396,
      null,
      [
        0.15014891781358847,
        0.06638478428125381
      ],
      126.41006970405579,
      1,
      1740677943.5803103,
      1740678069.9923635,
      {}
    ],
    [
      290,
      null,
      209652396,
      null,
      [
        0.15088601383511563,
        0.06589329421520233
      ],
      70.44726037979126,
      1,
      1740678070.0803163,
      1740678140.5295887,
      {}
    ],
    [
      291,
      null,
      209652396,
      null,
      [
        0.14892053919000026,
        0.06771279096603393
      ],
      45.87635135650635,
      1,
      1740678140.6130552,
      1740678186.4912634,
      {}
    ],
    [
      292,
      null,
      209652396,
      null,
      [
        0.15398788512560968,
        0.0638737541437149
      ],
      90.30249118804932,
      1,
      1740678186.5732775,
      1740678276.8776627,
      {}
    ],
    [
      293,
      null,
      209652396,
      null,
      [
        0.15073247947499444,
        0.06451067656278611
      ],
      68.09289240837097,
      1,
      1740678276.9632952,
      1740678345.0582266,
      {}
    ],
    [
      294,
      null,
      209652396,
      null,
      [
        0.15088597611052704,
        0.06571509569883346
      ],
      67.7739269733429,
      1,
      1740678348.9295578,
      1740678416.7054398,
      {}
    ],
    [
      295,
      null,
      209652396,
      null,
      [
        0.1528821491396342,
        0.06636983066797256
      ],
      51.406975746154785,
      1,
      1740678416.790082,
      1740678468.1990883,
      {}
    ],
    [
      296,
      null,
      209652396,
      null,
      [
        0.15054813827268915,
        0.06473851293325425
      ],
      133.47726345062256,
      1,
      1740678468.2826166,
      1740678601.761808,
      {}
    ],
    [
      297,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740678601.8478036,
      1740678601.9895446,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      298,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740678602.0728762,
      1740678628.985408,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      299,
      null,
      209652396,
      null,
      [
        0.15285153563596676,
        0.061626388430595404
      ],
      36.45057272911072,
      1,
      1740678629.0732133,
      1740678665.525725,
      {}
    ],
    [
      300,
      null,
      209652396,
      null,
      [
        0.1530664714796451,
        0.06496731787919999
      ],
      52.13172173500061,
      1,
      1740678665.6137471,
      1740678717.7473278,
      {}
    ],
    [
      301,
      null,
      209652396,
      null,
      [
        0.15186877709332797,
        0.06583524644374847
      ],
      147.63733792304993,
      1,
      1740678717.8316047,
      1740678865.470833,
      {}
    ],
    [
      302,
      null,
      209652396,
      null,
      [
        0.14981106582902987,
        0.06581230998039247
      ],
      85.63472294807434,
      1,
      1740678865.7017252,
      1740678951.3389647,
      {}
    ],
    [
      303,
      null,
      209652396,
      null,
      [
        0.15153104771368245,
        0.0634023043513298
      ],
      137.35098958015442,
      1,
      1740678955.2162786,
      1740679092.56949,
      {}
    ],
    [
      304,
      null,
      209652396,
      null,
      [
        0.1664875031641499,
        0.06433107912540437
      ],
      48.74653649330139,
      1,
      1740679092.6620388,
      1740679141.4112642,
      {}
    ],
    [
      305,
      null,
      209652396,
      null,
      [
        0.15027181509217438,
        0.06426292985677719
      ],
      79.02818536758423,
      1,
      1740679141.497988,
      1740679220.52813,
      {}
    ],
    [
      306,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740679220.6140997,
      1740679220.707781,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      307,
      null,
      209652396,
      null,
      [
        0.15196091468546558,
        0.0644328013062477
      ],
      51.78575372695923,
      1,
      1740679220.7930262,
      1740679272.580554,
      {}
    ],
    [
      308,
      null,
      209652396,
      null,
      [
        0.15122386581967417,
        0.06815764784812926
      ],
      53.88144254684448,
      1,
      1740679272.6663315,
      1740679326.5496106,
      {}
    ],
    [
      309,
      null,
      209652396,
      null,
      [
        0.1511931485733881,
        0.0645996168255806
      ],
      37.30382990837097,
      1,
      1740679326.6367671,
      1740679363.94239,
      {}
    ],
    [
      310,
      null,
      209652396,
      null,
      [
        0.1503946416371566,
        0.06725294053554534
      ],
      38.90580654144287,
      1,
      1740679367.9796326,
      1740679406.8872812,
      {}
    ],
    [
      311,
      null,
      209652396,
      null,
      [
        0.15242153662812347,
        0.06824559152126312
      ],
      103.11886215209961,
      1,
      1740679406.974693,
      1740679510.0954316,
      {}
    ],
    [
      312,
      null,
      209652396,
      null,
      [
        0.152237275590569,
        0.06746849566698074
      ],
      38.94159460067749,
      1,
      1740679510.1850371,
      1740679549.1286051,
      {}
    ],
    [
      313,
      null,
      209652396,
      null,
      [
        0.15291293240395037,
        0.06552927583456039
      ],
      37.80891227722168,
      1,
      1740679549.23045,
      1740679587.0411806,
      {}
    ],
    [
      314,
      null,
      209652396,
      null,
      [
        0.1503024851827247,
        0.06639109879732133
      ],
      206.70770907402039,
      1,
      1740679587.1285946,
      1740679793.8382194,
      {}
    ],
    [
      315,
      null,
      209652396,
      null,
      [
        0.1509781137026646,
        0.06571772038936616
      ],
      43.40706419944763,
      1,
      1740679793.9286196,
      1740679837.3376992,
      {}
    ],
    [
      316,
      null,
      209652396,
      null,
      [
        0.15361926402345563,
        0.06868600130081177
      ],
      133.95905184745789,
      1,
      1740679837.426883,
      1740679971.3878832,
      {}
    ],
    [
      317,
      null,
      209652396,
      null,
      [
        0.1512851682761862,
        0.06389373570680619
      ],
      35.22998905181885,
      1,
      1740679971.4772935,
      1740680006.7091246,
      {}
    ],
    [
      318,
      null,
      209652396,
      null,
      [
        0.15150038705427926,
        0.06476396590471269
      ],
      59.288733959198,
      1,
      1740680006.9510095,
      1740680066.2420175,
      {}
    ],
    [
      319,
      null,
      209652396,
      null,
      [
        0.15143881109449972,
        0.06589942991733551
      ],
      67.96783876419067,
      1,
      1740680066.3337684,
      1740680134.3035145,
      {}
    ],
    [
      320,
      null,
      209652396,
      null,
      [
        0.1513466310621999,
        0.06709614038467407
      ],
      80.2689859867096,
      1,
      1740680138.3012803,
      1740680218.5722682,
      {}
    ],
    [
      321,
      null,
      209652396,
      null,
      [
        0.15045610913874388,
        0.06743954181671144
      ],
      38.10301899909973,
      1,
      1740680218.662736,
      1740680256.7676127,
      {}
    ],
    [
      322,
      null,
      209652396,
      null,
      [
        0.14824490595448678,
        0.0642063221335411
      ],
      118.27983283996582,
      1,
      1740680256.8574939,
      1740680375.1392655,
      {}
    ],
    [
      323,
      null,
      209652396,
      null,
      [
        0.1509474388965407,
        0.06606580466032028
      ],
      252.2820324897766,
      1,
      1740680375.2217016,
      1740680627.5057976,
      {}
    ],
    [
      324,
      null,
      209652396,
      null,
      [
        0.15472497643156327,
        0.06621039986610414
      ],
      68.20430397987366,
      1,
      1740680627.5872202,
      1740680695.793576,
      {}
    ],
    [
      325,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740680695.875049,
      1740680695.9564643,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      326,
      null,
      209652396,
      null,
      [
        0.15064032302056254,
        0.0657240515947342
      ],
      38.96114206314087,
      1,
      1740680700.0823724,
      1740680739.0454426,
      {}
    ],
    [
      327,
      null,
      209652396,
      null,
      [
        0.15193020215475306,
        0.0641632017493248
      ],
      91.40723180770874,
      1,
      1740680739.1262126,
      1740680830.5353222,
      {}
    ],
    [
      328,
      null,
      209652396,
      null,
      [
        0.1561683097611241,
        0.06598409026861192
      ],
      143.10964226722717,
      1,
      1740680830.6174924,
      1740680973.7291665,
      {}
    ],
    [
      329,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740680973.8108451,
      1740680973.8968258,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      330,
      null,
      209652396,
      null,
      [
        0.15171516728402953,
        0.06820486396551131
      ],
      109.12468695640564,
      1,
      1740680973.9775062,
      1740681083.1041074,
      {}
    ],
    [
      331,
      null,
      209652396,
      null,
      [
        0.15309720287265197,
        0.06455706864595413
      ],
      71.55898427963257,
      1,
      1740681083.1866908,
      1740681154.7478032,
      {}
    ],
    [
      332,
      null,
      209652396,
      null,
      [
        0.15174588453031562,
        0.06384030461311341
      ],
      82.86073732376099,
      1,
      1740681154.838081,
      1740681237.7010493,
      {}
    ],
    [
      333,
      null,
      209652396,
      null,
      [
        0.15435644964088077,
        0.06385387241840362
      ],
      82.77277183532715,
      1,
      1740681237.7883825,
      1740681320.5632644,
      {}
    ],
    [
      334,
      null,
      209652396,
      null,
      [
        0.15300517845428024,
        0.06658487737178802
      ],
      40.63904690742493,
      1,
      1740681325.0864089,
      1740681365.7275019,
      {}
    ],
    [
      335,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740681365.8086607,
      1740681365.9020875,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      336,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740681365.9852629,
      1740681375.4973025,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      337,
      null,
      209652396,
      null,
      [
        0.15125457835038672,
        0.06660670548677444
      ],
      45.72007513046265,
      1,
      1740681375.5815735,
      1740681421.3036406,
      {}
    ],
    [
      338,
      null,
      209652396,
      null,
      [
        0.1521144396144396,
        0.06426181763410568
      ],
      45.496599435806274,
      1,
      1740681421.3866732,
      1740681466.8851671,
      {}
    ],
    [
      339,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740681466.9679136,
      1740681467.0588887,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      340,
      null,
      209652396,
      null,
      [
        0.15269790696437402,
        0.06265073776245118
      ],
      71.70171666145325,
      1,
      1740681467.1415374,
      1740681538.8450663,
      {}
    ],
    [
      341,
      null,
      209652396,
      null,
      [
        0.1511623228689097,
        0.0660987076163292
      ],
      72.66147565841675,
      1,
      1740681538.9296494,
      1740681611.5931513,
      {}
    ],
    [
      342,
      null,
      209652396,
      null,
      [
        0.1508860232662628,
        0.06380585312843323
      ],
      110.66229772567749,
      1,
      1740681615.8738997,
      1740681726.5381641,
      {}
    ],
    [
      343,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740681726.6236813,
      1740681726.7356272,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      344,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740681726.8191714,
      1740681726.9045591,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      345,
      null,
      209652396,
      null,
      [
        0.15936151699624754,
        0.06251853823661804
      ],
      59.99830341339111,
      1,
      1740681726.9883018,
      1740681786.9884322,
      {}
    ],
    [
      346,
      null,
      209652396,
      null,
      [
        0.1571821439336409,
        0.05870901554822923
      ],
      46.18423819541931,
      1,
      1740681787.075673,
      1740681833.261902,
      {}
    ],
    [
      347,
      null,
      209652396,
      null,
      [
        0.1581033406632209,
        0.0651332539319992
      ],
      118.39428687095642,
      1,
      1740681833.347677,
      1740681951.7438767,
      {}
    ],
    [
      348,
      null,
      209652396,
      null,
      [
        0.1526365809299941,
        0.06583072781562804
      ],
      46.76744318008423,
      1,
      1740681951.8306742,
      1740681998.6001666,
      {}
    ],
    [
      349,
      null,
      209652396,
      null,
      [
        0.15039463220600946,
        0.06585815548896788
      ],
      109.04962825775146,
      1,
      1740681998.6855154,
      1740682107.737072,
      {}
    ],
    [
      350,
      null,
      209652396,
      null,
      [
        0.15156174138210066,
        0.06253974497318268
      ],
      45.035386085510254,
      1,
      1740682112.2418854,
      1740682157.2792878,
      {}
    ],
    [
      351,
      null,
      209652396,
      null,
      [
        0.15358851848372806,
        0.06506369441747666
      ],
      129.41325092315674,
      1,
      1740682157.366395,
      1740682286.7816498,
      {}
    ],
    [
      352,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740682286.8689032,
      1740682286.988748,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      353,
      null,
      209652396,
      null,
      [
        0.1501182571541853,
        0.0651859423518181
      ],
      72.92864155769348,
      1,
      1740682287.0736692,
      1740682360.004079,
      {}
    ],
    [
      354,
      null,
      209652396,
      null,
      [
        0.15057892625257893,
        0.0663015067577362
      ],
      129.22439408302307,
      1,
      1740682360.0898438,
      1740682489.316176,
      {}
    ],
    [
      355,
      null,
      209652396,
      null,
      [
        0.14971897539262807,
        0.06349988371133805
      ],
      209.66992235183716,
      1,
      1740682489.404439,
      1740682699.076694,
      {}
    ],
    [
      356,
      null,
      209652396,
      null,
      [
        0.15064030415826823,
        0.06390437662601471
      ],
      96.38399171829224,
      1,
      1740682699.1690092,
      1740682795.5555637,
      {}
    ],
    [
      357,
      null,
      209652396,
      null,
      [
        0.14962689438737345,
        0.06791444540023803
      ],
      44.38351130485535,
      1,
      1740682795.669427,
      1740682840.0552127,
      {}
    ],
    [
      358,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740682844.5700698,
      1740682877.203798,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      359,
      null,
      209652396,
      null,
      [
        0.16833005695281147,
        0.06151217997074128
      ],
      38.88950777053833,
      1,
      1740682877.293172,
      1740682916.1846192,
      {}
    ],
    [
      360,
      null,
      209652396,
      null,
      [
        0.14987252861504358,
        0.0620538255572319
      ],
      69.0876407623291,
      1,
      1740682916.2717366,
      1740682985.3612545,
      {}
    ],
    [
      361,
      null,
      209652396,
      null,
      [
        0.15107021828578712,
        0.0633673432469368
      ],
      214.12892246246338,
      1,
      1740682985.4513986,
      1740683199.5825016,
      {}
    ],
    [
      362,
      null,
      209652396,
      null,
      [
        0.15085532016669742,
        0.06519058704376221
      ],
      47.377026081085205,
      1,
      1740683199.6768696,
      1740683247.0559404,
      {}
    ],
    [
      363,
      null,
      209652396,
      null,
      [
        0.15002606297516477,
        0.06496210783720016
      ],
      91.6518235206604,
      1,
      1740683247.143882,
      1740683338.797536,
      {}
    ],
    [
      364,
      null,
      209652396,
      null,
      [
        0.2131019995540954,
        0.04908953964710235
      ],
      193.7447111606598,
      1,
      1740683338.889448,
      1740683532.6361656,
      {}
    ],
    [
      365,
      null,
      209652396,
      null,
      [
        0.15503196027148125,
        0.06361760467290878
      ],
      156.86212706565857,
      1,
      1740683532.7310479,
      1740683689.5952773,
      {}
    ],
    [
      366,
      null,
      209652396,
      null,
      [
        0.1528822906068415,
        0.06575815349817275
      ],
      151.81349873542786,
      1,
      1740683689.8118224,
      1740683841.6276956,
      {}
    ],
    [
      367,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740683846.5679224,
      1740683846.657148,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      368,
      null,
      209652396,
      null,
      [
        0.1516844594688906,
        0.06416304022073745
      ],
      74.99232029914856,
      1,
      1740683846.7755437,
      1740683921.77014,
      {}
    ],
    [
      369,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740683921.860978,
      1740683921.9441626,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      370,
      null,
      209652396,
      null,
      [
        0.15232950749417812,
        0.0630643054842949
      ],
      72.59033799171448,
      1,
      1740683922.0340743,
      1740683994.6262064,
      {}
    ],
    [
      371,
      null,
      209652396,
      null,
      [
        0.14971898010820164,
        0.0667961984872818
      ],
      102.17290163040161,
      1,
      1740683994.7159755,
      1740684096.8908439,
      {}
    ],
    [
      372,
      null,
      209652396,
      null,
      [
        0.15328150163479504,
        0.06471972316503524
      ],
      115.80116844177246,
      1,
      1740684096.9822593,
      1740684212.785567,
      {}
    ],
    [
      373,
      null,
      209652396,
      null,
      [
        0.15386495483800872,
        0.06392030149698258
      ],
      47.27312088012695,
      1,
      1740684212.8772976,
      1740684260.152459,
      {}
    ],
    [
      374,
      null,
      209652396,
      null,
      [
        0.15604546435384758,
        0.06420064657926561
      ],
      102.15633034706116,
      1,
      1740684265.0778422,
      1740684367.236252,
      {}
    ],
    [
      375,
      null,
      209652396,
      null,
      [
        0.1494732657157807,
        0.06885533541440964
      ],
      91.97607564926147,
      1,
      1740684367.3292174,
      1740684459.3074057,
      {}
    ],
    [
      376,
      null,
      209652396,
      null,
      [
        0.15282086082984286,
        0.06461234092712402
      ],
      50.290677070617676,
      1,
      1740684459.40033,
      1740684509.6929991,
      {}
    ],
    [
      377,
      null,
      209652396,
      null,
      [
        0.14962675763573965,
        0.06839742451906206
      ],
      36.324748039245605,
      1,
      1740684509.7827194,
      1740684546.10928,
      {}
    ],
    [
      378,
      null,
      209652396,
      null,
      [
        0.15073239931024363,
        0.06616265565156937
      ],
      71.97168493270874,
      1,
      1740684546.2011254,
      1740684618.1747031,
      {}
    ],
    [
      379,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740684618.2684324,
      1740684648.6371977,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      380,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740684648.7323813,
      1740684681.242049,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      381,
      null,
      209652396,
      null,
      [
        0.15064024285581173,
        0.06662268340587615
      ],
      82.06907916069031,
      1,
      1740684681.3426645,
      1740684763.4142668,
      {}
    ],
    [
      382,
      null,
      209652396,
      null,
      [
        0.1510702701570965,
        0.06124840646982194
      ],
      124.48552513122559,
      1,
      1740684768.3256445,
      1740684892.8132794,
      {}
    ],
    [
      383,
      null,
      209652396,
      null,
      [
        0.17551717581657705,
        0.049327380061149596
      ],
      80.786137342453,
      1,
      1740684892.9147046,
      1740684973.703086,
      {}
    ],
    [
      384,
      null,
      209652396,
      null,
      [
        0.1503945803347001,
        0.06693834811449051
      ],
      128.38592529296875,
      1,
      1740684973.8111436,
      1740685102.1991751,
      {}
    ],
    [
      385,
      null,
      209652396,
      null,
      [
        0.15708984601200168,
        0.0666519373655319
      ],
      51.753122091293335,
      1,
      1740685102.308377,
      1740685154.0634775,
      {}
    ],
    [
      386,
      null,
      209652396,
      null,
      [
        0.15420300016108396,
        0.0664667010307312
      ],
      80.95072293281555,
      1,
      1740685154.1687295,
      1740685235.1212718,
      {}
    ],
    [
      387,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740685235.2326243,
      1740685235.3193755,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      388,
      null,
      209652396,
      null,
      [
        0.1517151719996031,
        0.0681494116783142
      ],
      82.86898970603943,
      1,
      1740685235.4257464,
      1740685318.296516,
      {}
    ],
    [
      389,
      null,
      209652396,
      null,
      [
        0.1529436637969572,
        0.06612022757530213
      ],
      78.23597407341003,
      1,
      1740685318.40415,
      1740685396.6420398,
      {}
    ],
    [
      390,
      null,
      209652396,
      null,
      [
        0.15107035032184732,
        0.06351537406444549
      ],
      40.24510931968689,
      1,
      1740685401.6232014,
      1740685441.870233,
      {}
    ],
    [
      391,
      null,
      209652396,
      null,
      [
        0.15143887239695622,
        0.06317271262407302
      ],
      161.59218907356262,
      1,
      1740685442.00995,
      1740685603.6044748,
      {}
    ],
    [
      392,
      null,
      209652396,
      null,
      [
        0.15288235190929803,
        0.066764694750309
      ],
      127.7536256313324,
      1,
      1740685603.7189336,
      1740685731.4745884,
      {}
    ],
    [
      393,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740685731.584696,
      1740685731.6871204,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      394,
      null,
      209652396,
      null,
      [
        0.1519300748342664,
        0.06601728796958924
      ],
      126.78802442550659,
      1,
      1740685731.7971375,
      1740685858.5873652,
      {}
    ],
    [
      395,
      null,
      209652396,
      null,
      [
        0.1507324653282737,
        0.0649677711725235
      ],
      105.17868328094482,
      1,
      1740685858.7030337,
      1740685963.8845317,
      {}
    ],
    [
      396,
      null,
      209652396,
      null,
      [
        0.1536192640234556,
        0.06604367971420289
      ],
      42.9154839515686,
      1,
      1740685964.0283237,
      1740686006.94629,
      {}
    ],
    [
      397,
      null,
      209652396,
      null,
      [
        0.1667932798172319,
        0.05840018182992936
      ],
      43.45806884765625,
      1,
      1740686007.0549767,
      1740686050.514935,
      {}
    ],
    [
      398,
      null,
      209652396,
      null,
      [
        0.16495173516131603,
        0.06314552068710327
      ],
      53.25478935241699,
      1,
      1740686055.711564,
      1740686108.9683156,
      {}
    ],
    [
      399,
      null,
      209652396,
      null,
      [
        0.1504560997075967,
        0.06668077439069749
      ],
      61.47776961326599,
      1,
      1740686109.0768912,
      1740686170.5565083,
      {}
    ],
    [
      400,
      null,
      209652396,
      null,
      [
        0.151592411472651,
        0.06755718916654588
      ],
      69.57356929779053,
      1,
      1740686170.668346,
      1740686240.2438803,
      {}
    ],
    [
      401,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740686240.354372,
      1740686240.4286125,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      402,
      null,
      209652396,
      null,
      [
        0.1507939894167439,
        0.06623354077339172
      ],
      55.59456396102905,
      1,
      1740686240.5368917,
      1740686296.1332724,
      {}
    ],
    [
      403,
      null,
      209652396,
      null,
      [
        0.1517151814307503,
        0.0673068392276764
      ],
      37.7991898059845,
      1,
      1740686296.2434397,
      1740686334.0445921,
      {}
    ],
    [
      404,
      null,
      209652396,
      null,
      [
        0.1516845207713471,
        0.06789619326591492
      ],
      37.23438835144043,
      1,
      1740686334.1571183,
      1740686371.3934147,
      {}
    ],
    [
      405,
      null,
      209652396,
      null,
      [
        0.1518072294269899,
        0.06675166219472886
      ],
      50.05062747001648,
      1,
      1740686371.5043817,
      1740686421.5568738,
      {}
    ],
    [
      406,
      null,
      209652396,
      null,
      [
        0.1514081975908323,
        0.06824587702751159
      ],
      95.45401978492737,
      1,
      1740686426.5655577,
      1740686522.0215003,
      {}
    ],
    [
      407,
      null,
      209652396,
      null,
      [
        0.15285157336055538,
        0.06271568685770035
      ],
      93.17534518241882,
      1,
      1740686522.1357014,
      1740686615.3131077,
      {}
    ],
    [
      408,
      null,
      209652396,
      null,
      [
        0.15150024087149835,
        0.06496762037277222
      ],
      45.64020848274231,
      1,
      1740686615.4289017,
      1740686661.0710192,
      {}
    ],
    [
      409,
      null,
      209652396,
      null,
      [
        0.15045600539612516,
        0.06460627377033233
      ],
      198.71168112754822,
      1,
      1740686661.1818826,
      1740686859.8955152,
      {}
    ],
    [
      410,
      null,
      209652396,
      null,
      [
        0.15048676979814707,
        0.06572046309709549
      ],
      91.09375953674316,
      1,
      1740686860.0096183,
      1740686951.1054115,
      {}
    ],
    [
      411,
      null,
      209652396,
      null,
      [
        0.15257508985053897,
        0.0651404669880867
      ],
      95.64220714569092,
      1,
      1740686951.2183657,
      1740687046.8625438,
      {}
    ],
    [
      412,
      null,
      209652396,
      null,
      [
        0.1523908948310146,
        0.06073610663414001
      ],
      161.2078788280487,
      1,
      1740687046.9766245,
      1740687208.1865613,
      {}
    ],
    [
      413,
      null,
      209652396,
      null,
      [
        0.1514695283407858,
        0.06399882644414903
      ],
      76.87165975570679,
      1,
      1740687208.302166,
      1740687285.175735,
      {}
    ],
    [
      414,
      null,
      209652396,
      null,
      [
        0.14996464734488688,
        0.06538386821746826
      ],
      107.39725089073181,
      1,
      1740687290.4068384,
      1740687397.8059916,
      {}
    ],
    [
      415,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740687397.921802,
      1740687398.0108612,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      416,
      null,
      209652396,
      null,
      [
        0.15202229730672845,
        0.06671501755714417
      ],
      54.567790269851685,
      1,
      1740687398.125343,
      1740687452.6949744,
      {}
    ],
    [
      417,
      null,
      209652396,
      null,
      [
        0.15021027214140986,
        0.06533570975065231
      ],
      59.262859582901,
      1,
      1740687452.8081129,
      1740687512.072878,
      {}
    ],
    [
      418,
      null,
      209652396,
      null,
      [
        0.15205309471776535,
        0.06650506258010865
      ],
      55.38553524017334,
      1,
      1740687512.1869535,
      1740687567.5744019,
      {}
    ],
    [
      419,
      null,
      209652396,
      null,
      [
        0.14910478136526042,
        0.06550108522176742
      ],
      48.92827081680298,
      1,
      1740687567.689349,
      1740687616.619622,
      {}
    ],
    [
      420,
      null,
      209652396,
      null,
      [
        0.1522373180307312,
        0.06400335401296615
      ],
      49.775779485702515,
      1,
      1740687616.7342436,
      1740687666.5118518,
      {}
    ],
    [
      421,
      null,
      209652396,
      null,
      [
        0.15122380923279127,
        0.06283868938684463
      ],
      153.52770948410034,
      1,
      1740687666.6251874,
      1740687820.1548078,
      {}
    ],
    [
      422,
      null,
      209652396,
      null,
      [
        0.15530849093723345,
        0.06479878067970277
      ],
      46.801310300827026,
      1,
      1740687820.4267945,
      1740687867.2300882,
      {}
    ],
    [
      423,
      null,
      209652396,
      null,
      [
        0.1530050605649408,
        0.06397554367780685
      ],
      36.17152810096741,
      1,
      1740687867.3452601,
      1740687903.518645,
      {}
    ],
    [
      424,
      null,
      209652396,
      null,
      [
        0.15014883764883763,
        0.06408984899520873
      ],
      45.47567629814148,
      1,
      1740687903.6352432,
      1740687949.1127782,
      {}
    ],
    [
      425,
      null,
      209652396,
      null,
      [
        0.1515616659329234,
        0.06391677469015122
      ],
      169.90567588806152,
      1,
      1740687954.3731816,
      1740688124.2809675,
      {}
    ],
    [
      426,
      null,
      209652396,
      null,
      [
        0.15057896397716758,
        0.06898768544197083
      ],
      52.74000883102417,
      1,
      1740688124.3978055,
      1740688177.1398025,
      {}
    ],
    [
      427,
      null,
      209652396,
      null,
      [
        0.15134674423596578,
        0.06542974591255188
      ],
      47.59044551849365,
      1,
      1740688177.2558193,
      1740688224.8481016,
      {}
    ],
    [
      428,
      null,
      209652396,
      null,
      [
        0.15091669807238667,
        0.06579313308000564
      ],
      107.12187314033508,
      1,
      1740688224.966877,
      1740688332.0907092,
      {}
    ],
    [
      429,
      null,
      209652396,
      null,
      [
        0.14999536930674656,
        0.06553327560424804
      ],
      84.56631422042847,
      1,
      1740688332.2093208,
      1740688416.7776737,
      {}
    ],
    [
      430,
      null,
      209652396,
      null,
      [
        0.15985367669499406,
        0.06359710156917572
      ],
      167.88696575164795,
      1,
      1740688422.591886,
      1740688590.48095,
      {}
    ],
    [
      431,
      null,
      209652396,
      null,
      [
        0.15110104399026555,
        0.06596854269504546
      ],
      49.5724995136261,
      1,
      1740688590.5985928,
      1740688640.1731448,
      {}
    ],
    [
      432,
      null,
      209652396,
      null,
      [
        0.15119324288485964,
        0.06616250932216645
      ],
      68.7953987121582,
      1,
      1740688640.2918344,
      1740688709.0892308,
      {}
    ],
    [
      433,
      null,
      209652396,
      null,
      [
        0.150517477613286,
        0.0643007031083107
      ],
      47.07866048812866,
      1,
      1740688709.2135422,
      1740688756.294227,
      {}
    ],
    [
      434,
      null,
      209652396,
      null,
      [
        0.15223725672827468,
        0.06490314781665801
      ],
      113.13824462890625,
      1,
      1740688756.4141593,
      1740688869.5543113,
      {}
    ],
    [
      435,
      null,
      209652396,
      null,
      [
        0.1514387545076168,
        0.06464608043432236
      ],
      51.43432021141052,
      1,
      1740688869.6783817,
      1740688921.1147833,
      {}
    ],
    [
      436,
      null,
      209652396,
      null,
      [
        0.15288224816667928,
        0.06538026750087737
      ],
      103.07477045059204,
      1,
      1740688921.236372,
      1740689024.3132725,
      {}
    ],
    [
      437,
      null,
      209652396,
      null,
      [
        0.15202238690262643,
        0.06316078215837478
      ],
      60.3496572971344,
      1,
      1740689024.4357667,
      1740689084.7879965,
      {}
    ],
    [
      438,
      null,
      209652396,
      null,
      [
        0.15051750590672747,
        0.06424775540828705
      ],
      43.00141215324402,
      1,
      1740689090.5882444,
      1740689133.5915673,
      {}
    ],
    [
      439,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740689133.711175,
      1740689186.7641654,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      440,
      null,
      209652396,
      null,
      [
        0.1511009449632204,
        0.06442974090576173
      ],
      81.75230598449707,
      1,
      1740689186.8875878,
      1740689268.6424427,
      {}
    ],
    [
      441,
      null,
      209652396,
      null,
      [
        0.1518380551314683,
        0.06492773443460464
      ],
      43.771156549453735,
      1,
      1740689268.7649615,
      1740689312.5381303,
      {}
    ],
    [
      442,
      null,
      209652396,
      null,
      [
        0.1537114346246083,
        0.06499438703060151
      ],
      72.80222034454346,
      1,
      1740689312.6600165,
      1740689385.4640563,
      {}
    ],
    [
      443,
      null,
      209652396,
      null,
      [
        0.15116242189595483,
        0.06665650963783262
      ],
      128.52716612815857,
      1,
      1740689385.5847874,
      1740689514.1138713,
      {}
    ],
    [
      444,
      null,
      209652396,
      null,
      [
        0.1511012043197672,
        0.06727006077766419
      ],
      103.3295350074768,
      1,
      1740689514.236477,
      1740689617.568043,
      {}
    ],
    [
      445,
      null,
      209652396,
      null,
      [
        0.1509474341809671,
        0.06496788471937179
      ],
      48.846259355545044,
      1,
      1740689617.6906447,
      1740689666.5389514,
      {}
    ],
    [
      446,
      null,
      209652396,
      null,
      [
        0.15232942261385374,
        0.06625422269105911
      ],
      44.265350580215454,
      1,
      1740689672.376825,
      1740689716.6440225,
      {}
    ],
    [
      447,
      null,
      209652396,
      null,
      [
        0.15343511144409347,
        0.06406285375356674
      ],
      41.033942461013794,
      1,
      1740689716.7738266,
      1740689757.8097055,
      {}
    ],
    [
      448,
      null,
      209652396,
      null,
      [
        0.15205297211285235,
        0.06621194720268249
      ],
      57.75017976760864,
      1,
      1740689757.9303186,
      1740689815.6823394,
      {}
    ],
    [
      449,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740689815.8097062,
      1740689847.254268,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      450,
      null,
      209652396,
      null,
      [
        0.15466358909472683,
        0.06388495981693268
      ],
      90.03284287452698,
      1,
      1740689847.3812106,
      1740689937.4159498,
      {}
    ],
    [
      451,
      null,
      209652396,
      null,
      [
        0.15159241618822455,
        0.06821613013744354
      ],
      48.62966012954712,
      1,
      1740689937.5422776,
      1740689986.1740289,
      {}
    ],
    [
      452,
      null,
      209652396,
      null,
      [
        0.15196090525431843,
        0.06635291874408722
      ],
      191.56453323364258,
      1,
      1740689986.302804,
      1740690177.8694315,
      {}
    ],
    [
      453,
      null,
      209652396,
      null,
      [
        0.15060949731608414,
        0.0655342236161232
      ],
      48.51250648498535,
      1,
      1740690177.9930713,
      1740690226.5075858,
      {}
    ],
    [
      454,
      null,
      209652396,
      null,
      [
        0.15128519185405415,
        0.06432204872369766
      ],
      369.64523482322693,
      1,
      1740690232.1339364,
      1740690601.7812755,
      {}
    ],
    [
      455,
      null,
      209652396,
      null,
      [
        0.15030243331141532,
        0.06467220246791841
      ],
      48.49054455757141,
      1,
      1740690601.9056559,
      1740690650.3982766,
      {}
    ],
    [
      456,
      null,
      209652396,
      null,
      [
        0.15346569193874582,
        0.0645611247420311
      ],
      69.24517273902893,
      1,
      1740690650.5212605,
      1740690719.7685468,
      {}
    ],
    [
      457,
      null,
      209652396,
      null,
      [
        0.1496882109906062,
        0.06515760004520416
      ],
      46.211998462677,
      1,
      1740690719.894597,
      1740690766.1085365,
      {}
    ],
    [
      458,
      null,
      209652396,
      null,
      [
        0.15165386482751753,
        0.06542540550231933
      ],
      141.70909905433655,
      1,
      1740690766.2321768,
      1740690907.943176,
      {}
    ],
    [
      459,
      null,
      209652396,
      null,
      [
        0.15137745676667833,
        0.06634599268436432
      ],
      46.92758822441101,
      1,
      1740690908.0691087,
      1740690954.9986641,
      {}
    ],
    [
      460,
      null,
      209652396,
      null,
      [
        0.17262976409682998,
        0.051979684829711915
      ],
      203.4130039215088,
      1,
      1740690955.1217327,
      1740691158.5366347,
      {}
    ],
    [
      461,
      null,
      209652396,
      null,
      [
        0.15174600241965513,
        0.06541393280029298
      ],
      185.14183259010315,
      1,
      1740691158.6631489,
      1740691343.8069704,
      {}
    ],
    [
      462,
      null,
      209652396,
      null,
      [
        0.1504868452473243,
        0.06743731260299682
      ],
      137.43070602416992,
      1,
      1740691349.588898,
      1740691487.0215921,
      {}
    ],
    [
      463,
      null,
      209652396,
      null,
      [
        0.15137740017979537,
        0.06954573631286622
      ],
      234.7441759109497,
      1,
      1740691487.155311,
      1740691721.9015484,
      {}
    ],
    [
      464,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740691722.0292692,
      1740691722.0783057,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      465,
      null,
      209652396,
      null,
      [
        0.15447938935962885,
        0.062044835090637206
      ],
      147.7026834487915,
      1,
      1740691722.203987,
      1740691869.9085615,
      {}
    ],
    [
      466,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740691870.03555,
      1740691870.1262493,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      467,
      null,
      209652396,
      null,
      [
        0.15064037489187188,
        0.06866661459207533
      ],
      40.48588252067566,
      1,
      1740691870.2518482,
      1740691910.7395823,
      {}
    ],
    [
      468,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740691910.8667479,
      1740691910.93291,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      469,
      null,
      209652396,
      null,
      [
        0.15211436888083593,
        0.06652395367622374
      ],
      44.463088035583496,
      1,
      1740691911.058766,
      1740691955.5236034,
      {}
    ],
    [
      470,
      null,
      209652396,
      null,
      [
        0.14898200197601394,
        0.06628554224967956
      ],
      75.05257368087769,
      1,
      1740691961.6160936,
      1740692036.6706507,
      {}
    ],
    [
      471,
      null,
      209652396,
      null,
      [
        0.15014888008899985,
        0.06458294779062271
      ],
      127.25080847740173,
      1,
      1740692036.8012176,
      1740692164.054117,
      {}
    ],
    [
      472,
      null,
      209652396,
      null,
      [
        0.15017965392216887,
        0.06533085495233536
      ],
      40.22857713699341,
      1,
      1740692164.182376,
      1740692204.4130383,
      {}
    ],
    [
      473,
      null,
      209652396,
      null,
      [
        0.15368059477340915,
        0.06355025291442871
      ],
      68.39056396484375,
      1,
      1740692204.5424817,
      1740692272.9349263,
      {}
    ],
    [
      474,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740692273.0655236,
      1740692273.133339,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      475,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740692273.2913308,
      1740692282.2354271,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      476,
      null,
      209652396,
      null,
      [
        0.1497189282368923,
        0.06619500666856766
      ],
      44.168150901794434,
      1,
      1740692282.3642976,
      1740692326.534292,
      {}
    ],
    [
      477,
      null,
      209652396,
      null,
      [
        0.15208373651487422,
        0.0627542543411255
      ],
      40.86840629577637,
      1,
      1740692326.7025423,
      1740692367.5732684,
      {}
    ],
    [
      478,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740692373.640266,
      1740692373.726717,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      479,
      null,
      209652396,
      null,
      [
        0.15193028231950384,
        0.06435682892799377
      ],
      50.78992557525635,
      1,
      1740692373.8838065,
      1740692424.67549,
      {}
    ],
    [
      480,
      null,
      209652396,
      null,
      [
        0.15033327316261447,
        0.06715234816074371
      ],
      92.53268432617188,
      1,
      1740692424.8058777,
      1740692517.3404987,
      {}
    ],
    [
      481,
      null,
      209652396,
      null,
      [
        0.15493989812852088,
        0.06494896471500396
      ],
      118.57237148284912,
      1,
      1740692517.4703662,
      1740692636.044831,
      {}
    ],
    [
      482,
      null,
      209652396,
      null,
      [
        0.15334299742982377,
        0.06514745116233825
      ],
      90.45261549949646,
      1,
      1740692636.1748774,
      1740692726.629595,
      {}
    ],
    [
      483,
      null,
      209652396,
      null,
      [
        0.1493810762523337,
        0.06418388813734055
      ],
      64.51814413070679,
      1,
      1740692726.7608838,
      1740692791.2810516,
      {}
    ],
    [
      484,
      null,
      209652396,
      null,
      [
        0.15239082409741092,
        0.06547698199748994
      ],
      41.37886643409729,
      1,
      1740692791.41259,
      1740692832.793271,
      {}
    ],
    [
      485,
      null,
      209652396,
      null,
      [
        0.15331194537781362,
        0.06886367291212082
      ],
      51.71850872039795,
      1,
      1740692832.9284825,
      1740692884.648883,
      {}
    ],
    [
      486,
      null,
      209652396,
      null,
      [
        0.15011819585172878,
        0.06541568160057068
      ],
      53.25327920913696,
      1,
      1740692884.9705703,
      1740692938.2257605,
      {}
    ],
    [
      487,
      null,
      209652396,
      null,
      [
        0.17161616098741847,
        0.05836033821105957
      ],
      44.44491624832153,
      1,
      1740692943.9949822,
      1740692988.4417565,
      {}
    ],
    [
      488,
      null,
      209652396,
      null,
      [
        0.14852117726369224,
        0.06568006843328475
      ],
      219.17762446403503,
      1,
      1740692988.5749154,
      1740693207.7544353,
      {}
    ],
    [
      489,
      null,
      209652396,
      null,
      [
        0.1500875399078992,
        0.06395164400339126
      ],
      121.33787512779236,
      1,
      1740693207.8893962,
      1740693329.2293873,
      {}
    ],
    [
      490,
      null,
      209652396,
      null,
      [
        0.14938116584823172,
        0.06429766684770585
      ],
      37.921995401382446,
      1,
      1740693329.3627877,
      1740693367.2867858,
      {}
    ],
    [
      491,
      null,
      209652396,
      null,
      [
        0.15782686658435158,
        0.06422115087509155
      ],
      43.77016830444336,
      1,
      1740693367.418213,
      1740693411.190328,
      {}
    ],
    [
      492,
      null,
      209652396,
      null,
      [
        0.1518688572580788,
        0.06513880223035813
      ],
      172.54969930648804,
      1,
      1740693411.3262246,
      1740693583.877764,
      {}
    ],
    [
      493,
      null,
      209652396,
      null,
      [
        0.15039462749043586,
        0.06643365979194642
      ],
      112.3313615322113,
      1,
      1740693584.052161,
      1740693696.3858976,
      {}
    ],
    [
      494,
      null,
      209652396,
      null,
      [
        0.15174607786883237,
        0.06920477837324142
      ],
      314.7244665622711,
      1,
      1740693702.4863176,
      1740694017.212826,
      {}
    ],
    [
      495,
      null,
      209652396,
      null,
      [
        0.15054816656613063,
        0.06547497153282167
      ],
      46.17061376571655,
      1,
      1740694017.3471816,
      1740694063.5197911,
      {}
    ],
    [
      496,
      null,
      209652396,
      null,
      [
        0.15205303341530887,
        0.06586530119180681
      ],
      70.03225493431091,
      1,
      1740694063.6512456,
      1740694133.6853855,
      {}
    ],
    [
      497,
      null,
      209652396,
      null,
      [
        0.14959614413207228,
        0.06302647560834884
      ],
      114.89893293380737,
      1,
      1740694133.8233273,
      1740694248.7243383,
      {}
    ],
    [
      498,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740694248.8666842,
      1740694248.9517448,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      499,
      null,
      209652396,
      null,
      [
        0.15171521443976535,
        0.0647370120882988
      ],
      72.49792337417603,
      1,
      1740694249.0837953,
      1740694321.5835426,
      {}
    ],
    [
      500,
      null,
      209652396,
      null,
      [
        0.1521451379984314,
        0.06251738250255584
      ],
      63.3038911819458,
      1,
      1740694321.7190247,
      1740694385.0248833,
      {}
    ],
    [
      501,
      null,
      209652396,
      null,
      [
        0.15125457835038672,
        0.06526992589235306
      ],
      171.70860719680786,
      1,
      1740694385.1633155,
      1740694556.8738437,
      {}
    ],
    [
      502,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740694563.269549,
      1740694563.3062356,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      503,
      null,
      209652396,
      null,
      [
        0.15042532115885407,
        0.06409648418426514
      ],
      221.8738477230072,
      1,
      1740694563.4395814,
      1740694785.3151882,
      {}
    ],
    [
      504,
      null,
      209652396,
      null,
      [
        0.15005685095505455,
        0.06510695904493333
      ],
      62.754722595214844,
      1,
      1740694785.4582598,
      1740694848.2151499,
      {}
    ],
    [
      505,
      null,
      209652396,
      null,
      [
        0.15005684623948096,
        0.06354018926620483
      ],
      136.5059835910797,
      1,
      1740694848.3512008,
      1740694984.8592074,
      {}
    ],
    [
      506,
      null,
      209652396,
      null,
      [
        0.15156161877718763,
        0.06741521179676056
      ],
      43.34221363067627,
      1,
      1740694984.9961343,
      1740695028.3403182,
      {}
    ],
    [
      507,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740695028.4784853,
      1740695059.659053,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      508,
      null,
      209652396,
      null,
      [
        0.1500875399078992,
        0.06529553651809691
      ],
      65.87369775772095,
      1,
      1740695059.7973392,
      1740695125.6730785,
      {}
    ],
    [
      509,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740695125.8133638,
      1740695384.207906,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      510,
      null,
      209652396,
      null,
      [
        0.14965752203776156,
        0.06574036121368407
      ],
      158.1341094970703,
      1,
      1740695390.928908,
      1740695549.0650992,
      {}
    ],
    [
      511,
      null,
      209652396,
      null,
      [
        0.1513467206580979,
        0.059877015054225935
      ],
      68.31727361679077,
      1,
      1740695549.208529,
      1740695617.5278916,
      {}
    ],
    [
      512,
      null,
      209652396,
      null,
      [
        0.15217584109799676,
        0.06485786527395249
      ],
      62.54787993431091,
      1,
      1740695617.6674073,
      1740695680.217302,
      {}
    ],
    [
      513,
      null,
      209652396,
      null,
      [
        0.14990305252281302,
        0.06998306661844253
      ],
      35.39081859588623,
      1,
      1740695680.3566914,
      1740695715.7493453,
      {}
    ],
    [
      514,
      null,
      209652396,
      null,
      [
        0.14888973234781616,
        0.06504815846681596
      ],
      350.7894833087921,
      1,
      1740695715.8882754,
      1740696066.6796641,
      {}
    ],
    [
      515,
      null,
      209652396,
      null,
      [
        0.14922754189221257,
        0.06468312978744506
      ],
      221.21498656272888,
      1,
      1740696066.862751,
      1740696288.0803761,
      {}
    ],
    [
      516,
      null,
      209652396,
      null,
      [
        0.15242158849943283,
        0.06286245971918106
      ],
      42.44398474693298,
      1,
      1740696288.2202415,
      1740696330.6662452,
      {}
    ],
    [
      517,
      null,
      209652396,
      null,
      [
        0.15297445177684696,
        0.0649974164366722
      ],
      61.76054358482361,
      1,
      1740696330.8188841,
      1740696392.5814574,
      {}
    ],
    [
      518,
      null,
      209652396,
      null,
      [
        0.15150025973379264,
        0.06468003153800965
      ],
      103.71409964561462,
      1,
      1740696399.2819827,
      1740696502.9980764,
      {}
    ],
    [
      519,
      null,
      209652396,
      null,
      [
        0.151193172151256,
        0.06752032071352006
      ],
      130.5588502883911,
      1,
      1740696503.1390991,
      1740696633.700392,
      {}
    ],
    [
      520,
      null,
      209652396,
      null,
      [
        0.15328138846102918,
        0.06637905687093736
      ],
      130.7735390663147,
      1,
      1740696633.844994,
      1740696764.6212595,
      {}
    ],
    [
      521,
      null,
      209652396,
      null,
      [
        0.1518381211494984,
        0.06537885993719102
      ],
      91.61077642440796,
      1,
      1740696764.761407,
      1740696856.3742542,
      {}
    ],
    [
      522,
      null,
      209652396,
      null,
      [
        0.15331228489911125,
        0.06608771324157714
      ],
      49.158406019210815,
      1,
      1740696856.5160482,
      1740696905.6764956,
      {}
    ],
    [
      523,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740696906.0736053,
      1740696906.1660278,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      524,
      null,
      209652396,
      null,
      [
        0.15011820056730235,
        0.0662556540966034
      ],
      69.67237544059753,
      1,
      1740696906.343494,
      1740696976.017732,
      {}
    ],
    [
      525,
      null,
      209652396,
      null,
      [
        0.1520223916182,
        0.06361396670341492
      ],
      119.34431266784668,
      1,
      1740696976.1602645,
      1740697095.5065618,
      {}
    ],
    [
      526,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740697102.1497276,
      1740697102.1931312,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      527,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740697102.3353195,
      1740697126.855371,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      528,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740697126.9970748,
      1740697152.8044293,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      529,
      null,
      209652396,
      null,
      [
        0.15254400007394017,
        0.06871922075748443
      ],
      37.50372672080994,
      1,
      1740697152.947552,
      1740697190.453074,
      {}
    ],
    [
      530,
      null,
      209652396,
      null,
      [
        0.15211455278820546,
        0.06376486331224442
      ],
      87.57948780059814,
      1,
      1740697190.5957074,
      1740697278.1770325,
      {}
    ],
    [
      531,
      null,
      209652396,
      null,
      [
        0.15177669608807334,
        0.0655921295285225
      ],
      88.13110041618347,
      1,
      1740697278.3188262,
      1740697366.4518597,
      {}
    ],
    [
      532,
      null,
      209652396,
      null,
      [
        0.15168452548692068,
        0.06364348530769348
      ],
      38.35042929649353,
      1,
      1740697366.59526,
      1740697404.9477382,
      {}
    ],
    [
      533,
      null,
      209652396,
      null,
      [
        0.1487669576741433,
        0.06689380586147309
      ],
      104.07532382011414,
      1,
      1740697405.0890849,
      1740697509.1663406,
      {}
    ],
    [
      534,
      null,
      209652396,
      null,
      [
        0.1511316857873744,
        0.06314840704202652
      ],
      40.94829726219177,
      1,
      1740697509.5355747,
      1740697550.4859388,
      {}
    ],
    [
      535,
      null,
      209652396,
      null,
      [
        0.15598419490635057,
        0.06756303399801253
      ],
      136.76517724990845,
      1,
      1740697557.522256,
      1740697694.2896461,
      {}
    ],
    [
      536,
      null,
      209652396,
      null,
      [
        0.1515310335669617,
        0.06927945435047148
      ],
      61.80092167854309,
      1,
      1740697694.4359994,
      1740697756.2389512,
      {}
    ],
    [
      537,
      null,
      209652396,
      null,
      [
        0.1519916743719139,
        0.06457143783569336
      ],
      38.009209632873535,
      1,
      1740697756.3823597,
      1740697794.393463,
      {}
    ],
    [
      538,
      null,
      209652396,
      null,
      [
        0.15226802113029658,
        0.06383192718029022
      ],
      93.83927202224731,
      1,
      1740697794.5359166,
      1740697888.3771436,
      {}
    ],
    [
      539,
      null,
      209652396,
      null,
      [
        0.15140813157280225,
        0.06630381017923355
      ],
      117.93479537963867,
      1,
      1740697888.5235004,
      1740698006.460717,
      {}
    ],
    [
      540,
      null,
      209652396,
      null,
      [
        0.15248310315675587,
        0.06276184767484665
      ],
      39.957308530807495,
      1,
      1740698006.6107175,
      1740698046.5707226,
      {}
    ],
    [
      541,
      null,
      209652396,
      null,
      [
        0.15082465007614704,
        0.06493903040885926
      ],
      111.97406816482544,
      1,
      1740698046.7142892,
      1740698158.6902683,
      {}
    ],
    [
      542,
      null,
      209652396,
      null,
      [
        0.15027179622988004,
        0.0659957492351532
      ],
      267.6594445705414,
      1,
      1740698165.604155,
      1740698433.2657206,
      {}
    ],
    [
      543,
      null,
      209652396,
      null,
      [
        0.14959613941649869,
        0.06395818233489989
      ],
      67.77119040489197,
      1,
      1740698433.4113407,
      1740698501.1846275,
      {}
    ],
    [
      544,
      null,
      209652396,
      null,
      [
        0.15137749920684054,
        0.06619601011276245
      ],
      128.4391224384308,
      1,
      1740698501.3321943,
      1740698629.7734218,
      {}
    ],
    [
      545,
      null,
      209652396,
      null,
      [
        0.15082457462696983,
        0.06590946048498154
      ],
      66.43672204017639,
      1,
      1740698629.9194906,
      1740698696.3582048,
      {}
    ],
    [
      546,
      null,
      209652396,
      null,
      [
        0.14901267678213787,
        0.06526214778423309
      ],
      229.9468834400177,
      1,
      1740698696.504097,
      1740698926.45286,
      {}
    ],
    [
      547,
      null,
      209652396,
      null,
      [
        0.15226781364505917,
        0.06620717585086823
      ],
      54.2327139377594,
      1,
      1740698926.599691,
      1740698980.8344047,
      {}
    ],
    [
      548,
      null,
      209652396,
      null,
      [
        0.14959618657223447,
        0.06419284909963609
      ],
      58.80225872993469,
      1,
      1740698980.9818525,
      1740699039.7860181,
      {}
    ],
    [
      549,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740699039.9352615,
      1740699040.028492,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      550,
      null,
      209652396,
      null,
      [
        0.149196918957398,
        0.06536162495613099
      ],
      194.6741955280304,
      1,
      1740699046.8776562,
      1740699241.5538268,
      {}
    ],
    [
      551,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740699241.7042735,
      1740699241.8228357,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      552,
      null,
      209652396,
      null,
      [
        0.1522987808167449,
        0.06543781012296676
      ],
      73.8600344657898,
      1,
      1740699241.9701977,
      1740699315.8320339,
      {}
    ],
    [
      553,
      null,
      209652396,
      null,
      [
        0.1499032411457561,
        0.06790225982666016
      ],
      54.84069037437439,
      1,
      1740699315.978947,
      1740699370.8214283,
      {}
    ],
    [
      554,
      null,
      209652396,
      null,
      [
        0.15073245589712653,
        0.0627246943116188
      ],
      67.09763765335083,
      1,
      1740699370.9728744,
      1740699438.072433,
      {}
    ],
    [
      555,
      null,
      209652396,
      null,
      [
        0.16347768458546902,
        0.06261715710163115
      ],
      48.449334144592285,
      1,
      1740699438.2259831,
      1740699486.6771603,
      {}
    ],
    [
      556,
      null,
      209652396,
      null,
      [
        0.15177663007004324,
        0.06598553836345672
      ],
      67.14047288894653,
      1,
      1740699486.8239846,
      1740699553.966369,
      {}
    ],
    [
      557,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740699554.1151729,
      1740699554.206896,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      558,
      null,
      209652396,
      null,
      [
        0.14962680950704904,
        0.0661858132481575
      ],
      109.57518982887268,
      1,
      1740699561.3350472,
      1740699670.9123511,
      {}
    ],
    [
      559,
      null,
      209652396,
      null,
      [
        0.15100880265550926,
        0.06669756889343262
      ],
      47.39469790458679,
      1,
      1740699671.062148,
      1740699718.4589756,
      {}
    ],
    [
      560,
      null,
      209652396,
      null,
      [
        0.15067107327586368,
        0.06720011383295059
      ],
      149.5986831188202,
      1,
      1740699718.607584,
      1740699868.208267,
      {}
    ],
    [
      561,
      null,
      209652396,
      null,
      [
        0.15214521816318222,
        0.06577323973178864
      ],
      42.214760065078735,
      1,
      1740699868.3670223,
      1740699910.5838327,
      {}
    ],
    [
      562,
      null,
      209652396,
      null,
      [
        0.1541721933188999,
        0.06481781780719757
      ],
      59.52625012397766,
      1,
      1740699910.7324243,
      1740699970.260633,
      {}
    ],
    [
      563,
      null,
      209652396,
      null,
      [
        0.14904340345957112,
        0.06485769033432007
      ],
      206.51698279380798,
      1,
      1740699970.4106839,
      1740700176.929704,
      {}
    ],
    [
      564,
      null,
      209652396,
      null,
      [
        0.14873618855654783,
        0.06440404236316681
      ],
      37.1662278175354,
      1,
      1740700177.079521,
      1740700214.2477696,
      {}
    ],
    [
      565,
      null,
      209652396,
      null,
      [
        0.1494731714043091,
        0.06301101326942445
      ],
      96.51635265350342,
      1,
      1740700214.3966525,
      1740700310.914816,
      {}
    ],
    [
      566,
      null,
      209652396,
      null,
      [
        0.15196098070349567,
        0.06707102000713348
      ],
      55.847474098205566,
      1,
      1740700318.1551797,
      1740700374.0046515,
      {}
    ],
    [
      567,
      null,
      209652396,
      null,
      [
        0.15042541547032565,
        0.06924889981746674
      ],
      155.84702801704407,
      1,
      1740700374.159991,
      1740700530.0088866,
      {}
    ],
    [
      568,
      null,
      209652396,
      null,
      [
        0.15088607042199859,
        0.06531152069568634
      ],
      126.78796672821045,
      1,
      1740700530.166223,
      1740700656.9563212,
      {}
    ],
    [
      569,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740700657.1504471,
      1740700684.1213944,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      570,
      null,
      209652396,
      null,
      [
        0.1500569216886582,
        0.0613206261396408
      ],
      72.29951643943787,
      1,
      1740700684.3203769,
      1740700756.6226263,
      {}
    ],
    [
      571,
      null,
      209652396,
      null,
      [
        0.15309737263330075,
        0.06385195493698119
      ],
      172.8682770729065,
      1,
      1740700756.7776713,
      1740700929.6480596,
      {}
    ],
    [
      572,
      null,
      209652396,
      null,
      [
        0.1501796539221689,
        0.06493322223424912
      ],
      41.55002450942993,
      1,
      1740700929.8001065,
      1740700971.3521764,
      {}
    ],
    [
      573,
      null,
      209652396,
      null,
      [
        0.15134671122695073,
        0.06704446643590926
      ],
      138.93304824829102,
      1,
      1740700971.5023813,
      1740701110.4374726,
      {}
    ],
    [
      574,
      null,
      209652396,
      null,
      [
        0.1769574676011802,
        0.06861647188663482
      ],
      88.25988364219666,
      1,
      1740701117.8276823,
      1740701206.0896106,
      {}
    ],
    [
      575,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740701206.2423546,
      1740701206.3480422,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      576,
      null,
      209652396,
      null,
      [
        0.17382814224131587,
        0.05339331477880478
      ],
      139.95099806785583,
      1,
      1740701206.498296,
      1740701346.4511328,
      {}
    ],
    [
      577,
      null,
      209652396,
      null,
      [
        0.15963900963900962,
        0.05787018537521362
      ],
      52.0731086730957,
      1,
      1740701346.608291,
      1740701398.6834168,
      {}
    ],
    [
      578,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740701398.8322778,
      1740701398.9398563,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      579,
      null,
      209652396,
      null,
      [
        0.149565417454639,
        0.06334629446268082
      ],
      76.59746527671814,
      1,
      1740701399.0844235,
      1740701475.683747,
      {}
    ],
    [
      580,
      null,
      209652396,
      null,
      [
        0.15404930547146115,
        0.06235037267208099
      ],
      46.18687438964844,
      1,
      1740701475.8377962,
      1740701522.0267825,
      {}
    ],
    [
      581,
      null,
      209652396,
      null,
      [
        0.15365010859022835,
        0.06456566810607911
      ],
      41.64271926879883,
      1,
      1740701522.1889977,
      1740701563.8337429,
      {}
    ],
    [
      582,
      null,
      209652396,
      null,
      [
        0.15300508414280867,
        0.06669240593910217
      ],
      35.50987124443054,
      1,
      1740701564.2417734,
      1740701599.7534842,
      {}
    ],
    [
      583,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740701606.6859987,
      1740701606.7678704,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      584,
      null,
      209652396,
      null,
      [
        0.14852124799729588,
        0.06730218082666398
      ],
      481.6612856388092,
      1,
      1740701606.9627738,
      1740702088.6259744,
      {}
    ],
    [
      585,
      null,
      209652396,
      null,
      [
        0.15208373651487425,
        0.06582568764686585
      ],
      48.65061807632446,
      1,
      1740702088.834529,
      1740702137.4876783,
      {}
    ],
    [
      586,
      null,
      209652396,
      null,
      [
        0.14910474835624538,
        0.06383777678012849
      ],
      117.15300226211548,
      1,
      1740702137.64974,
      1740702254.8046205,
      {}
    ],
    [
      587,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740702254.966092,
      1740702409.2406409,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      588,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740702409.4018965,
      1740702409.4871616,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      589,
      null,
      209652396,
      null,
      [
        0.15619916847461757,
        0.0654738810658455
      ],
      42.77514934539795,
      1,
      1740702409.6425948,
      1740702452.4195194,
      {}
    ],
    [
      590,
      null,
      209652396,
      null,
      [
        0.1520223161690228,
        0.06560723423957823
      ],
      58.51236343383789,
      1,
      1740702459.86182,
      1740702518.3761077,
      {}
    ],
    [
      591,
      null,
      209652396,
      null,
      [
        0.15414146192589304,
        0.06137678772211075
      ],
      89.92742729187012,
      1,
      1740702518.5319808,
      1740702608.4613185,
      {}
    ],
    [
      592,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740702608.6212432,
      1740702608.75302,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      593,
      null,
      209652396,
      null,
      [
        0.15229870065199408,
        0.06455259174108505
      ],
      53.214619636535645,
      1,
      1740702608.9107661,
      1740702662.1271982,
      {}
    ],
    [
      594,
      null,
      209652396,
      null,
      [
        0.1517151767151767,
        0.06311945289373397
      ],
      36.94540238380432,
      1,
      1740702662.2845035,
      1740702699.231723,
      {}
    ],
    [
      595,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740702699.395209,
      1740702699.4711194,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      596,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740702699.6280606,
      1740702731.827471,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      597,
      null,
      209652396,
      null,
      [
        0.1493811469859374,
        0.06360814124345779
      ],
      49.189480781555176,
      1,
      1740702731.9857564,
      1740702781.1770399,
      {}
    ],
    [
      598,
      null,
      209652396,
      null,
      [
        0.1530357165087704,
        0.06471497327089311
      ],
      110.31223225593567,
      1,
      1740702788.8649771,
      1740702899.1792705,
      {}
    ],
    [
      599,
      null,
      209652396,
      null,
      [
        0.15214514742957858,
        0.06509700298309326
      ],
      41.620112657547,
      1,
      1740702899.33844,
      1740702940.9605086,
      {}
    ],
    [
      600,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740702941.117987,
      1740703371.4793983,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      601,
      null,
      209652396,
      null,
      [
        0.15060964821443862,
        0.06394106894731522
      ],
      76.80276584625244,
      1,
      1740703371.6911237,
      1740703448.4964693,
      {}
    ],
    [
      602,
      null,
      209652396,
      null,
      [
        0.15153104299810888,
        0.06685179024934769
      ],
      100.7494604587555,
      1,
      1740703448.660093,
      1740703549.4115157,
      {}
    ],
    [
      603,
      null,
      209652396,
      null,
      [
        0.1499338169248349,
        0.06960774958133698
      ],
      57.1222927570343,
      1,
      1740703549.5723996,
      1740703606.6967847,
      {}
    ],
    [
      604,
      null,
      209652396,
      null,
      [
        0.1524523529014547,
        0.06522227853536607
      ],
      67.51078510284424,
      1,
      1740703606.8569067,
      1740703674.3695889,
      {}
    ],
    [
      605,
      null,
      209652396,
      null,
      [
        0.15116230872218894,
        0.0643409776687622
      ],
      73.31896948814392,
      1,
      1740703674.5287137,
      1740703747.8496552,
      {}
    ],
    [
      606,
      null,
      209652396,
      null,
      [
        0.15349650821207708,
        0.06756931871175766
      ],
      111.11425137519836,
      1,
      1740703748.281415,
      1740703859.3975134,
      {}
    ],
    [
      607,
      null,
      209652396,
      null,
      [
        0.1510089158292751,
        0.06443573534488678
      ],
      72.2416341304779,
      1,
      1740703866.5693197,
      1740703938.8130748,
      {}
    ],
    [
      608,
      null,
      209652396,
      null,
      [
        0.15343507843507842,
        0.06577860057353972
      ],
      51.4707407951355,
      1,
      1740703938.989206,
      1740703990.4620047,
      {}
    ],
    [
      609,
      null,
      209652396,
      null,
      [
        0.15226799755242867,
        0.06486568421125413
      ],
      141.22452068328857,
      1,
      1740703990.6270735,
      1740704131.8534575,
      {}
    ],
    [
      610,
      null,
      209652396,
      null,
      [
        0.15110095439436758,
        0.06830901563167571
      ],
      227.18557858467102,
      1,
      1740704132.0199625,
      1740704359.2075143,
      {}
    ],
    [
      611,
      null,
      209652396,
      null,
      [
        0.1518687723777544,
        0.06463575780391692
      ],
      42.44885468482971,
      1,
      1740704359.3697963,
      1740704401.820649,
      {}
    ],
    [
      612,
      null,
      209652396,
      null,
      [
        0.14956546932594836,
        0.06770827233791352
      ],
      136.41572976112366,
      1,
      1740704401.9850101,
      1740704538.4026666,
      {}
    ],
    [
      613,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740704538.566202,
      1740704538.651182,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      614,
      null,
      209652396,
      null,
      [
        0.1495961818566609,
        0.06670631647109986
      ],
      154.78047513961792,
      1,
      1740704546.8164847,
      1740704701.5990198,
      {}
    ],
    [
      615,
      null,
      209652396,
      null,
      [
        0.1568133342085438,
        0.06129577249288559
      ],
      42.189064502716064,
      1,
      1740704701.7903867,
      1740704743.9814494,
      {}
    ],
    [
      616,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740704744.1437604,
      1740704744.22803,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      617,
      null,
      209652396,
      null,
      [
        0.15060958219640855,
        0.06571377962827682
      ],
      178.46119022369385,
      1,
      1740704744.3986003,
      1740704922.861596,
      {}
    ],
    [
      618,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740704923.028755,
      1740704923.0744145,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      619,
      null,
      209652396,
      null,
      [
        0.15168438873528695,
        0.07075579553842545
      ],
      47.677069425582886,
      1,
      1740704923.2364802,
      1740704970.9153082,
      {}
    ],
    [
      620,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740704971.0765522,
      1740704984.7796197,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      621,
      null,
      209652396,
      null,
      [
        0.15060962935214434,
        0.06292400866746903
      ],
      126.68395566940308,
      1,
      1740704984.943438,
      1740705111.6294165,
      {}
    ],
    [
      622,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740705119.343721,
      1740705223.8765547,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      623,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740705224.0424645,
      1740705224.1210167,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      624,
      null,
      209652396,
      null,
      [
        0.15220667623362236,
        0.06634846508502959
      ],
      86.95088696479797,
      1,
      1740705224.2841475,
      1740705311.236753,
      {}
    ],
    [
      625,
      null,
      209652396,
      null,
      [
        0.15017962562872741,
        0.06314087092876434
      ],
      102.44834089279175,
      1,
      1740705311.405491,
      1740705413.855743,
      {}
    ],
    [
      626,
      null,
      209652396,
      null,
      [
        0.15137737188635395,
        0.06577411860227585
      ],
      45.68990182876587,
      1,
      1740705414.02232,
      1740705459.7142537,
      {}
    ],
    [
      627,
      null,
      209652396,
      null,
      [
        0.1505174540354181,
        0.0660868889093399
      ],
      81.5637092590332,
      1,
      1740705459.877728,
      1740705541.443395,
      {}
    ],
    [
      628,
      null,
      209652396,
      null,
      [
        0.15177659234545463,
        0.06483419239521027
      ],
      68.42587018013,
      1,
      1740705541.612612,
      1740705610.0405846,
      {}
    ],
    [
      629,
      null,
      209652396,
      null,
      [
        0.1484904930264212,
        0.06631774842739105
      ],
      84.38999247550964,
      1,
      1740705610.2137804,
      1740705694.6058633,
      {}
    ],
    [
      630,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740705702.8991148,
      1740705702.9812715,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      631,
      null,
      209652396,
      null,
      [
        0.1542950292950293,
        0.06553236901760101
      ],
      42.509265422821045,
      1,
      1740705703.1470752,
      1740705745.6580915,
      {}
    ],
    [
      632,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740705745.8230462,
      1740705745.9046843,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      633,
      null,
      209652396,
      null,
      [
        0.15300513129854446,
        0.06386666804552077
      ],
      147.64970803260803,
      1,
      1740705746.0697064,
      1740705893.7212136,
      {}
    ],
    [
      634,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740705893.8917198,
      1740705986.2498136,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      635,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740705986.420839,
      1740705986.7604938,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      636,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740705986.929264,
      1740705987.0244017,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      637,
      null,
      209652396,
      null,
      [
        0.15260587783042873,
        0.06431236177682878
      ],
      147.60849475860596,
      1,
      1740705987.1928399,
      1740706134.8032067,
      {}
    ],
    [
      638,
      null,
      209652396,
      null,
      [
        0.1509474766211293,
        0.06259601354598998
      ],
      332.9967918395996,
      1,
      1740706142.9081235,
      1740706475.9069064,
      {}
    ],
    [
      639,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740706476.1292887,
      1740706476.2175937,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      640,
      null,
      209652396,
      null,
      [
        0.15177657348316032,
        0.06642759323120118
      ],
      63.758849143981934,
      1,
      1740706476.4092686,
      1740706540.1698987,
      {}
    ],
    [
      641,
      null,
      209652396,
      null,
      [
        0.15070168677953108,
        0.06854073584079742
      ],
      57.657275676727295,
      1,
      1740706540.3432438,
      1740706598.0023947,
      {}
    ],
    [
      642,
      null,
      209652396,
      null,
      [
        0.1507632768860314,
        0.06749987363815309
      ],
      60.820674657821655,
      1,
      1740706598.1756208,
      1740706658.9981053,
      {}
    ],
    [
      643,
      null,
      209652396,
      null,
      [
        0.1488897464945369,
        0.06512213528156281
      ],
      44.32258677482605,
      1,
      1740706659.171054,
      1740706703.4955347,
      {}
    ],
    [
      644,
      null,
      209652396,
      null,
      [
        0.15297439990553763,
        0.06440385669469835
      ],
      54.034615993499756,
      1,
      1740706703.6710422,
      1740706757.7077084,
      {}
    ],
    [
      645,
      null,
      209652396,
      null,
      [
        0.1507937583536386,
        0.06563766658306122
      ],
      35.04462027549744,
      1,
      1740706757.8769238,
      1740706792.923508,
      {}
    ],
    [
      646,
      null,
      209652396,
      null,
      [
        0.15245218785637948,
        0.06668989270925522
      ],
      152.7083044052124,
      1,
      1740706801.075084,
      1740706953.7854033,
      {}
    ],
    [
      647,
      null,
      209652396,
      null,
      [
        0.14950392637518384,
        0.0647656974196434
      ],
      77.04018902778625,
      1,
      1740706953.9562905,
      1740707030.9984818,
      {}
    ],
    [
      648,
      null,
      209652396,
      null,
      [
        0.1511930872709316,
        0.0654162946343422
      ],
      48.51702928543091,
      1,
      1740707031.1748865,
      1740707079.6939762,
      {}
    ],
    [
      649,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740707079.869925,
      1740707079.9576256,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      650,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740707080.1287386,
      1740707080.2022913,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      651,
      null,
      209652396,
      null,
      [
        0.15067087050619982,
        0.06494452714920043
      ],
      537.965877532959,
      1,
      1740707080.3738058,
      1740707618.341613,
      {}
    ],
    [
      652,
      null,
      209652396,
      null,
      [
        0.15380336473150844,
        0.06655938804149628
      ],
      52.67067503929138,
      1,
      1740707618.5577278,
      1740707671.2304523,
      {}
    ],
    [
      653,
      null,
      209652396,
      null,
      [
        0.1522680588548852,
        0.0661124849319458
      ],
      37.768168449401855,
      1,
      1740707671.4050314,
      1740707709.1750283,
      {}
    ],
    [
      654,
      null,
      209652396,
      null,
      [
        0.15177665836348472,
        0.06524600297212602
      ],
      62.688249588012695,
      1,
      1740707717.3938735,
      1740707780.0841696,
      {}
    ],
    [
      655,
      null,
      209652396,
      null,
      [
        0.1507324653282737,
        0.06245525985956192
      ],
      43.28132200241089,
      1,
      1740707780.25843,
      1740707823.5416555,
      {}
    ],
    [
      656,
      null,
      209652396,
      null,
      [
        0.1532506664991695,
        0.06648280948400498
      ],
      234.02094149589539,
      1,
      1740707823.7186084,
      1740708057.7414854,
      {}
    ],
    [
      657,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740708057.9689436,
      1740708058.0627174,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      658,
      null,
      209652396,
      null,
      [
        0.15208373179930065,
        0.06454029947519302
      ],
      57.96544432640076,
      1,
      1740708058.2820745,
      1740708116.249269,
      {}
    ],
    [
      659,
      null,
      209652396,
      null,
      [
        0.15125454062579813,
        0.06678434431552888
      ],
      46.8642475605011,
      1,
      1740708116.4217463,
      1740708163.287835,
      {}
    ],
    [
      660,
      null,
      209652396,
      null,
      [
        0.15177673852823553,
        0.06586002826690673
      ],
      38.88361477851868,
      1,
      1740708163.4600403,
      1740708202.3454854,
      {}
    ],
    [
      661,
      null,
      209652396,
      null,
      [
        0.18730829778733968,
        0.040452257096767426
      ],
      244.05490899085999,
      1,
      1740708202.5182054,
      1740708446.5750184,
      {}
    ],
    [
      662,
      null,
      209652396,
      null,
      [
        0.15309726889068206,
        0.06396294713020326
      ],
      149.14222073554993,
      1,
      1740708455.3018072,
      1740708604.4463472,
      {}
    ],
    [
      663,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740708604.625686,
      1740708618.4792566,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      664,
      null,
      209652396,
      null,
      [
        0.1514080278301835,
        0.06590532153844833
      ],
      99.31033778190613,
      1,
      1740708618.7100294,
      1740708718.0227382,
      {}
    ],
    [
      665,
      null,
      209652396,
      null,
      [
        0.1526980625783021,
        0.06797834873199463
      ],
      44.417733669281006,
      1,
      1740708718.198952,
      1740708762.6186976,
      {}
    ],
    [
      666,
      null,
      209652396,
      null,
      [
        0.15122387996639494,
        0.06461902737617493
      ],
      75.33617520332336,
      1,
      1740708762.7921512,
      1740708838.130189,
      {}
    ],
    [
      667,
      null,
      209652396,
      null,
      [
        0.15275928015448972,
        0.06557236850261687
      ],
      61.23121118545532,
      1,
      1740708838.3066905,
      1740708899.5398724,
      {}
    ],
    [
      668,
      null,
      209652396,
      null,
      [
        0.15134666878678854,
        0.06700865924358368
      ],
      47.09626889228821,
      1,
      1740708899.7134311,
      1740708946.8115432,
      {}
    ],
    [
      669,
      null,
      209652396,
      null,
      [
        0.1518073614630501,
        0.06622189551591873
      ],
      70.71760988235474,
      1,
      1740708946.9848156,
      1740709017.704311,
      {}
    ],
    [
      670,
      null,
      209652396,
      null,
      [
        0.1503640139867685,
        0.06621570497751236
      ],
      92.40000104904175,
      1,
      1740709026.5741189,
      1740709118.9760566,
      {}
    ],
    [
      671,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740709119.1528316,
      1740709119.2318707,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      672,
      null,
      209652396,
      null,
      [
        0.15315864679637137,
        0.06368724077939987
      ],
      39.44425678253174,
      1,
      1740709119.4062252,
      1740709158.8522582,
      {}
    ],
    [
      673,
      null,
      209652396,
      null,
      [
        0.15223718127909744,
        0.06454002261161804
      ],
      44.81334614753723,
      1,
      1740709159.031224,
      1740709203.8464644,
      {}
    ],
    [
      674,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740709204.0219662,
      1740709484.8414361,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      675,
      null,
      209652396,
      null,
      [
        0.1506095397562463,
        0.06267180621623994
      ],
      120.71439027786255,
      1,
      1740709485.0695055,
      1740709605.786012,
      {}
    ],
    [
      676,
      null,
      209652396,
      null,
      [
        0.15874817177212386,
        0.06561314761638641
      ],
      59.066468477249146,
      1,
      1740709605.9670615,
      1740709665.0356848,
      {}
    ],
    [
      677,
      null,
      209652396,
      null,
      [
        0.15079387152740448,
        0.06618257015943527
      ],
      185.45042061805725,
      1,
      1740709665.2167525,
      1740709850.6692955,
      {}
    ],
    [
      678,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740709859.2766173,
      1740710001.188957,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      679,
      null,
      209652396,
      null,
      [
        0.15017954546397658,
        0.06864779204130173
      ],
      94.35175347328186,
      1,
      1740710001.369332,
      1740710095.7230325,
      {}
    ],
    [
      680,
      null,
      209652396,
      null,
      [
        0.15229882325690708,
        0.06433689951896668
      ],
      116.45686864852905,
      1,
      1740710095.9035535,
      1740710212.3625257,
      {}
    ],
    [
      681,
      null,
      209652396,
      null,
      [
        0.1512545406257981,
        0.06529418021440506
      ],
      88.41131854057312,
      1,
      1740710212.5430079,
      1740710300.9563901,
      {}
    ],
    [
      682,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740710301.1368606,
      1740710301.2362468,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      683,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740710301.415798,
      1740710301.4554374,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      684,
      null,
      209652396,
      null,
      [
        0.1533736863826684,
        0.06477449119091035
      ],
      44.793516635894775,
      1,
      1740710301.633338,
      1740710346.4286356,
      {}
    ],
    [
      685,
      null,
      209652396,
      null,
      [
        0.1503331788511429,
        0.06542674005031586
      ],
      63.644896030426025,
      1,
      1740710346.609552,
      1740710410.2565308,
      {}
    ],
    [
      686,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740710419.0934129,
      1740710419.185705,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      687,
      null,
      209652396,
      null,
      [
        0.15076312598767688,
        0.06492282330989838
      ],
      56.85876393318176,
      1,
      1740710419.378198,
      1740710476.2388344,
      {}
    ],
    [
      688,
      null,
      209652396,
      null,
      [
        0.1494424352957287,
        0.06433165580034256
      ],
      34.40948557853699,
      1,
      1740710476.4215183,
      1740710510.833006,
      {}
    ],
    [
      689,
      null,
      209652396,
      null,
      [
        0.14990320813674107,
        0.06381436973810195
      ],
      65.49634528160095,
      1,
      1740710511.013171,
      1740710576.5114312,
      {}
    ],
    [
      690,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740710576.6938117,
      1740710576.7862976,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      691,
      null,
      209652396,
      null,
      [
        0.15017969164675754,
        0.06403906404972076
      ],
      62.033618688583374,
      1,
      1740710576.9638708,
      1740710638.9993322,
      {}
    ],
    [
      692,
      null,
      209652396,
      null,
      [
        0.15196096184120136,
        0.0687224555015564
      ],
      37.39495539665222,
      1,
      1740710639.1836483,
      1740710676.5806785,
      {}
    ],
    [
      693,
      null,
      209652396,
      null,
      [
        0.14867486723774148,
        0.06234154492616654
      ],
      291.205105304718,
      1,
      1740710676.761882,
      1740710967.9690797,
      {}
    ],
    [
      694,
      null,
      209652396,
      null,
      [
        0.15251374023829115,
        0.06771414816379548
      ],
      69.34924483299255,
      1,
      1740710977.0990498,
      1740711046.45035,
      {}
    ],
    [
      695,
      null,
      209652396,
      null,
      [
        0.14913544674023715,
        0.06370823800563812
      ],
      56.68228840827942,
      1,
      1740711046.6323464,
      1740711103.3164928,
      {}
    ],
    [
      696,
      null,
      209652396,
      null,
      [
        0.14935034957490048,
        0.06579004168510436
      ],
      230.7622585296631,
      1,
      1740711103.4981492,
      1740711334.262369,
      {}
    ],
    [
      697,
      null,
      209652396,
      null,
      [
        0.15414146664146663,
        0.06320003479719162
      ],
      47.64361572265625,
      1,
      1740711334.4470677,
      1740711382.0926251,
      {}
    ],
    [
      698,
      null,
      209652396,
      null,
      [
        0.1500567943681716,
        0.06485181927680969
      ],
      83.15097403526306,
      1,
      1740711382.27774,
      1740711465.4306188,
      {}
    ],
    [
      699,
      null,
      209652396,
      null,
      [
        0.1510088781046865,
        0.0637584412097931
      ],
      273.53332710266113,
      1,
      1740711465.6182916,
      1740711739.1537185,
      {}
    ],
    [
      700,
      null,
      209652396,
      null,
      [
        0.14931968419992372,
        0.0668205988407135
      ],
      105.49602937698364,
      1,
      1740711739.3386285,
      1740711844.8367538,
      {}
    ],
    [
      701,
      null,
      209652396,
      null,
      [
        0.15153100527352026,
        0.06532231390476226
      ],
      431.1618101596832,
      1,
      1740711845.0277207,
      1740712276.1916387,
      {}
    ],
    [
      702,
      null,
      209652396,
      null,
      [
        0.1520222831600077,
        0.0648107275366783
      ],
      51.817981481552124,
      1,
      1740712276.7244103,
      1740712328.544305,
      {}
    ],
    [
      703,
      null,
      209652396,
      null,
      [
        0.15177666307905827,
        0.06581630945205688
      ],
      176.92914628982544,
      1,
      1740712328.728014,
      1740712505.659,
      {}
    ],
    [
      704,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740712514.087994,
      1740712514.1698582,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      705,
      null,
      209652396,
      null,
      [
        0.15484763321589673,
        0.06297139078378677
      ],
      61.84007811546326,
      1,
      1740712514.3907254,
      1740712576.232692,
      {}
    ],
    [
      706,
      null,
      209652396,
      null,
      [
        0.15143882524122043,
        0.0650914454460144
      ],
      63.016191244125366,
      1,
      1740712576.4194465,
      1740712639.4377136,
      {}
    ],
    [
      707,
      null,
      209652396,
      null,
      [
        0.17751354689977444,
        0.04722177624702454
      ],
      85.95591187477112,
      1,
      1740712639.6220117,
      1740712725.5798573,
      {}
    ],
    [
      708,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740712725.7703502,
      1740712725.8197777,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      709,
      null,
      209652396,
      null,
      [
        0.1496883147332249,
        0.06677499353885649
      ],
      88.46766018867493,
      1,
      1740712726.0037913,
      1740712814.47323,
      {}
    ],
    [
      710,
      null,
      209652396,
      null,
      [
        0.15168459150495078,
        0.06555126696825028
      ],
      182.97361874580383,
      1,
      1740712823.9456246,
      1740713006.9214885,
      {}
    ],
    [
      711,
      null,
      209652396,
      null,
      [
        0.14913555048285587,
        0.06645871698856354
      ],
      727.4963245391846,
      1,
      1740713007.1091135,
      1740713734.607489,
      {}
    ],
    [
      712,
      null,
      209652396,
      null,
      [
        0.1510703125972587,
        0.06376389622688293
      ],
      118.71962261199951,
      1,
      1740713734.7973502,
      1740713853.5190868,
      {}
    ],
    [
      713,
      null,
      209652396,
      null,
      [
        0.15137739074864826,
        0.06359977662563324
      ],
      65.3198127746582,
      1,
      1740713853.7095647,
      1740713919.0313509,
      {}
    ],
    [
      714,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740713919.218197,
      1740713919.3183799,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      715,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740713919.5055401,
      1740713943.7592244,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      716,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740713943.9478364,
      1740713979.7257385,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      717,
      null,
      209652396,
      null,
      [
        0.15085533431341813,
        0.06283960968255997
      ],
      56.84685444831848,
      1,
      1740713979.9168842,
      1740714036.7657487,
      {}
    ],
    [
      718,
      null,
      209652396,
      null,
      [
        0.15896308403793435,
        0.06456051588058472
      ],
      47.569204568862915,
      1,
      1740714045.6964555,
      1740714093.2675474,
      {}
    ],
    [
      719,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740714093.454342,
      1740714093.5410986,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      720,
      null,
      209652396,
      null,
      [
        0.1620036387251956,
        0.06375083416700364
      ],
      48.270946979522705,
      1,
      1740714093.7291687,
      1740714142.0018823,
      {}
    ],
    [
      721,
      null,
      209652396,
      null,
      [
        0.1524830890100351,
        0.06575738102197648
      ],
      45.27884244918823,
      1,
      1740714142.2510903,
      1740714187.532289,
      {}
    ],
    [
      722,
      null,
      209652396,
      null,
      [
        0.1503025889253434,
        0.06459203243255615
      ],
      91.77871823310852,
      1,
      1740714187.7324278,
      1740714279.5134914,
      {}
    ],
    [
      723,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740714279.7117674,
      1740714281.3219812,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      724,
      null,
      209652396,
      null,
      [
        0.15527775011307943,
        0.06689257323741912
      ],
      108.61245656013489,
      1,
      1740714281.5152886,
      1740714390.1296875,
      {}
    ],
    [
      725,
      null,
      209652396,
      null,
      [
        0.1510088356645243,
        0.06499388635158539
      ],
      42.44062829017639,
      1,
      1740714390.321955,
      1740714432.764662,
      {}
    ],
    [
      726,
      null,
      209652396,
      null,
      [
        0.16255679908374515,
        0.06318695634603501
      ],
      109.15910482406616,
      1,
      1740714442.2430537,
      1740714551.4042623,
      {}
    ],
    [
      727,
      null,
      209652396,
      null,
      [
        0.15269802956928705,
        0.061494054496288295
      ],
      155.93781042099,
      1,
      1740714551.5978835,
      1740714707.5380704,
      {}
    ],
    [
      728,
      null,
      209652396,
      null,
      [
        0.15085517869949008,
        0.06653386831283568
      ],
      145.60241389274597,
      1,
      1740714707.734993,
      1740714853.3398654,
      {}
    ],
    [
      729,
      null,
      209652396,
      null,
      [
        0.15054814770383632,
        0.06759876161813735
      ],
      44.83280849456787,
      1,
      1740714853.5337226,
      1740714898.3686345,
      {}
    ],
    [
      730,
      null,
      209652396,
      null,
      [
        0.15303579667352124,
        0.06643295526504517
      ],
      59.50217914581299,
      1,
      1740714898.5616853,
      1740714958.0659032,
      {}
    ],
    [
      731,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740714958.258512,
      1740714958.3387623,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      732,
      null,
      209652396,
      null,
      [
        0.15067104498242223,
        0.06632194340229033
      ],
      302.51698064804077,
      1,
      1740714958.529379,
      1740715261.0482228,
      {}
    ],
    [
      733,
      null,
      209652396,
      null,
      [
        0.15186876766218083,
        0.0639859116077423
      ],
      111.98499894142151,
      1,
      1740715261.244073,
      1740715373.2312062,
      {}
    ],
    [
      734,
      null,
      209652396,
      null,
      [
        0.1515309062464751,
        0.06682390630245208
      ],
      56.49974536895752,
      1,
      1740715382.5493472,
      1740715439.0511541,
      {}
    ],
    [
      735,
      null,
      209652396,
      null,
      [
        0.15024111199260898,
        0.065844606757164
      ],
      167.13496613502502,
      1,
      1740715439.2410288,
      1740715606.377991,
      {}
    ],
    [
      736,
      null,
      209652396,
      null,
      [
        0.14981113184706002,
        0.06848503410816194
      ],
      111.43776655197144,
      1,
      1740715606.5707424,
      1740715718.0105972,
      {}
    ],
    [
      737,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740715718.2098193,
      1740715718.2682967,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      738,
      null,
      209652396,
      null,
      [
        0.1508859383859384,
        0.06608352124691011
      ],
      108.79305982589722,
      1,
      1740715718.4604013,
      1740715827.255331,
      {}
    ],
    [
      739,
      null,
      209652396,
      null,
      [
        0.15159229829888513,
        0.06759236574172975
      ],
      58.634376525878906,
      1,
      1740715827.4499502,
      1740715886.0864034,
      {}
    ],
    [
      740,
      null,
      209652396,
      null,
      [
        0.1528515686449818,
        0.06453196495771409
      ],
      54.285789251327515,
      1,
      1740715886.2783377,
      1740715940.5660107,
      {}
    ],
    [
      741,
      null,
      209652396,
      null,
      [
        0.15325077495736178,
        0.06440245896577834
      ],
      42.21692252159119,
      1,
      1740715940.7631958,
      1740715982.9821246,
      {}
    ],
    [
      742,
      null,
      209652396,
      null,
      [
        0.15441789828017374,
        0.06423194825649262
      ],
      39.22369837760925,
      1,
      1740715992.3962722,
      1740716031.6218417,
      {}
    ],
    [
      743,
      null,
      209652396,
      null,
      [
        0.15251366950468748,
        0.06827805906534194
      ],
      224.5940363407135,
      1,
      1740716031.8207433,
      1740716256.416777,
      {}
    ],
    [
      744,
      null,
      209652396,
      null,
      [
        0.15254428300835488,
        0.06677190005779267
      ],
      46.00854825973511,
      1,
      1740716256.6134303,
      1740716302.6240044,
      {}
    ],
    [
      745,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740716302.8187883,
      1740716302.8973036,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      746,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740716303.0909476,
      1740716303.1792572,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      747,
      null,
      209652396,
      null,
      [
        0.15150028331166057,
        0.06554156690835952
      ],
      42.43864607810974,
      1,
      1740716303.3865085,
      1740716345.826946,
      {}
    ],
    [
      748,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740716346.022178,
      1740716346.1025283,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      749,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740716346.2974284,
      1740716346.3591754,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      750,
      null,
      209652396,
      null,
      [
        0.15586124575645538,
        0.0583990341424942
      ],
      164.11042094230652,
      1,
      1740716356.3347616,
      1740716520.4471364,
      {}
    ],
    [
      751,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740716520.6482422,
      1740716530.176242,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      752,
      null,
      209652396,
      null,
      [
        0.15389577582691355,
        0.06525573015213013
      ],
      56.07402443885803,
      1,
      1740716530.4404771,
      1740716586.5168023,
      {}
    ],
    [
      753,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740716586.720473,
      1740716594.3991752,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      754,
      null,
      209652396,
      null,
      [
        0.1535580417316944,
        0.062047585546970374
      ],
      40.36236882209778,
      1,
      1740716594.6008346,
      1740716634.965209,
      {}
    ],
    [
      755,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740716635.1730072,
      1740716770.9166567,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      756,
      null,
      209652396,
      null,
      [
        0.15275943105284423,
        0.06384164780378342
      ],
      87.41661405563354,
      1,
      1740716771.1738544,
      1740716858.5925484,
      {}
    ],
    [
      757,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740716858.7921493,
      1740716858.8939006,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      758,
      null,
      209652396,
      null,
      [
        0.15079385738068374,
        0.066950364112854
      ],
      447.9382224082947,
      1,
      1740716868.8200996,
      1740717316.7602246,
      {}
    ],
    [
      759,
      null,
      209652396,
      null,
      [
        0.15285146490236307,
        0.06418721795082093
      ],
      66.95695900917053,
      1,
      1740717316.9607985,
      1740717383.919832,
      {}
    ],
    [
      760,
      null,
      209652396,
      null,
      [
        0.16528973332865549,
        0.06304788917303085
      ],
      59.9998574256897,
      1,
      1740717384.1775813,
      1740717444.1795003,
      {}
    ],
    [
      761,
      null,
      209652396,
      null,
      [
        0.22474687272591468,
        0.035856239795684815
      ],
      141.0370752811432,
      1,
      1740717444.3786974,
      1740717585.4180284,
      {}
    ],
    [
      762,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740717585.6251144,
      1740717613.2095232,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      763,
      null,
      209652396,
      null,
      [
        0.15060957748083498,
        0.06654963612556457
      ],
      112.89155220985413,
      1,
      1740717613.4150631,
      1740717726.3086677,
      {}
    ],
    [
      764,
      null,
      209652396,
      null,
      [
        0.15269793997338907,
        0.06527254164218903
      ],
      58.868542432785034,
      1,
      1740717726.5079687,
      1740717785.3785954,
      {}
    ],
    [
      765,
      null,
      209652396,
      null,
      [
        0.15644488758261216,
        0.06545284271240234
      ],
      97.09497332572937,
      1,
      1740717785.577103,
      1740717882.6741192,
      {}
    ],
    [
      766,
      null,
      209652396,
      null,
      [
        0.15475563709096643,
        0.061924366652965544
      ],
      255.35578417778015,
      1,
      1740717892.668305,
      1740718148.0262084,
      {}
    ],
    [
      767,
      null,
      209652396,
      null,
      [
        0.15024104125900534,
        0.06704344600439072
      ],
      75.65956211090088,
      1,
      1740718148.2308154,
      1740718223.8927505,
      {}
    ],
    [
      768,
      null,
      209652396,
      null,
      [
        0.15242159793057994,
        0.06416763663291931
      ],
      268.06825971603394,
      1,
      1740718224.101216,
      1740718492.1721506,
      {}
    ],
    [
      769,
      null,
      209652396,
      null,
      [
        0.15309722173494628,
        0.06644251227378845
      ],
      59.68480587005615,
      1,
      1740718492.37499,
      1740718552.06181,
      {}
    ],
    [
      770,
      null,
      209652396,
      null,
      [
        0.15097819386741543,
        0.06442655146121978
      ],
      41.48814797401428,
      1,
      1740718552.2633455,
      1740718593.7533998,
      {}
    ],
    [
      771,
      null,
      209652396,
      null,
      [
        0.15199156119814802,
        0.06290276139974595
      ],
      41.459365367889404,
      1,
      1740718594.0186133,
      1740718635.4803307,
      {}
    ],
    [
      772,
      null,
      209652396,
      null,
      [
        0.1594853998297112,
        0.06062616437673568
      ],
      76.04718017578125,
      1,
      1740718635.6906261,
      1740718711.7397559,
      {}
    ],
    [
      773,
      null,
      209652396,
      null,
      [
        0.15306642903948292,
        0.06647002816200256
      ],
      52.105093479156494,
      1,
      1740718711.943674,
      1740718764.0508478,
      {}
    ],
    [
      774,
      null,
      209652396,
      null,
      [
        0.15404927717801967,
        0.06686432808637618
      ],
      46.44486045837402,
      1,
      1740718773.820618,
      1740718820.2676446,
      {}
    ],
    [
      775,
      null,
      209652396,
      null,
      [
        0.14971900840164312,
        0.06774662911891936
      ],
      219.07083988189697,
      1,
      1740718820.4782026,
      1740719039.5510602,
      {}
    ],
    [
      776,
      null,
      209652396,
      null,
      [
        0.14984183494662534,
        0.06797169715166092
      ],
      489.23913192749023,
      1,
      1740719039.7615237,
      1740719529.002756,
      {}
    ],
    [
      777,
      null,
      209652396,
      null,
      [
        0.15269790224880048,
        0.06621949791908265
      ],
      42.41499042510986,
      1,
      1740719529.206982,
      1740719571.6240268,
      {}
    ],
    [
      778,
      null,
      209652396,
      null,
      [
        0.15208379781733078,
        0.06386666685342789
      ],
      148.32646417617798,
      1,
      1740719571.8270419,
      1740719720.1554763,
      {}
    ],
    [
      779,
      null,
      209652396,
      null,
      [
        0.1511624266115284,
        0.06471466898918152
      ],
      41.40581941604614,
      1,
      1740719720.366743,
      1740719761.774601,
      {}
    ],
    [
      780,
      null,
      209652396,
      null,
      [
        0.15002627517597575,
        0.06370676010847091
      ],
      97.62907838821411,
      1,
      1740719761.9776416,
      1740719859.6086166,
      {}
    ],
    [
      781,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740719859.8123066,
      1740719859.8586078,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      782,
      null,
      209652396,
      null,
      [
        0.14959617242551376,
        0.06652574509382249
      ],
      97.10513472557068,
      1,
      1740719869.5885239,
      1740719966.6955194,
      {}
    ],
    [
      783,
      null,
      209652396,
      null,
      [
        0.15208386383536082,
        0.06465498208999634
      ],
      46.10155129432678,
      1,
      1740719966.9010763,
      1740720013.0045543,
      {}
    ],
    [
      784,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740720013.2145314,
      1740720078.4355667,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      785,
      null,
      209652396,
      null,
      [
        0.15303578724237407,
        0.06689928084611893
      ],
      660.593297958374,
      1,
      1740720078.645325,
      1740720739.2410214,
      {}
    ],
    [
      786,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740720739.5198803,
      1740720739.6303086,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      787,
      null,
      209652396,
      null,
      [
        0.15398791813462473,
        0.06624308079481125
      ],
      126.41865563392639,
      1,
      1740720739.8368149,
      1740720866.2573369,
      {}
    ],
    [
      788,
      null,
      209652396,
      null,
      [
        0.1578268665843516,
        0.06481534391641616
      ],
      42.604321241378784,
      1,
      1740720866.4649374,
      1740720909.0713754,
      {}
    ],
    [
      789,
      null,
      209652396,
      null,
      [
        0.15202233503131707,
        0.06874114096164705
      ],
      477.0579299926758,
      1,
      1740720909.2764857,
      1740721386.3364437,
      {}
    ],
    [
      790,
      null,
      209652396,
      null,
      [
        0.149596158278793,
        0.06679295480251313
      ],
      75.79888868331909,
      1,
      1740721387.0726595,
      1740721462.8735542,
      {}
    ],
    [
      791,
      null,
      209652396,
      null,
      [
        0.15116236059349833,
        0.06624957740306854
      ],
      56.65971541404724,
      1,
      1740721463.081295,
      1740721519.7429516,
      {}
    ],
    [
      792,
      null,
      209652396,
      null,
      [
        0.15033316470442215,
        0.0689629140496254
      ],
      48.819931983947754,
      1,
      1740721529.224798,
      1740721578.0467694,
      {}
    ],
    [
      793,
      null,
      209652396,
      null,
      [
        0.14987255690848506,
        0.06638749063014984
      ],
      40.33726167678833,
      1,
      1740721578.2509263,
      1740721618.590035,
      {}
    ],
    [
      794,
      null,
      209652396,
      null,
      [
        0.15100885452681861,
        0.06452549725770951
      ],
      85.20530247688293,
      1,
      1740721618.7984297,
      1740721704.005611,
      {}
    ],
    [
      795,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740721704.2173553,
      1740721704.3228946,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      796,
      null,
      209652396,
      null,
      [
        0.15005682737718667,
        0.06560271203517913
      ],
      266.52112102508545,
      1,
      1740721704.5326931,
      1740721971.0557292,
      {}
    ],
    [
      797,
      null,
      209652396,
      null,
      [
        0.1516231051410692,
        0.06609797537326814
      ],
      151.85229802131653,
      1,
      1740721971.2705977,
      1740722123.1250348,
      {}
    ],
    [
      798,
      null,
      209652396,
      null,
      [
        0.15411079183534274,
        0.06263750404119492
      ],
      128.25017857551575,
      1,
      1740722133.4995656,
      1740722261.7519138,
      {}
    ],
    [
      799,
      null,
      209652396,
      null,
      [
        0.1544792573235687,
        0.06563218116760253
      ],
      90.68565320968628,
      1,
      1740722261.9617324,
      1740722352.649475,
      {}
    ],
    [
      800,
      null,
      209652396,
      null,
      [
        0.15291292297280318,
        0.06552507281303406
      ],
      36.63178563117981,
      1,
      1740722352.8585715,
      1740722389.4924724,
      {}
    ],
    [
      801,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740722389.7002606,
      1740722447.3769062,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      802,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740722447.5859437,
      1740722518.5578265,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      803,
      null,
      209652396,
      null,
      [
        0.15091660847648872,
        0.06656638741493226
      ],
      40.89480018615723,
      1,
      1740722518.7683663,
      1740722559.6650944,
      {}
    ],
    [
      804,
      null,
      209652396,
      null,
      [
        0.1593315731040282,
        0.06612463176250458
      ],
      66.39675521850586,
      1,
      1740722559.8743744,
      1740722626.2730742,
      {}
    ],
    [
      805,
      null,
      209652396,
      null,
      [
        0.15205305699317673,
        0.06615906745195388
      ],
      133.0735604763031,
      1,
      1740722626.48491,
      1740722759.5605454,
      {}
    ],
    [
      806,
      null,
      209652396,
      null,
      [
        0.15146943874488789,
        0.06392943173646928
      ],
      40.097957134246826,
      1,
      1740722760.207158,
      1740722800.307043,
      {}
    ],
    [
      807,
      null,
      209652396,
      null,
      [
        0.15024100824999026,
        0.06573726296424867
      ],
      66.01819849014282,
      1,
      1740722810.3876505,
      1740722876.407967,
      {}
    ],
    [
      808,
      null,
      209652396,
      null,
      [
        0.151223823379512,
        0.0675387018918991
      ],
      40.915940046310425,
      1,
      1740722876.6202714,
      1740722917.5382283,
      {}
    ],
    [
      809,
      null,
      209652396,
      null,
      [
        0.15211426985379078,
        0.0669921401143074
      ],
      64.59586596488953,
      1,
      1740722917.7473419,
      1740722982.345102,
      {}
    ],
    [
      810,
      null,
      209652396,
      null,
      [
        0.15300517373870667,
        0.06485643088817597
      ],
      42.49459195137024,
      1,
      1740722982.6172862,
      1740723025.113812,
      {}
    ],
    [
      811,
      null,
      209652396,
      null,
      [
        0.1549399311375359,
        0.06105991035699844
      ],
      130.04473614692688,
      1,
      1740723025.32254,
      1740723155.3692222,
      {}
    ],
    [
      812,
      null,
      209652396,
      null,
      [
        0.14968835245781353,
        0.062351593971252436
      ],
      63.62538743019104,
      1,
      1740723155.5828538,
      1740723219.2103517,
      {}
    ],
    [
      813,
      null,
      209652396,
      null,
      [
        0.14950394523747815,
        0.06701762706041335
      ],
      69.723637342453,
      1,
      1740723219.42469,
      1740723289.1503797,
      {}
    ],
    [
      814,
      null,
      209652396,
      null,
      [
        0.1514080749859193,
        0.06382624804973602
      ],
      77.57345485687256,
      1,
      1740723300.179179,
      1740723377.7547188,
      {}
    ],
    [
      815,
      null,
      209652396,
      null,
      [
        0.15205316545136904,
        0.06414397954940795
      ],
      114.18518590927124,
      1,
      1740723378.0251138,
      1740723492.2122374,
      {}
    ],
    [
      816,
      null,
      209652396,
      null,
      [
        0.151715195577471,
        0.06434881985187531
      ],
      46.44527578353882,
      1,
      1740723492.4258075,
      1740723538.8731673,
      {}
    ],
    [
      817,
      null,
      209652396,
      null,
      [
        0.15239088068429385,
        0.06529726862907409
      ],
      103.8703134059906,
      1,
      1740723539.0873144,
      1740723642.9597342,
      {}
    ],
    [
      818,
      null,
      209652396,
      null,
      [
        0.15011814398041942,
        0.06639346837997437
      ],
      108.84828495979309,
      1,
      1740723643.1772072,
      1740723752.0276265,
      {}
    ],
    [
      819,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740723752.2483323,
      1740723800.266551,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      820,
      null,
      209652396,
      null,
      [
        0.1511011430173107,
        0.06863745659589768
      ],
      331.40207505226135,
      1,
      1740723800.4832082,
      1740724131.8873615,
      {}
    ],
    [
      821,
      null,
      209652396,
      null,
      [
        0.15214527003449158,
        0.06841160804033279
      ],
      198.35856676101685,
      1,
      1740724132.1043394,
      1740724330.4651074,
      {}
    ],
    [
      822,
      null,
      209652396,
      null,
      [
        0.15389591257854732,
        0.0646120584011078
      ],
      75.36084938049316,
      1,
      1740724331.1411428,
      1740724406.5041254,
      {}
    ],
    [
      823,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740724416.8663507,
      1740724471.5889046,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      824,
      null,
      209652396,
      null,
      [
        0.15125461607497534,
        0.06387863099575043
      ],
      50.97462320327759,
      1,
      1740724471.8070698,
      1740724522.7838264,
      {}
    ],
    [
      825,
      null,
      209652396,
      null,
      [
        0.15168442174430197,
        0.06347934514284134
      ],
      128.25930976867676,
      1,
      1740724522.9987288,
      1740724651.2600965,
      {}
    ],
    [
      826,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740724651.4752624,
      1740724651.5712044,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      827,
      null,
      209652396,
      null,
      [
        0.15070163019264815,
        0.06605360448360444
      ],
      117.21920943260193,
      1,
      1740724651.7841191,
      1740724769.0050926,
      {}
    ],
    [
      828,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740724769.2330766,
      1740724769.2954373,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      829,
      null,
      209652396,
      null,
      [
        0.1515002503026455,
        0.06840060114860534
      ],
      63.1795289516449,
      1,
      1740724769.509802,
      1740724832.6911113,
      {}
    ],
    [
      830,
      null,
      209652396,
      null,
      [
        0.1501182571541853,
        0.06906343162059785
      ],
      188.09131836891174,
      1,
      1740724843.2446303,
      1740725031.338095,
      {}
    ],
    [
      831,
      null,
      209652396,
      null,
      [
        0.15119309198650516,
        0.06683478325605392
      ],
      110.84959602355957,
      1,
      1740725031.5601654,
      1740725142.4118876,
      {}
    ],
    [
      832,
      null,
      209652396,
      null,
      [
        0.1518073803253444,
        0.06607893407344818
      ],
      76.74306416511536,
      1,
      1740725142.6327627,
      1740725219.3779955,
      {}
    ],
    [
      833,
      null,
      209652396,
      null,
      [
        0.15082461706713204,
        0.06522661000490189
      ],
      50.170013427734375,
      1,
      1740725219.5993562,
      1740725269.7717943,
      {}
    ],
    [
      834,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740725269.9918447,
      1740725270.0824275,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      835,
      null,
      209652396,
      null,
      [
        0.1491968152147793,
        0.06732874244451523
      ],
      40.0026421546936,
      1,
      1740725270.299105,
      1740725310.303514,
      {}
    ],
    [
      836,
      null,
      209652396,
      null,
      [
        0.1514694245981671,
        0.06440760999917984
      ],
      44.849374532699585,
      1,
      1740725310.5226138,
      1740725355.3738523,
      {}
    ],
    [
      837,
      null,
      209652396,
      null,
      [
        0.15153108543827104,
        0.0662463316321373
      ],
      45.410582304000854,
      1,
      1740725355.5908198,
      1740725401.003234,
      {}
    ],
    [
      838,
      null,
      209652396,
      null,
      [
        0.15309724531281416,
        0.06327618151903151
      ],
      41.44489288330078,
      1,
      1740725411.6535587,
      1740725453.1003034,
      {}
    ],
    [
      839,
      null,
      209652396,
      null,
      [
        0.1503946887928924,
        0.06554643601179125
      ],
      141.33423280715942,
      1,
      1740725453.3190806,
      1740725594.6552665,
      {}
    ],
    [
      840,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740725594.876171,
      1740725594.9626212,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      841,
      null,
      209652396,
      null,
      [
        0.17084878626794797,
        0.05665473133325577
      ],
      108.3508710861206,
      1,
      1740725595.1796606,
      1740725703.5325625,
      {}
    ],
    [
      842,
      null,
      209652396,
      null,
      [
        0.1491661734176704,
        0.06430225670337678
      ],
      216.12649083137512,
      1,
      1740725703.760219,
      1740725919.8892808,
      {}
    ],
    [
      843,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740725920.1204855,
      1740725920.2111726,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      844,
      null,
      209652396,
      null,
      [
        0.15153092510876942,
        0.0659011995792389
      ],
      194.19772052764893,
      1,
      1740725920.4492462,
      1740726114.6489284,
      {}
    ],
    [
      845,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740726114.8721278,
      1740726114.9186447,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      846,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740726125.6539226,
      1740726125.741469,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      847,
      null,
      209652396,
      null,
      [
        0.15076306940079395,
        0.06566030859947206
      ],
      55.601901054382324,
      1,
      1740726125.9806225,
      1740726181.5843205,
      {}
    ],
    [
      848,
      null,
      209652396,
      null,
      [
        0.15064025228695888,
        0.06831118822097779
      ],
      66.87774705886841,
      1,
      1740726181.8041005,
      1740726248.6837897,
      {}
    ],
    [
      849,
      null,
      209652396,
      null,
      [
        0.15140804197690425,
        0.0653866109251976
      ],
      53.339794635772705,
      1,
      1740726248.906603,
      1740726302.2483077,
      {}
    ],
    [
      850,
      null,
      209652396,
      null,
      [
        0.15263646775622824,
        0.06591010957956314
      ],
      39.48176693916321,
      1,
      1740726302.4696145,
      1740726341.9533815,
      {}
    ],
    [
      851,
      null,
      209652396,
      null,
      [
        0.1591167881587043,
        0.05611039072275161
      ],
      53.29458975791931,
      1,
      1740726342.1789603,
      1740726395.4753788,
      {}
    ],
    [
      852,
      null,
      209652396,
      null,
      [
        0.15251363178009883,
        0.06201810836791992
      ],
      80.14622378349304,
      1,
      1740726395.6843712,
      1740726475.8325002,
      {}
    ],
    [
      853,
      null,
      209652396,
      null,
      [
        0.15180734260075576,
        0.06368298441171646
      ],
      53.49643325805664,
      1,
      1740726476.0413327,
      1740726529.5397754,
      {}
    ],
    [
      854,
      null,
      209652396,
      null,
      [
        0.15067100254226,
        0.06406553089618683
      ],
      66.15689253807068,
      1,
      1740726540.8025467,
      1740726606.9615848,
      {}
    ],
    [
      855,
      null,
      209652396,
      null,
      [
        0.1488897747879784,
        0.06603808969259262
      ],
      37.64907884597778,
      1,
      1740726607.1735291,
      1740726644.82468,
      {}
    ],
    [
      856,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740726645.0329695,
      1740726727.4430172,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      857,
      null,
      209652396,
      null,
      [
        0.15294361192564787,
        0.0652281129360199
      ],
      39.354753732681274,
      1,
      1740726727.699429,
      1740726767.0561903,
      {}
    ],
    [
      858,
      null,
      209652396,
      null,
      [
        0.15309726417510852,
        0.06394259512424469
      ],
      48.51768374443054,
      1,
      1740726767.2637448,
      1740726815.7832842,
      {}
    ],
    [
      859,
      null,
      209652396,
      null,
      [
        0.1507325077684359,
        0.06900220990180969
      ],
      129.11248111724854,
      1,
      1740726815.9937463,
      1740726945.1082814,
      {}
    ],
    [
      860,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740726945.3182085,
      1740726945.3882158,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      861,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740726945.595245,
      1740726980.7889965,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      862,
      null,
      209652396,
      null,
      [
        0.15060962463657074,
        0.06728798538446426
      ],
      52.93019509315491,
      1,
      1740726981.4861345,
      1740727034.4193141,
      {}
    ],
    [
      863,
      null,
      209652396,
      null,
      [
        0.15011831374106824,
        0.06288089692592622
      ],
      50.23319864273071,
      1,
      1740727045.5152707,
      1740727095.7506926,
      {}
    ],
    [
      864,
      null,
      209652396,
      null,
      [
        0.15343506428835768,
        0.06725320339202881
      ],
      90.3673803806305,
      1,
      1740727096.0210814,
      1740727186.3903966,
      {}
    ],
    [
      865,
      null,
      209652396,
      null,
      [
        0.15297433860308113,
        0.06480423837900161
      ],
      65.29195475578308,
      1,
      1740727186.5989203,
      1740727251.8927076,
      {}
    ],
    [
      866,
      null,
      209652396,
      null,
      [
        0.15008746445872195,
        0.066409512758255
      ],
      163.15488195419312,
      1,
      1740727252.1645093,
      1740727415.321403,
      {}
    ],
    [
      867,
      null,
      209652396,
      null,
      [
        0.1510396377911348,
        0.06353240787982942
      ],
      221.93133234977722,
      1,
      1740727415.5341501,
      1740727637.4675794,
      {}
    ],
    [
      868,
      null,
      209652396,
      null,
      [
        0.1547249622848425,
        0.06282666385173798
      ],
      44.72124695777893,
      1,
      1740727637.748171,
      1740727682.4719725,
      {}
    ],
    [
      869,
      null,
      209652396,
      null,
      [
        0.14987247674373422,
        0.06580692052841187
      ],
      44.192997455596924,
      1,
      1740727682.6811361,
      1740727726.8759649,
      {}
    ],
    [
      870,
      null,
      209652396,
      null,
      [
        0.15153104771368242,
        0.0628202560544014
      ],
      101.52228379249573,
      1,
      1740727738.3789485,
      1740727839.9031456,
      {}
    ],
    [
      871,
      null,
      209652396,
      null,
      [
        0.15183806927818905,
        0.0663715273141861
      ],
      59.83484935760498,
      1,
      1740727840.1155663,
      1740727899.9524715,
      {}
    ],
    [
      872,
      null,
      209652396,
      null,
      [
        0.1509781325649589,
        0.068922278881073
      ],
      79.5039963722229,
      1,
      1740727900.1662016,
      1740727979.6722202,
      {}
    ],
    [
      873,
      null,
      209652396,
      null,
      [
        0.15122375736148191,
        0.0680504548549652
      ],
      121.56634545326233,
      1,
      1740727979.8858552,
      1740728101.4543076,
      {}
    ],
    [
      874,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740728101.6726508,
      1740728130.0846963,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      875,
      null,
      209652396,
      null,
      [
        0.15128529559667286,
        0.06584633588790893
      ],
      39.740599632263184,
      1,
      1740728130.2998924,
      1740728170.0424056,
      {}
    ],
    [
      876,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740728170.2548265,
      1740728322.0521984,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      877,
      null,
      209652396,
      null,
      [
        0.15079390925199307,
        0.06646540105342866
      ],
      82.09216904640198,
      1,
      1740728322.2698343,
      1740728404.3638692,
      {}
    ],
    [
      878,
      null,
      209652396,
      null,
      [
        0.15251375438501186,
        0.06787783801555634
      ],
      133.75171756744385,
      1,
      1740728415.8514009,
      1740728549.6052623,
      {}
    ],
    [
      879,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740728549.8370967,
      1740728549.9049695,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      880,
      null,
      209652396,
      null,
      [
        0.1528207900962392,
        0.06518064707517625
      ],
      46.19478511810303,
      1,
      1740728550.1171112,
      1740728596.3136716,
      {}
    ],
    [
      881,
      null,
      209652396,
      null,
      [
        0.1522988609814957,
        0.06964421153068542
      ],
      59.00080585479736,
      1,
      1740728596.5392985,
      1740728655.5419996,
      {}
    ],
    [
      882,
      null,
      209652396,
      null,
      [
        0.15199172624322324,
        0.06618964731693268
      ],
      111.4256284236908,
      1,
      1740728655.7591355,
      1740728767.1868696,
      {}
    ],
    [
      883,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740728767.4016874,
      1740728767.4764683,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      884,
      null,
      209652396,
      null,
      [
        0.1512237384991876,
        0.06517453849315642
      ],
      99.6946587562561,
      1,
      1740728767.688233,
      1740728867.3846874,
      {}
    ],
    [
      885,
      null,
      209652396,
      null,
      [
        0.2498680016644089,
        0.015923641920089722
      ],
      95.44345784187317,
      1,
      1740728867.602034,
      1740728963.0476418,
      {}
    ],
    [
      886,
      null,
      209652396,
      null,
      [
        0.15024104125900534,
        0.06571304470300675
      ],
      92.78709101676941,
      1,
      1740728975.021143,
      1740729067.8102884,
      {}
    ],
    [
      887,
      null,
      209652396,
      null,
      [
        0.15064036074515116,
        0.06600949496030807
      ],
      39.67786240577698,
      1,
      1740729068.0421345,
      1740729107.7220674,
      {}
    ],
    [
      888,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740729107.94977,
      1740729108.0524385,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      889,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740729108.2806695,
      1740729108.3729236,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      890,
      null,
      209652396,
      null,
      [
        0.15119315800453523,
        0.06482633262872697
      ],
      131.02350759506226,
      1,
      1740729108.6012046,
      1740729239.6265924,
      {}
    ],
    [
      891,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740729239.857502,
      1740729239.9502218,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      892,
      null,
      209652396,
      null,
      [
        0.15966959956480914,
        0.06232751190662385
      ],
      146.6638879776001,
      1,
      1740729240.1809916,
      1740729386.8470254,
      {}
    ],
    [
      893,
      null,
      209652396,
      null,
      [
        0.15100885452681861,
        0.06369988918304444
      ],
      59.544803619384766,
      1,
      1740729387.0877101,
      1740729446.6351252,
      {}
    ],
    [
      894,
      null,
      209652396,
      null,
      [
        0.15070164905494246,
        0.06621470630168914
      ],
      60.75635313987732,
      1,
      1740729447.382541,
      1740729508.1407928,
      {}
    ],
    [
      895,
      null,
      209652396,
      null,
      [
        0.15159245391281317,
        0.06423832565546037
      ],
      123.25360178947449,
      1,
      1740729519.1726935,
      1740729642.428527,
      {}
    ],
    [
      896,
      null,
      209652396,
      null,
      [
        0.1507016820639575,
        0.06862216621637345
      ],
      58.332703590393066,
      1,
      1740729642.6616535,
      1740729700.996453,
      {}
    ],
    [
      897,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740729701.2308695,
      1740729736.0382648,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      898,
      null,
      209652396,
      null,
      [
        0.1505481948595721,
        0.06662510097026826
      ],
      151.04723858833313,
      1,
      1740729736.2750132,
      1740729887.3241892,
      {}
    ],
    [
      899,
      null,
      209652396,
      null,
      [
        0.1666705334370005,
        0.051190823912620545
      ],
      192.22452688217163,
      1,
      1740729887.5573378,
      1740730079.7839868,
      {}
    ],
    [
      900,
      null,
      209652396,
      null,
      [
        0.1514387545076168,
        0.06568390905857087
      ],
      129.47250771522522,
      1,
      1740730080.0190408,
      1740730209.4936473,
      {}
    ],
    [
      901,
      null,
      209652396,
      null,
      [
        0.1516538223873553,
        0.06429528087377548
      ],
      80.05531191825867,
      1,
      1740730209.7330287,
      1740730289.7904308,
      {}
    ],
    [
      902,
      null,
      209652396,
      null,
      [
        0.1522988138257599,
        0.0648247829079628
      ],
      401.73405027389526,
      1,
      1740730301.2314866,
      1740730702.967653,
      {}
    ],
    [
      903,
      null,
      209652396,
      null,
      [
        0.1505480864013798,
        0.06848614156246184
      ],
      77.95552158355713,
      1,
      1740730703.2075696,
      1740730781.1651435,
      {}
    ],
    [
      904,
      null,
      209652396,
      null,
      [
        0.15165384124964962,
        0.06637668013572692
      ],
      58.28664207458496,
      1,
      1740730781.4072204,
      1740730839.695858,
      {}
    ],
    [
      905,
      null,
      209652396,
      null,
      [
        0.15242149418796122,
        0.07021373093128204
      ],
      38.18332767486572,
      1,
      1740730839.9350882,
      1740730878.120238,
      {}
    ],
    [
      906,
      null,
      209652396,
      null,
      [
        0.1518688195334902,
        0.06456087201833725
      ],
      51.140628814697266,
      1,
      1740730878.3543274,
      1740730929.4968305,
      {}
    ],
    [
      907,
      null,
      209652396,
      null,
      [
        0.1535886127951996,
        0.0641555181145668
      ],
      50.58246874809265,
      1,
      1740730929.7299657,
      1740730980.3143916,
      {}
    ],
    [
      908,
      null,
      209652396,
      null,
      [
        0.15177664893233755,
        0.06585504621267319
      ],
      45.40870451927185,
      1,
      1740730980.5549521,
      1740731025.9657586,
      {}
    ],
    [
      909,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740731026.201298,
      1740731026.2649124,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      910,
      null,
      209652396,
      null,
      [
        0.15236007855768335,
        0.06526205569505691
      ],
      47.0905978679657,
      1,
      1740731037.5513377,
      1740731084.64391,
      {}
    ],
    [
      911,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740731084.9536688,
      1740731123.107615,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      912,
      null,
      209652396,
      null,
      [
        0.15073246061270013,
        0.06606608629226685
      ],
      39.72364354133606,
      1,
      1740731123.3550754,
      1740731163.0806146,
      {}
    ],
    [
      913,
      null,
      209652396,
      null,
      [
        0.15629122590200434,
        0.06428018003702164
      ],
      63.60815167427063,
      1,
      1740731163.3148854,
      1740731226.9253795,
      {}
    ],
    [
      914,
      null,
      209652396,
      null,
      [
        0.15217582695127604,
        0.06615005552768707
      ],
      60.46995496749878,
      1,
      1740731227.166138,
      1740731287.6380606,
      {}
    ],
    [
      915,
      null,
      209652396,
      null,
      [
        0.15116245018939628,
        0.06742993980646134
      ],
      79.36163091659546,
      1,
      1740731287.8767307,
      1740731367.2403002,
      {}
    ],
    [
      916,
      null,
      209652396,
      null,
      [
        0.1515308826686072,
        0.06388383299112319
      ],
      52.52425408363342,
      1,
      1740731367.4778204,
      1740731420.0040753,
      {}
    ],
    [
      917,
      null,
      209652396,
      null,
      [
        0.150302414449121,
        0.06838697284460069
      ],
      66.08351111412048,
      1,
      1740731420.2456872,
      1740731486.3311143,
      {}
    ],
    [
      918,
      null,
      209652396,
      null,
      [
        0.1504253824613106,
        0.06549223393201828
      ],
      56.6675283908844,
      1,
      1740731498.3973324,
      1740731555.0668101,
      {}
    ],
    [
      919,
      null,
      209652396,
      null,
      [
        0.14962680479147544,
        0.06654040604829789
      ],
      52.40985870361328,
      1,
      1740731555.314208,
      1740731607.7260962,
      {}
    ],
    [
      920,
      null,
      209652396,
      null,
      [
        0.15134667350236214,
        0.06482877939939498
      ],
      52.082502126693726,
      1,
      1740731607.9711385,
      1740731660.0556455,
      {}
    ],
    [
      921,
      null,
      209652396,
      null,
      [
        0.1513773341617653,
        0.06627554893493652
      ],
      50.69909143447876,
      1,
      1740731660.297732,
      1740731710.9986608,
      {}
    ],
    [
      922,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740731711.2349339,
      1740731711.3191288,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      923,
      null,
      209652396,
      null,
      [
        0.14898198782929323,
        0.06808919370174407
      ],
      144.9906678199768,
      1,
      1740731711.5563843,
      1740731856.5489807,
      {}
    ],
    [
      924,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740731856.7933528,
      1740731856.8671207,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      925,
      null,
      209652396,
      null,
      [
        0.15411065979928254,
        0.06763562619686125
      ],
      120.88687133789062,
      1,
      1740731857.1057568,
      1740731977.9944935,
      {}
    ],
    [
      926,
      null,
      209652396,
      null,
      [
        0.14950390751288953,
        0.06415392816066742
      ],
      71.50328278541565,
      1,
      1740731990.4039066,
      1740732061.9093544,
      {}
    ],
    [
      927,
      null,
      209652396,
      null,
      [
        0.15254448577801868,
        0.06968072175979614
      ],
      55.286585569381714,
      1,
      1740732062.152946,
      1740732117.4414952,
      {}
    ],
    [
      928,
      null,
      209652396,
      null,
      [
        0.15199150932683864,
        0.06603361129760742
      ],
      147.41408586502075,
      1,
      1740732117.6818838,
      1740732265.097891,
      {}
    ],
    [
      929,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740732265.341518,
      1740732397.9718173,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 100, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      930,
      null,
      209652396,
      null,
      [
        0.15226791267210427,
        0.06868474751710892
      ],
      89.38582420349121,
      1,
      1740732398.2895224,
      1740732487.6776965,
      {}
    ],
    [
      931,
      null,
      209652396,
      null,
      [
        0.15266727459841234,
        0.06528931200504302
      ],
      66.25455093383789,
      1,
      1740732487.9204798,
      1740732554.1770284,
      {}
    ],
    [
      932,
      null,
      209652396,
      null,
      [
        0.14959614884764585,
        0.06590871304273607
      ],
      56.93563222885132,
      1,
      1740732554.417198,
      1740732611.3547316,
      {}
    ],
    [
      933,
      null,
      209652396,
      null,
      [
        0.15312778336730432,
        0.06587546586990356
      ],
      44.71051287651062,
      1,
      1740732611.5984137,
      1740732656.3109417,
      {}
    ],
    [
      934,
      null,
      209652396,
      null,
      [
        0.1488897464945369,
        0.06654478400945664
      ],
      156.9241816997528,
      1,
      1740732668.1691463,
      1740732825.0952911,
      {}
    ],
    [
      935,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740732825.3416672,
      1740732825.5008502,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      936,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740732825.7431304,
      1740732825.8194084,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      937,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740732826.085834,
      1740732826.1675699,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      938,
      null,
      209652396,
      null,
      [
        0.15103947274605956,
        0.06640107870101929
      ],
      92.279794216156,
      1,
      1740732826.4737668,
      1740732918.7554238,
      {}
    ],
    [
      939,
      null,
      209652396,
      null,
      [
        0.1524522255809681,
        0.06867396652698518
      ],
      196.17646050453186,
      1,
      1740732919.0091553,
      1740733115.1876488,
      {}
    ],
    [
      940,
      null,
      209652396,
      null,
      [
        0.15097811841823816,
        0.06585424721240998
      ],
      64.84541988372803,
      1,
      1740733115.4311438,
      1740733180.278615,
      {}
    ],
    [
      941,
      null,
      209652396,
      null,
      [
        0.15352721131164243,
        0.06512872815132142
      ],
      41.57198643684387,
      1,
      1740733180.5209625,
      1740733222.094908,
      {}
    ],
    [
      942,
      null,
      209652396,
      null,
      [
        0.1526059014082966,
        0.06831350654363633
      ],
      58.939528703689575,
      1,
      1740733234.2058942,
      1740733293.1473486,
      {}
    ],
    [
      943,
      null,
      209652396,
      null,
      [
        0.15174589867703642,
        0.06332356750965118
      ],
      43.534313440322876,
      1,
      1740733293.3945158,
      1740733336.9307842,
      {}
    ],
    [
      944,
      null,
      209652396,
      null,
      [
        0.16608840059438862,
        0.062422766983509057
      ],
      38.253209352493286,
      1,
      1740733337.1796534,
      1740733375.434758,
      {}
    ],
    [
      945,
      null,
      209652396,
      null,
      [
        0.15153097698007878,
        0.06536585092544556
      ],
      74.02663898468018,
      1,
      1740733375.6804972,
      1740733449.7091804,
      {}
    ],
    [
      946,
      null,
      209652396,
      null,
      [
        0.15540062852937103,
        0.06424143880605698
      ],
      63.23131990432739,
      1,
      1740733449.956801,
      1740733513.1901786,
      {}
    ],
    [
      947,
      null,
      209652396,
      null,
      [
        0.1517151672840296,
        0.06365234106779098
      ],
      64.58644509315491,
      1,
      1740733513.4373903,
      1740733578.0259023,
      {}
    ],
    [
      948,
      null,
      209652396,
      null,
      [
        0.14978043346306819,
        0.06501179546117783
      ],
      721.9187972545624,
      1,
      1740733578.2871892,
      1740734300.207912,
      {}
    ],
    [
      949,
      null,
      209652396,
      null,
      [
        0.148920553336721,
        0.06787937909364701
      ],
      105.50568222999573,
      1,
      1740734300.4542572,
      1740734405.9620671,
      {}
    ],
    [
      950,
      null,
      209652396,
      null,
      [
        0.15085531073555025,
        0.06392647802829743
      ],
      98.8863525390625,
      1,
      1740734418.6145434,
      1740734517.5032363,
      {}
    ],
    [
      951,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740734517.780122,
      1740734517.8270009,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      952,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740734518.072406,
      1740734535.919424,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3163, in binary_cross_entropy\n    raise ValueError(\nValueError: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.\n",
        "error": "ValueError('Using a target size (torch.Size([1])) that is different to the input size (torch.Size([])) is deprecated. Please ensure they have the same size.')"
      }
    ],
    [
      953,
      null,
      209652396,
      null,
      [
        0.15024099881884312,
        0.06808095514774323
      ],
      87.43248462677002,
      1,
      1740734536.177439,
      1740734623.6123574,
      {}
    ],
    [
      954,
      null,
      209652396,
      null,
      [
        0.1535272678985254,
        0.06531134516000747
      ],
      82.37869000434875,
      1,
      1740734623.8608162,
      1740734706.2416205,
      {}
    ],
    [
      955,
      null,
      209652396,
      null,
      [
        0.15423356179344203,
        0.06564674168825149
      ],
      46.88726091384888,
      1,
      1740734706.5043983,
      1740734753.3937519,
      {}
    ],
    [
      956,
      null,
      209652396,
      null,
      [
        0.14904321012105443,
        0.06674586057662964
      ],
      39.54857087135315,
      1,
      1740734753.63989,
      1740734793.1902807,
      {}
    ],
    [
      957,
      null,
      209652396,
      null,
      [
        0.15245230574571894,
        0.06271181404590606
      ],
      111.39797830581665,
      1,
      1740734793.4389873,
      1740734904.8389037,
      {}
    ],
    [
      958,
      null,
      209652396,
      null,
      [
        0.15288217743307564,
        0.06475255757570267
      ],
      57.305527210235596,
      1,
      1740734905.6762555,
      1740734962.983833,
      {}
    ],
    [
      959,
      null,
      209652396,
      null,
      [
        0.15420288227174456,
        0.06504086017608643
      ],
      221.57917594909668,
      1,
      1740734974.4584916,
      1740735196.0396981,
      {}
    ],
    [
      960,
      null,
      209652396,
      null,
      [
        0.15183814944293988,
        0.06765299439430236
      ],
      153.9113416671753,
      1,
      1740735196.290694,
      1740735350.204084,
      {}
    ],
    [
      961,
      null,
      209652396,
      null,
      [
        0.15008750218331057,
        0.0649982723593712
      ],
      56.84644174575806,
      1,
      1740735350.4554405,
      1740735407.3039126,
      {}
    ],
    [
      962,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740735407.5749686,
      1740735414.0136154,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      963,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740735414.2649453,
      1740735414.3564053,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      964,
      null,
      209652396,
      null,
      [
        0.14959618185666088,
        0.065011528134346
      ],
      73.10836362838745,
      1,
      1740735414.6033635,
      1740735487.7136009,
      {}
    ],
    [
      965,
      null,
      209652396,
      null,
      [
        0.15100884038009782,
        0.06442524552345276
      ],
      40.22125029563904,
      1,
      1740735487.9640298,
      1740735528.187328,
      {}
    ],
    [
      966,
      null,
      209652396,
      null,
      [
        0.1535886599509354,
        0.06890433371067047
      ],
      109.55654811859131,
      1,
      1740735540.866823,
      1740735650.4254818,
      {}
    ],
    [
      967,
      null,
      209652396,
      null,
      [
        0.1500875446234728,
        0.06636795461177827
      ],
      155.93998003005981,
      1,
      1740735650.6801925,
      1740735806.622231,
      {}
    ],
    [
      968,
      null,
      209652396,
      null,
      [
        0.15186878652447514,
        0.06481541812419891
      ],
      59.203505516052246,
      1,
      1740735806.8752108,
      1740735866.080683,
      {}
    ],
    [
      969,
      null,
      209652396,
      null,
      [
        0.15057888381241674,
        0.06761902540922166
      ],
      52.90789246559143,
      1,
      1740735866.3300307,
      1740735919.2397609,
      {}
    ],
    [
      970,
      null,
      209652396,
      null,
      [
        0.151438829956794,
        0.06703085631132126
      ],
      38.73577284812927,
      1,
      1740735919.5077333,
      1740735958.2453225,
      {}
    ],
    [
      971,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740735958.503018,
      1740735958.5956469,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      972,
      null,
      209652396,
      null,
      [
        0.15248299941413712,
        0.06714188635349275
      ],
      47.66588735580444,
      1,
      1740735958.8447359,
      1740736006.5123975,
      {}
    ],
    [
      973,
      null,
      209652396,
      null,
      [
        0.15242165451746287,
        0.06395001560449601
      ],
      35.40255093574524,
      1,
      1740736006.7647877,
      1740736042.1691585,
      {}
    ],
    [
      974,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1740736043.019951,
      1740736043.0867484,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 186, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/smac/runner/target_function_runner.py\", line 259, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_pytorch.py\", line 50, in train\n    predictions = self.train_and_predict_classifier(\n  File \"/home/dev/persistent/autoML-FAI-experiments/automl/auto_prr.py\", line 10, in train_and_predict_classifier\n    return train_and_predict_prr_classifier(dataset, net, metric, lambda_, lr, n_epochs, batch_size, conditions, on_test)\n  File \"/home/dev/persistent/autoML-FAI-experiments/methods/prr/__init__.py\", line 82, in train_and_predict_prr_classifier\n    usual_loss = loss_function(group1_output, group1_y_batch) + loss_function(group2_output, group2_y_batch)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/modules/loss.py\", line 621, in forward\n    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)\n  File \"/usr/local/lib/python3.10/site-packages/torch/nn/functional.py\", line 3172, in binary_cross_entropy\n    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)\nRuntimeError: all elements of input should be between 0 and 1\n",
        "error": "RuntimeError('all elements of input should be between 0 and 1')"
      }
    ],
    [
      975,
      null,
      209652396,
      null,
      [
        0.1536500850123605,
        0.06759463757276535
      ],
      39.86723017692566,
      1,
      1740736054.8276525,
      1740736094.6967533,
      {}
    ],
    [
      976,
      null,
      209652396,
      null,
      [
        0.14950389808174241,
        0.06910309553146363
      ],
      536.4155497550964,
      1,
      1740736094.9601183,
      1740736631.3775575,
      {}
    ]
  ],
  "configs": {
    "1": {
      "batch_size": 297,
      "lambda_value": 0.6205646954477,
      "learning_rate": 0.000210147218,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 697
    },
    "2": {
      "batch_size": 979,
      "lambda_value": 0.3596079321578,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "3": {
      "batch_size": 652,
      "lambda_value": 0.7642785040662,
      "learning_rate": 0.0014379647071,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 136
    },
    "4": {
      "batch_size": 94,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 339
    },
    "5": {
      "batch_size": 241,
      "lambda_value": 0.9708397453651,
      "learning_rate": 0.0329667406801,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 407
    },
    "6": {
      "batch_size": 107,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0301390578778,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 338
    },
    "7": {
      "batch_size": 322,
      "lambda_value": 0.412513526121,
      "learning_rate": 0.0006441000446,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "8": {
      "batch_size": 815,
      "lambda_value": 0.8617159873378,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 752
    },
    "9": {
      "batch_size": 925,
      "lambda_value": 0.3837167412653,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "10": {
      "batch_size": 150,
      "lambda_value": 0.1709107359706,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "11": {
      "batch_size": 1024,
      "lambda_value": 0.9367846473174,
      "learning_rate": 0.0044448572887,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "12": {
      "batch_size": 102,
      "lambda_value": 0.6765698196157,
      "learning_rate": 0.0001975638963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 697
    },
    "13": {
      "batch_size": 659,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0117063616816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "14": {
      "batch_size": 59,
      "lambda_value": 0.0030815114132,
      "learning_rate": 0.0057836649805,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 153
    },
    "15": {
      "batch_size": 659,
      "lambda_value": 0.4262363360775,
      "learning_rate": 0.0063782393736,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "16": {
      "batch_size": 176,
      "lambda_value": 0.5650710721095,
      "learning_rate": 0.0001467921737,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 463
    },
    "17": {
      "batch_size": 78,
      "lambda_value": 0.9864346619144,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "18": {
      "batch_size": 752,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0255903600372,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 709
    },
    "19": {
      "batch_size": 85,
      "lambda_value": 0.6624668076433,
      "learning_rate": 0.0001461455212,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 455
    },
    "20": {
      "batch_size": 277,
      "lambda_value": 0.0788153739624,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 788
    },
    "21": {
      "batch_size": 895,
      "lambda_value": 0.7897473442105,
      "learning_rate": 0.011623077444,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 411
    },
    "22": {
      "batch_size": 597,
      "lambda_value": 0.4199483890762,
      "learning_rate": 0.0062957704128,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1002
    },
    "23": {
      "batch_size": 498,
      "lambda_value": 0.4997052812651,
      "learning_rate": 0.0008260624616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 201
    },
    "24": {
      "batch_size": 81,
      "lambda_value": 0.801774956151,
      "learning_rate": 0.0054916470096,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "25": {
      "batch_size": 69,
      "lambda_value": 0.005704017356,
      "learning_rate": 0.0027189688569,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "26": {
      "batch_size": 544,
      "lambda_value": 0.3566148090088,
      "learning_rate": 0.0077072238861,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "27": {
      "batch_size": 635,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0144818936694,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "28": {
      "batch_size": 184,
      "lambda_value": 0.5249395800268,
      "learning_rate": 0.0002461496774,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 328
    },
    "29": {
      "batch_size": 40,
      "lambda_value": 0.6748309344586,
      "learning_rate": 0.0216101868293,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "30": {
      "batch_size": 497,
      "lambda_value": 0.4323787825414,
      "learning_rate": 0.0004186695981,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 866
    },
    "31": {
      "batch_size": 47,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0584663913961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 229
    },
    "32": {
      "batch_size": 242,
      "lambda_value": 0.5897873412338,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 140
    },
    "33": {
      "batch_size": 59,
      "lambda_value": 0.9315102941087,
      "learning_rate": 0.091291373686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "34": {
      "batch_size": 53,
      "lambda_value": 0.7431359447524,
      "learning_rate": 0.0001324462442,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 383
    },
    "35": {
      "batch_size": 55,
      "lambda_value": 0.5959451110671,
      "learning_rate": 0.0279512903626,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 191
    },
    "36": {
      "batch_size": 62,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0042972583038,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 456
    },
    "37": {
      "batch_size": 40,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0591287940477,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 557
    },
    "38": {
      "batch_size": 143,
      "lambda_value": 0.4893136075805,
      "learning_rate": 0.0143524519362,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 124
    },
    "39": {
      "batch_size": 111,
      "lambda_value": 0.6237206127861,
      "learning_rate": 0.0011527170707,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "40": {
      "batch_size": 203,
      "lambda_value": 0.836270266563,
      "learning_rate": 0.0026409543209,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 612
    },
    "41": {
      "batch_size": 68,
      "lambda_value": 0.1473946081284,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 788
    },
    "42": {
      "batch_size": 682,
      "lambda_value": 0.8411544066865,
      "learning_rate": 0.0006865924239,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 174
    },
    "43": {
      "batch_size": 61,
      "lambda_value": 0.9525627850943,
      "learning_rate": 0.0886799955763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 133
    },
    "44": {
      "batch_size": 766,
      "lambda_value": 0.8645144427745,
      "learning_rate": 0.0002361502231,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 276
    },
    "45": {
      "batch_size": 680,
      "lambda_value": 0.2601044820299,
      "learning_rate": 0.0155794633931,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 532
    },
    "46": {
      "batch_size": 61,
      "lambda_value": 0.737447287188,
      "learning_rate": 0.0001600052257,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 408
    },
    "47": {
      "batch_size": 563,
      "lambda_value": 0.5684020796476,
      "learning_rate": 0.0360030852203,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 276
    },
    "48": {
      "batch_size": 342,
      "lambda_value": 0.3794140715116,
      "learning_rate": 0.0094428768473,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "49": {
      "batch_size": 539,
      "lambda_value": 0.4096195582972,
      "learning_rate": 0.0014614146338,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 269
    },
    "50": {
      "batch_size": 540,
      "lambda_value": 0.6011431890687,
      "learning_rate": 0.0002228815534,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "51": {
      "batch_size": 65,
      "lambda_value": 0.2425091147505,
      "learning_rate": 0.0001738203182,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "52": {
      "batch_size": 313,
      "lambda_value": 0.4545499988336,
      "learning_rate": 0.0003879558517,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 696
    },
    "53": {
      "batch_size": 582,
      "lambda_value": 0.0387496336331,
      "learning_rate": 0.0003356147463,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 83
    },
    "54": {
      "batch_size": 841,
      "lambda_value": 0.3293608465041,
      "learning_rate": 0.0018412961777,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "55": {
      "batch_size": 507,
      "lambda_value": 0.5071325061685,
      "learning_rate": 0.0001639990325,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 291
    },
    "56": {
      "batch_size": 523,
      "lambda_value": 0.5220340899809,
      "learning_rate": 0.0261351106367,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 332
    },
    "57": {
      "batch_size": 63,
      "lambda_value": 0.1525805406835,
      "learning_rate": 0.0005901249311,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "58": {
      "batch_size": 51,
      "lambda_value": 0.6743427482514,
      "learning_rate": 0.0203488979235,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 182
    },
    "59": {
      "batch_size": 526,
      "lambda_value": 0.1558490208903,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 71
    },
    "60": {
      "batch_size": 571,
      "lambda_value": 0.1632290921883,
      "learning_rate": 0.0403526510329,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 155
    },
    "61": {
      "batch_size": 900,
      "lambda_value": 0.4300912433377,
      "learning_rate": 0.0152683361273,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 574
    },
    "62": {
      "batch_size": 946,
      "lambda_value": 0.240475409915,
      "learning_rate": 0.0535361448362,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "63": {
      "batch_size": 45,
      "lambda_value": 0.025892842149,
      "learning_rate": 0.0064701372435,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 138
    },
    "64": {
      "batch_size": 578,
      "lambda_value": 0.466940713799,
      "learning_rate": 0.0069166965864,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 247
    },
    "65": {
      "batch_size": 71,
      "lambda_value": 0.3818317948981,
      "learning_rate": 0.0043214032666,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 297
    },
    "66": {
      "batch_size": 921,
      "lambda_value": 0.0402320288874,
      "learning_rate": 0.0695202977577,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 410
    },
    "67": {
      "batch_size": 217,
      "lambda_value": 0.6966025769503,
      "learning_rate": 0.0609459009151,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 409
    },
    "68": {
      "batch_size": 506,
      "lambda_value": 0.2774871972287,
      "learning_rate": 0.000458934893,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 239
    },
    "69": {
      "batch_size": 435,
      "lambda_value": 0.6182493089424,
      "learning_rate": 0.0313142741224,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "70": {
      "batch_size": 193,
      "lambda_value": 0.4888227212062,
      "learning_rate": 0.0678987026873,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 198
    },
    "71": {
      "batch_size": 799,
      "lambda_value": 0.0490666417774,
      "learning_rate": 0.000188798116,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 231
    },
    "72": {
      "batch_size": 83,
      "lambda_value": 0.9431689307954,
      "learning_rate": 0.0005462678091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 381
    },
    "73": {
      "batch_size": 962,
      "lambda_value": 0.1658029844256,
      "learning_rate": 0.0009078367561,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 387
    },
    "74": {
      "batch_size": 633,
      "lambda_value": 0.4527774250837,
      "learning_rate": 0.0005033519202,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 444
    },
    "75": {
      "batch_size": 632,
      "lambda_value": 0.2859097380484,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 145
    },
    "76": {
      "batch_size": 681,
      "lambda_value": 0.9252130831835,
      "learning_rate": 0.000225824127,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 160
    },
    "77": {
      "batch_size": 442,
      "lambda_value": 0.5011312487499,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 162
    },
    "78": {
      "batch_size": 363,
      "lambda_value": 0.5999613374055,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 119
    },
    "79": {
      "batch_size": 500,
      "lambda_value": 0.2330801595869,
      "learning_rate": 0.0227301664178,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 487
    },
    "80": {
      "batch_size": 387,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0407226893036,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 860
    },
    "81": {
      "batch_size": 917,
      "lambda_value": 0.2528729324812,
      "learning_rate": 0.0002112474838,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 84
    },
    "82": {
      "batch_size": 683,
      "lambda_value": 0.4302554532778,
      "learning_rate": 0.0069425824515,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 336
    },
    "83": {
      "batch_size": 869,
      "lambda_value": 0.3577941791914,
      "learning_rate": 0.0001144897283,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 85
    },
    "84": {
      "batch_size": 219,
      "lambda_value": 0.1326945416802,
      "learning_rate": 0.0055501982149,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 497
    },
    "85": {
      "batch_size": 603,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.050363997522,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 431
    },
    "86": {
      "batch_size": 33,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0043216314201,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 925
    },
    "87": {
      "batch_size": 39,
      "lambda_value": 0.568414398817,
      "learning_rate": 0.0066942051347,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 262
    },
    "88": {
      "batch_size": 959,
      "lambda_value": 0.0099039525899,
      "learning_rate": 0.0001330037572,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 856
    },
    "89": {
      "batch_size": 156,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0053294934748,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "90": {
      "batch_size": 844,
      "lambda_value": 0.2250047838217,
      "learning_rate": 0.0777989782816,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "91": {
      "batch_size": 84,
      "lambda_value": 0.0464184110839,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "92": {
      "batch_size": 65,
      "lambda_value": 0.4572054964111,
      "learning_rate": 0.0269030355547,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 150
    },
    "93": {
      "batch_size": 501,
      "lambda_value": 0.4344636044526,
      "learning_rate": 0.0343406853747,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 551
    },
    "94": {
      "batch_size": 193,
      "lambda_value": 0.6825317392541,
      "learning_rate": 0.0012800826778,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 78
    },
    "95": {
      "batch_size": 59,
      "lambda_value": 0.0982368328669,
      "learning_rate": 0.0062053850896,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "96": {
      "batch_size": 44,
      "lambda_value": 0.0105993407731,
      "learning_rate": 0.0059496031762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 116
    },
    "97": {
      "batch_size": 61,
      "lambda_value": 0.4695952651957,
      "learning_rate": 0.0024192530494,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 136
    },
    "98": {
      "batch_size": 355,
      "lambda_value": 0.9137569290511,
      "learning_rate": 0.034912055568,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 196
    },
    "99": {
      "batch_size": 431,
      "lambda_value": 0.0822383740424,
      "learning_rate": 0.0075073454367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 156
    },
    "100": {
      "batch_size": 259,
      "lambda_value": 0.6182439422905,
      "learning_rate": 0.0005315224917,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 90
    },
    "101": {
      "batch_size": 103,
      "lambda_value": 0.2833626254686,
      "learning_rate": 0.0005003261748,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 490
    },
    "102": {
      "batch_size": 37,
      "lambda_value": 0.5840919399451,
      "learning_rate": 0.0001459429644,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 355
    },
    "103": {
      "batch_size": 441,
      "lambda_value": 0.1020683828299,
      "learning_rate": 0.0037946946911,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 771
    },
    "104": {
      "batch_size": 298,
      "lambda_value": 0.6523313109885,
      "learning_rate": 0.0418434218437,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 217
    },
    "105": {
      "batch_size": 105,
      "lambda_value": 0.5175676044407,
      "learning_rate": 0.0804624104669,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 720
    },
    "106": {
      "batch_size": 132,
      "lambda_value": 0.8645510243583,
      "learning_rate": 0.0065231774625,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "107": {
      "batch_size": 222,
      "lambda_value": 0.3163643900406,
      "learning_rate": 0.0077402548612,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "108": {
      "batch_size": 274,
      "lambda_value": 0.8391282420355,
      "learning_rate": 0.0007788324639,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 627
    },
    "109": {
      "batch_size": 202,
      "lambda_value": 0.9814558991599,
      "learning_rate": 0.0305959268152,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 681
    },
    "110": {
      "batch_size": 118,
      "lambda_value": 0.0095926156531,
      "learning_rate": 0.0001209499004,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 489
    },
    "111": {
      "batch_size": 725,
      "lambda_value": 0.4495361860686,
      "learning_rate": 0.0001828620707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "112": {
      "batch_size": 142,
      "lambda_value": 0.3018269311536,
      "learning_rate": 0.0013615516581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 156
    },
    "113": {
      "batch_size": 39,
      "lambda_value": 0.6366104708849,
      "learning_rate": 0.0911637803703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 197
    },
    "114": {
      "batch_size": 48,
      "lambda_value": 0.8393505362879,
      "learning_rate": 0.000335227891,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 278
    },
    "115": {
      "batch_size": 456,
      "lambda_value": 0.2025097518032,
      "learning_rate": 0.000165906658,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "116": {
      "batch_size": 52,
      "lambda_value": 0.1777602005584,
      "learning_rate": 0.0071062444482,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 245
    },
    "117": {
      "batch_size": 387,
      "lambda_value": 0.8469855847131,
      "learning_rate": 0.0159663538365,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 871
    },
    "118": {
      "batch_size": 544,
      "lambda_value": 0.7637452690801,
      "learning_rate": 0.0189128877645,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "119": {
      "batch_size": 78,
      "lambda_value": 0.1333517870819,
      "learning_rate": 0.0379151435743,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 376
    },
    "120": {
      "batch_size": 858,
      "lambda_value": 0.5295439381285,
      "learning_rate": 0.0008570201388,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 874
    },
    "121": {
      "batch_size": 514,
      "lambda_value": 0.9751001598295,
      "learning_rate": 0.0023139794505,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 290
    },
    "122": {
      "batch_size": 181,
      "lambda_value": 0.1042301237216,
      "learning_rate": 0.0056294156898,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 184
    },
    "123": {
      "batch_size": 852,
      "lambda_value": 0.1477343378818,
      "learning_rate": 0.0001720754894,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 578
    },
    "124": {
      "batch_size": 287,
      "lambda_value": 0.0042305286159,
      "learning_rate": 0.0003825520686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 280
    },
    "125": {
      "batch_size": 38,
      "lambda_value": 0.4950446899782,
      "learning_rate": 0.0006069868363,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "126": {
      "batch_size": 713,
      "lambda_value": 0.4736068584881,
      "learning_rate": 0.0484101532431,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "127": {
      "batch_size": 46,
      "lambda_value": 0.2266582964608,
      "learning_rate": 0.0008993767961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 481
    },
    "128": {
      "batch_size": 876,
      "lambda_value": 0.3843229233274,
      "learning_rate": 0.0312081445008,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "129": {
      "batch_size": 102,
      "lambda_value": 0.0243599966944,
      "learning_rate": 0.0034664159679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 142
    },
    "130": {
      "batch_size": 145,
      "lambda_value": 0.5126786491203,
      "learning_rate": 0.0036689786017,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 86
    },
    "131": {
      "batch_size": 884,
      "lambda_value": 0.0240476070589,
      "learning_rate": 0.0001244318996,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 523
    },
    "132": {
      "batch_size": 725,
      "lambda_value": 0.5275737085407,
      "learning_rate": 0.0962149393336,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 78
    },
    "133": {
      "batch_size": 267,
      "lambda_value": 0.2227488758416,
      "learning_rate": 0.0133378701537,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "134": {
      "batch_size": 276,
      "lambda_value": 0.1850431063149,
      "learning_rate": 0.0050170483991,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 101
    },
    "135": {
      "batch_size": 852,
      "lambda_value": 0.2554158173882,
      "learning_rate": 0.0001859212949,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "136": {
      "batch_size": 66,
      "lambda_value": 0.0453077602809,
      "learning_rate": 0.0038705299809,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 173
    },
    "137": {
      "batch_size": 33,
      "lambda_value": 0.0153246307342,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 375
    },
    "138": {
      "batch_size": 313,
      "lambda_value": 0.4943773457039,
      "learning_rate": 0.0025848473367,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 885
    },
    "139": {
      "batch_size": 74,
      "lambda_value": 0.0927269727559,
      "learning_rate": 0.0011079056334,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 465
    },
    "140": {
      "batch_size": 460,
      "lambda_value": 0.2886737918534,
      "learning_rate": 0.011874222675,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 145
    },
    "141": {
      "batch_size": 139,
      "lambda_value": 0.9695009910679,
      "learning_rate": 0.0457859391684,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "142": {
      "batch_size": 776,
      "lambda_value": 0.1506642600813,
      "learning_rate": 0.00253628593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 529
    },
    "143": {
      "batch_size": 330,
      "lambda_value": 0.9821690174032,
      "learning_rate": 0.0229054208914,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "144": {
      "batch_size": 542,
      "lambda_value": 0.3884680740375,
      "learning_rate": 0.0047964066063,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 599
    },
    "145": {
      "batch_size": 46,
      "lambda_value": 0.7914718216174,
      "learning_rate": 0.0567631885834,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 276
    },
    "146": {
      "batch_size": 814,
      "lambda_value": 0.4706617753678,
      "learning_rate": 0.0280124201071,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 405
    },
    "147": {
      "batch_size": 671,
      "lambda_value": 0.477805553039,
      "learning_rate": 0.0001000439302,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 742
    },
    "148": {
      "batch_size": 307,
      "lambda_value": 0.3966296496465,
      "learning_rate": 0.0065078037431,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 550
    },
    "149": {
      "batch_size": 67,
      "lambda_value": 0.1238591984675,
      "learning_rate": 0.0008622153901,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 450
    },
    "150": {
      "batch_size": 538,
      "lambda_value": 0.1472817942137,
      "learning_rate": 0.0073574994525,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 635
    },
    "151": {
      "batch_size": 49,
      "lambda_value": 0.0688601702784,
      "learning_rate": 0.0003239179582,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 237
    },
    "152": {
      "batch_size": 793,
      "lambda_value": 0.2500518198771,
      "learning_rate": 0.0072989042556,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 564
    },
    "153": {
      "batch_size": 776,
      "lambda_value": 0.3086653060848,
      "learning_rate": 0.0004287369379,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "154": {
      "batch_size": 39,
      "lambda_value": 0.8406280162015,
      "learning_rate": 0.0037841646219,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 544
    },
    "155": {
      "batch_size": 962,
      "lambda_value": 0.7517036849034,
      "learning_rate": 0.0123398549816,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 611
    },
    "156": {
      "batch_size": 915,
      "lambda_value": 0.2951589262888,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 325
    },
    "157": {
      "batch_size": 831,
      "lambda_value": 0.9121447002385,
      "learning_rate": 0.0258958220048,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 86
    },
    "158": {
      "batch_size": 976,
      "lambda_value": 0.3603359633198,
      "learning_rate": 0.0163222644592,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 278
    },
    "159": {
      "batch_size": 493,
      "lambda_value": 0.6414907887986,
      "learning_rate": 0.0751665791976,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 235
    },
    "160": {
      "batch_size": 454,
      "lambda_value": 0.1246000775699,
      "learning_rate": 0.0038598459083,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "161": {
      "batch_size": 137,
      "lambda_value": 0.6329745326815,
      "learning_rate": 0.0016575807729,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 351
    },
    "162": {
      "batch_size": 50,
      "lambda_value": 0.740179719234,
      "learning_rate": 0.0059510273029,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 165
    },
    "163": {
      "batch_size": 41,
      "lambda_value": 0.2084059817426,
      "learning_rate": 0.0013291369141,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "164": {
      "batch_size": 64,
      "lambda_value": 0.5561857015528,
      "learning_rate": 0.0035434237772,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "165": {
      "batch_size": 498,
      "lambda_value": 0.6579712863223,
      "learning_rate": 0.00944846031,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 146
    },
    "166": {
      "batch_size": 60,
      "lambda_value": 0.9268347430002,
      "learning_rate": 0.0039761620925,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "167": {
      "batch_size": 317,
      "lambda_value": 0.5774632610946,
      "learning_rate": 0.0004289380476,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 90
    },
    "168": {
      "batch_size": 33,
      "lambda_value": 0.844330408685,
      "learning_rate": 0.0036197636688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 852
    },
    "169": {
      "batch_size": 451,
      "lambda_value": 0.1924494999061,
      "learning_rate": 0.0213235547463,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 88
    },
    "170": {
      "batch_size": 537,
      "lambda_value": 0.2461028946703,
      "learning_rate": 0.0320480978609,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 482
    },
    "171": {
      "batch_size": 160,
      "lambda_value": 0.4670716943235,
      "learning_rate": 0.0028172952438,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 556
    },
    "172": {
      "batch_size": 188,
      "lambda_value": 0.2461939552216,
      "learning_rate": 0.0409216311654,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 474
    },
    "173": {
      "batch_size": 546,
      "lambda_value": 0.328880259391,
      "learning_rate": 0.0012850548044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 166
    },
    "174": {
      "batch_size": 205,
      "lambda_value": 0.5479223007212,
      "learning_rate": 0.0362149473803,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 552
    },
    "175": {
      "batch_size": 805,
      "lambda_value": 0.3334198233134,
      "learning_rate": 0.0012575315579,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 213
    },
    "176": {
      "batch_size": 404,
      "lambda_value": 0.9522543525878,
      "learning_rate": 0.0620108034853,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "177": {
      "batch_size": 364,
      "lambda_value": 0.2034449398154,
      "learning_rate": 0.0042526599584,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 495
    },
    "178": {
      "batch_size": 733,
      "lambda_value": 0.1597686694848,
      "learning_rate": 0.031534156064,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 249
    },
    "179": {
      "batch_size": 296,
      "lambda_value": 0.3073615378608,
      "learning_rate": 0.0006343167147,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 541
    },
    "180": {
      "batch_size": 846,
      "lambda_value": 0.3837065982754,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "181": {
      "batch_size": 68,
      "lambda_value": 0.4765783643147,
      "learning_rate": 0.0022563929374,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "182": {
      "batch_size": 103,
      "lambda_value": 0.2461385129023,
      "learning_rate": 0.0001337143277,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 315
    },
    "183": {
      "batch_size": 390,
      "lambda_value": 0.9070245463357,
      "learning_rate": 0.0627349351707,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 287
    },
    "184": {
      "batch_size": 473,
      "lambda_value": 0.9899025879147,
      "learning_rate": 0.0001115728064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 248
    },
    "185": {
      "batch_size": 621,
      "lambda_value": 0.2078800181557,
      "learning_rate": 0.0984325826781,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 277
    },
    "186": {
      "batch_size": 803,
      "lambda_value": 0.6304196192746,
      "learning_rate": 0.0013917449989,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 500
    },
    "187": {
      "batch_size": 64,
      "lambda_value": 0.0584250613346,
      "learning_rate": 0.0272922998449,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 229
    },
    "188": {
      "batch_size": 948,
      "lambda_value": 0.5201064105195,
      "learning_rate": 0.0644814831068,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 76
    },
    "189": {
      "batch_size": 52,
      "lambda_value": 0.1224029330303,
      "learning_rate": 0.008250906644,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 135
    },
    "190": {
      "batch_size": 791,
      "lambda_value": 0.8335977075286,
      "learning_rate": 0.0032926830009,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 494
    },
    "191": {
      "batch_size": 52,
      "lambda_value": 0.6956110933781,
      "learning_rate": 0.019084000727,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 305
    },
    "192": {
      "batch_size": 65,
      "lambda_value": 0.0858165163043,
      "learning_rate": 0.0001396075788,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 217
    },
    "193": {
      "batch_size": 38,
      "lambda_value": 0.5819568111468,
      "learning_rate": 0.0002132918471,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 249
    },
    "194": {
      "batch_size": 754,
      "lambda_value": 0.2698123628689,
      "learning_rate": 0.0066119680367,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 173
    },
    "195": {
      "batch_size": 668,
      "lambda_value": 0.8470592534302,
      "learning_rate": 0.0006430637512,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 141
    },
    "196": {
      "batch_size": 386,
      "lambda_value": 0.6863903558802,
      "learning_rate": 0.0008170013725,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "197": {
      "batch_size": 266,
      "lambda_value": 0.4414773952143,
      "learning_rate": 0.0268449154553,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 432
    },
    "198": {
      "batch_size": 222,
      "lambda_value": 0.3646827688118,
      "learning_rate": 0.0162151725013,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 81
    },
    "199": {
      "batch_size": 828,
      "lambda_value": 0.6994291661053,
      "learning_rate": 0.0048399368793,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 417
    },
    "200": {
      "batch_size": 845,
      "lambda_value": 0.5639110820217,
      "learning_rate": 0.0014623104992,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 463
    },
    "201": {
      "batch_size": 542,
      "lambda_value": 0.4027838092624,
      "learning_rate": 0.001307904062,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 561
    },
    "202": {
      "batch_size": 47,
      "lambda_value": 0.3342370768098,
      "learning_rate": 0.0066597022586,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 540
    },
    "203": {
      "batch_size": 234,
      "lambda_value": 0.4344920974789,
      "learning_rate": 0.032527985566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 278
    },
    "204": {
      "batch_size": 1022,
      "lambda_value": 0.2594121754683,
      "learning_rate": 0.0925450324862,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 1007
    },
    "205": {
      "batch_size": 212,
      "lambda_value": 0.5286350730685,
      "learning_rate": 0.0071310853992,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 161
    },
    "206": {
      "batch_size": 190,
      "lambda_value": 0.5933051286032,
      "learning_rate": 0.0003288523716,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "207": {
      "batch_size": 93,
      "lambda_value": 0.5720078172236,
      "learning_rate": 0.000164626935,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "208": {
      "batch_size": 48,
      "lambda_value": 0.4541612209449,
      "learning_rate": 0.0019654478707,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "209": {
      "batch_size": 912,
      "lambda_value": 0.6501855402958,
      "learning_rate": 0.0001602316999,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 182
    },
    "210": {
      "batch_size": 642,
      "lambda_value": 0.3218750954514,
      "learning_rate": 0.0083602316064,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "211": {
      "batch_size": 221,
      "lambda_value": 0.5098011891873,
      "learning_rate": 0.018540436892,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 105
    },
    "212": {
      "batch_size": 457,
      "lambda_value": 0.4042878294431,
      "learning_rate": 0.0008100329996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 108
    },
    "213": {
      "batch_size": 378,
      "lambda_value": 0.7481965207707,
      "learning_rate": 0.0637641872301,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 330
    },
    "214": {
      "batch_size": 460,
      "lambda_value": 0.2902332847431,
      "learning_rate": 0.0010597119829,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "215": {
      "batch_size": 686,
      "lambda_value": 0.3967036195568,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "216": {
      "batch_size": 150,
      "lambda_value": 0.6873889937377,
      "learning_rate": 0.0912677296139,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 97
    },
    "217": {
      "batch_size": 46,
      "lambda_value": 0.5442420143571,
      "learning_rate": 0.0041065218421,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 626
    },
    "218": {
      "batch_size": 69,
      "lambda_value": 0.0571109552735,
      "learning_rate": 0.0013352212676,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 64
    },
    "219": {
      "batch_size": 534,
      "lambda_value": 0.278817431718,
      "learning_rate": 0.054738169918,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 93
    },
    "220": {
      "batch_size": 637,
      "lambda_value": 0.6218435051405,
      "learning_rate": 0.0392186381003,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 555
    },
    "221": {
      "batch_size": 85,
      "lambda_value": 0.5498388846059,
      "learning_rate": 0.0279389198285,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "222": {
      "batch_size": 65,
      "lambda_value": 0.8734633914291,
      "learning_rate": 0.0026232078723,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 377
    },
    "223": {
      "batch_size": 416,
      "lambda_value": 0.4083321161572,
      "learning_rate": 0.0032544993566,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 113
    },
    "224": {
      "batch_size": 51,
      "lambda_value": 0.1388957563608,
      "learning_rate": 0.000366593903,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "225": {
      "batch_size": 438,
      "lambda_value": 0.561111631904,
      "learning_rate": 0.0006101854537,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 288
    },
    "226": {
      "batch_size": 53,
      "lambda_value": 0.0741220638225,
      "learning_rate": 0.0304844386375,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 200
    },
    "227": {
      "batch_size": 703,
      "lambda_value": 0.6124061564869,
      "learning_rate": 0.0035069436309,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 329
    },
    "228": {
      "batch_size": 710,
      "lambda_value": 0.3471934695898,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "229": {
      "batch_size": 131,
      "lambda_value": 0.3877559393645,
      "learning_rate": 0.0004915697162,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 112
    },
    "230": {
      "batch_size": 437,
      "lambda_value": 0.7574403115985,
      "learning_rate": 0.0087990083065,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 97
    },
    "231": {
      "batch_size": 769,
      "lambda_value": 0.5363343601572,
      "learning_rate": 0.0050951608204,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "232": {
      "batch_size": 435,
      "lambda_value": 0.2176978224086,
      "learning_rate": 0.0263258332272,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 245
    },
    "233": {
      "batch_size": 63,
      "lambda_value": 0.2336341509155,
      "learning_rate": 0.0004226593644,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "234": {
      "batch_size": 49,
      "lambda_value": 0.6806976718747,
      "learning_rate": 0.0069988860332,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 128
    },
    "235": {
      "batch_size": 455,
      "lambda_value": 0.8495232198256,
      "learning_rate": 0.0095403809884,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 110
    },
    "236": {
      "batch_size": 50,
      "lambda_value": 0.1519592189992,
      "learning_rate": 0.0155866756906,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 330
    },
    "237": {
      "batch_size": 32,
      "lambda_value": 0.6276940584115,
      "learning_rate": 0.0001745200849,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "238": {
      "batch_size": 51,
      "lambda_value": 0.4978130092022,
      "learning_rate": 0.0006479136368,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 168
    },
    "239": {
      "batch_size": 344,
      "lambda_value": 0.8248795737402,
      "learning_rate": 0.0002610219568,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 407
    },
    "240": {
      "batch_size": 641,
      "lambda_value": 0.280073581512,
      "learning_rate": 0.0016486629264,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 530
    },
    "241": {
      "batch_size": 71,
      "lambda_value": 0.2886039406427,
      "learning_rate": 0.0043323441692,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 192
    },
    "242": {
      "batch_size": 111,
      "lambda_value": 0.3255187079453,
      "learning_rate": 0.002088036926,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 492
    },
    "243": {
      "batch_size": 70,
      "lambda_value": 0.1630554128522,
      "learning_rate": 0.0003439187365,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 176
    },
    "244": {
      "batch_size": 961,
      "lambda_value": 0.417971716796,
      "learning_rate": 0.0002595916085,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 334
    },
    "245": {
      "batch_size": 294,
      "lambda_value": 0.729133400265,
      "learning_rate": 0.0666283501018,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 590
    },
    "246": {
      "batch_size": 40,
      "lambda_value": 0.7967112548555,
      "learning_rate": 0.0353565829307,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 238
    },
    "247": {
      "batch_size": 780,
      "lambda_value": 0.7083343086535,
      "learning_rate": 0.0326606169,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 105
    },
    "248": {
      "batch_size": 442,
      "lambda_value": 0.5201046118183,
      "learning_rate": 0.0001811518715,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 102
    },
    "249": {
      "batch_size": 816,
      "lambda_value": 0.1006982395772,
      "learning_rate": 0.0001623275114,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 419
    },
    "250": {
      "batch_size": 60,
      "lambda_value": 0.1914094420551,
      "learning_rate": 0.0004606071383,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "251": {
      "batch_size": 753,
      "lambda_value": 0.2435795480092,
      "learning_rate": 0.0004095912949,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 722
    },
    "252": {
      "batch_size": 704,
      "lambda_value": 0.144880579601,
      "learning_rate": 0.0002366997783,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 328
    },
    "253": {
      "batch_size": 102,
      "lambda_value": 0.1894695080254,
      "learning_rate": 0.0026068828701,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "254": {
      "batch_size": 547,
      "lambda_value": 0.4239860884209,
      "learning_rate": 0.0001356935227,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 149
    },
    "255": {
      "batch_size": 86,
      "lambda_value": 0.0045154409777,
      "learning_rate": 0.0030138194765,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 199
    },
    "256": {
      "batch_size": 376,
      "lambda_value": 0.1582188227815,
      "learning_rate": 0.0045780134808,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 524
    },
    "257": {
      "batch_size": 51,
      "lambda_value": 0.9108112310834,
      "learning_rate": 0.0001277308521,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 341
    },
    "258": {
      "batch_size": 765,
      "lambda_value": 0.1783089366069,
      "learning_rate": 0.0005607461675,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 336
    },
    "259": {
      "batch_size": 54,
      "lambda_value": 0.7760907682766,
      "learning_rate": 0.019084000727,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 262
    },
    "260": {
      "batch_size": 782,
      "lambda_value": 0.4208203917144,
      "learning_rate": 0.0344213993223,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 98
    },
    "261": {
      "batch_size": 363,
      "lambda_value": 0.2913048958122,
      "learning_rate": 0.0115743270024,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "262": {
      "batch_size": 387,
      "lambda_value": 0.4808552083858,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 205
    },
    "263": {
      "batch_size": 465,
      "lambda_value": 0.6264949327585,
      "learning_rate": 0.0081532443273,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 208
    },
    "264": {
      "batch_size": 843,
      "lambda_value": 0.2755907586144,
      "learning_rate": 0.0014261932923,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 310
    },
    "265": {
      "batch_size": 534,
      "lambda_value": 0.3886122845379,
      "learning_rate": 0.0011270176996,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 644
    },
    "266": {
      "batch_size": 32,
      "lambda_value": 0.0555308977991,
      "learning_rate": 0.0009211259258,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 260
    },
    "267": {
      "batch_size": 178,
      "lambda_value": 0.7361547279816,
      "learning_rate": 0.0002666736091,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 134
    },
    "268": {
      "batch_size": 540,
      "lambda_value": 0.1126117643449,
      "learning_rate": 0.0042339443161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 461
    },
    "269": {
      "batch_size": 237,
      "lambda_value": 0.9976105432415,
      "learning_rate": 0.0001410508481,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 216
    },
    "270": {
      "batch_size": 334,
      "lambda_value": 0.6608835092183,
      "learning_rate": 0.0007244468698,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 86
    },
    "271": {
      "batch_size": 50,
      "lambda_value": 0.3539514749546,
      "learning_rate": 0.0001473504196,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 737
    },
    "272": {
      "batch_size": 39,
      "lambda_value": 0.0434074217682,
      "learning_rate": 0.0050831004951,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "273": {
      "batch_size": 63,
      "lambda_value": 0.1011284741403,
      "learning_rate": 0.0057869377883,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "274": {
      "batch_size": 758,
      "lambda_value": 0.1773664279903,
      "learning_rate": 0.0002236086227,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 408
    },
    "275": {
      "batch_size": 176,
      "lambda_value": 0.8080018143185,
      "learning_rate": 0.0016972267439,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 87
    },
    "276": {
      "batch_size": 55,
      "lambda_value": 0.0245481552275,
      "learning_rate": 0.0038124057677,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "277": {
      "batch_size": 384,
      "lambda_value": 0.8210957953613,
      "learning_rate": 0.0003022091502,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "278": {
      "batch_size": 58,
      "lambda_value": 0.486513851508,
      "learning_rate": 0.000972353582,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 114
    },
    "279": {
      "batch_size": 463,
      "lambda_value": 0.0886199292692,
      "learning_rate": 0.0028951068882,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 374
    },
    "280": {
      "batch_size": 42,
      "lambda_value": 0.612889262045,
      "learning_rate": 0.0419915713539,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 229
    },
    "281": {
      "batch_size": 34,
      "lambda_value": 0.0110450647425,
      "learning_rate": 0.0037398300895,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 132
    },
    "282": {
      "batch_size": 125,
      "lambda_value": 0.073563589368,
      "learning_rate": 0.0007287942283,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 662
    },
    "283": {
      "batch_size": 105,
      "lambda_value": 0.0244539059088,
      "learning_rate": 0.00837156209,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 270
    },
    "284": {
      "batch_size": 521,
      "lambda_value": 0.8089856629774,
      "learning_rate": 0.0076508599827,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 70
    },
    "285": {
      "batch_size": 35,
      "lambda_value": 0.7719643918195,
      "learning_rate": 0.0017623959647,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "286": {
      "batch_size": 381,
      "lambda_value": 0.3834047145119,
      "learning_rate": 0.0038237497074,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 234
    },
    "287": {
      "batch_size": 413,
      "lambda_value": 0.0535191435259,
      "learning_rate": 0.0377148256786,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 100
    },
    "288": {
      "batch_size": 290,
      "lambda_value": 0.1320726262101,
      "learning_rate": 0.0023254224427,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 81
    },
    "289": {
      "batch_size": 217,
      "lambda_value": 0.9365282264493,
      "learning_rate": 0.0050431783915,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 123
    },
    "290": {
      "batch_size": 544,
      "lambda_value": 0.4355872915023,
      "learning_rate": 0.0103945201972,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 237
    },
    "291": {
      "batch_size": 1011,
      "lambda_value": 0.4804118476289,
      "learning_rate": 0.0005972414841,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 587
    },
    "292": {
      "batch_size": 262,
      "lambda_value": 0.8036567934905,
      "learning_rate": 0.0001911999794,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "293": {
      "batch_size": 522,
      "lambda_value": 0.6810171385066,
      "learning_rate": 0.0363285889677,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 226
    },
    "294": {
      "batch_size": 68,
      "lambda_value": 0.1122108482366,
      "learning_rate": 0.0004946291044,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 66
    },
    "295": {
      "batch_size": 697,
      "lambda_value": 0.7873240093307,
      "learning_rate": 0.0001594353537,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "296": {
      "batch_size": 33,
      "lambda_value": 0.1052317687943,
      "learning_rate": 0.0003359396443,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 148
    },
    "297": {
      "batch_size": 79,
      "lambda_value": 0.4196490252802,
      "learning_rate": 0.0100423699896,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 642
    },
    "298": {
      "batch_size": 148,
      "lambda_value": 0.4101648178047,
      "learning_rate": 0.0170134585068,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "299": {
      "batch_size": 801,
      "lambda_value": 0.833097150633,
      "learning_rate": 0.0862965434581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 217
    },
    "300": {
      "batch_size": 722,
      "lambda_value": 0.0686970530845,
      "learning_rate": 0.000118835971,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 426
    },
    "301": {
      "batch_size": 151,
      "lambda_value": 0.1765449594378,
      "learning_rate": 0.0005750675549,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "302": {
      "batch_size": 90,
      "lambda_value": 0.80285407825,
      "learning_rate": 0.0079014107354,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 97
    },
    "303": {
      "batch_size": 162,
      "lambda_value": 0.8985286621682,
      "learning_rate": 0.0174342739555,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 113
    },
    "304": {
      "batch_size": 621,
      "lambda_value": 0.3360339953694,
      "learning_rate": 0.0001420616796,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "305": {
      "batch_size": 377,
      "lambda_value": 0.0764293009661,
      "learning_rate": 0.0019926714499,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 617
    },
    "306": {
      "batch_size": 571,
      "lambda_value": 0.353016718935,
      "learning_rate": 0.0440802633021,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 155
    },
    "307": {
      "batch_size": 640,
      "lambda_value": 0.0011522622186,
      "learning_rate": 0.0001056551388,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 362
    },
    "308": {
      "batch_size": 661,
      "lambda_value": 0.2229809643412,
      "learning_rate": 0.0018678134703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 379
    },
    "309": {
      "batch_size": 831,
      "lambda_value": 0.2298700683603,
      "learning_rate": 0.0004065521248,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 216
    },
    "310": {
      "batch_size": 861,
      "lambda_value": 0.4043921180506,
      "learning_rate": 0.0053265918237,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 209
    },
    "311": {
      "batch_size": 390,
      "lambda_value": 0.5314194809525,
      "learning_rate": 0.0013443259838,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 242
    },
    "312": {
      "batch_size": 741,
      "lambda_value": 0.7148476112948,
      "learning_rate": 0.0021213467033,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 82
    },
    "313": {
      "batch_size": 849,
      "lambda_value": 0.3099768475404,
      "learning_rate": 0.0006553087978,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 124
    },
    "314": {
      "batch_size": 41,
      "lambda_value": 0.0660568722404,
      "learning_rate": 0.0040521423813,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 160
    },
    "315": {
      "batch_size": 780,
      "lambda_value": 0.2064525755689,
      "learning_rate": 0.0002593296815,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 548
    },
    "316": {
      "batch_size": 277,
      "lambda_value": 0.0994308555944,
      "learning_rate": 0.0011246047718,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 397
    },
    "317": {
      "batch_size": 905,
      "lambda_value": 0.8059902862067,
      "learning_rate": 0.0018633581119,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 416
    },
    "318": {
      "batch_size": 437,
      "lambda_value": 0.7358982056678,
      "learning_rate": 0.0067680718763,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 82
    },
    "319": {
      "batch_size": 659,
      "lambda_value": 0.6213471081522,
      "learning_rate": 0.0060203559486,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 718
    },
    "320": {
      "batch_size": 498,
      "lambda_value": 0.3797333205204,
      "learning_rate": 0.0026146954891,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 235
    },
    "321": {
      "batch_size": 843,
      "lambda_value": 0.1865370858349,
      "learning_rate": 0.0020195892834,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 235
    },
    "322": {
      "batch_size": 47,
      "lambda_value": 0.5182538469109,
      "learning_rate": 0.0089358135385,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 103
    },
    "323": {
      "batch_size": 121,
      "lambda_value": 0.541339152825,
      "learning_rate": 0.0002017361907,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 438
    },
    "324": {
      "batch_size": 418,
      "lambda_value": 0.4806562688073,
      "learning_rate": 0.0001280087689,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 151
    },
    "325": {
      "batch_size": 505,
      "lambda_value": 0.1804699936187,
      "learning_rate": 0.0515528982345,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 512
    },
    "326": {
      "batch_size": 756,
      "lambda_value": 0.0563130399479,
      "learning_rate": 0.0022234197184,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 129
    },
    "327": {
      "batch_size": 58,
      "lambda_value": 0.4944094677612,
      "learning_rate": 0.0002060823911,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 247
    },
    "328": {
      "batch_size": 156,
      "lambda_value": 0.8337801698394,
      "learning_rate": 0.0499835912667,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "329": {
      "batch_size": 443,
      "lambda_value": 0.2533722448979,
      "learning_rate": 0.020662701703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 439
    },
    "330": {
      "batch_size": 60,
      "lambda_value": 0.1306990600206,
      "learning_rate": 0.0065000343887,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 106
    },
    "331": {
      "batch_size": 307,
      "lambda_value": 0.2683873329488,
      "learning_rate": 0.0002594694874,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 107
    },
    "332": {
      "batch_size": 272,
      "lambda_value": 0.0894764468418,
      "learning_rate": 0.0003411331376,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 114
    },
    "333": {
      "batch_size": 257,
      "lambda_value": 0.5553544255642,
      "learning_rate": 0.0002451181655,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 77
    },
    "334": {
      "batch_size": 839,
      "lambda_value": 0.6434392806542,
      "learning_rate": 0.0004632122203,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 847
    },
    "335": {
      "batch_size": 743,
      "lambda_value": 0.215031883639,
      "learning_rate": 0.01152356152,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 619
    },
    "336": {
      "batch_size": 435,
      "lambda_value": 0.6808719321627,
      "learning_rate": 0.0679194637572,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 90
    },
    "337": {
      "batch_size": 717,
      "lambda_value": 0.7887801615769,
      "learning_rate": 0.0005094724236,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 356
    },
    "338": {
      "batch_size": 581,
      "lambda_value": 0.0178358357788,
      "learning_rate": 0.0003477267856,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 103
    },
    "339": {
      "batch_size": 218,
      "lambda_value": 0.1696888094239,
      "learning_rate": 0.052309575188,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 810
    },
    "340": {
      "batch_size": 401,
      "lambda_value": 0.7568355160604,
      "learning_rate": 0.0005585359023,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 520
    },
    "341": {
      "batch_size": 473,
      "lambda_value": 0.4546944937188,
      "learning_rate": 0.0027846284343,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 236
    },
    "342": {
      "batch_size": 350,
      "lambda_value": 0.5559936772425,
      "learning_rate": 0.0100529394688,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 231
    },
    "343": {
      "batch_size": 530,
      "lambda_value": 0.8712284711014,
      "learning_rate": 0.0299782918803,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 218
    },
    "344": {
      "batch_size": 635,
      "lambda_value": 0.6639737340676,
      "learning_rate": 0.0558536530177,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 602
    },
    "345": {
      "batch_size": 395,
      "lambda_value": 0.6229592140736,
      "learning_rate": 0.089214428506,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 76
    },
    "346": {
      "batch_size": 766,
      "lambda_value": 0.2242789140878,
      "learning_rate": 0.0201515256305,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 162
    },
    "347": {
      "batch_size": 50,
      "lambda_value": 0.0852627285054,
      "learning_rate": 0.0308602695679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 125
    },
    "348": {
      "batch_size": 663,
      "lambda_value": 0.2197957309267,
      "learning_rate": 0.0006061254588,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 69
    },
    "349": {
      "batch_size": 52,
      "lambda_value": 0.9515193689156,
      "learning_rate": 0.0002946615193,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "350": {
      "batch_size": 785,
      "lambda_value": 0.6064813774206,
      "learning_rate": 0.0044035167819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 382
    },
    "351": {
      "batch_size": 254,
      "lambda_value": 0.9054709401563,
      "learning_rate": 0.0002642115192,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 665
    },
    "352": {
      "batch_size": 549,
      "lambda_value": 0.674096520909,
      "learning_rate": 0.0188256591059,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 264
    },
    "353": {
      "batch_size": 288,
      "lambda_value": 0.5248121876714,
      "learning_rate": 0.0139608160385,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 103
    },
    "354": {
      "batch_size": 51,
      "lambda_value": 0.4900602108518,
      "learning_rate": 0.0033119573752,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "355": {
      "batch_size": 51,
      "lambda_value": 0.0864264480572,
      "learning_rate": 0.0036006553919,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 339
    },
    "356": {
      "batch_size": 254,
      "lambda_value": 0.1335888882005,
      "learning_rate": 0.0293502269983,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "357": {
      "batch_size": 948,
      "lambda_value": 0.1227161072199,
      "learning_rate": 0.0003706377685,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 814
    },
    "358": {
      "batch_size": 32,
      "lambda_value": 0.5590620740748,
      "learning_rate": 0.0001887486611,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "359": {
      "batch_size": 736,
      "lambda_value": 0.5877962768707,
      "learning_rate": 0.000173328844,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 86
    },
    "360": {
      "batch_size": 96,
      "lambda_value": 0.6820598906435,
      "learning_rate": 0.0137231840115,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "361": {
      "batch_size": 152,
      "lambda_value": 0.4622814816124,
      "learning_rate": 0.0001798692692,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 350
    },
    "362": {
      "batch_size": 584,
      "lambda_value": 0.0554709545819,
      "learning_rate": 0.002867925593,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "363": {
      "batch_size": 381,
      "lambda_value": 0.2759440299071,
      "learning_rate": 0.005834854811,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 315
    },
    "364": {
      "batch_size": 155,
      "lambda_value": 0.0126718534249,
      "learning_rate": 0.068001605758,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 179
    },
    "365": {
      "batch_size": 47,
      "lambda_value": 0.5370564885229,
      "learning_rate": 0.0139226790705,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 86
    },
    "366": {
      "batch_size": 143,
      "lambda_value": 0.3048283869862,
      "learning_rate": 0.0001422244224,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 95
    },
    "367": {
      "batch_size": 47,
      "lambda_value": 0.6556781774429,
      "learning_rate": 0.0165539675071,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 702
    },
    "368": {
      "batch_size": 514,
      "lambda_value": 0.9325032292789,
      "learning_rate": 0.0028561687279,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 196
    },
    "369": {
      "batch_size": 482,
      "lambda_value": 0.3176803263535,
      "learning_rate": 0.0398799204606,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 370
    },
    "370": {
      "batch_size": 361,
      "lambda_value": 0.1317226997102,
      "learning_rate": 0.0079847689986,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 131
    },
    "371": {
      "batch_size": 54,
      "lambda_value": 0.5065217763128,
      "learning_rate": 0.0005039206588,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 133
    },
    "372": {
      "batch_size": 195,
      "lambda_value": 0.1182898929868,
      "learning_rate": 0.0006307295736,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 88
    },
    "373": {
      "batch_size": 615,
      "lambda_value": 0.1713031609062,
      "learning_rate": 0.000327779834,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "374": {
      "batch_size": 210,
      "lambda_value": 0.5999363245098,
      "learning_rate": 0.0001227598618,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 109
    },
    "375": {
      "batch_size": 228,
      "lambda_value": 0.2097534663918,
      "learning_rate": 0.0044908007691,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 98
    },
    "376": {
      "batch_size": 588,
      "lambda_value": 0.6921191491618,
      "learning_rate": 0.0002698674969,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 117
    },
    "377": {
      "batch_size": 827,
      "lambda_value": 0.7449112412928,
      "learning_rate": 0.0088357537548,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 265
    },
    "378": {
      "batch_size": 306,
      "lambda_value": 0.4408812080456,
      "learning_rate": 0.0149767955939,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 136
    },
    "379": {
      "batch_size": 32,
      "lambda_value": 0.2036762467285,
      "learning_rate": 0.0007120181963,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 298
    },
    "380": {
      "batch_size": 44,
      "lambda_value": 0.363548252842,
      "learning_rate": 0.0146518248161,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "381": {
      "batch_size": 392,
      "lambda_value": 0.8530809109696,
      "learning_rate": 0.0068378774336,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 936
    },
    "382": {
      "batch_size": 285,
      "lambda_value": 0.0405681071044,
      "learning_rate": 0.0004518383496,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 354
    },
    "383": {
      "batch_size": 85,
      "lambda_value": 0.4744191316373,
      "learning_rate": 0.0427057286624,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "384": {
      "batch_size": 306,
      "lambda_value": 0.2010288654859,
      "learning_rate": 0.0002725464319,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 371
    },
    "385": {
      "batch_size": 651,
      "lambda_value": 0.8976907571079,
      "learning_rate": 0.0051642740405,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 317
    },
    "386": {
      "batch_size": 315,
      "lambda_value": 0.4797039031948,
      "learning_rate": 0.0407496905524,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "387": {
      "batch_size": 472,
      "lambda_value": 0.4614628028735,
      "learning_rate": 0.0291505470366,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 392
    },
    "388": {
      "batch_size": 458,
      "lambda_value": 0.0995730051319,
      "learning_rate": 0.0039095602593,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 299
    },
    "389": {
      "batch_size": 56,
      "lambda_value": 0.6254740258478,
      "learning_rate": 0.0002301867794,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "390": {
      "batch_size": 693,
      "lambda_value": 0.5463370696629,
      "learning_rate": 0.080973575191,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 84
    },
    "391": {
      "batch_size": 209,
      "lambda_value": 0.5536684799516,
      "learning_rate": 0.0129454765127,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 208
    },
    "392": {
      "batch_size": 58,
      "lambda_value": 0.2603218459407,
      "learning_rate": 0.0001532968651,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "393": {
      "batch_size": 58,
      "lambda_value": 0.1620409311437,
      "learning_rate": 0.0735796471111,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 627
    },
    "394": {
      "batch_size": 36,
      "lambda_value": 0.7723035029214,
      "learning_rate": 0.0009204157787,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "395": {
      "batch_size": 205,
      "lambda_value": 0.7727489068701,
      "learning_rate": 0.0140877870417,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 92
    },
    "396": {
      "batch_size": 657,
      "lambda_value": 0.4360791272104,
      "learning_rate": 0.0003511187487,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 326
    },
    "397": {
      "batch_size": 785,
      "lambda_value": 0.4730155072588,
      "learning_rate": 0.0596107666961,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 71
    },
    "398": {
      "batch_size": 540,
      "lambda_value": 0.5582406622968,
      "learning_rate": 0.0001278093202,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 64
    },
    "399": {
      "batch_size": 366,
      "lambda_value": 0.0727961021739,
      "learning_rate": 0.0402294898411,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "400": {
      "batch_size": 538,
      "lambda_value": 0.9368961678792,
      "learning_rate": 0.0004181432648,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 271
    },
    "401": {
      "batch_size": 757,
      "lambda_value": 0.9354630310557,
      "learning_rate": 0.0888041723761,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 94
    },
    "402": {
      "batch_size": 90,
      "lambda_value": 0.7273220355144,
      "learning_rate": 0.0069453207755,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "403": {
      "batch_size": 844,
      "lambda_value": 0.4824731983172,
      "learning_rate": 0.0003002825268,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 244
    },
    "404": {
      "batch_size": 935,
      "lambda_value": 0.5230953842041,
      "learning_rate": 0.0189973487557,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "405": {
      "batch_size": 995,
      "lambda_value": 0.2168455217586,
      "learning_rate": 0.0027721601592,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 821
    },
    "406": {
      "batch_size": 89,
      "lambda_value": 0.3156048390222,
      "learning_rate": 0.0022198634559,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 194
    },
    "407": {
      "batch_size": 262,
      "lambda_value": 0.8093492297006,
      "learning_rate": 0.0006733972521,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "408": {
      "batch_size": 730,
      "lambda_value": 0.7664908687939,
      "learning_rate": 0.001002848265,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 630
    },
    "409": {
      "batch_size": 154,
      "lambda_value": 0.0952613435301,
      "learning_rate": 0.0006647907154,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 798
    },
    "410": {
      "batch_size": 452,
      "lambda_value": 0.4100844074923,
      "learning_rate": 0.0009856662478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 251
    },
    "411": {
      "batch_size": 231,
      "lambda_value": 0.3275671178479,
      "learning_rate": 0.0002000204542,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 89
    },
    "412": {
      "batch_size": 57,
      "lambda_value": 0.0463424973171,
      "learning_rate": 0.0195673926561,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 200
    },
    "413": {
      "batch_size": 122,
      "lambda_value": 0.110140993716,
      "learning_rate": 0.0026667648338,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 78
    },
    "414": {
      "batch_size": 327,
      "lambda_value": 0.9688895059356,
      "learning_rate": 0.0166234825902,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 359
    },
    "415": {
      "batch_size": 111,
      "lambda_value": 0.1290040542266,
      "learning_rate": 0.0383601008507,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 872
    },
    "416": {
      "batch_size": 554,
      "lambda_value": 0.875718867045,
      "learning_rate": 0.0001409537536,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 913
    },
    "417": {
      "batch_size": 411,
      "lambda_value": 0.6791133254209,
      "learning_rate": 0.003080698466,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 99
    },
    "418": {
      "batch_size": 751,
      "lambda_value": 0.2964694426296,
      "learning_rate": 0.0006311637991,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 964
    },
    "419": {
      "batch_size": 638,
      "lambda_value": 0.809871371246,
      "learning_rate": 0.0012990282325,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 318
    },
    "420": {
      "batch_size": 577,
      "lambda_value": 0.4342900910398,
      "learning_rate": 0.0481822694665,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "421": {
      "batch_size": 45,
      "lambda_value": 0.8518940421392,
      "learning_rate": 0.0079236122108,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 102
    },
    "422": {
      "batch_size": 623,
      "lambda_value": 0.5327950896181,
      "learning_rate": 0.0001028681582,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 87
    },
    "423": {
      "batch_size": 1024,
      "lambda_value": 0.8973291223541,
      "learning_rate": 0.0150597220624,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 217
    },
    "424": {
      "batch_size": 629,
      "lambda_value": 0.0960157047896,
      "learning_rate": 0.0109639694441,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "425": {
      "batch_size": 36,
      "lambda_value": 0.2024840795611,
      "learning_rate": 0.0001960291943,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "426": {
      "batch_size": 607,
      "lambda_value": 0.1383618143966,
      "learning_rate": 0.0026266122149,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 180
    },
    "427": {
      "batch_size": 649,
      "lambda_value": 0.6641101531537,
      "learning_rate": 0.0009131406471,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 121
    },
    "428": {
      "batch_size": 359,
      "lambda_value": 0.777661779255,
      "learning_rate": 0.0012177002287,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 242
    },
    "429": {
      "batch_size": 251,
      "lambda_value": 0.9902859186046,
      "learning_rate": 0.0079500805258,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 104
    },
    "430": {
      "batch_size": 120,
      "lambda_value": 0.6401709483762,
      "learning_rate": 0.0511947218235,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 143
    },
    "431": {
      "batch_size": 625,
      "lambda_value": 0.547026907589,
      "learning_rate": 0.0348766379912,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "432": {
      "batch_size": 318,
      "lambda_value": 0.1976681376706,
      "learning_rate": 0.0078438662891,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 69
    },
    "433": {
      "batch_size": 786,
      "lambda_value": 0.3304246919642,
      "learning_rate": 0.0010188720378,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 200
    },
    "434": {
      "batch_size": 240,
      "lambda_value": 0.3250953520818,
      "learning_rate": 0.0158235846031,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 178
    },
    "435": {
      "batch_size": 519,
      "lambda_value": 0.576923925179,
      "learning_rate": 0.016810576472,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "436": {
      "batch_size": 46,
      "lambda_value": 0.0448820923995,
      "learning_rate": 0.0001231661583,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 180
    },
    "437": {
      "batch_size": 119,
      "lambda_value": 0.4059533800196,
      "learning_rate": 0.0003517171686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "438": {
      "batch_size": 791,
      "lambda_value": 0.8071511713332,
      "learning_rate": 0.0044489428443,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 230
    },
    "439": {
      "batch_size": 68,
      "lambda_value": 0.0779707639047,
      "learning_rate": 0.0461783232972,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 111
    },
    "440": {
      "batch_size": 130,
      "lambda_value": 0.5248121876714,
      "learning_rate": 0.0138796755616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 81
    },
    "441": {
      "batch_size": 816,
      "lambda_value": 0.8717455164644,
      "learning_rate": 0.0001786287251,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 565
    },
    "442": {
      "batch_size": 357,
      "lambda_value": 0.2177427493109,
      "learning_rate": 0.0002357764524,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 477
    },
    "443": {
      "batch_size": 43,
      "lambda_value": 0.8920943096487,
      "learning_rate": 0.0001742152858,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "444": {
      "batch_size": 375,
      "lambda_value": 0.3164903259613,
      "learning_rate": 0.0026873277912,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 259
    },
    "445": {
      "batch_size": 776,
      "lambda_value": 0.2497535308347,
      "learning_rate": 0.0066559651906,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 190
    },
    "446": {
      "batch_size": 716,
      "lambda_value": 0.3506635014426,
      "learning_rate": 0.0006431334297,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 66
    },
    "447": {
      "batch_size": 742,
      "lambda_value": 0.6142547760672,
      "learning_rate": 0.0520499710913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "448": {
      "batch_size": 569,
      "lambda_value": 0.7592947955,
      "learning_rate": 0.0023713833184,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 293
    },
    "449": {
      "batch_size": 880,
      "lambda_value": 0.1861251225005,
      "learning_rate": 0.0156666338249,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 206
    },
    "450": {
      "batch_size": 273,
      "lambda_value": 0.6672254078551,
      "learning_rate": 0.0004944291762,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "451": {
      "batch_size": 593,
      "lambda_value": 0.7127453109276,
      "learning_rate": 0.0014902672058,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "452": {
      "batch_size": 201,
      "lambda_value": 0.1226827152264,
      "learning_rate": 0.001252697061,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 274
    },
    "453": {
      "batch_size": 591,
      "lambda_value": 0.9997697342144,
      "learning_rate": 0.0055276967725,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 76
    },
    "454": {
      "batch_size": 99,
      "lambda_value": 0.4459274560053,
      "learning_rate": 0.0009666060551,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 735
    },
    "455": {
      "batch_size": 105,
      "lambda_value": 0.8333531176676,
      "learning_rate": 0.0019146177708,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "456": {
      "batch_size": 387,
      "lambda_value": 0.5128221535186,
      "learning_rate": 0.0005640287916,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 76
    },
    "457": {
      "batch_size": 615,
      "lambda_value": 0.3993193127766,
      "learning_rate": 0.0376217765146,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 67
    },
    "458": {
      "batch_size": 255,
      "lambda_value": 0.7094066976144,
      "learning_rate": 0.0002327913586,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 544
    },
    "459": {
      "batch_size": 681,
      "lambda_value": 0.9246676613873,
      "learning_rate": 0.0039294321189,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 68
    },
    "460": {
      "batch_size": 33,
      "lambda_value": 0.8937828362628,
      "learning_rate": 0.0216101868293,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 225
    },
    "461": {
      "batch_size": 49,
      "lambda_value": 0.4876675329261,
      "learning_rate": 0.0002844103914,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 315
    },
    "462": {
      "batch_size": 284,
      "lambda_value": 0.4491058389733,
      "learning_rate": 0.0024031864803,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 217
    },
    "463": {
      "batch_size": 135,
      "lambda_value": 0.6408264521199,
      "learning_rate": 0.0063257124081,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 283
    },
    "464": {
      "batch_size": 62,
      "lambda_value": 0.8428736516667,
      "learning_rate": 0.042039485552,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 196
    },
    "465": {
      "batch_size": 67,
      "lambda_value": 0.6231828124433,
      "learning_rate": 0.0146142958703,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 92
    },
    "466": {
      "batch_size": 752,
      "lambda_value": 0.3069827864306,
      "learning_rate": 0.0284171458994,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 436
    },
    "467": {
      "batch_size": 780,
      "lambda_value": 0.5299790087701,
      "learning_rate": 0.0046493160938,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 76
    },
    "468": {
      "batch_size": 38,
      "lambda_value": 0.1431065102332,
      "learning_rate": 0.0581046114744,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 379
    },
    "469": {
      "batch_size": 786,
      "lambda_value": 0.8132945800527,
      "learning_rate": 0.0014645453026,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 885
    },
    "470": {
      "batch_size": 105,
      "lambda_value": 0.8333531176676,
      "learning_rate": 0.0046987969504,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "471": {
      "batch_size": 248,
      "lambda_value": 0.1211002383812,
      "learning_rate": 0.0002548874535,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 493
    },
    "472": {
      "batch_size": 747,
      "lambda_value": 0.2895420787823,
      "learning_rate": 0.003406725168,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "473": {
      "batch_size": 366,
      "lambda_value": 0.0231602598096,
      "learning_rate": 0.0565293919412,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 73
    },
    "474": {
      "batch_size": 270,
      "lambda_value": 0.6163972430054,
      "learning_rate": 0.0893466898303,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 90
    },
    "475": {
      "batch_size": 627,
      "lambda_value": 0.2660401017344,
      "learning_rate": 0.01005651579,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 519
    },
    "476": {
      "batch_size": 754,
      "lambda_value": 0.1722003959012,
      "learning_rate": 0.0088476982204,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "477": {
      "batch_size": 821,
      "lambda_value": 0.3005225087541,
      "learning_rate": 0.0124905205425,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 285
    },
    "478": {
      "batch_size": 187,
      "lambda_value": 0.7683191819873,
      "learning_rate": 0.0725416351251,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 210
    },
    "479": {
      "batch_size": 517,
      "lambda_value": 0.8220084638887,
      "learning_rate": 0.011291352857,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 85
    },
    "480": {
      "batch_size": 48,
      "lambda_value": 0.528443960705,
      "learning_rate": 0.002291534357,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 69
    },
    "481": {
      "batch_size": 41,
      "lambda_value": 0.7926407552659,
      "learning_rate": 0.0284915711954,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "482": {
      "batch_size": 382,
      "lambda_value": 0.9211659506392,
      "learning_rate": 0.0003454820205,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 207
    },
    "483": {
      "batch_size": 601,
      "lambda_value": 0.4144072760939,
      "learning_rate": 0.0058613517741,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 550
    },
    "484": {
      "batch_size": 749,
      "lambda_value": 0.8617159873378,
      "learning_rate": 0.0001836760493,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 388
    },
    "485": {
      "batch_size": 646,
      "lambda_value": 0.6813282339738,
      "learning_rate": 0.0037409291542,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 717
    },
    "486": {
      "batch_size": 660,
      "lambda_value": 0.3948238859662,
      "learning_rate": 0.0105476488257,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 211
    },
    "487": {
      "batch_size": 763,
      "lambda_value": 0.2618861711778,
      "learning_rate": 0.0001097035558,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "488": {
      "batch_size": 150,
      "lambda_value": 0.8173536924154,
      "learning_rate": 0.00237009611,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 301
    },
    "489": {
      "batch_size": 320,
      "lambda_value": 0.9585151788592,
      "learning_rate": 0.0033380807183,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 290
    },
    "490": {
      "batch_size": 808,
      "lambda_value": 0.5863496171544,
      "learning_rate": 0.0043235298889,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 215
    },
    "491": {
      "batch_size": 636,
      "lambda_value": 0.4897793674156,
      "learning_rate": 0.0002278717314,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 127
    },
    "492": {
      "batch_size": 201,
      "lambda_value": 0.4870672671662,
      "learning_rate": 0.0002157903437,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 124
    },
    "493": {
      "batch_size": 46,
      "lambda_value": 0.7206015572169,
      "learning_rate": 0.0057590107986,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 200
    },
    "494": {
      "batch_size": 34,
      "lambda_value": 0.3960054885911,
      "learning_rate": 0.0005350837422,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 469
    },
    "495": {
      "batch_size": 794,
      "lambda_value": 0.8243294603364,
      "learning_rate": 0.0006436728419,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 407
    },
    "496": {
      "batch_size": 336,
      "lambda_value": 0.8060632521795,
      "learning_rate": 0.0003273879467,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 115
    },
    "497": {
      "batch_size": 288,
      "lambda_value": 0.0714829915638,
      "learning_rate": 0.0016135141591,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 446
    },
    "498": {
      "batch_size": 516,
      "lambda_value": 0.6693324959229,
      "learning_rate": 0.0356662603433,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 211
    },
    "499": {
      "batch_size": 554,
      "lambda_value": 0.2285299370789,
      "learning_rate": 0.004677318249,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 660
    },
    "500": {
      "batch_size": 605,
      "lambda_value": 0.6508257156304,
      "learning_rate": 0.0001031788835,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "501": {
      "batch_size": 53,
      "lambda_value": 0.6823513948608,
      "learning_rate": 0.0001572545687,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 303
    },
    "502": {
      "batch_size": 71,
      "lambda_value": 0.5573084349525,
      "learning_rate": 0.0505152106799,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 163
    },
    "503": {
      "batch_size": 149,
      "lambda_value": 0.6279608283276,
      "learning_rate": 0.0004457136545,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "504": {
      "batch_size": 411,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0105826134632,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 71
    },
    "505": {
      "batch_size": 35,
      "lambda_value": 0.6560284497133,
      "learning_rate": 0.0129861552471,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 67
    },
    "506": {
      "batch_size": 780,
      "lambda_value": 0.4725842164371,
      "learning_rate": 0.0055288337335,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 66
    },
    "507": {
      "batch_size": 32,
      "lambda_value": 0.51600824763,
      "learning_rate": 0.0001906758121,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 73
    },
    "508": {
      "batch_size": 351,
      "lambda_value": 0.9533456854678,
      "learning_rate": 0.0045660379397,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 75
    },
    "509": {
      "batch_size": 55,
      "lambda_value": 0.6229731445495,
      "learning_rate": 0.0038847150378,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 474
    },
    "510": {
      "batch_size": 213,
      "lambda_value": 0.1689956184691,
      "learning_rate": 0.0047092230045,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 411
    },
    "511": {
      "batch_size": 130,
      "lambda_value": 0.5279324707843,
      "learning_rate": 0.0138796755616,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 67
    },
    "512": {
      "batch_size": 421,
      "lambda_value": 0.3758516095051,
      "learning_rate": 0.0362929038997,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "513": {
      "batch_size": 978,
      "lambda_value": 0.0744104096509,
      "learning_rate": 0.0260585675862,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 150
    },
    "514": {
      "batch_size": 127,
      "lambda_value": 0.633238947746,
      "learning_rate": 0.0018035530187,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 215
    },
    "515": {
      "batch_size": 167,
      "lambda_value": 0.3906399533428,
      "learning_rate": 0.0070318592816,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 425
    },
    "516": {
      "batch_size": 849,
      "lambda_value": 0.0041035960818,
      "learning_rate": 0.0050620300633,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 286
    },
    "517": {
      "batch_size": 423,
      "lambda_value": 0.6921300115593,
      "learning_rate": 0.0002602116217,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "518": {
      "batch_size": 53,
      "lambda_value": 0.5964385451403,
      "learning_rate": 0.0001029394984,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 137
    },
    "519": {
      "batch_size": 56,
      "lambda_value": 0.5470413172319,
      "learning_rate": 0.0007782224297,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 96
    },
    "520": {
      "batch_size": 190,
      "lambda_value": 0.6009572485473,
      "learning_rate": 0.0005319832345,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "521": {
      "batch_size": 250,
      "lambda_value": 0.0427621731005,
      "learning_rate": 0.0003348878331,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 68
    },
    "522": {
      "batch_size": 582,
      "lambda_value": 0.5521956202541,
      "learning_rate": 0.0002917173747,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "523": {
      "batch_size": 534,
      "lambda_value": 0.8609185401172,
      "learning_rate": 0.0875999392673,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 412
    },
    "524": {
      "batch_size": 344,
      "lambda_value": 0.5250529069188,
      "learning_rate": 0.0058940740331,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 127
    },
    "525": {
      "batch_size": 324,
      "lambda_value": 0.5930429174166,
      "learning_rate": 0.0083833898211,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 479
    },
    "526": {
      "batch_size": 38,
      "lambda_value": 0.6107790697176,
      "learning_rate": 0.0911637803703,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 180
    },
    "527": {
      "batch_size": 351,
      "lambda_value": 0.6808719321627,
      "learning_rate": 0.0750706909129,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "528": {
      "batch_size": 808,
      "lambda_value": 0.707144460687,
      "learning_rate": 0.0258381834066,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 241
    },
    "529": {
      "batch_size": 865,
      "lambda_value": 0.2229286798622,
      "learning_rate": 0.0232998074386,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 150
    },
    "530": {
      "batch_size": 261,
      "lambda_value": 0.4159376482463,
      "learning_rate": 0.0006375142568,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 170
    },
    "531": {
      "batch_size": 246,
      "lambda_value": 0.7487399085362,
      "learning_rate": 0.0006982706335,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "532": {
      "batch_size": 819,
      "lambda_value": 0.1715721745315,
      "learning_rate": 0.0027521521809,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "533": {
      "batch_size": 43,
      "lambda_value": 0.8504601430568,
      "learning_rate": 0.0079236122108,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 102
    },
    "534": {
      "batch_size": 703,
      "lambda_value": 0.2938889825625,
      "learning_rate": 0.0473577942329,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 109
    },
    "535": {
      "batch_size": 43,
      "lambda_value": 0.7450500773386,
      "learning_rate": 0.0137231840115,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "536": {
      "batch_size": 553,
      "lambda_value": 0.1839127426189,
      "learning_rate": 0.0004573244322,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 496
    },
    "537": {
      "batch_size": 864,
      "lambda_value": 0.1355567992583,
      "learning_rate": 0.0002557704953,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 137
    },
    "538": {
      "batch_size": 67,
      "lambda_value": 0.4009078748603,
      "learning_rate": 0.0002421082016,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "539": {
      "batch_size": 66,
      "lambda_value": 0.5588370986384,
      "learning_rate": 0.0001524174094,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 252
    },
    "540": {
      "batch_size": 910,
      "lambda_value": 0.2157809687138,
      "learning_rate": 0.0362462794097,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 131
    },
    "541": {
      "batch_size": 335,
      "lambda_value": 0.0713637891236,
      "learning_rate": 0.0001242626529,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 323
    },
    "542": {
      "batch_size": 106,
      "lambda_value": 0.8351784921736,
      "learning_rate": 0.0028009439295,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 585
    },
    "543": {
      "batch_size": 383,
      "lambda_value": 0.7315931494257,
      "learning_rate": 0.0056857393049,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 118
    },
    "544": {
      "batch_size": 39,
      "lambda_value": 0.9842518610153,
      "learning_rate": 0.0078260849563,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 183
    },
    "545": {
      "batch_size": 545,
      "lambda_value": 0.4027028162047,
      "learning_rate": 0.0016708502536,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 184
    },
    "546": {
      "batch_size": 151,
      "lambda_value": 0.9868537159485,
      "learning_rate": 0.0009464379409,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 503
    },
    "547": {
      "batch_size": 634,
      "lambda_value": 0.4017456094133,
      "learning_rate": 0.0029535991258,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 421
    },
    "548": {
      "batch_size": 515,
      "lambda_value": 0.7551166032471,
      "learning_rate": 0.0060032651755,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 475
    },
    "549": {
      "batch_size": 722,
      "lambda_value": 0.8463995112482,
      "learning_rate": 0.0519367988348,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 642
    },
    "550": {
      "batch_size": 183,
      "lambda_value": 0.2010235605655,
      "learning_rate": 0.0060236499344,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 348
    },
    "551": {
      "batch_size": 1010,
      "lambda_value": 0.5323793352116,
      "learning_rate": 0.0136617144728,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 878
    },
    "552": {
      "batch_size": 493,
      "lambda_value": 0.1784524747634,
      "learning_rate": 0.000458088078,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 265
    },
    "553": {
      "batch_size": 626,
      "lambda_value": 0.6775234188135,
      "learning_rate": 0.0023992424321,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 224
    },
    "554": {
      "batch_size": 514,
      "lambda_value": 0.6127213312821,
      "learning_rate": 0.0053670246264,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 324
    },
    "555": {
      "batch_size": 646,
      "lambda_value": 0.0952707865123,
      "learning_rate": 0.0001140611149,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "556": {
      "batch_size": 382,
      "lambda_value": 0.4292983157616,
      "learning_rate": 0.0207580568195,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 75
    },
    "557": {
      "batch_size": 1019,
      "lambda_value": 0.5181932269457,
      "learning_rate": 0.0827024986497,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 233
    },
    "558": {
      "batch_size": 202,
      "lambda_value": 0.6258346776881,
      "learning_rate": 0.0071600724112,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 80
    },
    "559": {
      "batch_size": 591,
      "lambda_value": 0.6928195943897,
      "learning_rate": 0.0038775370445,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "560": {
      "batch_size": 262,
      "lambda_value": 0.7514538147241,
      "learning_rate": 0.0057105989154,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 348
    },
    "561": {
      "batch_size": 591,
      "lambda_value": 0.4663507906931,
      "learning_rate": 0.0010208140141,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 103
    },
    "562": {
      "batch_size": 459,
      "lambda_value": 0.5065284633963,
      "learning_rate": 0.0001309105975,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 116
    },
    "563": {
      "batch_size": 58,
      "lambda_value": 0.6124199042013,
      "learning_rate": 0.0001332015913,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 405
    },
    "564": {
      "batch_size": 915,
      "lambda_value": 0.2951589262888,
      "learning_rate": 0.0063898385009,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 202
    },
    "565": {
      "batch_size": 382,
      "lambda_value": 0.9559982082686,
      "learning_rate": 0.0116638076106,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 195
    },
    "566": {
      "batch_size": 519,
      "lambda_value": 0.9192806086684,
      "learning_rate": 0.0014492529953,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 70
    },
    "567": {
      "batch_size": 213,
      "lambda_value": 0.3077314564176,
      "learning_rate": 0.00026303672,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 458
    },
    "568": {
      "batch_size": 49,
      "lambda_value": 0.0198185276211,
      "learning_rate": 0.0098074043409,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 101
    },
    "569": {
      "batch_size": 64,
      "lambda_value": 0.7273220355144,
      "learning_rate": 0.0076542300478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 73
    },
    "570": {
      "batch_size": 317,
      "lambda_value": 0.0713910004827,
      "learning_rate": 0.0349222638618,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "571": {
      "batch_size": 53,
      "lambda_value": 0.1067038176195,
      "learning_rate": 0.0111918408176,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 138
    },
    "572": {
      "batch_size": 882,
      "lambda_value": 0.3966846670944,
      "learning_rate": 0.0455676229708,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 75
    },
    "573": {
      "batch_size": 38,
      "lambda_value": 0.93987003705,
      "learning_rate": 0.0136903551507,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 98
    },
    "574": {
      "batch_size": 291,
      "lambda_value": 0.1364949636771,
      "learning_rate": 0.0407867870963,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "575": {
      "batch_size": 366,
      "lambda_value": 0.9050934851493,
      "learning_rate": 0.0520880493928,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 206
    },
    "576": {
      "batch_size": 122,
      "lambda_value": 0.8252295483668,
      "learning_rate": 0.066100331554,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 122
    },
    "577": {
      "batch_size": 602,
      "lambda_value": 0.2976810297754,
      "learning_rate": 0.0759563643287,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 65
    },
    "578": {
      "batch_size": 285,
      "lambda_value": 0.1394542476688,
      "learning_rate": 0.071252528928,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 834
    },
    "579": {
      "batch_size": 57,
      "lambda_value": 0.9340619361723,
      "learning_rate": 0.0010335548559,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 67
    },
    "580": {
      "batch_size": 663,
      "lambda_value": 0.1975412227261,
      "learning_rate": 0.0005495859735,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "581": {
      "batch_size": 786,
      "lambda_value": 0.9722149595521,
      "learning_rate": 0.0336075344769,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "582": {
      "batch_size": 892,
      "lambda_value": 0.7512961906375,
      "learning_rate": 0.0005511465198,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 320
    },
    "583": {
      "batch_size": 111,
      "lambda_value": 0.1835129686986,
      "learning_rate": 0.0393040798424,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 535
    },
    "584": {
      "batch_size": 73,
      "lambda_value": 0.1766041807861,
      "learning_rate": 0.0010935442683,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 377
    },
    "585": {
      "batch_size": 557,
      "lambda_value": 0.1012348045489,
      "learning_rate": 0.000402564444,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 137
    },
    "586": {
      "batch_size": 290,
      "lambda_value": 0.7480890180051,
      "learning_rate": 0.0183968736202,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 218
    },
    "587": {
      "batch_size": 185,
      "lambda_value": 0.4622883416581,
      "learning_rate": 0.0026867043175,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 375
    },
    "588": {
      "batch_size": 240,
      "lambda_value": 0.729133400265,
      "learning_rate": 0.0685480668032,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 428
    },
    "589": {
      "batch_size": 753,
      "lambda_value": 0.9675732057788,
      "learning_rate": 0.0001863465964,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 77
    },
    "590": {
      "batch_size": 460,
      "lambda_value": 0.2519924860831,
      "learning_rate": 0.0143034363919,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 105
    },
    "591": {
      "batch_size": 49,
      "lambda_value": 0.2972077500713,
      "learning_rate": 0.0241679865324,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 70
    },
    "592": {
      "batch_size": 58,
      "lambda_value": 0.6542186168601,
      "learning_rate": 0.008503359008,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 963
    },
    "593": {
      "batch_size": 639,
      "lambda_value": 0.4243411681477,
      "learning_rate": 0.000652620617,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 204
    },
    "594": {
      "batch_size": 845,
      "lambda_value": 0.7129552076351,
      "learning_rate": 0.0331152353859,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 212
    },
    "595": {
      "batch_size": 104,
      "lambda_value": 0.9541903980346,
      "learning_rate": 0.0515505592913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 520
    },
    "596": {
      "batch_size": 740,
      "lambda_value": 0.0836379112516,
      "learning_rate": 0.0019468886144,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 126
    },
    "597": {
      "batch_size": 647,
      "lambda_value": 0.320124945835,
      "learning_rate": 0.0092679210172,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 384
    },
    "598": {
      "batch_size": 266,
      "lambda_value": 0.8650823766705,
      "learning_rate": 0.0059221015506,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 735
    },
    "599": {
      "batch_size": 855,
      "lambda_value": 0.8509205817819,
      "learning_rate": 0.0007910970692,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "600": {
      "batch_size": 68,
      "lambda_value": 0.1895907174494,
      "learning_rate": 0.0049274789056,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 464
    },
    "601": {
      "batch_size": 276,
      "lambda_value": 0.5824603455951,
      "learning_rate": 0.0301048087959,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 142
    },
    "602": {
      "batch_size": 59,
      "lambda_value": 0.3450738954337,
      "learning_rate": 0.0007146675871,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 168
    },
    "603": {
      "batch_size": 542,
      "lambda_value": 0.472775527792,
      "learning_rate": 0.0019627530561,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 434
    },
    "604": {
      "batch_size": 369,
      "lambda_value": 0.3454924582211,
      "learning_rate": 0.0035454173984,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 108
    },
    "605": {
      "batch_size": 72,
      "lambda_value": 0.4800990502176,
      "learning_rate": 0.000203321345,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "606": {
      "batch_size": 335,
      "lambda_value": 0.1959318472423,
      "learning_rate": 0.0001565276098,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 345
    },
    "607": {
      "batch_size": 356,
      "lambda_value": 0.3030382732656,
      "learning_rate": 0.0096189942399,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 69
    },
    "608": {
      "batch_size": 540,
      "lambda_value": 0.7654646982086,
      "learning_rate": 0.0011513696149,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 112
    },
    "609": {
      "batch_size": 247,
      "lambda_value": 0.972883763497,
      "learning_rate": 0.0069015643178,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 182
    },
    "610": {
      "batch_size": 179,
      "lambda_value": 0.0985055459863,
      "learning_rate": 0.000530470953,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 560
    },
    "611": {
      "batch_size": 701,
      "lambda_value": 0.130938355233,
      "learning_rate": 0.0047236813508,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "612": {
      "batch_size": 54,
      "lambda_value": 0.4522632190449,
      "learning_rate": 0.0062971673124,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 222
    },
    "613": {
      "batch_size": 174,
      "lambda_value": 0.1696888094239,
      "learning_rate": 0.0418778065088,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 623
    },
    "614": {
      "batch_size": 42,
      "lambda_value": 0.0347211695278,
      "learning_rate": 0.0006941260505,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 237
    },
    "615": {
      "batch_size": 730,
      "lambda_value": 0.9770952291832,
      "learning_rate": 0.0001315068271,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "616": {
      "batch_size": 612,
      "lambda_value": 0.4680569656988,
      "learning_rate": 0.0517909049795,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 193
    },
    "617": {
      "batch_size": 196,
      "lambda_value": 0.0797450362584,
      "learning_rate": 0.0018094742292,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 500
    },
    "618": {
      "batch_size": 78,
      "lambda_value": 0.2724218602519,
      "learning_rate": 0.0478137783426,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 137
    },
    "619": {
      "batch_size": 756,
      "lambda_value": 0.9420858840928,
      "learning_rate": 0.0006023331186,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 402
    },
    "620": {
      "batch_size": 88,
      "lambda_value": 0.937643472628,
      "learning_rate": 0.0612301491406,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 215
    },
    "621": {
      "batch_size": 51,
      "lambda_value": 0.4706311807226,
      "learning_rate": 0.0007184177837,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 87
    },
    "622": {
      "batch_size": 74,
      "lambda_value": 0.7113663845488,
      "learning_rate": 0.0120857975585,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 550
    },
    "623": {
      "batch_size": 277,
      "lambda_value": 0.838696582428,
      "learning_rate": 0.058607253832,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 203
    },
    "624": {
      "batch_size": 413,
      "lambda_value": 0.4774159874337,
      "learning_rate": 0.0004966853478,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 301
    },
    "625": {
      "batch_size": 248,
      "lambda_value": 0.2051367903944,
      "learning_rate": 0.008597137403,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 157
    },
    "626": {
      "batch_size": 959,
      "lambda_value": 0.6755743933782,
      "learning_rate": 0.0024711589148,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 445
    },
    "627": {
      "batch_size": 275,
      "lambda_value": 0.2869652838949,
      "learning_rate": 0.0053744653207,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "628": {
      "batch_size": 419,
      "lambda_value": 0.468935895119,
      "learning_rate": 0.000535917298,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 174
    },
    "629": {
      "batch_size": 276,
      "lambda_value": 0.787561736109,
      "learning_rate": 0.009868449491,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "630": {
      "batch_size": 747,
      "lambda_value": 0.1128036239417,
      "learning_rate": 0.0707874243596,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 156
    },
    "631": {
      "batch_size": 722,
      "lambda_value": 0.6381573184394,
      "learning_rate": 0.0003578055478,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 117
    },
    "632": {
      "batch_size": 552,
      "lambda_value": 0.7576951377322,
      "learning_rate": 0.0975940182231,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 553
    },
    "633": {
      "batch_size": 143,
      "lambda_value": 0.3252262614562,
      "learning_rate": 0.0002601871373,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 81
    },
    "634": {
      "batch_size": 55,
      "lambda_value": 0.0979980576943,
      "learning_rate": 0.0002676983581,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 196
    },
    "635": {
      "batch_size": 799,
      "lambda_value": 0.0914512617954,
      "learning_rate": 0.0067604574612,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 869
    },
    "636": {
      "batch_size": 110,
      "lambda_value": 0.9494296894906,
      "learning_rate": 0.0933788153474,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 342
    },
    "637": {
      "batch_size": 242,
      "lambda_value": 0.1645240374282,
      "learning_rate": 0.0001743494646,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 183
    },
    "638": {
      "batch_size": 135,
      "lambda_value": 0.7785097535491,
      "learning_rate": 0.0015335239742,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 203
    },
    "639": {
      "batch_size": 581,
      "lambda_value": 0.3424489730732,
      "learning_rate": 0.0628392937014,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 591
    },
    "640": {
      "batch_size": 450,
      "lambda_value": 0.8686301968519,
      "learning_rate": 0.0002490210408,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 165
    },
    "641": {
      "batch_size": 480,
      "lambda_value": 0.0249229856679,
      "learning_rate": 0.0080150139811,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 832
    },
    "642": {
      "batch_size": 418,
      "lambda_value": 0.7096578575302,
      "learning_rate": 0.0118689383411,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "643": {
      "batch_size": 603,
      "lambda_value": 0.3848042200289,
      "learning_rate": 0.0119798941429,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 118
    },
    "644": {
      "batch_size": 499,
      "lambda_value": 0.1558490208903,
      "learning_rate": 0.0005926823678,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "645": {
      "batch_size": 995,
      "lambda_value": 0.256703725783,
      "learning_rate": 0.0023740627403,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 625
    },
    "646": {
      "batch_size": 246,
      "lambda_value": 0.8576480829962,
      "learning_rate": 0.0002610219568,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 270
    },
    "647": {
      "batch_size": 331,
      "lambda_value": 0.2529248176737,
      "learning_rate": 0.0046653863913,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "648": {
      "batch_size": 598,
      "lambda_value": 0.6090657845907,
      "learning_rate": 0.0010543409122,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "649": {
      "batch_size": 862,
      "lambda_value": 0.0380175296012,
      "learning_rate": 0.041557335749,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 313
    },
    "650": {
      "batch_size": 172,
      "lambda_value": 0.2461939552216,
      "learning_rate": 0.052017125424,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 302
    },
    "651": {
      "batch_size": 73,
      "lambda_value": 0.7470946574587,
      "learning_rate": 0.0002429181124,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 621
    },
    "652": {
      "batch_size": 530,
      "lambda_value": 0.4818459073778,
      "learning_rate": 0.0061287523169,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 118
    },
    "653": {
      "batch_size": 761,
      "lambda_value": 0.5714394919992,
      "learning_rate": 0.0111656909616,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 306
    },
    "654": {
      "batch_size": 379,
      "lambda_value": 0.675283456528,
      "learning_rate": 0.0010197010328,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 143
    },
    "655": {
      "batch_size": 920,
      "lambda_value": 0.8798775134851,
      "learning_rate": 0.0079752983744,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 323
    },
    "656": {
      "batch_size": 149,
      "lambda_value": 0.7111103424448,
      "learning_rate": 0.0004604338038,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 180
    },
    "657": {
      "batch_size": 266,
      "lambda_value": 0.2021631301137,
      "learning_rate": 0.049459953253,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 138
    },
    "658": {
      "batch_size": 491,
      "lambda_value": 0.0178358357788,
      "learning_rate": 0.000688299046,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "659": {
      "batch_size": 849,
      "lambda_value": 0.9333043667865,
      "learning_rate": 0.004602992178,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 673
    },
    "660": {
      "batch_size": 824,
      "lambda_value": 0.1426025314378,
      "learning_rate": 0.0024798644553,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 448
    },
    "661": {
      "batch_size": 51,
      "lambda_value": 0.2853731288485,
      "learning_rate": 0.0150933643819,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 302
    },
    "662": {
      "batch_size": 36,
      "lambda_value": 0.7186132579807,
      "learning_rate": 0.0149887638244,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "663": {
      "batch_size": 471,
      "lambda_value": 0.0434289189987,
      "learning_rate": 0.0220228045306,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 210
    },
    "664": {
      "batch_size": 231,
      "lambda_value": 0.1333294873512,
      "learning_rate": 0.0003116520664,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 105
    },
    "665": {
      "batch_size": 885,
      "lambda_value": 0.0287526203974,
      "learning_rate": 0.000646149194,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 311
    },
    "666": {
      "batch_size": 289,
      "lambda_value": 0.5098365217722,
      "learning_rate": 0.0173959693985,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 161
    },
    "667": {
      "batch_size": 545,
      "lambda_value": 0.1790465673948,
      "learning_rate": 0.01152356152,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 348
    },
    "668": {
      "batch_size": 598,
      "lambda_value": 0.5962372605178,
      "learning_rate": 0.0003361725475,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 611
    },
    "669": {
      "batch_size": 359,
      "lambda_value": 0.2597217108998,
      "learning_rate": 0.0003133878261,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 158
    },
    "670": {
      "batch_size": 78,
      "lambda_value": 0.1933304620614,
      "learning_rate": 0.0016145014932,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 239
    },
    "671": {
      "batch_size": 680,
      "lambda_value": 0.5393072453416,
      "learning_rate": 0.0582498957569,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 99
    },
    "672": {
      "batch_size": 843,
      "lambda_value": 0.1865370858349,
      "learning_rate": 0.0018258624516,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 135
    },
    "673": {
      "batch_size": 643,
      "lambda_value": 0.5315968413064,
      "learning_rate": 0.0037188641341,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 83
    },
    "674": {
      "batch_size": 40,
      "lambda_value": 0.5632911300415,
      "learning_rate": 0.0015122606034,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 570
    },
    "675": {
      "batch_size": 60,
      "lambda_value": 0.5251155220329,
      "learning_rate": 0.000688562193,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 83
    },
    "676": {
      "batch_size": 432,
      "lambda_value": 0.5335032753074,
      "learning_rate": 0.0002187393567,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "677": {
      "batch_size": 33,
      "lambda_value": 0.8969473837759,
      "learning_rate": 0.0002270540924,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 289
    },
    "678": {
      "batch_size": 55,
      "lambda_value": 0.4712334805465,
      "learning_rate": 0.0028116145161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 217
    },
    "679": {
      "batch_size": 290,
      "lambda_value": 0.7578449357539,
      "learning_rate": 0.001747683087,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 625
    },
    "680": {
      "batch_size": 277,
      "lambda_value": 0.8341862704396,
      "learning_rate": 0.0044854410519,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 665
    },
    "681": {
      "batch_size": 383,
      "lambda_value": 0.2795991865869,
      "learning_rate": 0.0003051949076,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 302
    },
    "682": {
      "batch_size": 700,
      "lambda_value": 0.4458432171074,
      "learning_rate": 0.0475875046668,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 620
    },
    "683": {
      "batch_size": 57,
      "lambda_value": 0.9923115725844,
      "learning_rate": 0.0412396742542,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 319
    },
    "684": {
      "batch_size": 582,
      "lambda_value": 0.0882312426492,
      "learning_rate": 0.0006257629424,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 91
    },
    "685": {
      "batch_size": 482,
      "lambda_value": 0.3738430101925,
      "learning_rate": 0.0097649928648,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 530
    },
    "686": {
      "batch_size": 386,
      "lambda_value": 0.9370814240227,
      "learning_rate": 0.0721080020906,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 256
    },
    "687": {
      "batch_size": 504,
      "lambda_value": 0.8642676295756,
      "learning_rate": 0.0004480591119,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 123
    },
    "688": {
      "batch_size": 971,
      "lambda_value": 0.053336558594,
      "learning_rate": 0.0146424832105,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 78
    },
    "689": {
      "batch_size": 353,
      "lambda_value": 0.4713850033628,
      "learning_rate": 0.0103566918153,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "690": {
      "batch_size": 647,
      "lambda_value": 0.1353366297365,
      "learning_rate": 0.0632788950233,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 138
    },
    "691": {
      "batch_size": 96,
      "lambda_value": 0.3646827688118,
      "learning_rate": 0.014687132835,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 72
    },
    "692": {
      "batch_size": 940,
      "lambda_value": 0.3854924768875,
      "learning_rate": 0.0004367657386,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 257
    },
    "693": {
      "batch_size": 133,
      "lambda_value": 0.0899519065497,
      "learning_rate": 0.0021051415194,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 182
    },
    "694": {
      "batch_size": 346,
      "lambda_value": 0.6981127794005,
      "learning_rate": 0.0011047440656,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 101
    },
    "695": {
      "batch_size": 703,
      "lambda_value": 0.554813140065,
      "learning_rate": 0.0001226958649,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 549
    },
    "696": {
      "batch_size": 113,
      "lambda_value": 0.739237688008,
      "learning_rate": 0.0041487062879,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 726
    },
    "697": {
      "batch_size": 599,
      "lambda_value": 0.5191855109882,
      "learning_rate": 0.0001499445936,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 147
    },
    "698": {
      "batch_size": 338,
      "lambda_value": 0.4438493610531,
      "learning_rate": 0.0027872253733,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 177
    },
    "699": {
      "batch_size": 68,
      "lambda_value": 0.1473946081284,
      "learning_rate": 0.0006243714092,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 375
    },
    "700": {
      "batch_size": 204,
      "lambda_value": 0.2078968143643,
      "learning_rate": 0.0081190583679,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 146
    },
    "701": {
      "batch_size": 77,
      "lambda_value": 0.2456245736743,
      "learning_rate": 0.0028369801276,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 890
    },
    "702": {
      "batch_size": 750,
      "lambda_value": 0.662500151442,
      "learning_rate": 0.0052131932898,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 466
    },
    "703": {
      "batch_size": 227,
      "lambda_value": 0.6147778112373,
      "learning_rate": 0.0005688211075,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 506
    },
    "704": {
      "batch_size": 189,
      "lambda_value": 0.404846374353,
      "learning_rate": 0.044302151,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 505
    },
    "705": {
      "batch_size": 86,
      "lambda_value": 0.8077667139698,
      "learning_rate": 0.058607253832,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 106
    },
    "706": {
      "batch_size": 541,
      "lambda_value": 0.1192207997063,
      "learning_rate": 0.000266174872,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 186
    },
    "707": {
      "batch_size": 97,
      "lambda_value": 0.043774452953,
      "learning_rate": 0.0329189063269,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 91
    },
    "708": {
      "batch_size": 69,
      "lambda_value": 0.5912669832802,
      "learning_rate": 0.0760680116102,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 308
    },
    "709": {
      "batch_size": 250,
      "lambda_value": 0.9992595000691,
      "learning_rate": 0.0039991080728,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 89
    },
    "710": {
      "batch_size": 54,
      "lambda_value": 0.0574950683369,
      "learning_rate": 0.0123747046447,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 225
    },
    "711": {
      "batch_size": 45,
      "lambda_value": 0.5335333365546,
      "learning_rate": 0.0001175388961,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 929
    },
    "712": {
      "batch_size": 291,
      "lambda_value": 0.0432434563493,
      "learning_rate": 0.0001198982341,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 309
    },
    "713": {
      "batch_size": 416,
      "lambda_value": 0.2927437762592,
      "learning_rate": 0.0004165106581,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 864
    },
    "714": {
      "batch_size": 171,
      "lambda_value": 0.7017369627446,
      "learning_rate": 0.0262479399797,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 735
    },
    "715": {
      "batch_size": 327,
      "lambda_value": 0.773639327066,
      "learning_rate": 0.0486446136112,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 137
    },
    "716": {
      "batch_size": 32,
      "lambda_value": 0.519490717935,
      "learning_rate": 0.0664075672294,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 152
    },
    "717": {
      "batch_size": 594,
      "lambda_value": 0.7676942789801,
      "learning_rate": 0.0002070408086,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 749
    },
    "718": {
      "batch_size": 501,
      "lambda_value": 0.7124630665623,
      "learning_rate": 0.0001839069405,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 101
    },
    "719": {
      "batch_size": 804,
      "lambda_value": 0.0900642859186,
      "learning_rate": 0.0576220055426,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 624
    },
    "720": {
      "batch_size": 630,
      "lambda_value": 0.0070373936517,
      "learning_rate": 0.0001801942713,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "721": {
      "batch_size": 738,
      "lambda_value": 0.6294477689627,
      "learning_rate": 0.0014144820323,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 66
    },
    "722": {
      "batch_size": 410,
      "lambda_value": 0.9962139099619,
      "learning_rate": 0.0224712593796,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 199
    },
    "723": {
      "batch_size": 61,
      "lambda_value": 0.3259198240339,
      "learning_rate": 0.0005350837422,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 325
    },
    "724": {
      "batch_size": 75,
      "lambda_value": 0.6624668076433,
      "learning_rate": 0.0002205744543,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 281
    },
    "725": {
      "batch_size": 707,
      "lambda_value": 0.7362812362773,
      "learning_rate": 0.0048651223548,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 175
    },
    "726": {
      "batch_size": 45,
      "lambda_value": 0.6401594394208,
      "learning_rate": 0.0397372858533,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 68
    },
    "727": {
      "batch_size": 43,
      "lambda_value": 0.2010235605655,
      "learning_rate": 0.0090989475121,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 257
    },
    "728": {
      "batch_size": 239,
      "lambda_value": 0.0519355181158,
      "learning_rate": 0.0017014566808,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 613
    },
    "729": {
      "batch_size": 657,
      "lambda_value": 0.7903425788755,
      "learning_rate": 0.0168454081159,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 66
    },
    "730": {
      "batch_size": 455,
      "lambda_value": 0.0905484627769,
      "learning_rate": 0.0006288743992,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 67
    },
    "731": {
      "batch_size": 320,
      "lambda_value": 0.4594254672559,
      "learning_rate": 0.0638503575764,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 257
    },
    "732": {
      "batch_size": 81,
      "lambda_value": 0.0075065460018,
      "learning_rate": 0.0007986256546,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 307
    },
    "733": {
      "batch_size": 41,
      "lambda_value": 0.2752216311776,
      "learning_rate": 0.0002412265754,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "734": {
      "batch_size": 533,
      "lambda_value": 0.9766595333667,
      "learning_rate": 0.0024229210966,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 69
    },
    "735": {
      "batch_size": 56,
      "lambda_value": 0.3259198240339,
      "learning_rate": 0.0005256218687,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 288
    },
    "736": {
      "batch_size": 307,
      "lambda_value": 0.5420132858805,
      "learning_rate": 0.0030442729783,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 240
    },
    "737": {
      "batch_size": 95,
      "lambda_value": 0.3777812449113,
      "learning_rate": 0.0324606584167,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 225
    },
    "738": {
      "batch_size": 49,
      "lambda_value": 0.238550029918,
      "learning_rate": 0.0001030540462,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 369
    },
    "739": {
      "batch_size": 441,
      "lambda_value": 0.957077534628,
      "learning_rate": 0.0019086022176,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 122
    },
    "740": {
      "batch_size": 511,
      "lambda_value": 0.0134710781272,
      "learning_rate": 0.0002034418803,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 68
    },
    "741": {
      "batch_size": 749,
      "lambda_value": 0.9600020506604,
      "learning_rate": 0.0001517254312,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 230
    },
    "742": {
      "batch_size": 866,
      "lambda_value": 0.2660077884752,
      "learning_rate": 0.065288525576,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 73
    },
    "743": {
      "batch_size": 35,
      "lambda_value": 0.5887164604719,
      "learning_rate": 0.0001085075279,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 438
    },
    "744": {
      "batch_size": 1006,
      "lambda_value": 0.6548621749241,
      "learning_rate": 0.0004851750436,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 615
    },
    "745": {
      "batch_size": 478,
      "lambda_value": 0.9359967997182,
      "learning_rate": 0.0797566893098,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 208
    },
    "746": {
      "batch_size": 181,
      "lambda_value": 0.0788884902226,
      "learning_rate": 0.0356093297887,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 244
    },
    "747": {
      "batch_size": 792,
      "lambda_value": 0.0846128278305,
      "learning_rate": 0.0010692560968,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 261
    },
    "748": {
      "batch_size": 182,
      "lambda_value": 0.8387040787334,
      "learning_rate": 0.0237193227301,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 976
    },
    "749": {
      "batch_size": 349,
      "lambda_value": 0.9283152318161,
      "learning_rate": 0.0608974147776,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 156
    },
    "750": {
      "batch_size": 45,
      "lambda_value": 0.0764939439186,
      "learning_rate": 0.0161756051982,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 302
    },
    "751": {
      "batch_size": 61,
      "lambda_value": 0.5064612203765,
      "learning_rate": 0.0025751529376,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 987
    },
    "752": {
      "batch_size": 482,
      "lambda_value": 0.0955146112821,
      "learning_rate": 0.0002725275691,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "753": {
      "batch_size": 592,
      "lambda_value": 0.4036268062948,
      "learning_rate": 0.0992177195258,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 84
    },
    "754": {
      "batch_size": 898,
      "lambda_value": 0.3005544267723,
      "learning_rate": 0.0010809426098,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 187
    },
    "755": {
      "batch_size": 40,
      "lambda_value": 0.731018292064,
      "learning_rate": 0.0069410453299,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "756": {
      "batch_size": 269,
      "lambda_value": 0.1347333366607,
      "learning_rate": 0.0003075024,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "757": {
      "batch_size": 244,
      "lambda_value": 0.4124326809633,
      "learning_rate": 0.0364061830506,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 233
    },
    "758": {
      "batch_size": 45,
      "lambda_value": 0.0614658505319,
      "learning_rate": 0.0007727818206,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 665
    },
    "759": {
      "batch_size": 356,
      "lambda_value": 0.7817121774942,
      "learning_rate": 0.0604511602161,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 71
    },
    "760": {
      "batch_size": 434,
      "lambda_value": 0.188771792012,
      "learning_rate": 0.0591237961506,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 93
    },
    "761": {
      "batch_size": 38,
      "lambda_value": 0.6046924405509,
      "learning_rate": 0.0705605284383,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "762": {
      "batch_size": 32,
      "lambda_value": 0.733674657486,
      "learning_rate": 0.0029855210439,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 69
    },
    "763": {
      "batch_size": 229,
      "lambda_value": 0.6653808187797,
      "learning_rate": 0.0048386511835,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 116
    },
    "764": {
      "batch_size": 83,
      "lambda_value": 0.6162627556656,
      "learning_rate": 0.0001740183882,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 96
    },
    "765": {
      "batch_size": 243,
      "lambda_value": 0.9238471962863,
      "learning_rate": 0.025566851215,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 136
    },
    "766": {
      "batch_size": 45,
      "lambda_value": 0.0595094713465,
      "learning_rate": 0.0109875328631,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 233
    },
    "767": {
      "batch_size": 114,
      "lambda_value": 0.1580185386064,
      "learning_rate": 0.0028008284542,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 100
    },
    "768": {
      "batch_size": 34,
      "lambda_value": 0.5203870878914,
      "learning_rate": 0.0066722291256,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 149
    },
    "769": {
      "batch_size": 627,
      "lambda_value": 0.9889162365371,
      "learning_rate": 0.0001303634444,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 251
    },
    "770": {
      "batch_size": 758,
      "lambda_value": 0.2717527880428,
      "learning_rate": 0.0171813586196,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "771": {
      "batch_size": 712,
      "lambda_value": 0.7426811270571,
      "learning_rate": 0.002274841247,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 72
    },
    "772": {
      "batch_size": 59,
      "lambda_value": 0.6554628939413,
      "learning_rate": 0.0779537018236,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "773": {
      "batch_size": 501,
      "lambda_value": 0.3540897532194,
      "learning_rate": 0.004684812456,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "774": {
      "batch_size": 601,
      "lambda_value": 0.1261139374009,
      "learning_rate": 0.0014821316592,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 78
    },
    "775": {
      "batch_size": 177,
      "lambda_value": 0.2985203369822,
      "learning_rate": 0.0003721692269,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 330
    },
    "776": {
      "batch_size": 39,
      "lambda_value": 0.8193332005299,
      "learning_rate": 0.0002357500492,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 714
    },
    "777": {
      "batch_size": 681,
      "lambda_value": 0.6719515540501,
      "learning_rate": 0.0001891974099,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 576
    },
    "778": {
      "batch_size": 155,
      "lambda_value": 0.8001259345119,
      "learning_rate": 0.0008217272679,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 65
    },
    "779": {
      "batch_size": 909,
      "lambda_value": 0.5942387206669,
      "learning_rate": 0.0093310627964,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 985
    },
    "780": {
      "batch_size": 70,
      "lambda_value": 0.1041490760141,
      "learning_rate": 0.0079847689986,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 116
    },
    "781": {
      "batch_size": 37,
      "lambda_value": 0.5795747237148,
      "learning_rate": 0.034477491717,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 250
    },
    "782": {
      "batch_size": 53,
      "lambda_value": 0.6726064023568,
      "learning_rate": 0.0014866940031,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 264
    },
    "783": {
      "batch_size": 622,
      "lambda_value": 0.5580374956601,
      "learning_rate": 0.0183947306774,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 107
    },
    "784": {
      "batch_size": 55,
      "lambda_value": 0.1420907879148,
      "learning_rate": 0.0005023242656,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 68
    },
    "785": {
      "batch_size": 66,
      "lambda_value": 0.2353584173771,
      "learning_rate": 0.0001568480226,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 487
    },
    "786": {
      "batch_size": 281,
      "lambda_value": 0.3164310006969,
      "learning_rate": 0.019844871819,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 571
    },
    "787": {
      "batch_size": 48,
      "lambda_value": 0.3304960822444,
      "learning_rate": 0.0146518248161,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 74
    },
    "788": {
      "batch_size": 773,
      "lambda_value": 0.3708169142748,
      "learning_rate": 0.0001815211482,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "789": {
      "batch_size": 96,
      "lambda_value": 0.7382195902741,
      "learning_rate": 0.0002503660621,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 277
    },
    "790": {
      "batch_size": 452,
      "lambda_value": 0.1775327963751,
      "learning_rate": 0.0005431873665,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 1005
    },
    "791": {
      "batch_size": 594,
      "lambda_value": 0.0464967507918,
      "learning_rate": 0.0010838202755,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 779
    },
    "792": {
      "batch_size": 601,
      "lambda_value": 0.3720022649347,
      "learning_rate": 0.0077029441749,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 76
    },
    "793": {
      "batch_size": 756,
      "lambda_value": 0.9960547775379,
      "learning_rate": 0.0112208775279,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 179
    },
    "794": {
      "batch_size": 303,
      "lambda_value": 0.450982199933,
      "learning_rate": 0.0005012374979,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "795": {
      "batch_size": 953,
      "lambda_value": 0.9645746140483,
      "learning_rate": 0.0147384733544,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 695
    },
    "796": {
      "batch_size": 50,
      "lambda_value": 0.4213986141764,
      "learning_rate": 0.0009397133765,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 503
    },
    "797": {
      "batch_size": 159,
      "lambda_value": 0.3495717980859,
      "learning_rate": 0.0187631887146,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 151
    },
    "798": {
      "batch_size": 47,
      "lambda_value": 0.6692619633472,
      "learning_rate": 0.011170113952,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "799": {
      "batch_size": 283,
      "lambda_value": 0.2121933179459,
      "learning_rate": 0.0311376749648,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 67
    },
    "800": {
      "batch_size": 875,
      "lambda_value": 0.4964053407048,
      "learning_rate": 0.000233893915,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 385
    },
    "801": {
      "batch_size": 66,
      "lambda_value": 0.4747623360116,
      "learning_rate": 0.0367607449195,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 192
    },
    "802": {
      "batch_size": 55,
      "lambda_value": 0.1773838620933,
      "learning_rate": 0.0005247790343,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 66
    },
    "803": {
      "batch_size": 694,
      "lambda_value": 0.0024972332736,
      "learning_rate": 0.0124934216342,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 108
    },
    "804": {
      "batch_size": 315,
      "lambda_value": 0.3486223356758,
      "learning_rate": 0.0001046386648,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 129
    },
    "805": {
      "batch_size": 142,
      "lambda_value": 0.3717453140462,
      "learning_rate": 0.0009339912832,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 71
    },
    "806": {
      "batch_size": 747,
      "lambda_value": 0.487908290671,
      "learning_rate": 0.0445635706735,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 144
    },
    "807": {
      "batch_size": 544,
      "lambda_value": 0.1457385575358,
      "learning_rate": 0.0017966323514,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 242
    },
    "808": {
      "batch_size": 711,
      "lambda_value": 0.9394178354264,
      "learning_rate": 0.0009146044621,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 407
    },
    "809": {
      "batch_size": 429,
      "lambda_value": 0.6746885001993,
      "learning_rate": 0.0003434118541,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 440
    },
    "810": {
      "batch_size": 768,
      "lambda_value": 0.4326820145284,
      "learning_rate": 0.001970264983,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 209
    },
    "811": {
      "batch_size": 48,
      "lambda_value": 0.9547300785872,
      "learning_rate": 0.0228904807089,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 97
    },
    "812": {
      "batch_size": 436,
      "lambda_value": 0.372084913002,
      "learning_rate": 0.0014581884067,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 157
    },
    "813": {
      "batch_size": 509,
      "lambda_value": 0.5035036108687,
      "learning_rate": 0.0026943021997,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 218
    },
    "814": {
      "batch_size": 420,
      "lambda_value": 0.5821782460442,
      "learning_rate": 0.0001455596377,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 417
    },
    "815": {
      "batch_size": 317,
      "lambda_value": 0.5474633844823,
      "learning_rate": 0.0015534194913,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 197
    },
    "816": {
      "batch_size": 673,
      "lambda_value": 0.1066059282631,
      "learning_rate": 0.0008710879723,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 66
    },
    "817": {
      "batch_size": 63,
      "lambda_value": 0.7368898787714,
      "learning_rate": 0.0001287558542,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 243
    },
    "818": {
      "batch_size": 217,
      "lambda_value": 0.4318198835859,
      "learning_rate": 0.0268565507901,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 129
    },
    "819": {
      "batch_size": 446,
      "lambda_value": 0.5487591412663,
      "learning_rate": 0.0155537296446,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "820": {
      "batch_size": 35,
      "lambda_value": 0.1272232163978,
      "learning_rate": 0.000798174472,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 708
    },
    "821": {
      "batch_size": 42,
      "lambda_value": 0.7692129676901,
      "learning_rate": 0.000294008565,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 193
    },
    "822": {
      "batch_size": 401,
      "lambda_value": 0.3408468811228,
      "learning_rate": 0.0471076860744,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 400
    },
    "823": {
      "batch_size": 67,
      "lambda_value": 0.2984404563597,
      "learning_rate": 0.0298996049283,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 81
    },
    "824": {
      "batch_size": 580,
      "lambda_value": 0.8985707855197,
      "learning_rate": 0.007097376244,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 162
    },
    "825": {
      "batch_size": 34,
      "lambda_value": 0.6245113502644,
      "learning_rate": 0.0006479136368,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 131
    },
    "826": {
      "batch_size": 649,
      "lambda_value": 0.876056080956,
      "learning_rate": 0.0247423131016,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 391
    },
    "827": {
      "batch_size": 328,
      "lambda_value": 0.4422225387084,
      "learning_rate": 0.0005342471317,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 252
    },
    "828": {
      "batch_size": 286,
      "lambda_value": 0.5972663859522,
      "learning_rate": 0.0950770439815,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "829": {
      "batch_size": 568,
      "lambda_value": 0.06984546795,
      "learning_rate": 0.0064326042354,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 757
    },
    "830": {
      "batch_size": 181,
      "lambda_value": 0.8546996861515,
      "learning_rate": 0.003884414875,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 196
    },
    "831": {
      "batch_size": 46,
      "lambda_value": 0.7147531891872,
      "learning_rate": 0.0101916980141,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 158
    },
    "832": {
      "batch_size": 86,
      "lambda_value": 0.4670596381143,
      "learning_rate": 0.0145022867515,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 92
    },
    "833": {
      "batch_size": 553,
      "lambda_value": 0.0760059398096,
      "learning_rate": 0.0019040246749,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 154
    },
    "834": {
      "batch_size": 365,
      "lambda_value": 0.45893177935,
      "learning_rate": 0.0934713079823,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 222
    },
    "835": {
      "batch_size": 924,
      "lambda_value": 0.7206978230855,
      "learning_rate": 0.0012373734352,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 841
    },
    "836": {
      "batch_size": 969,
      "lambda_value": 0.428401135847,
      "learning_rate": 0.0008334194262,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 418
    },
    "837": {
      "batch_size": 750,
      "lambda_value": 0.3219208286941,
      "learning_rate": 0.0030707951835,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 231
    },
    "838": {
      "batch_size": 840,
      "lambda_value": 0.5543002829439,
      "learning_rate": 0.0063954933819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 199
    },
    "839": {
      "batch_size": 69,
      "lambda_value": 0.3268557069186,
      "learning_rate": 0.000518426571,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 181
    },
    "840": {
      "batch_size": 307,
      "lambda_value": 0.1147156522977,
      "learning_rate": 0.0376238583264,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 254
    },
    "841": {
      "batch_size": 39,
      "lambda_value": 0.9315939665366,
      "learning_rate": 0.0720331565773,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 76
    },
    "842": {
      "batch_size": 144,
      "lambda_value": 0.4964140385327,
      "learning_rate": 0.000504632314,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 331
    },
    "843": {
      "batch_size": 238,
      "lambda_value": 0.7916083975465,
      "learning_rate": 0.0431968495609,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 741
    },
    "844": {
      "batch_size": 36,
      "lambda_value": 0.0922755146442,
      "learning_rate": 0.015488858488,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 333
    },
    "845": {
      "batch_size": 62,
      "lambda_value": 0.1235767932958,
      "learning_rate": 0.0573474607136,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 221
    },
    "846": {
      "batch_size": 115,
      "lambda_value": 0.1048307134026,
      "learning_rate": 0.086845268262,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 379
    },
    "847": {
      "batch_size": 918,
      "lambda_value": 0.7753920649686,
      "learning_rate": 0.0033415948456,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 915
    },
    "848": {
      "batch_size": 394,
      "lambda_value": 0.4114805869974,
      "learning_rate": 0.0246606083822,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 71
    },
    "849": {
      "batch_size": 480,
      "lambda_value": 0.2527823091835,
      "learning_rate": 0.0023290548355,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 121
    },
    "850": {
      "batch_size": 813,
      "lambda_value": 0.2375395052378,
      "learning_rate": 0.000200496163,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 373
    },
    "851": {
      "batch_size": 565,
      "lambda_value": 0.3125792668112,
      "learning_rate": 0.0428114646491,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 65
    },
    "852": {
      "batch_size": 65,
      "lambda_value": 0.2253981348432,
      "learning_rate": 0.0224414413065,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 139
    },
    "853": {
      "batch_size": 546,
      "lambda_value": 0.0519471402765,
      "learning_rate": 0.0004601751306,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 166
    },
    "854": {
      "batch_size": 394,
      "lambda_value": 0.0653187882234,
      "learning_rate": 0.0088925801928,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 121
    },
    "855": {
      "batch_size": 828,
      "lambda_value": 0.1142106433492,
      "learning_rate": 0.0051761028604,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 348
    },
    "856": {
      "batch_size": 220,
      "lambda_value": 0.2667676704071,
      "learning_rate": 0.0001384460995,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 80
    },
    "857": {
      "batch_size": 884,
      "lambda_value": 0.256703725783,
      "learning_rate": 0.002675383363,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 178
    },
    "858": {
      "batch_size": 620,
      "lambda_value": 0.1843408613267,
      "learning_rate": 0.0189808718634,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 159
    },
    "859": {
      "batch_size": 66,
      "lambda_value": 0.3746932698949,
      "learning_rate": 0.0009397133765,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 324
    },
    "860": {
      "batch_size": 347,
      "lambda_value": 0.0062841385275,
      "learning_rate": 0.0592202254669,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 724
    },
    "861": {
      "batch_size": 32,
      "lambda_value": 0.843904063371,
      "learning_rate": 0.0145471628832,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 80
    },
    "862": {
      "batch_size": 512,
      "lambda_value": 0.6864116127537,
      "learning_rate": 0.03634404751,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 75
    },
    "863": {
      "batch_size": 558,
      "lambda_value": 0.547816731618,
      "learning_rate": 0.0425180720701,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 65
    },
    "864": {
      "batch_size": 415,
      "lambda_value": 0.4133175941219,
      "learning_rate": 0.000380172427,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 352
    },
    "865": {
      "batch_size": 600,
      "lambda_value": 0.5754413284617,
      "learning_rate": 0.0002539380586,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 185
    },
    "866": {
      "batch_size": 226,
      "lambda_value": 0.071662405483,
      "learning_rate": 0.0029603751373,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 304
    },
    "867": {
      "batch_size": 167,
      "lambda_value": 0.552823694988,
      "learning_rate": 0.0186863950035,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 154
    },
    "868": {
      "batch_size": 697,
      "lambda_value": 0.1316787393133,
      "learning_rate": 0.0749527971149,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 163
    },
    "869": {
      "batch_size": 693,
      "lambda_value": 0.4419936560983,
      "learning_rate": 0.0069141362097,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 65
    },
    "870": {
      "batch_size": 49,
      "lambda_value": 0.4221123655622,
      "learning_rate": 0.0138787719249,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 73
    },
    "871": {
      "batch_size": 412,
      "lambda_value": 0.6898265122125,
      "learning_rate": 0.001804720202,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 91
    },
    "872": {
      "batch_size": 101,
      "lambda_value": 0.0446215165864,
      "learning_rate": 0.0028881260475,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 146
    },
    "873": {
      "batch_size": 302,
      "lambda_value": 0.0634242276013,
      "learning_rate": 0.0001928920376,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 316
    },
    "874": {
      "batch_size": 761,
      "lambda_value": 0.4440764459472,
      "learning_rate": 0.0794097816022,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 64
    },
    "875": {
      "batch_size": 933,
      "lambda_value": 0.5999377421281,
      "learning_rate": 0.0006445146717,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 144
    },
    "876": {
      "batch_size": 55,
      "lambda_value": 0.238550029918,
      "learning_rate": 0.0001049481509,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 291
    },
    "877": {
      "batch_size": 577,
      "lambda_value": 0.2056557390908,
      "learning_rate": 0.0003915268753,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 945
    },
    "878": {
      "batch_size": 163,
      "lambda_value": 0.167239280953,
      "learning_rate": 0.0004681909946,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 77
    },
    "879": {
      "batch_size": 53,
      "lambda_value": 0.6387826393548,
      "learning_rate": 0.0243304353679,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 456
    },
    "880": {
      "batch_size": 650,
      "lambda_value": 0.1614852659784,
      "learning_rate": 0.0075796500753,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 70
    },
    "881": {
      "batch_size": 506,
      "lambda_value": 0.3753041698627,
      "learning_rate": 0.0163865784673,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 64
    },
    "882": {
      "batch_size": 340,
      "lambda_value": 0.3643883697683,
      "learning_rate": 0.0006740568048,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 256
    },
    "883": {
      "batch_size": 33,
      "lambda_value": 0.1875184980927,
      "learning_rate": 0.0843460243282,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 749
    },
    "884": {
      "batch_size": 389,
      "lambda_value": 0.9219372234064,
      "learning_rate": 0.0008238993902,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 238
    },
    "885": {
      "batch_size": 58,
      "lambda_value": 0.7390799893981,
      "learning_rate": 0.0886799955763,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 94
    },
    "886": {
      "batch_size": 230,
      "lambda_value": 0.8290386601668,
      "learning_rate": 0.0082958882239,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 97
    },
    "887": {
      "batch_size": 729,
      "lambda_value": 0.6561598698686,
      "learning_rate": 0.0200242469415,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 83
    },
    "888": {
      "batch_size": 365,
      "lambda_value": 0.3361992196662,
      "learning_rate": 0.079998799585,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 200
    },
    "889": {
      "batch_size": 57,
      "lambda_value": 0.6844051624874,
      "learning_rate": 0.0354968826355,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 534
    },
    "890": {
      "batch_size": 49,
      "lambda_value": 0.3507544796617,
      "learning_rate": 0.0003035474614,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 316
    },
    "891": {
      "batch_size": 832,
      "lambda_value": 0.1559151475291,
      "learning_rate": 0.0588613075688,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 150
    },
    "892": {
      "batch_size": 104,
      "lambda_value": 0.4259903925482,
      "learning_rate": 0.024197175793,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 173
    },
    "893": {
      "batch_size": 609,
      "lambda_value": 0.7921589658006,
      "learning_rate": 0.0078022777825,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 214
    },
    "894": {
      "batch_size": 432,
      "lambda_value": 0.342530200838,
      "learning_rate": 0.0023157640153,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 64
    },
    "895": {
      "batch_size": 307,
      "lambda_value": 0.7255893135138,
      "learning_rate": 0.0022899433426,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 188
    },
    "896": {
      "batch_size": 429,
      "lambda_value": 0.6857681112319,
      "learning_rate": 0.0011833277287,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 449
    },
    "897": {
      "batch_size": 740,
      "lambda_value": 0.6150053751439,
      "learning_rate": 0.0211502006423,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 73
    },
    "898": {
      "batch_size": 251,
      "lambda_value": 0.0015968440481,
      "learning_rate": 0.0014089945053,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 274
    },
    "899": {
      "batch_size": 41,
      "lambda_value": 0.3588119411049,
      "learning_rate": 0.0194142362086,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 177
    },
    "900": {
      "batch_size": 254,
      "lambda_value": 0.8726615114865,
      "learning_rate": 0.0001722746333,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 431
    },
    "901": {
      "batch_size": 303,
      "lambda_value": 0.1381935470232,
      "learning_rate": 0.0028801068378,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 123
    },
    "902": {
      "batch_size": 111,
      "lambda_value": 0.4482297010366,
      "learning_rate": 0.001419663145,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 348
    },
    "903": {
      "batch_size": 298,
      "lambda_value": 0.3390676674274,
      "learning_rate": 0.0227587978931,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "904": {
      "batch_size": 489,
      "lambda_value": 0.6410773181511,
      "learning_rate": 0.0006330867153,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 72
    },
    "905": {
      "batch_size": 962,
      "lambda_value": 0.1272255343596,
      "learning_rate": 0.0010648882536,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 252
    },
    "906": {
      "batch_size": 525,
      "lambda_value": 0.5683327918539,
      "learning_rate": 0.0005445030847,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 162
    },
    "907": {
      "batch_size": 537,
      "lambda_value": 0.0709703179888,
      "learning_rate": 0.0004329924399,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 80
    },
    "908": {
      "batch_size": 859,
      "lambda_value": 0.6599022226383,
      "learning_rate": 0.0006294564585,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 612
    },
    "909": {
      "batch_size": 265,
      "lambda_value": 0.5160569609208,
      "learning_rate": 0.0865148615222,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 122
    },
    "910": {
      "batch_size": 535,
      "lambda_value": 0.2128071671198,
      "learning_rate": 0.0008886182822,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 121
    },
    "911": {
      "batch_size": 32,
      "lambda_value": 0.8939450080598,
      "learning_rate": 0.0003050846447,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 179
    },
    "912": {
      "batch_size": 755,
      "lambda_value": 0.2983177699812,
      "learning_rate": 0.0043300321463,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 82
    },
    "913": {
      "batch_size": 400,
      "lambda_value": 0.5797136972999,
      "learning_rate": 0.0001601439692,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 67
    },
    "914": {
      "batch_size": 479,
      "lambda_value": 0.4177813572394,
      "learning_rate": 0.0002541297708,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 363
    },
    "915": {
      "batch_size": 475,
      "lambda_value": 0.3614739032996,
      "learning_rate": 0.0040927356236,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 184
    },
    "916": {
      "batch_size": 676,
      "lambda_value": 0.8729600212192,
      "learning_rate": 0.00109263889,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 349
    },
    "917": {
      "batch_size": 316,
      "lambda_value": 0.5530103694374,
      "learning_rate": 0.0310886080457,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 93
    },
    "918": {
      "batch_size": 447,
      "lambda_value": 0.2394974448085,
      "learning_rate": 0.0006860336662,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 458
    },
    "919": {
      "batch_size": 527,
      "lambda_value": 0.3395665856392,
      "learning_rate": 0.0021441267137,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 159
    },
    "920": {
      "batch_size": 636,
      "lambda_value": 0.0708632872733,
      "learning_rate": 0.0015902159765,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 473
    },
    "921": {
      "batch_size": 527,
      "lambda_value": 0.5526716720699,
      "learning_rate": 0.0162072859801,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 74
    },
    "922": {
      "batch_size": 185,
      "lambda_value": 0.1435148227746,
      "learning_rate": 0.032766704256,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 301
    },
    "923": {
      "batch_size": 39,
      "lambda_value": 0.7900567988827,
      "learning_rate": 0.0030425418623,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 452
    },
    "924": {
      "batch_size": 57,
      "lambda_value": 0.7046766642737,
      "learning_rate": 0.0770940554474,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 194
    },
    "925": {
      "batch_size": 302,
      "lambda_value": 0.098569993888,
      "learning_rate": 0.0001579182877,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 196
    },
    "926": {
      "batch_size": 298,
      "lambda_value": 0.1200700726986,
      "learning_rate": 0.0121857707176,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 143
    },
    "927": {
      "batch_size": 452,
      "lambda_value": 0.5171197540921,
      "learning_rate": 0.0013004477143,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 140
    },
    "928": {
      "batch_size": 41,
      "lambda_value": 0.6296356425263,
      "learning_rate": 0.0123222581549,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 75
    },
    "929": {
      "batch_size": 40,
      "lambda_value": 0.7180535500534,
      "learning_rate": 0.0020317120707,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 177
    },
    "930": {
      "batch_size": 283,
      "lambda_value": 0.5487591412663,
      "learning_rate": 0.0149266082593,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 74
    },
    "931": {
      "batch_size": 358,
      "lambda_value": 0.4266985305875,
      "learning_rate": 0.0001806237603,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 128
    },
    "932": {
      "batch_size": 479,
      "lambda_value": 0.4802245090807,
      "learning_rate": 0.0047919706819,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 74
    },
    "933": {
      "batch_size": 825,
      "lambda_value": 0.7843157148061,
      "learning_rate": 0.0066976571924,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 352
    },
    "934": {
      "batch_size": 50,
      "lambda_value": 0.5931147725298,
      "learning_rate": 0.0002429181124,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 453
    },
    "935": {
      "batch_size": 935,
      "lambda_value": 0.1042431965836,
      "learning_rate": 0.0860508301995,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 1007
    },
    "936": {
      "batch_size": 51,
      "lambda_value": 0.6111303644039,
      "learning_rate": 0.0930282850873,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 768
    },
    "937": {
      "batch_size": 195,
      "lambda_value": 0.401267304123,
      "learning_rate": 0.0301147399686,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 255
    },
    "938": {
      "batch_size": 375,
      "lambda_value": 0.207280030057,
      "learning_rate": 0.0009177628162,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 187
    },
    "939": {
      "batch_size": 200,
      "lambda_value": 0.2983810181249,
      "learning_rate": 0.0001836146639,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 790
    },
    "940": {
      "batch_size": 422,
      "lambda_value": 0.0158208424749,
      "learning_rate": 0.0009490944438,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 68
    },
    "941": {
      "batch_size": 762,
      "lambda_value": 0.020724417578,
      "learning_rate": 0.0003355580233,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 177
    },
    "942": {
      "batch_size": 497,
      "lambda_value": 0.3703394225824,
      "learning_rate": 0.0010809426098,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 171
    },
    "943": {
      "batch_size": 654,
      "lambda_value": 0.2815189758395,
      "learning_rate": 0.000142054368,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 547
    },
    "944": {
      "batch_size": 811,
      "lambda_value": 0.7360326119571,
      "learning_rate": 0.00010291166,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 85
    },
    "945": {
      "batch_size": 344,
      "lambda_value": 0.7086044755179,
      "learning_rate": 0.0012724902524,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 105
    },
    "946": {
      "batch_size": 433,
      "lambda_value": 0.9986754294793,
      "learning_rate": 0.0001092588107,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 126
    },
    "947": {
      "batch_size": 501,
      "lambda_value": 0.6985335247515,
      "learning_rate": 0.000436179448,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 278
    },
    "948": {
      "batch_size": 54,
      "lambda_value": 0.6996023323351,
      "learning_rate": 0.0018925506808,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 772
    },
    "949": {
      "batch_size": 50,
      "lambda_value": 0.493875570031,
      "learning_rate": 0.0049287562853,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 177
    },
    "950": {
      "batch_size": 249,
      "lambda_value": 0.4104945693248,
      "learning_rate": 0.0042426744501,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 67
    },
    "951": {
      "batch_size": 62,
      "lambda_value": 0.6529575109489,
      "learning_rate": 0.0866229397567,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 163
    },
    "952": {
      "batch_size": 64,
      "lambda_value": 0.8996088275144,
      "learning_rate": 0.0381644700336,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 141
    },
    "953": {
      "batch_size": 71,
      "lambda_value": 0.8526437487769,
      "learning_rate": 0.0019043468288,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 79
    },
    "954": {
      "batch_size": 429,
      "lambda_value": 0.0054792037583,
      "learning_rate": 0.0013808246905,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 187
    },
    "955": {
      "batch_size": 717,
      "lambda_value": 0.7913626437791,
      "learning_rate": 0.0001036948064,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 174
    },
    "956": {
      "batch_size": 876,
      "lambda_value": 0.5620922051651,
      "learning_rate": 0.0161148976779,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 772
    },
    "957": {
      "batch_size": 50,
      "lambda_value": 0.7444304647954,
      "learning_rate": 0.0129067763488,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 72
    },
    "958": {
      "batch_size": 625,
      "lambda_value": 0.335428589203,
      "learning_rate": 0.0001753046785,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 184
    },
    "959": {
      "batch_size": 157,
      "lambda_value": 0.4136544936724,
      "learning_rate": 0.0001328354583,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 239
    },
    "960": {
      "batch_size": 256,
      "lambda_value": 0.9677064937434,
      "learning_rate": 0.0002257394796,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 377
    },
    "961": {
      "batch_size": 601,
      "lambda_value": 0.6285300752365,
      "learning_rate": 0.0072125566688,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 228
    },
    "962": {
      "batch_size": 774,
      "lambda_value": 0.2223054853185,
      "learning_rate": 0.0705254572169,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 79
    },
    "963": {
      "batch_size": 803,
      "lambda_value": 0.049798848006,
      "learning_rate": 0.0424426548634,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 206
    },
    "964": {
      "batch_size": 304,
      "lambda_value": 0.9690636930872,
      "learning_rate": 0.0045660379397,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 74
    },
    "965": {
      "batch_size": 752,
      "lambda_value": 0.408719176652,
      "learning_rate": 0.0138790245968,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 612
    },
    "966": {
      "batch_size": 336,
      "lambda_value": 0.8578308892932,
      "learning_rate": 0.0001334276161,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 468
    },
    "967": {
      "batch_size": 223,
      "lambda_value": 0.7630674651234,
      "learning_rate": 0.009484787052,
      "number_of_layers": 2,
      "number_of_neurons_per_layer": 253
    },
    "968": {
      "batch_size": 647,
      "lambda_value": 0.8558923079054,
      "learning_rate": 0.000100770499,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 474
    },
    "969": {
      "batch_size": 674,
      "lambda_value": 0.3005225087541,
      "learning_rate": 0.0078789744012,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 184
    },
    "970": {
      "batch_size": 807,
      "lambda_value": 0.0955384173876,
      "learning_rate": 0.0016495696331,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 611
    },
    "971": {
      "batch_size": 816,
      "lambda_value": 0.0918404708527,
      "learning_rate": 0.0461460080832,
      "number_of_layers": 5,
      "number_of_neurons_per_layer": 398
    },
    "972": {
      "batch_size": 717,
      "lambda_value": 0.7477949029271,
      "learning_rate": 0.0004255874846,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 317
    },
    "973": {
      "batch_size": 895,
      "lambda_value": 0.7053743865426,
      "learning_rate": 0.0238921121654,
      "number_of_layers": 4,
      "number_of_neurons_per_layer": 96
    },
    "974": {
      "batch_size": 163,
      "lambda_value": 0.2235117059918,
      "learning_rate": 0.0729448598997,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 936
    },
    "975": {
      "batch_size": 793,
      "lambda_value": 0.2322595743628,
      "learning_rate": 0.0003657956393,
      "number_of_layers": 3,
      "number_of_neurons_per_layer": 139
    },
    "976": {
      "batch_size": 66,
      "lambda_value": 0.0678261538574,
      "learning_rate": 0.0014458516503,
      "number_of_layers": 1,
      "number_of_neurons_per_layer": 465
    }
  },
  "config_origins": {
    "1": "Initial Design: Sobol",
    "2": "Initial Design: Sobol",
    "3": "Initial Design: Sobol",
    "4": "Initial Design: Sobol",
    "5": "Initial Design: Sobol",
    "6": "Acquisition Function Maximizer: Local Search",
    "7": "Acquisition Function Maximizer: Local Search",
    "8": "Acquisition Function Maximizer: Local Search",
    "9": "Acquisition Function Maximizer: Local Search",
    "10": "Acquisition Function Maximizer: Local Search",
    "11": "Acquisition Function Maximizer: Local Search",
    "12": "Acquisition Function Maximizer: Local Search",
    "13": "Acquisition Function Maximizer: Local Search",
    "14": "Acquisition Function Maximizer: Local Search",
    "15": "Acquisition Function Maximizer: Local Search",
    "16": "Acquisition Function Maximizer: Local Search",
    "17": "Acquisition Function Maximizer: Local Search",
    "18": "Acquisition Function Maximizer: Local Search",
    "19": "Acquisition Function Maximizer: Local Search",
    "20": "Random Search",
    "21": "Random Search",
    "22": "Random Search",
    "23": "Acquisition Function Maximizer: Local Search",
    "24": "Acquisition Function Maximizer: Local Search",
    "25": "Acquisition Function Maximizer: Local Search",
    "26": "Acquisition Function Maximizer: Local Search",
    "27": "Acquisition Function Maximizer: Local Search",
    "28": "Acquisition Function Maximizer: Local Search",
    "29": "Acquisition Function Maximizer: Local Search",
    "30": "Random Search",
    "31": "Acquisition Function Maximizer: Local Search",
    "32": "Random Search",
    "33": "Acquisition Function Maximizer: Local Search",
    "34": "Acquisition Function Maximizer: Local Search",
    "35": "Acquisition Function Maximizer: Local Search",
    "36": "Acquisition Function Maximizer: Local Search",
    "37": "Acquisition Function Maximizer: Local Search",
    "38": "Acquisition Function Maximizer: Local Search",
    "39": "Acquisition Function Maximizer: Local Search",
    "40": "Random Search",
    "41": "Acquisition Function Maximizer: Local Search",
    "42": "Acquisition Function Maximizer: Local Search",
    "43": "Acquisition Function Maximizer: Local Search",
    "44": "Acquisition Function Maximizer: Local Search",
    "45": "Acquisition Function Maximizer: Local Search",
    "46": "Acquisition Function Maximizer: Local Search",
    "47": "Acquisition Function Maximizer: Local Search",
    "48": "Acquisition Function Maximizer: Local Search",
    "49": "Random Search",
    "50": "Acquisition Function Maximizer: Local Search",
    "51": "Acquisition Function Maximizer: Local Search",
    "52": "Acquisition Function Maximizer: Local Search",
    "53": "Random Search",
    "54": "Acquisition Function Maximizer: Local Search",
    "55": "Acquisition Function Maximizer: Local Search",
    "56": "Acquisition Function Maximizer: Local Search",
    "57": "Acquisition Function Maximizer: Local Search",
    "58": "Acquisition Function Maximizer: Local Search",
    "59": "Random Search",
    "60": "Acquisition Function Maximizer: Local Search",
    "61": "Random Search",
    "62": "Acquisition Function Maximizer: Local Search",
    "63": "Acquisition Function Maximizer: Local Search",
    "64": "Acquisition Function Maximizer: Local Search",
    "65": "Acquisition Function Maximizer: Local Search",
    "66": "Random Search",
    "67": "Random Search",
    "68": "Acquisition Function Maximizer: Local Search",
    "69": "Random Search",
    "70": "Random Search",
    "71": "Acquisition Function Maximizer: Local Search",
    "72": "Acquisition Function Maximizer: Local Search",
    "73": "Random Search",
    "74": "Acquisition Function Maximizer: Local Search",
    "75": "Random Search",
    "76": "Acquisition Function Maximizer: Local Search",
    "77": "Acquisition Function Maximizer: Local Search",
    "78": "Acquisition Function Maximizer: Local Search",
    "79": "Acquisition Function Maximizer: Local Search",
    "80": "Acquisition Function Maximizer: Local Search",
    "81": "Random Search",
    "82": "Acquisition Function Maximizer: Local Search",
    "83": "Random Search",
    "84": "Acquisition Function Maximizer: Local Search",
    "85": "Random Search",
    "86": "Acquisition Function Maximizer: Local Search",
    "87": "Acquisition Function Maximizer: Local Search",
    "88": "Random Search",
    "89": "Acquisition Function Maximizer: Local Search",
    "90": "Acquisition Function Maximizer: Local Search",
    "91": "Acquisition Function Maximizer: Local Search",
    "92": "Acquisition Function Maximizer: Local Search",
    "93": "Random Search",
    "94": "Acquisition Function Maximizer: Local Search",
    "95": "Acquisition Function Maximizer: Local Search",
    "96": "Acquisition Function Maximizer: Local Search",
    "97": "Acquisition Function Maximizer: Local Search",
    "98": "Random Search",
    "99": "Acquisition Function Maximizer: Local Search",
    "100": "Acquisition Function Maximizer: Local Search",
    "101": "Random Search",
    "102": "Acquisition Function Maximizer: Local Search",
    "103": "Random Search",
    "104": "Acquisition Function Maximizer: Local Search",
    "105": "Random Search",
    "106": "Acquisition Function Maximizer: Local Search",
    "107": "Acquisition Function Maximizer: Local Search",
    "108": "Acquisition Function Maximizer: Local Search",
    "109": "Acquisition Function Maximizer: Local Search",
    "110": "Acquisition Function Maximizer: Local Search",
    "111": "Acquisition Function Maximizer: Local Search",
    "112": "Acquisition Function Maximizer: Local Search",
    "113": "Acquisition Function Maximizer: Local Search",
    "114": "Acquisition Function Maximizer: Local Search",
    "115": "Acquisition Function Maximizer: Local Search",
    "116": "Acquisition Function Maximizer: Local Search",
    "117": "Acquisition Function Maximizer: Local Search",
    "118": "Acquisition Function Maximizer: Local Search",
    "119": "Acquisition Function Maximizer: Local Search",
    "120": "Acquisition Function Maximizer: Local Search",
    "121": "Acquisition Function Maximizer: Local Search",
    "122": "Acquisition Function Maximizer: Local Search",
    "123": "Acquisition Function Maximizer: Local Search",
    "124": "Acquisition Function Maximizer: Local Search",
    "125": "Acquisition Function Maximizer: Local Search",
    "126": "Acquisition Function Maximizer: Local Search",
    "127": "Acquisition Function Maximizer: Local Search",
    "128": "Acquisition Function Maximizer: Local Search",
    "129": "Acquisition Function Maximizer: Local Search",
    "130": "Acquisition Function Maximizer: Local Search",
    "131": "Acquisition Function Maximizer: Local Search",
    "132": "Random Search",
    "133": "Acquisition Function Maximizer: Local Search",
    "134": "Acquisition Function Maximizer: Local Search",
    "135": "Acquisition Function Maximizer: Local Search",
    "136": "Acquisition Function Maximizer: Local Search",
    "137": "Acquisition Function Maximizer: Local Search",
    "138": "Random Search",
    "139": "Acquisition Function Maximizer: Local Search",
    "140": "Acquisition Function Maximizer: Local Search",
    "141": "Acquisition Function Maximizer: Local Search",
    "142": "Acquisition Function Maximizer: Local Search",
    "143": "Acquisition Function Maximizer: Local Search",
    "144": "Acquisition Function Maximizer: Local Search",
    "145": "Acquisition Function Maximizer: Local Search",
    "146": "Acquisition Function Maximizer: Local Search",
    "147": "Acquisition Function Maximizer: Local Search",
    "148": "Acquisition Function Maximizer: Local Search",
    "149": "Acquisition Function Maximizer: Local Search",
    "150": "Acquisition Function Maximizer: Local Search",
    "151": "Acquisition Function Maximizer: Local Search",
    "152": "Random Search",
    "153": "Acquisition Function Maximizer: Local Search",
    "154": "Acquisition Function Maximizer: Local Search",
    "155": "Acquisition Function Maximizer: Local Search",
    "156": "Random Search",
    "157": "Acquisition Function Maximizer: Local Search",
    "158": "Random Search",
    "159": "Acquisition Function Maximizer: Local Search",
    "160": "Random Search",
    "161": "Acquisition Function Maximizer: Local Search",
    "162": "Acquisition Function Maximizer: Local Search",
    "163": "Acquisition Function Maximizer: Local Search",
    "164": "Acquisition Function Maximizer: Local Search",
    "165": "Random Search",
    "166": "Acquisition Function Maximizer: Local Search",
    "167": "Acquisition Function Maximizer: Local Search",
    "168": "Acquisition Function Maximizer: Local Search",
    "169": "Acquisition Function Maximizer: Local Search",
    "170": "Acquisition Function Maximizer: Local Search",
    "171": "Acquisition Function Maximizer: Local Search",
    "172": "Random Search",
    "173": "Acquisition Function Maximizer: Local Search",
    "174": "Acquisition Function Maximizer: Local Search",
    "175": "Random Search",
    "176": "Acquisition Function Maximizer: Local Search",
    "177": "Random Search",
    "178": "Random Search",
    "179": "Random Search",
    "180": "Acquisition Function Maximizer: Local Search",
    "181": "Acquisition Function Maximizer: Local Search",
    "182": "Acquisition Function Maximizer: Local Search",
    "183": "Acquisition Function Maximizer: Local Search",
    "184": "Acquisition Function Maximizer: Local Search",
    "185": "Random Search",
    "186": "Random Search",
    "187": "Acquisition Function Maximizer: Local Search",
    "188": "Acquisition Function Maximizer: Local Search",
    "189": "Acquisition Function Maximizer: Local Search",
    "190": "Acquisition Function Maximizer: Local Search",
    "191": "Acquisition Function Maximizer: Local Search",
    "192": "Acquisition Function Maximizer: Local Search",
    "193": "Acquisition Function Maximizer: Local Search",
    "194": "Acquisition Function Maximizer: Local Search",
    "195": "Acquisition Function Maximizer: Local Search",
    "196": "Acquisition Function Maximizer: Local Search",
    "197": "Acquisition Function Maximizer: Local Search",
    "198": "Random Search",
    "199": "Acquisition Function Maximizer: Local Search",
    "200": "Acquisition Function Maximizer: Local Search",
    "201": "Acquisition Function Maximizer: Local Search",
    "202": "Acquisition Function Maximizer: Local Search",
    "203": "Acquisition Function Maximizer: Local Search",
    "204": "Random Search",
    "205": "Acquisition Function Maximizer: Local Search",
    "206": "Acquisition Function Maximizer: Local Search",
    "207": "Acquisition Function Maximizer: Local Search",
    "208": "Acquisition Function Maximizer: Local Search",
    "209": "Random Search",
    "210": "Random Search",
    "211": "Random Search",
    "212": "Acquisition Function Maximizer: Local Search",
    "213": "Acquisition Function Maximizer: Local Search",
    "214": "Acquisition Function Maximizer: Local Search",
    "215": "Acquisition Function Maximizer: Local Search",
    "216": "Acquisition Function Maximizer: Local Search",
    "217": "Acquisition Function Maximizer: Local Search",
    "218": "Acquisition Function Maximizer: Local Search",
    "219": "Acquisition Function Maximizer: Local Search",
    "220": "Random Search",
    "221": "Acquisition Function Maximizer: Local Search",
    "222": "Acquisition Function Maximizer: Local Search",
    "223": "Acquisition Function Maximizer: Local Search",
    "224": "Acquisition Function Maximizer: Local Search",
    "225": "Acquisition Function Maximizer: Local Search",
    "226": "Acquisition Function Maximizer: Local Search",
    "227": "Acquisition Function Maximizer: Local Search",
    "228": "Acquisition Function Maximizer: Local Search",
    "229": "Acquisition Function Maximizer: Local Search",
    "230": "Random Search",
    "231": "Acquisition Function Maximizer: Local Search",
    "232": "Acquisition Function Maximizer: Local Search",
    "233": "Acquisition Function Maximizer: Local Search",
    "234": "Acquisition Function Maximizer: Local Search",
    "235": "Acquisition Function Maximizer: Local Search",
    "236": "Acquisition Function Maximizer: Local Search",
    "237": "Acquisition Function Maximizer: Local Search",
    "238": "Acquisition Function Maximizer: Local Search",
    "239": "Random Search",
    "240": "Acquisition Function Maximizer: Local Search",
    "241": "Acquisition Function Maximizer: Local Search",
    "242": "Acquisition Function Maximizer: Local Search",
    "243": "Acquisition Function Maximizer: Local Search",
    "244": "Acquisition Function Maximizer: Local Search",
    "245": "Acquisition Function Maximizer: Local Search",
    "246": "Acquisition Function Maximizer: Local Search",
    "247": "Random Search",
    "248": "Acquisition Function Maximizer: Local Search",
    "249": "Random Search",
    "250": "Acquisition Function Maximizer: Local Search",
    "251": "Acquisition Function Maximizer: Local Search",
    "252": "Acquisition Function Maximizer: Local Search",
    "253": "Random Search",
    "254": "Random Search",
    "255": "Acquisition Function Maximizer: Local Search",
    "256": "Acquisition Function Maximizer: Local Search",
    "257": "Acquisition Function Maximizer: Local Search",
    "258": "Acquisition Function Maximizer: Local Search",
    "259": "Acquisition Function Maximizer: Local Search",
    "260": "Acquisition Function Maximizer: Local Search",
    "261": "Random Search",
    "262": "Acquisition Function Maximizer: Local Search",
    "263": "Acquisition Function Maximizer: Local Search",
    "264": "Acquisition Function Maximizer: Local Search",
    "265": "Acquisition Function Maximizer: Local Search",
    "266": "Acquisition Function Maximizer: Local Search",
    "267": "Random Search",
    "268": "Random Search",
    "269": "Acquisition Function Maximizer: Local Search",
    "270": "Acquisition Function Maximizer: Local Search",
    "271": "Acquisition Function Maximizer: Local Search",
    "272": "Acquisition Function Maximizer: Local Search",
    "273": "Acquisition Function Maximizer: Local Search",
    "274": "Random Search",
    "275": "Acquisition Function Maximizer: Local Search",
    "276": "Acquisition Function Maximizer: Local Search",
    "277": "Acquisition Function Maximizer: Local Search",
    "278": "Acquisition Function Maximizer: Local Search",
    "279": "Acquisition Function Maximizer: Local Search",
    "280": "Acquisition Function Maximizer: Local Search",
    "281": "Acquisition Function Maximizer: Local Search",
    "282": "Acquisition Function Maximizer: Local Search",
    "283": "Acquisition Function Maximizer: Local Search",
    "284": "Acquisition Function Maximizer: Local Search",
    "285": "Acquisition Function Maximizer: Local Search",
    "286": "Acquisition Function Maximizer: Local Search",
    "287": "Acquisition Function Maximizer: Local Search",
    "288": "Acquisition Function Maximizer: Local Search",
    "289": "Random Search",
    "290": "Acquisition Function Maximizer: Local Search",
    "291": "Random Search",
    "292": "Acquisition Function Maximizer: Local Search",
    "293": "Acquisition Function Maximizer: Local Search",
    "294": "Acquisition Function Maximizer: Local Search",
    "295": "Acquisition Function Maximizer: Local Search",
    "296": "Acquisition Function Maximizer: Local Search",
    "297": "Random Search",
    "298": "Acquisition Function Maximizer: Local Search",
    "299": "Random Search",
    "300": "Acquisition Function Maximizer: Local Search",
    "301": "Acquisition Function Maximizer: Local Search",
    "302": "Random Search",
    "303": "Acquisition Function Maximizer: Local Search",
    "304": "Acquisition Function Maximizer: Local Search",
    "305": "Acquisition Function Maximizer: Local Search",
    "306": "Acquisition Function Maximizer: Local Search",
    "307": "Acquisition Function Maximizer: Local Search",
    "308": "Acquisition Function Maximizer: Local Search",
    "309": "Random Search",
    "310": "Acquisition Function Maximizer: Local Search",
    "311": "Acquisition Function Maximizer: Local Search",
    "312": "Random Search",
    "313": "Random Search",
    "314": "Acquisition Function Maximizer: Local Search",
    "315": "Random Search",
    "316": "Acquisition Function Maximizer: Local Search",
    "317": "Random Search",
    "318": "Random Search",
    "319": "Random Search",
    "320": "Acquisition Function Maximizer: Local Search",
    "321": "Acquisition Function Maximizer: Local Search",
    "322": "Acquisition Function Maximizer: Local Search",
    "323": "Acquisition Function Maximizer: Local Search",
    "324": "Acquisition Function Maximizer: Local Search",
    "325": "Acquisition Function Maximizer: Local Search",
    "326": "Acquisition Function Maximizer: Local Search",
    "327": "Random Search",
    "328": "Random Search",
    "329": "Acquisition Function Maximizer: Local Search",
    "330": "Acquisition Function Maximizer: Local Search",
    "331": "Acquisition Function Maximizer: Local Search",
    "332": "Acquisition Function Maximizer: Local Search",
    "333": "Acquisition Function Maximizer: Local Search",
    "334": "Acquisition Function Maximizer: Local Search",
    "335": "Acquisition Function Maximizer: Local Search",
    "336": "Random Search",
    "337": "Acquisition Function Maximizer: Local Search",
    "338": "Random Search",
    "339": "Acquisition Function Maximizer: Local Search",
    "340": "Acquisition Function Maximizer: Local Search",
    "341": "Acquisition Function Maximizer: Local Search",
    "342": "Acquisition Function Maximizer: Local Search",
    "343": "Acquisition Function Maximizer: Local Search",
    "344": "Acquisition Function Maximizer: Local Search",
    "345": "Acquisition Function Maximizer: Local Search",
    "346": "Acquisition Function Maximizer: Local Search",
    "347": "Random Search",
    "348": "Acquisition Function Maximizer: Local Search",
    "349": "Random Search",
    "350": "Acquisition Function Maximizer: Local Search",
    "351": "Random Search",
    "352": "Acquisition Function Maximizer: Local Search",
    "353": "Acquisition Function Maximizer: Local Search",
    "354": "Acquisition Function Maximizer: Local Search",
    "355": "Acquisition Function Maximizer: Local Search",
    "356": "Acquisition Function Maximizer: Local Search",
    "357": "Random Search",
    "358": "Acquisition Function Maximizer: Local Search",
    "359": "Acquisition Function Maximizer: Local Search",
    "360": "Acquisition Function Maximizer: Local Search",
    "361": "Acquisition Function Maximizer: Local Search",
    "362": "Acquisition Function Maximizer: Local Search",
    "363": "Random Search",
    "364": "Acquisition Function Maximizer: Local Search",
    "365": "Acquisition Function Maximizer: Local Search",
    "366": "Random Search",
    "367": "Acquisition Function Maximizer: Local Search",
    "368": "Acquisition Function Maximizer: Local Search",
    "369": "Acquisition Function Maximizer: Local Search",
    "370": "Acquisition Function Maximizer: Local Search",
    "371": "Acquisition Function Maximizer: Local Search",
    "372": "Acquisition Function Maximizer: Local Search",
    "373": "Acquisition Function Maximizer: Local Search",
    "374": "Acquisition Function Maximizer: Local Search",
    "375": "Acquisition Function Maximizer: Local Search",
    "376": "Acquisition Function Maximizer: Local Search",
    "377": "Acquisition Function Maximizer: Local Search",
    "378": "Acquisition Function Maximizer: Local Search",
    "379": "Acquisition Function Maximizer: Local Search",
    "380": "Acquisition Function Maximizer: Local Search",
    "381": "Random Search",
    "382": "Acquisition Function Maximizer: Local Search",
    "383": "Acquisition Function Maximizer: Local Search",
    "384": "Acquisition Function Maximizer: Local Search",
    "385": "Acquisition Function Maximizer: Local Search",
    "386": "Acquisition Function Maximizer: Local Search",
    "387": "Acquisition Function Maximizer: Local Search",
    "388": "Acquisition Function Maximizer: Local Search",
    "389": "Acquisition Function Maximizer: Local Search",
    "390": "Acquisition Function Maximizer: Local Search",
    "391": "Acquisition Function Maximizer: Local Search",
    "392": "Acquisition Function Maximizer: Local Search",
    "393": "Random Search",
    "394": "Acquisition Function Maximizer: Local Search",
    "395": "Acquisition Function Maximizer: Local Search",
    "396": "Random Search",
    "397": "Acquisition Function Maximizer: Local Search",
    "398": "Acquisition Function Maximizer: Local Search",
    "399": "Acquisition Function Maximizer: Local Search",
    "400": "Random Search",
    "401": "Acquisition Function Maximizer: Local Search",
    "402": "Acquisition Function Maximizer: Local Search",
    "403": "Acquisition Function Maximizer: Local Search",
    "404": "Random Search",
    "405": "Random Search",
    "406": "Acquisition Function Maximizer: Local Search",
    "407": "Acquisition Function Maximizer: Local Search",
    "408": "Random Search",
    "409": "Acquisition Function Maximizer: Local Search",
    "410": "Acquisition Function Maximizer: Local Search",
    "411": "Acquisition Function Maximizer: Local Search",
    "412": "Acquisition Function Maximizer: Local Search",
    "413": "Acquisition Function Maximizer: Local Search",
    "414": "Acquisition Function Maximizer: Local Search",
    "415": "Random Search",
    "416": "Random Search",
    "417": "Acquisition Function Maximizer: Local Search",
    "418": "Random Search",
    "419": "Acquisition Function Maximizer: Local Search",
    "420": "Acquisition Function Maximizer: Local Search",
    "421": "Acquisition Function Maximizer: Local Search",
    "422": "Random Search",
    "423": "Random Search",
    "424": "Random Search",
    "425": "Acquisition Function Maximizer: Local Search",
    "426": "Acquisition Function Maximizer: Local Search",
    "427": "Acquisition Function Maximizer: Local Search",
    "428": "Acquisition Function Maximizer: Local Search",
    "429": "Random Search",
    "430": "Acquisition Function Maximizer: Local Search",
    "431": "Acquisition Function Maximizer: Local Search",
    "432": "Acquisition Function Maximizer: Local Search",
    "433": "Random Search",
    "434": "Acquisition Function Maximizer: Local Search",
    "435": "Acquisition Function Maximizer: Local Search",
    "436": "Acquisition Function Maximizer: Local Search",
    "437": "Acquisition Function Maximizer: Local Search",
    "438": "Acquisition Function Maximizer: Local Search",
    "439": "Acquisition Function Maximizer: Local Search",
    "440": "Acquisition Function Maximizer: Local Search",
    "441": "Acquisition Function Maximizer: Local Search",
    "442": "Acquisition Function Maximizer: Local Search",
    "443": "Acquisition Function Maximizer: Local Search",
    "444": "Acquisition Function Maximizer: Local Search",
    "445": "Acquisition Function Maximizer: Local Search",
    "446": "Acquisition Function Maximizer: Local Search",
    "447": "Acquisition Function Maximizer: Local Search",
    "448": "Acquisition Function Maximizer: Local Search",
    "449": "Random Search",
    "450": "Acquisition Function Maximizer: Local Search",
    "451": "Acquisition Function Maximizer: Local Search",
    "452": "Acquisition Function Maximizer: Local Search",
    "453": "Acquisition Function Maximizer: Local Search",
    "454": "Acquisition Function Maximizer: Local Search",
    "455": "Acquisition Function Maximizer: Local Search",
    "456": "Acquisition Function Maximizer: Local Search",
    "457": "Acquisition Function Maximizer: Local Search",
    "458": "Acquisition Function Maximizer: Local Search",
    "459": "Random Search",
    "460": "Acquisition Function Maximizer: Local Search",
    "461": "Acquisition Function Maximizer: Local Search",
    "462": "Acquisition Function Maximizer: Local Search",
    "463": "Random Search",
    "464": "Acquisition Function Maximizer: Local Search",
    "465": "Acquisition Function Maximizer: Local Search",
    "466": "Acquisition Function Maximizer: Local Search",
    "467": "Acquisition Function Maximizer: Local Search",
    "468": "Acquisition Function Maximizer: Local Search",
    "469": "Acquisition Function Maximizer: Local Search",
    "470": "Acquisition Function Maximizer: Local Search",
    "471": "Random Search",
    "472": "Acquisition Function Maximizer: Local Search",
    "473": "Acquisition Function Maximizer: Local Search",
    "474": "Acquisition Function Maximizer: Local Search",
    "475": "Acquisition Function Maximizer: Local Search",
    "476": "Acquisition Function Maximizer: Local Search",
    "477": "Acquisition Function Maximizer: Local Search",
    "478": "Acquisition Function Maximizer: Local Search",
    "479": "Acquisition Function Maximizer: Local Search",
    "480": "Acquisition Function Maximizer: Local Search",
    "481": "Acquisition Function Maximizer: Local Search",
    "482": "Acquisition Function Maximizer: Local Search",
    "483": "Acquisition Function Maximizer: Local Search",
    "484": "Acquisition Function Maximizer: Local Search",
    "485": "Acquisition Function Maximizer: Local Search",
    "486": "Random Search",
    "487": "Acquisition Function Maximizer: Local Search",
    "488": "Random Search",
    "489": "Acquisition Function Maximizer: Local Search",
    "490": "Random Search",
    "491": "Acquisition Function Maximizer: Local Search",
    "492": "Acquisition Function Maximizer: Local Search",
    "493": "Acquisition Function Maximizer: Local Search",
    "494": "Acquisition Function Maximizer: Local Search",
    "495": "Acquisition Function Maximizer: Local Search",
    "496": "Acquisition Function Maximizer: Local Search",
    "497": "Acquisition Function Maximizer: Local Search",
    "498": "Acquisition Function Maximizer: Local Search",
    "499": "Acquisition Function Maximizer: Local Search",
    "500": "Acquisition Function Maximizer: Local Search",
    "501": "Acquisition Function Maximizer: Local Search",
    "502": "Acquisition Function Maximizer: Local Search",
    "503": "Acquisition Function Maximizer: Local Search",
    "504": "Acquisition Function Maximizer: Local Search",
    "505": "Acquisition Function Maximizer: Local Search",
    "506": "Acquisition Function Maximizer: Local Search",
    "507": "Acquisition Function Maximizer: Local Search",
    "508": "Acquisition Function Maximizer: Local Search",
    "509": "Acquisition Function Maximizer: Local Search",
    "510": "Acquisition Function Maximizer: Local Search",
    "511": "Acquisition Function Maximizer: Local Search",
    "512": "Acquisition Function Maximizer: Local Search",
    "513": "Random Search",
    "514": "Acquisition Function Maximizer: Local Search",
    "515": "Acquisition Function Maximizer: Local Search",
    "516": "Random Search",
    "517": "Acquisition Function Maximizer: Local Search",
    "518": "Acquisition Function Maximizer: Local Search",
    "519": "Acquisition Function Maximizer: Local Search",
    "520": "Acquisition Function Maximizer: Local Search",
    "521": "Acquisition Function Maximizer: Local Search",
    "522": "Acquisition Function Maximizer: Local Search",
    "523": "Acquisition Function Maximizer: Local Search",
    "524": "Acquisition Function Maximizer: Local Search",
    "525": "Acquisition Function Maximizer: Local Search",
    "526": "Acquisition Function Maximizer: Local Search",
    "527": "Acquisition Function Maximizer: Local Search",
    "528": "Random Search",
    "529": "Acquisition Function Maximizer: Local Search",
    "530": "Random Search",
    "531": "Acquisition Function Maximizer: Local Search",
    "532": "Acquisition Function Maximizer: Local Search",
    "533": "Acquisition Function Maximizer: Local Search",
    "534": "Random Search",
    "535": "Acquisition Function Maximizer: Local Search",
    "536": "Random Search",
    "537": "Acquisition Function Maximizer: Local Search",
    "538": "Acquisition Function Maximizer: Local Search",
    "539": "Acquisition Function Maximizer: Local Search",
    "540": "Acquisition Function Maximizer: Local Search",
    "541": "Random Search",
    "542": "Acquisition Function Maximizer: Local Search",
    "543": "Acquisition Function Maximizer: Local Search",
    "544": "Acquisition Function Maximizer: Local Search",
    "545": "Acquisition Function Maximizer: Local Search",
    "546": "Random Search",
    "547": "Acquisition Function Maximizer: Local Search",
    "548": "Acquisition Function Maximizer: Local Search",
    "549": "Acquisition Function Maximizer: Local Search",
    "550": "Acquisition Function Maximizer: Local Search",
    "551": "Random Search",
    "552": "Acquisition Function Maximizer: Local Search",
    "553": "Acquisition Function Maximizer: Local Search",
    "554": "Acquisition Function Maximizer: Local Search",
    "555": "Acquisition Function Maximizer: Local Search",
    "556": "Acquisition Function Maximizer: Local Search",
    "557": "Random Search",
    "558": "Acquisition Function Maximizer: Local Search",
    "559": "Acquisition Function Maximizer: Local Search",
    "560": "Acquisition Function Maximizer: Local Search",
    "561": "Random Search",
    "562": "Acquisition Function Maximizer: Local Search",
    "563": "Acquisition Function Maximizer: Local Search",
    "564": "Acquisition Function Maximizer: Local Search",
    "565": "Acquisition Function Maximizer: Local Search",
    "566": "Acquisition Function Maximizer: Local Search",
    "567": "Random Search",
    "568": "Acquisition Function Maximizer: Local Search",
    "569": "Acquisition Function Maximizer: Local Search",
    "570": "Acquisition Function Maximizer: Local Search",
    "571": "Acquisition Function Maximizer: Local Search",
    "572": "Acquisition Function Maximizer: Local Search",
    "573": "Acquisition Function Maximizer: Local Search",
    "574": "Acquisition Function Maximizer: Local Search",
    "575": "Acquisition Function Maximizer: Local Search",
    "576": "Acquisition Function Maximizer: Local Search",
    "577": "Random Search",
    "578": "Random Search",
    "579": "Acquisition Function Maximizer: Local Search",
    "580": "Acquisition Function Maximizer: Local Search",
    "581": "Acquisition Function Maximizer: Local Search",
    "582": "Random Search",
    "583": "Acquisition Function Maximizer: Local Search",
    "584": "Acquisition Function Maximizer: Local Search",
    "585": "Acquisition Function Maximizer: Local Search",
    "586": "Random Search",
    "587": "Acquisition Function Maximizer: Local Search",
    "588": "Acquisition Function Maximizer: Local Search",
    "589": "Random Search",
    "590": "Acquisition Function Maximizer: Local Search",
    "591": "Acquisition Function Maximizer: Local Search",
    "592": "Random Search",
    "593": "Random Search",
    "594": "Random Search",
    "595": "Acquisition Function Maximizer: Local Search",
    "596": "Acquisition Function Maximizer: Local Search",
    "597": "Acquisition Function Maximizer: Local Search",
    "598": "Acquisition Function Maximizer: Local Search",
    "599": "Acquisition Function Maximizer: Local Search",
    "600": "Acquisition Function Maximizer: Local Search",
    "601": "Acquisition Function Maximizer: Local Search",
    "602": "Acquisition Function Maximizer: Local Search",
    "603": "Acquisition Function Maximizer: Local Search",
    "604": "Acquisition Function Maximizer: Local Search",
    "605": "Acquisition Function Maximizer: Local Search",
    "606": "Random Search",
    "607": "Acquisition Function Maximizer: Local Search",
    "608": "Acquisition Function Maximizer: Local Search",
    "609": "Random Search",
    "610": "Acquisition Function Maximizer: Local Search",
    "611": "Acquisition Function Maximizer: Local Search",
    "612": "Acquisition Function Maximizer: Local Search",
    "613": "Acquisition Function Maximizer: Local Search",
    "614": "Acquisition Function Maximizer: Local Search",
    "615": "Acquisition Function Maximizer: Local Search",
    "616": "Acquisition Function Maximizer: Local Search",
    "617": "Acquisition Function Maximizer: Local Search",
    "618": "Acquisition Function Maximizer: Local Search",
    "619": "Random Search",
    "620": "Random Search",
    "621": "Acquisition Function Maximizer: Local Search",
    "622": "Acquisition Function Maximizer: Local Search",
    "623": "Acquisition Function Maximizer: Local Search",
    "624": "Acquisition Function Maximizer: Local Search",
    "625": "Acquisition Function Maximizer: Local Search",
    "626": "Acquisition Function Maximizer: Local Search",
    "627": "Acquisition Function Maximizer: Local Search",
    "628": "Acquisition Function Maximizer: Local Search",
    "629": "Acquisition Function Maximizer: Local Search",
    "630": "Acquisition Function Maximizer: Local Search",
    "631": "Acquisition Function Maximizer: Local Search",
    "632": "Acquisition Function Maximizer: Local Search",
    "633": "Acquisition Function Maximizer: Local Search",
    "634": "Acquisition Function Maximizer: Local Search",
    "635": "Random Search",
    "636": "Random Search",
    "637": "Acquisition Function Maximizer: Local Search",
    "638": "Acquisition Function Maximizer: Local Search",
    "639": "Acquisition Function Maximizer: Local Search",
    "640": "Acquisition Function Maximizer: Local Search",
    "641": "Acquisition Function Maximizer: Local Search",
    "642": "Random Search",
    "643": "Random Search",
    "644": "Acquisition Function Maximizer: Local Search",
    "645": "Acquisition Function Maximizer: Local Search",
    "646": "Acquisition Function Maximizer: Local Search",
    "647": "Acquisition Function Maximizer: Local Search",
    "648": "Acquisition Function Maximizer: Local Search",
    "649": "Acquisition Function Maximizer: Local Search",
    "650": "Acquisition Function Maximizer: Local Search",
    "651": "Random Search",
    "652": "Acquisition Function Maximizer: Local Search",
    "653": "Acquisition Function Maximizer: Local Search",
    "654": "Acquisition Function Maximizer: Local Search",
    "655": "Random Search",
    "656": "Acquisition Function Maximizer: Local Search",
    "657": "Acquisition Function Maximizer: Local Search",
    "658": "Acquisition Function Maximizer: Local Search",
    "659": "Random Search",
    "660": "Acquisition Function Maximizer: Local Search",
    "661": "Random Search",
    "662": "Acquisition Function Maximizer: Local Search",
    "663": "Random Search",
    "664": "Acquisition Function Maximizer: Local Search",
    "665": "Acquisition Function Maximizer: Local Search",
    "666": "Acquisition Function Maximizer: Local Search",
    "667": "Acquisition Function Maximizer: Local Search",
    "668": "Random Search",
    "669": "Acquisition Function Maximizer: Local Search",
    "670": "Acquisition Function Maximizer: Local Search",
    "671": "Acquisition Function Maximizer: Local Search",
    "672": "Acquisition Function Maximizer: Local Search",
    "673": "Acquisition Function Maximizer: Local Search",
    "674": "Acquisition Function Maximizer: Local Search",
    "675": "Acquisition Function Maximizer: Local Search",
    "676": "Acquisition Function Maximizer: Local Search",
    "677": "Acquisition Function Maximizer: Local Search",
    "678": "Acquisition Function Maximizer: Local Search",
    "679": "Random Search",
    "680": "Acquisition Function Maximizer: Local Search",
    "681": "Acquisition Function Maximizer: Local Search",
    "682": "Acquisition Function Maximizer: Local Search",
    "683": "Acquisition Function Maximizer: Local Search",
    "684": "Random Search",
    "685": "Acquisition Function Maximizer: Local Search",
    "686": "Acquisition Function Maximizer: Local Search",
    "687": "Acquisition Function Maximizer: Local Search",
    "688": "Random Search",
    "689": "Acquisition Function Maximizer: Local Search",
    "690": "Random Search",
    "691": "Acquisition Function Maximizer: Local Search",
    "692": "Acquisition Function Maximizer: Local Search",
    "693": "Acquisition Function Maximizer: Local Search",
    "694": "Acquisition Function Maximizer: Local Search",
    "695": "Random Search",
    "696": "Acquisition Function Maximizer: Local Search",
    "697": "Random Search",
    "698": "Acquisition Function Maximizer: Local Search",
    "699": "Acquisition Function Maximizer: Local Search",
    "700": "Acquisition Function Maximizer: Local Search",
    "701": "Acquisition Function Maximizer: Local Search",
    "702": "Random Search",
    "703": "Random Search",
    "704": "Acquisition Function Maximizer: Local Search",
    "705": "Acquisition Function Maximizer: Local Search",
    "706": "Acquisition Function Maximizer: Local Search",
    "707": "Acquisition Function Maximizer: Local Search",
    "708": "Random Search",
    "709": "Random Search",
    "710": "Acquisition Function Maximizer: Local Search",
    "711": "Random Search",
    "712": "Acquisition Function Maximizer: Local Search",
    "713": "Random Search",
    "714": "Random Search",
    "715": "Acquisition Function Maximizer: Local Search",
    "716": "Random Search",
    "717": "Acquisition Function Maximizer: Local Search",
    "718": "Acquisition Function Maximizer: Local Search",
    "719": "Acquisition Function Maximizer: Local Search",
    "720": "Random Search",
    "721": "Random Search",
    "722": "Acquisition Function Maximizer: Local Search",
    "723": "Acquisition Function Maximizer: Local Search",
    "724": "Acquisition Function Maximizer: Local Search",
    "725": "Acquisition Function Maximizer: Local Search",
    "726": "Acquisition Function Maximizer: Local Search",
    "727": "Acquisition Function Maximizer: Local Search",
    "728": "Random Search",
    "729": "Acquisition Function Maximizer: Local Search",
    "730": "Acquisition Function Maximizer: Local Search",
    "731": "Acquisition Function Maximizer: Local Search",
    "732": "Acquisition Function Maximizer: Local Search",
    "733": "Acquisition Function Maximizer: Local Search",
    "734": "Acquisition Function Maximizer: Local Search",
    "735": "Acquisition Function Maximizer: Local Search",
    "736": "Acquisition Function Maximizer: Local Search",
    "737": "Acquisition Function Maximizer: Local Search",
    "738": "Acquisition Function Maximizer: Local Search",
    "739": "Acquisition Function Maximizer: Local Search",
    "740": "Acquisition Function Maximizer: Local Search",
    "741": "Acquisition Function Maximizer: Local Search",
    "742": "Acquisition Function Maximizer: Local Search",
    "743": "Acquisition Function Maximizer: Local Search",
    "744": "Random Search",
    "745": "Random Search",
    "746": "Random Search",
    "747": "Acquisition Function Maximizer: Local Search",
    "748": "Random Search",
    "749": "Random Search",
    "750": "Acquisition Function Maximizer: Local Search",
    "751": "Random Search",
    "752": "Acquisition Function Maximizer: Local Search",
    "753": "Acquisition Function Maximizer: Local Search",
    "754": "Acquisition Function Maximizer: Local Search",
    "755": "Acquisition Function Maximizer: Local Search",
    "756": "Acquisition Function Maximizer: Local Search",
    "757": "Acquisition Function Maximizer: Local Search",
    "758": "Acquisition Function Maximizer: Local Search",
    "759": "Acquisition Function Maximizer: Local Search",
    "760": "Acquisition Function Maximizer: Local Search",
    "761": "Acquisition Function Maximizer: Local Search",
    "762": "Acquisition Function Maximizer: Local Search",
    "763": "Random Search",
    "764": "Acquisition Function Maximizer: Local Search",
    "765": "Acquisition Function Maximizer: Local Search",
    "766": "Acquisition Function Maximizer: Local Search",
    "767": "Acquisition Function Maximizer: Local Search",
    "768": "Acquisition Function Maximizer: Local Search",
    "769": "Acquisition Function Maximizer: Local Search",
    "770": "Acquisition Function Maximizer: Local Search",
    "771": "Acquisition Function Maximizer: Local Search",
    "772": "Acquisition Function Maximizer: Local Search",
    "773": "Acquisition Function Maximizer: Local Search",
    "774": "Acquisition Function Maximizer: Local Search",
    "775": "Acquisition Function Maximizer: Local Search",
    "776": "Acquisition Function Maximizer: Local Search",
    "777": "Acquisition Function Maximizer: Local Search",
    "778": "Acquisition Function Maximizer: Local Search",
    "779": "Random Search",
    "780": "Acquisition Function Maximizer: Local Search",
    "781": "Acquisition Function Maximizer: Local Search",
    "782": "Acquisition Function Maximizer: Local Search",
    "783": "Acquisition Function Maximizer: Local Search",
    "784": "Acquisition Function Maximizer: Local Search",
    "785": "Acquisition Function Maximizer: Local Search",
    "786": "Random Search",
    "787": "Acquisition Function Maximizer: Local Search",
    "788": "Acquisition Function Maximizer: Local Search",
    "789": "Acquisition Function Maximizer: Local Search",
    "790": "Random Search",
    "791": "Random Search",
    "792": "Acquisition Function Maximizer: Local Search",
    "793": "Random Search",
    "794": "Acquisition Function Maximizer: Local Search",
    "795": "Random Search",
    "796": "Acquisition Function Maximizer: Local Search",
    "797": "Acquisition Function Maximizer: Local Search",
    "798": "Acquisition Function Maximizer: Local Search",
    "799": "Random Search",
    "800": "Acquisition Function Maximizer: Local Search",
    "801": "Acquisition Function Maximizer: Local Search",
    "802": "Acquisition Function Maximizer: Local Search",
    "803": "Acquisition Function Maximizer: Local Search",
    "804": "Acquisition Function Maximizer: Local Search",
    "805": "Acquisition Function Maximizer: Local Search",
    "806": "Random Search",
    "807": "Acquisition Function Maximizer: Local Search",
    "808": "Acquisition Function Maximizer: Local Search",
    "809": "Acquisition Function Maximizer: Local Search",
    "810": "Acquisition Function Maximizer: Local Search",
    "811": "Acquisition Function Maximizer: Local Search",
    "812": "Acquisition Function Maximizer: Local Search",
    "813": "Acquisition Function Maximizer: Local Search",
    "814": "Acquisition Function Maximizer: Local Search",
    "815": "Acquisition Function Maximizer: Local Search",
    "816": "Acquisition Function Maximizer: Local Search",
    "817": "Acquisition Function Maximizer: Local Search",
    "818": "Acquisition Function Maximizer: Local Search",
    "819": "Acquisition Function Maximizer: Local Search",
    "820": "Random Search",
    "821": "Acquisition Function Maximizer: Local Search",
    "822": "Random Search",
    "823": "Acquisition Function Maximizer: Local Search",
    "824": "Acquisition Function Maximizer: Local Search",
    "825": "Acquisition Function Maximizer: Local Search",
    "826": "Acquisition Function Maximizer: Local Search",
    "827": "Random Search",
    "828": "Acquisition Function Maximizer: Local Search",
    "829": "Random Search",
    "830": "Acquisition Function Maximizer: Local Search",
    "831": "Acquisition Function Maximizer: Local Search",
    "832": "Acquisition Function Maximizer: Local Search",
    "833": "Acquisition Function Maximizer: Local Search",
    "834": "Acquisition Function Maximizer: Local Search",
    "835": "Random Search",
    "836": "Acquisition Function Maximizer: Local Search",
    "837": "Random Search",
    "838": "Acquisition Function Maximizer: Local Search",
    "839": "Acquisition Function Maximizer: Local Search",
    "840": "Acquisition Function Maximizer: Local Search",
    "841": "Acquisition Function Maximizer: Local Search",
    "842": "Acquisition Function Maximizer: Local Search",
    "843": "Random Search",
    "844": "Acquisition Function Maximizer: Local Search",
    "845": "Acquisition Function Maximizer: Local Search",
    "846": "Acquisition Function Maximizer: Local Search",
    "847": "Random Search",
    "848": "Random Search",
    "849": "Acquisition Function Maximizer: Local Search",
    "850": "Acquisition Function Maximizer: Local Search",
    "851": "Acquisition Function Maximizer: Local Search",
    "852": "Acquisition Function Maximizer: Local Search",
    "853": "Acquisition Function Maximizer: Local Search",
    "854": "Acquisition Function Maximizer: Local Search",
    "855": "Acquisition Function Maximizer: Local Search",
    "856": "Acquisition Function Maximizer: Local Search",
    "857": "Acquisition Function Maximizer: Local Search",
    "858": "Random Search",
    "859": "Acquisition Function Maximizer: Local Search",
    "860": "Acquisition Function Maximizer: Local Search",
    "861": "Acquisition Function Maximizer: Local Search",
    "862": "Random Search",
    "863": "Acquisition Function Maximizer: Local Search",
    "864": "Random Search",
    "865": "Acquisition Function Maximizer: Local Search",
    "866": "Acquisition Function Maximizer: Local Search",
    "867": "Acquisition Function Maximizer: Local Search",
    "868": "Acquisition Function Maximizer: Local Search",
    "869": "Acquisition Function Maximizer: Local Search",
    "870": "Acquisition Function Maximizer: Local Search",
    "871": "Acquisition Function Maximizer: Local Search",
    "872": "Random Search",
    "873": "Acquisition Function Maximizer: Local Search",
    "874": "Acquisition Function Maximizer: Local Search",
    "875": "Acquisition Function Maximizer: Local Search",
    "876": "Acquisition Function Maximizer: Local Search",
    "877": "Random Search",
    "878": "Acquisition Function Maximizer: Local Search",
    "879": "Acquisition Function Maximizer: Local Search",
    "880": "Acquisition Function Maximizer: Local Search",
    "881": "Acquisition Function Maximizer: Local Search",
    "882": "Acquisition Function Maximizer: Local Search",
    "883": "Acquisition Function Maximizer: Local Search",
    "884": "Acquisition Function Maximizer: Local Search",
    "885": "Acquisition Function Maximizer: Local Search",
    "886": "Acquisition Function Maximizer: Local Search",
    "887": "Acquisition Function Maximizer: Local Search",
    "888": "Acquisition Function Maximizer: Local Search",
    "889": "Acquisition Function Maximizer: Local Search",
    "890": "Acquisition Function Maximizer: Local Search",
    "891": "Acquisition Function Maximizer: Local Search",
    "892": "Acquisition Function Maximizer: Local Search",
    "893": "Acquisition Function Maximizer: Local Search",
    "894": "Random Search",
    "895": "Acquisition Function Maximizer: Local Search",
    "896": "Acquisition Function Maximizer: Local Search",
    "897": "Acquisition Function Maximizer: Local Search",
    "898": "Acquisition Function Maximizer: Local Search",
    "899": "Acquisition Function Maximizer: Local Search",
    "900": "Acquisition Function Maximizer: Local Search",
    "901": "Acquisition Function Maximizer: Local Search",
    "902": "Acquisition Function Maximizer: Local Search",
    "903": "Acquisition Function Maximizer: Local Search",
    "904": "Acquisition Function Maximizer: Local Search",
    "905": "Acquisition Function Maximizer: Local Search",
    "906": "Acquisition Function Maximizer: Local Search",
    "907": "Acquisition Function Maximizer: Local Search",
    "908": "Acquisition Function Maximizer: Local Search",
    "909": "Random Search",
    "910": "Acquisition Function Maximizer: Local Search",
    "911": "Acquisition Function Maximizer: Local Search",
    "912": "Random Search",
    "913": "Acquisition Function Maximizer: Local Search",
    "914": "Random Search",
    "915": "Random Search",
    "916": "Acquisition Function Maximizer: Local Search",
    "917": "Random Search",
    "918": "Acquisition Function Maximizer: Local Search",
    "919": "Random Search",
    "920": "Acquisition Function Maximizer: Local Search",
    "921": "Acquisition Function Maximizer: Local Search",
    "922": "Acquisition Function Maximizer: Local Search",
    "923": "Acquisition Function Maximizer: Local Search",
    "924": "Acquisition Function Maximizer: Local Search",
    "925": "Acquisition Function Maximizer: Local Search",
    "926": "Acquisition Function Maximizer: Local Search",
    "927": "Acquisition Function Maximizer: Local Search",
    "928": "Acquisition Function Maximizer: Local Search",
    "929": "Acquisition Function Maximizer: Local Search",
    "930": "Acquisition Function Maximizer: Local Search",
    "931": "Acquisition Function Maximizer: Local Search",
    "932": "Acquisition Function Maximizer: Local Search",
    "933": "Random Search",
    "934": "Acquisition Function Maximizer: Local Search",
    "935": "Acquisition Function Maximizer: Local Search",
    "936": "Acquisition Function Maximizer: Local Search",
    "937": "Random Search",
    "938": "Acquisition Function Maximizer: Local Search",
    "939": "Random Search",
    "940": "Acquisition Function Maximizer: Local Search",
    "941": "Acquisition Function Maximizer: Local Search",
    "942": "Acquisition Function Maximizer: Local Search",
    "943": "Random Search",
    "944": "Acquisition Function Maximizer: Local Search",
    "945": "Acquisition Function Maximizer: Local Search",
    "946": "Random Search",
    "947": "Acquisition Function Maximizer: Local Search",
    "948": "Random Search",
    "949": "Acquisition Function Maximizer: Local Search",
    "950": "Acquisition Function Maximizer: Local Search",
    "951": "Acquisition Function Maximizer: Local Search",
    "952": "Acquisition Function Maximizer: Local Search",
    "953": "Acquisition Function Maximizer: Local Search",
    "954": "Acquisition Function Maximizer: Local Search",
    "955": "Acquisition Function Maximizer: Local Search",
    "956": "Acquisition Function Maximizer: Local Search",
    "957": "Acquisition Function Maximizer: Local Search",
    "958": "Random Search",
    "959": "Acquisition Function Maximizer: Local Search",
    "960": "Random Search",
    "961": "Acquisition Function Maximizer: Local Search",
    "962": "Acquisition Function Maximizer: Local Search",
    "963": "Acquisition Function Maximizer: Local Search",
    "964": "Acquisition Function Maximizer: Local Search",
    "965": "Acquisition Function Maximizer: Local Search",
    "966": "Acquisition Function Maximizer: Local Search",
    "967": "Acquisition Function Maximizer: Local Search",
    "968": "Random Search",
    "969": "Acquisition Function Maximizer: Local Search",
    "970": "Acquisition Function Maximizer: Local Search",
    "971": "Acquisition Function Maximizer: Local Search",
    "972": "Acquisition Function Maximizer: Local Search",
    "973": "Acquisition Function Maximizer: Local Search",
    "974": "Random Search",
    "975": "Acquisition Function Maximizer: Local Search",
    "976": "Acquisition Function Maximizer: Local Search"
  }
}